// Generated by Haxe 4.0.0-preview.4+1e3e5e016
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = {},$_;
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AngleMotor = function(j,limot,getAngle,getAxis) {
	this.j = j;
	this.limot = limot;
	this.getAngle = getAngle;
	this.getAxis = getAxis;
	this.speed = Math.PI * 2;
	this.target = 0;
	this.torque = 1.5;
	this.min = limot.lowerLimit;
	this.max = limot.upperLimit;
};
AngleMotor.__name__ = true;
AngleMotor.prototype = {
	get_angle: function() {
		return this.getAngle();
	}
	,get_axis: function() {
		return this.getAxis();
	}
	,get_limitMotor: function() {
		return this.limot;
	}
	,get_angularVelocity: function() {
		var b1 = this.j._b1;
		var b2 = this.j._b2;
		var relAngVel_x = 0;
		var relAngVel_y = 0;
		var relAngVel_z = 0;
		oimo_common_Vec3.numCreations++;
		relAngVel_x = b2._angVelX;
		relAngVel_y = b2._angVelY;
		relAngVel_z = b2._angVelZ;
		var v_x = 0;
		var v_y = 0;
		var v_z = 0;
		oimo_common_Vec3.numCreations++;
		v_x = b1._angVelX;
		v_y = b1._angVelY;
		v_z = b1._angVelZ;
		var tx = relAngVel_x - v_x;
		var ty = relAngVel_y - v_y;
		var tz = relAngVel_z - v_z;
		relAngVel_x = tx;
		relAngVel_y = ty;
		relAngVel_z = tz;
		var v = this.getAxis();
		return relAngVel_x * v.x + relAngVel_y * v.y + relAngVel_z * v.z;
	}
	,update: function() {
		this.min = this.limot.lowerLimit;
		this.max = this.limot.upperLimit;
		if(this.limot.lowerLimit < this.limot.upperLimit) {
			if(this.target < this.limot.lowerLimit) {
				this.target = this.limot.lowerLimit;
			}
			if(this.target > this.limot.upperLimit) {
				this.target = this.limot.upperLimit;
			}
		}
		var angle = this.getAngle();
		var diff = this.target - angle;
		var eps = 15 * Math.PI / 180;
		var rot = this.speed / 60;
		var spdMult = (diff < 0 ? -diff : diff) / eps;
		if(spdMult > 1) {
			spdMult = 1;
		}
		rot *= spdMult;
		rot *= 60;
		this.limot.motorSpeed = diff > 0 ? rot : -rot;
		this.limot.motorTorque = this.torque;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Robot = function() {
};
Robot.__name__ = true;
Robot.prototype = {
	init: function(w,x,y,z,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		this.offsetX = x;
		this.offsetY = y;
		this.offsetZ = z;
		this.world = w;
		var headWidth = scale * 0.2;
		var headHeight = scale * 0.3;
		var headDepth = scale * 0.2;
		var lowerBodyWidth = scale * 0.5;
		var upperBodyWidth = scale * 0.5;
		var lowerBodyHeight = scale * 0.45;
		var upperBodyHeight = scale * 0.45;
		var lowerBodyDepth = scale * 0.3;
		var upperBodyDepth = scale * 0.3;
		var lowerLegWidth = scale * 0.2;
		var upperLegWidth = scale * 0.2;
		var lowerLegHeight = scale * 0.55;
		var upperLegHeight = scale * 0.55;
		var lowerLegDepth = scale * 0.2;
		var upperLegDepth = scale * 0.2;
		var legSpace = scale * 0.1;
		var lowerArmWidth = scale * 0.5;
		var upperArmWidth = scale * 0.5;
		var lowerArmHeight = scale * 0.2;
		var upperArmHeight = scale * 0.2;
		var lowerArmDepth = scale * 0.2;
		var upperArmDepth = scale * 0.2;
		var xplus = new oimo_common_Vec3(1,0,0);
		var xminus = new oimo_common_Vec3(-1,0,0);
		var yplus = new oimo_common_Vec3(0,1,0);
		var yminus = new oimo_common_Vec3(0,-1,0);
		var zplus = new oimo_common_Vec3(0,0,1);
		var zminus = new oimo_common_Vec3(0,0,-1);
		var pi = Math.PI;
		var hpi = Math.PI * 0.5;
		var tpi = Math.PI * 2.0;
		var x1 = 0;
		var y1 = lowerBodyHeight + upperBodyHeight + headHeight * 0.5;
		var z1 = 0;
		x1 += this.offsetX;
		y1 += this.offsetY;
		z1 += this.offsetZ;
		var rc = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc.position.init(x1,y1,z1);
		var rb = new oimo_dynamics_rigidbody_RigidBody(rc);
		var sc = new oimo_dynamics_rigidbody_ShapeConfig();
		sc.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(headWidth * 0.5,headHeight * 0.5,headDepth * 0.5));
		rb.addShape(new oimo_dynamics_rigidbody_Shape(sc));
		this.world.addRigidBody(rb);
		this.head = rb;
		var _this = this.head;
		_this._autoSleep = false;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var x2 = 0;
		var y2 = lowerBodyHeight * 0.5;
		var z2 = 0;
		x2 += this.offsetX;
		y2 += this.offsetY;
		z2 += this.offsetZ;
		var rc1 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc1.position.init(x2,y2,z2);
		var rb1 = new oimo_dynamics_rigidbody_RigidBody(rc1);
		var sc1 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc1.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(lowerBodyWidth * 0.5,lowerBodyHeight * 0.5,lowerBodyDepth * 0.5));
		rb1.addShape(new oimo_dynamics_rigidbody_Shape(sc1));
		this.world.addRigidBody(rb1);
		this.lowerBody = rb1;
		var x3 = 0;
		var y3 = lowerBodyHeight + upperBodyHeight * 0.5;
		var z3 = 0;
		x3 += this.offsetX;
		y3 += this.offsetY;
		z3 += this.offsetZ;
		var rc2 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc2.position.init(x3,y3,z3);
		var rb2 = new oimo_dynamics_rigidbody_RigidBody(rc2);
		var sc2 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc2.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(lowerBodyWidth * 0.5,lowerBodyHeight * 0.5,lowerBodyDepth * 0.5));
		rb2.addShape(new oimo_dynamics_rigidbody_Shape(sc2));
		this.world.addRigidBody(rb2);
		this.upperBody = rb2;
		var x4 = (upperLegWidth + legSpace) * -0.5;
		var y4 = -upperLegHeight * 0.5;
		var z4 = 0;
		x4 += this.offsetX;
		y4 += this.offsetY;
		z4 += this.offsetZ;
		var rc3 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc3.position.init(x4,y4,z4);
		var rb3 = new oimo_dynamics_rigidbody_RigidBody(rc3);
		var sc3 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc3.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(upperLegWidth * 0.5,upperLegHeight * 0.5,upperLegDepth * 0.5));
		rb3.addShape(new oimo_dynamics_rigidbody_Shape(sc3));
		this.world.addRigidBody(rb3);
		this.upperLegL = rb3;
		var x5 = (upperLegWidth + legSpace) * 0.5;
		var y5 = -upperLegHeight * 0.5;
		var z5 = 0;
		x5 += this.offsetX;
		y5 += this.offsetY;
		z5 += this.offsetZ;
		var rc4 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc4.position.init(x5,y5,z5);
		var rb4 = new oimo_dynamics_rigidbody_RigidBody(rc4);
		var sc4 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc4.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(upperLegWidth * 0.5,upperLegHeight * 0.5,upperLegDepth * 0.5));
		rb4.addShape(new oimo_dynamics_rigidbody_Shape(sc4));
		this.world.addRigidBody(rb4);
		this.upperLegR = rb4;
		var x6 = (lowerLegWidth + legSpace) * -0.5;
		var y6 = -upperLegHeight - lowerLegHeight * 0.5;
		var z6 = 0;
		x6 += this.offsetX;
		y6 += this.offsetY;
		z6 += this.offsetZ;
		var rc5 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc5.position.init(x6,y6,z6);
		var rb5 = new oimo_dynamics_rigidbody_RigidBody(rc5);
		var sc5 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc5.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(lowerLegWidth * 0.5,lowerLegHeight * 0.5,lowerLegDepth * 0.5));
		rb5.addShape(new oimo_dynamics_rigidbody_Shape(sc5));
		this.world.addRigidBody(rb5);
		this.lowerLegL = rb5;
		var x7 = (lowerLegWidth + legSpace) * 0.5;
		var y7 = -upperLegHeight - lowerLegHeight * 0.5;
		var z7 = 0;
		x7 += this.offsetX;
		y7 += this.offsetY;
		z7 += this.offsetZ;
		var rc6 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc6.position.init(x7,y7,z7);
		var rb6 = new oimo_dynamics_rigidbody_RigidBody(rc6);
		var sc6 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc6.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(lowerLegWidth * 0.5,lowerLegHeight * 0.5,lowerLegDepth * 0.5));
		rb6.addShape(new oimo_dynamics_rigidbody_Shape(sc6));
		this.world.addRigidBody(rb6);
		this.lowerLegR = rb6;
		var x8 = (upperBodyWidth + upperArmWidth) * -0.5;
		var y8 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z8 = 0;
		x8 += this.offsetX;
		y8 += this.offsetY;
		z8 += this.offsetZ;
		var rc7 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc7.position.init(x8,y8,z8);
		var rb7 = new oimo_dynamics_rigidbody_RigidBody(rc7);
		var sc7 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc7.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(upperArmWidth * 0.5,upperArmHeight * 0.5,upperArmDepth * 0.5));
		rb7.addShape(new oimo_dynamics_rigidbody_Shape(sc7));
		this.world.addRigidBody(rb7);
		this.upperArmL = rb7;
		var x9 = (upperBodyWidth + upperArmWidth) * 0.5;
		var y9 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z9 = 0;
		x9 += this.offsetX;
		y9 += this.offsetY;
		z9 += this.offsetZ;
		var rc8 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc8.position.init(x9,y9,z9);
		var rb8 = new oimo_dynamics_rigidbody_RigidBody(rc8);
		var sc8 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc8.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(upperArmWidth * 0.5,upperArmHeight * 0.5,upperArmDepth * 0.5));
		rb8.addShape(new oimo_dynamics_rigidbody_Shape(sc8));
		this.world.addRigidBody(rb8);
		this.upperArmR = rb8;
		var x10 = (upperBodyWidth + upperArmWidth * 2 + lowerArmWidth) * -0.5;
		var y10 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z10 = 0;
		x10 += this.offsetX;
		y10 += this.offsetY;
		z10 += this.offsetZ;
		var rc9 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc9.position.init(x10,y10,z10);
		var rb9 = new oimo_dynamics_rigidbody_RigidBody(rc9);
		var sc9 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc9.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(lowerArmWidth * 0.5,lowerArmHeight * 0.5,lowerArmDepth * 0.5));
		rb9.addShape(new oimo_dynamics_rigidbody_Shape(sc9));
		this.world.addRigidBody(rb9);
		this.lowerArmL = rb9;
		var x11 = (upperBodyWidth + upperArmWidth * 2 + lowerArmWidth) * 0.5;
		var y11 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z11 = 0;
		x11 += this.offsetX;
		y11 += this.offsetY;
		z11 += this.offsetZ;
		var rc10 = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc10.position.init(x11,y11,z11);
		var rb10 = new oimo_dynamics_rigidbody_RigidBody(rc10);
		var sc10 = new oimo_dynamics_rigidbody_ShapeConfig();
		sc10.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(lowerArmWidth * 0.5,lowerArmHeight * 0.5,lowerArmDepth * 0.5));
		rb10.addShape(new oimo_dynamics_rigidbody_Shape(sc10));
		this.world.addRigidBody(rb10);
		this.lowerArmR = rb10;
		var b1 = this.lowerBody;
		var b2 = this.upperLegL;
		var x12 = (lowerLegWidth + legSpace) * -0.5;
		var y12 = 0;
		var z12 = 0;
		x12 += this.offsetX;
		y12 += this.offsetY;
		z12 += this.offsetZ;
		var jc = new oimo_dynamics_constraint_joint_UniversalJointConfig();
		jc.init(b1,b2,new oimo_common_Vec3(x12,y12,z12),xminus,zminus);
		jc.limitMotor1.setLimits(-hpi,hpi);
		jc.limitMotor2.setLimits(0,hpi * 0.4);
		jc.springDamper1.setSpring(20,1);
		jc.springDamper2.setSpring(20,1);
		var j = new oimo_dynamics_constraint_joint_UniversalJoint(jc);
		this.world.addJoint(j);
		this.bodyLegL = j;
		var b11 = this.lowerBody;
		var b21 = this.upperLegR;
		var x13 = (lowerLegWidth + legSpace) * 0.5;
		var y13 = 0;
		var z13 = 0;
		x13 += this.offsetX;
		y13 += this.offsetY;
		z13 += this.offsetZ;
		var jc1 = new oimo_dynamics_constraint_joint_UniversalJointConfig();
		jc1.init(b11,b21,new oimo_common_Vec3(x13,y13,z13),xminus,zplus);
		jc1.limitMotor1.setLimits(-hpi,hpi);
		jc1.limitMotor2.setLimits(0,hpi * 0.4);
		jc1.springDamper1.setSpring(20,1);
		jc1.springDamper2.setSpring(20,1);
		var j1 = new oimo_dynamics_constraint_joint_UniversalJoint(jc1);
		this.world.addJoint(j1);
		this.bodyLegR = j1;
		var b12 = this.upperBody;
		var b22 = this.upperArmL;
		var x14 = upperBodyWidth * -0.5;
		var y14 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z14 = 0;
		x14 += this.offsetX;
		y14 += this.offsetY;
		z14 += this.offsetZ;
		var jc2 = new oimo_dynamics_constraint_joint_UniversalJointConfig();
		jc2.init(b12,b22,new oimo_common_Vec3(x14,y14,z14),zminus,yplus);
		jc2.limitMotor1.setLimits(-hpi * 0.75,hpi * 0.25);
		jc2.limitMotor2.setLimits(0,hpi);
		jc2.springDamper1.setSpring(20,1);
		jc2.springDamper2.setSpring(20,1);
		var j2 = new oimo_dynamics_constraint_joint_UniversalJoint(jc2);
		this.world.addJoint(j2);
		this.bodyArmL = j2;
		var b13 = this.upperBody;
		var b23 = this.upperArmR;
		var x15 = upperBodyWidth * 0.5;
		var y15 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z15 = 0;
		x15 += this.offsetX;
		y15 += this.offsetY;
		z15 += this.offsetZ;
		var jc3 = new oimo_dynamics_constraint_joint_UniversalJointConfig();
		jc3.init(b13,b23,new oimo_common_Vec3(x15,y15,z15),zplus,yminus);
		jc3.limitMotor1.setLimits(-hpi * 0.75,hpi * 0.25);
		jc3.limitMotor2.setLimits(0,hpi);
		jc3.springDamper1.setSpring(20,1);
		jc3.springDamper2.setSpring(20,1);
		var j3 = new oimo_dynamics_constraint_joint_UniversalJoint(jc3);
		this.world.addJoint(j3);
		this.bodyArmR = j3;
		var b14 = this.upperLegL;
		var b24 = this.lowerLegL;
		var x16 = (lowerLegWidth + legSpace) * -0.5;
		var y16 = -upperLegHeight;
		var z16 = 0;
		x16 += this.offsetX;
		y16 += this.offsetY;
		z16 += this.offsetZ;
		var jc4 = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
		jc4.init(b14,b24,new oimo_common_Vec3(x16,y16,z16),xplus).limitMotor.setLimits(0,pi * 0.8);
		jc4.springDamper.setSpring(20,1);
		var j4 = new oimo_dynamics_constraint_joint_RevoluteJoint(jc4);
		this.world.addJoint(j4);
		this.legLegL = j4;
		var b15 = this.upperLegR;
		var b25 = this.lowerLegR;
		var x17 = (lowerLegWidth + legSpace) * 0.5;
		var y17 = -upperLegHeight;
		var z17 = 0;
		x17 += this.offsetX;
		y17 += this.offsetY;
		z17 += this.offsetZ;
		var jc5 = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
		jc5.init(b15,b25,new oimo_common_Vec3(x17,y17,z17),xplus).limitMotor.setLimits(0,pi * 0.8);
		jc5.springDamper.setSpring(20,1);
		var j5 = new oimo_dynamics_constraint_joint_RevoluteJoint(jc5);
		this.world.addJoint(j5);
		this.legLegR = j5;
		var b16 = this.upperArmL;
		var b26 = this.lowerArmL;
		var x18 = (upperBodyWidth * 2 + upperArmWidth) * -0.5;
		var y18 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z18 = 0;
		x18 += this.offsetX;
		y18 += this.offsetY;
		z18 += this.offsetZ;
		var jc6 = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
		jc6.init(b16,b26,new oimo_common_Vec3(x18,y18,z18),yplus).limitMotor.setLimits(0,pi * 0.8);
		jc6.springDamper.setSpring(20,1);
		var j6 = new oimo_dynamics_constraint_joint_RevoluteJoint(jc6);
		this.world.addJoint(j6);
		this.armArmL = j6;
		var b17 = this.upperArmR;
		var b27 = this.lowerArmR;
		var x19 = (upperBodyWidth * 2 + upperArmWidth) * 0.5;
		var y19 = lowerBodyHeight + upperBodyHeight - upperArmHeight * 0.5;
		var z19 = 0;
		x19 += this.offsetX;
		y19 += this.offsetY;
		z19 += this.offsetZ;
		var jc7 = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
		jc7.init(b17,b27,new oimo_common_Vec3(x19,y19,z19),yminus).limitMotor.setLimits(0,pi * 0.8);
		jc7.springDamper.setSpring(20,1);
		var j7 = new oimo_dynamics_constraint_joint_RevoluteJoint(jc7);
		this.world.addJoint(j7);
		this.armArmR = j7;
		var b18 = this.lowerBody;
		var b28 = this.upperBody;
		var x20 = 0;
		var y20 = lowerBodyHeight;
		var z20 = 0;
		x20 += this.offsetX;
		y20 += this.offsetY;
		z20 += this.offsetZ;
		var jc8 = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
		jc8.init(b18,b28,new oimo_common_Vec3(x20,y20,z20),xplus).limitMotor.setLimits(-pi * 0.15,pi * 0.15);
		jc8.springDamper.setSpring(20,1);
		var j8 = new oimo_dynamics_constraint_joint_RevoluteJoint(jc8);
		this.world.addJoint(j8);
		this.bodyBody = j8;
		var b19 = this.upperBody;
		var b29 = this.head;
		var x21 = 0;
		var y21 = lowerBodyHeight + upperBodyHeight;
		var z21 = 0;
		x21 += this.offsetX;
		y21 += this.offsetY;
		z21 += this.offsetZ;
		var jc9 = new oimo_dynamics_constraint_joint_RagdollJointConfig();
		jc9.init(b19,b29,new oimo_common_Vec3(x21,y21,z21),yplus,xplus);
		jc9.twistLimitMotor.setLimits(-0.01,0.01);
		jc9.maxSwingAngle1 = 0.01;
		jc9.maxSwingAngle2 = 0.01;
		var j9 = new oimo_dynamics_constraint_joint_RagdollJoint(jc9);
		this.world.addJoint(j9);
		this.bodyHead = j9;
		this.bodyHead._swingSd.setSpring(5,1);
		this.bodyLegLMotor1 = new AngleMotor(this.bodyLegL,this.bodyLegL._lm1,($_=this.bodyLegL,$bind($_,$_.getAngle1)),($_=this.bodyLegL,$bind($_,$_.getAxis1)));
		this.bodyLegLMotor2 = new AngleMotor(this.bodyLegL,this.bodyLegL._lm2,($_=this.bodyLegL,$bind($_,$_.getAngle2)),($_=this.bodyLegL,$bind($_,$_.getAxis2)));
		this.bodyLegRMotor1 = new AngleMotor(this.bodyLegR,this.bodyLegR._lm1,($_=this.bodyLegR,$bind($_,$_.getAngle1)),($_=this.bodyLegR,$bind($_,$_.getAxis1)));
		this.bodyLegRMotor2 = new AngleMotor(this.bodyLegR,this.bodyLegR._lm2,($_=this.bodyLegR,$bind($_,$_.getAngle2)),($_=this.bodyLegR,$bind($_,$_.getAxis2)));
		this.bodyArmLMotor1 = new AngleMotor(this.bodyArmL,this.bodyArmL._lm1,($_=this.bodyArmL,$bind($_,$_.getAngle1)),($_=this.bodyArmL,$bind($_,$_.getAxis1)));
		this.bodyArmLMotor2 = new AngleMotor(this.bodyArmL,this.bodyArmL._lm2,($_=this.bodyArmL,$bind($_,$_.getAngle2)),($_=this.bodyArmL,$bind($_,$_.getAxis2)));
		this.bodyArmRMotor1 = new AngleMotor(this.bodyArmR,this.bodyArmR._lm1,($_=this.bodyArmR,$bind($_,$_.getAngle1)),($_=this.bodyArmR,$bind($_,$_.getAxis1)));
		this.bodyArmRMotor2 = new AngleMotor(this.bodyArmR,this.bodyArmR._lm2,($_=this.bodyArmR,$bind($_,$_.getAngle2)),($_=this.bodyArmR,$bind($_,$_.getAxis2)));
		this.armArmLMotor = new AngleMotor(this.armArmL,this.armArmL._lm,($_=this.armArmL,$bind($_,$_.getAngle)),($_=this.armArmL,$bind($_,$_.getAxis1)));
		this.armArmRMotor = new AngleMotor(this.armArmR,this.armArmR._lm,($_=this.armArmR,$bind($_,$_.getAngle)),($_=this.armArmR,$bind($_,$_.getAxis1)));
		this.legLegLMotor = new AngleMotor(this.legLegL,this.legLegL._lm,($_=this.legLegL,$bind($_,$_.getAngle)),($_=this.legLegL,$bind($_,$_.getAxis1)));
		this.legLegRMotor = new AngleMotor(this.legLegR,this.legLegR._lm,($_=this.legLegR,$bind($_,$_.getAngle)),($_=this.legLegR,$bind($_,$_.getAxis1)));
		this.bodyBodyMotor = new AngleMotor(this.bodyBody,this.bodyBody._lm,($_=this.bodyBody,$bind($_,$_.getAngle)),($_=this.bodyBody,$bind($_,$_.getAxis1)));
		this.motors = [this.bodyLegLMotor1,this.bodyLegLMotor2,this.bodyLegRMotor1,this.bodyLegRMotor2,this.bodyArmLMotor1,this.bodyArmLMotor2,this.bodyArmRMotor1,this.bodyArmRMotor2,this.armArmLMotor,this.armArmRMotor,this.legLegLMotor,this.legLegRMotor,this.bodyBodyMotor];
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.motors;
		while(_g < _g1.length) {
			var motor = _g1[_g];
			++_g;
			motor.update();
		}
	}
};
var pot_core_App = function(canvas) {
	this.canvas = canvas;
	this.input = new pot_input_Input(canvas);
	this.pot = new pot_core_Pot(this,canvas);
	this.frameCount = 0;
	this.setup();
};
pot_core_App.__name__ = true;
pot_core_App.prototype = {
	setup: function() {
	}
	,loop: function() {
	}
};
var RobotDDPGTest = function(canvas) {
	this.fps = 0;
	this.rewards = [];
	this.data = null;
	this.testedScore = 0;
	this.scores = [];
	this.scoreTestCount = 0;
	this.view = true;
	this.noise = true;
	this.fast = false;
	pot_core_App.call(this,canvas);
};
RobotDDPGTest.__name__ = true;
RobotDDPGTest.main = function() {
	new RobotDDPGTest(window.document.getElementById("canvas"));
};
RobotDDPGTest.__super__ = pot_core_App;
RobotDDPGTest.prototype = $extend(pot_core_App.prototype,{
	setup: function() {
		var _gthis = this;
		this.pot.size(640,480);
		this.g = this.pot.graphics;
		this.g.init3D();
		webdl_core_WebDL.setBackend("gpu");
		this.time = new Date().getTime() / 1000;
		this.prevFC = 0;
		var loadText = function(s) {
			try {
				var txt = StringTools.trim(s);
				var ds = txt.split("\n");
				if(ds.length != 2) {
					throw new js__$Boot_HaxeError("invalid number of lines");
				}
				var rew = ds[0].split(",").map(function(s1) {
					var f = parseFloat(s1);
					if(!isFinite(f)) {
						throw new js__$Boot_HaxeError("reward must be finite");
					}
					return f;
				});
				var wei = ds[1].split(",").map(function(s2) {
					var f1 = parseFloat(s2);
					if(!isFinite(f1)) {
						throw new js__$Boot_HaxeError("weight must be finite");
					}
					return f1;
				});
				_gthis.rewards = rew;
				_gthis.data = wei;
				_gthis.initSim();
			} catch( e ) {
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				js_Browser.alert("load failed");
			}
			return;
		};
		if(window.document.getElementById("load") != null) {
			window.document.getElementById("load").addEventListener("change",function(e2) {
				var file = e2.target.files;
				var reader = new FileReader();
				reader.readAsText(file[0]);
				return reader.onload = function(e3) {
					loadText(reader.result);
					return;
				};
			});
		}
		if(window.document.getElementById("save") != null) {
			window.document.getElementById("save").addEventListener("click",function(e4) {
				var data = _gthis.rewards.join(",") + "\n" + _gthis.ddpg.exportWeights().join(",");
				var blob = new Blob([data],{ "type" : "text/plain"});
				var a = window.document.createElement("a");
				a.href = URL.createObjectURL(blob);
				a.target = "_blank";
				a.setAttribute("download","data.txt");
				a.click();
				return;
			});
			this.view = false;
			this.noise = true;
		}
		if(window.document.getElementById("test") != null) {
			window.document.getElementById("test").addEventListener("click",function(e5) {
				if(!_gthis.view) {
					js_Browser.alert("score test can only be run in view mode");
					return;
				}
				_gthis.scoreTestCount = 100;
				_gthis.scores = [];
				_gthis.noise = false;
			});
			this.view = true;
			this.noise = false;
		}
		if(window.document.getElementById("preset") != null) {
			var select = window.document.getElementById("preset");
			select.addEventListener("change",function(e6) {
				if(select.selectedIndex <= 0) {
					return;
				}
				var xhr = new XMLHttpRequest();
				xhr.addEventListener("load",function(e7) {
					console.log("src/RobotDDPGTest.hx:132:","loaded");
					loadText(xhr.responseText);
					return;
				});
				var val = select.options[select.selectedIndex].value;
				xhr.open("get","./" + val);
				xhr.send(null);
			});
			this.view = true;
			this.noise = false;
		}
		this.initSim();
		this.pot.start();
	}
	,initSim: function() {
		this.humanoid = new _$RobotDDPGTest_Humanoid(this.g);
		var ds = this.humanoid;
		var ds1 = _$RobotDDPGTest_Humanoid.STATE_DIM;
		var _g = [];
		var _g2 = 0;
		var _g1 = _$RobotDDPGTest_Humanoid.ACTION_DIM;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push([-1,1]);
		}
		var ds2 = new webdl_rl_ddpg_DDPGSetting(ds,ds1,_g);
		ds2.numHiddenUnits = 600;
		ds2.numHiddenLayers = 3;
		ds2.maxEpisodeLength = 2400;
		ds2.minibatchSize = 64;
		ds2.replayBufferSize = 30000;
		ds2.startReplay = 5000;
		ds2.updateInterval = 2;
		ds2.noiseTheta = 0.15;
		ds2.noiseSigma = 0.2;
		ds2.rewardScaleFactor = 0.01;
		ds2.normalizeObserbation = true;
		ds2.evaluation = this.view;
		this.ddpg = new webdl_rl_ddpg_DDPG(ds2);
		if(this.view) {
			this.ddpg.episode = 0;
			this.ddpg.playingMode = this.view;
		}
		if(this.data != null) {
			this.ddpg.importWeights(this.data);
			this.ddpg.episode = this.rewards.length;
			this.ddpg.continueFromData = true;
			console.log("src/RobotDDPGTest.hx:174:","weights loaded. episode = " + this.rewards.length);
		}
		oimo_common_Setting.defaultFriction = 1.0;
		oimo_common_Setting.defaultRestitution = 0.0;
		oimo_common_Setting.defaultJointConstraintSolverType = oimo_dynamics_constraint_solver_ConstraintSolverType.DIRECT;
		oimo_common_Setting.defaultJointPositionCorrectionAlgorithm = oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS;
	}
	,save: function() {
		var weights = this.ddpg.exportWeights();
		var _g = 0;
		while(_g < weights.length) {
			var w = weights[_g];
			++_g;
			if(!isFinite(w)) {
				return false;
			}
		}
		this.data = weights;
		return true;
	}
	,loop: function() {
		var nextTime = new Date().getTime() / 1000;
		if(nextTime > this.time + 1) {
			this.time = nextTime;
			var newFC = this.frameCount;
			this.fps = newFC - this.prevFC;
			this.prevFC = newFC;
		}
		this.ddpg.applyNoise = this.noise;
		if(this.view) {
			if(this.scoreTestCount > 0) {
				var _g = 0;
				while(_g < 10) {
					var i = _g++;
					if(this.scoreTestCount > 0) {
						this.ddpg.step(false);
						if(this.ddpg.episodeTime == 0) {
							if(this.scores.length == 0) {
								this.scores.push(0);
							} else {
								this.scores.push(this.ddpg.totalRewardInLastEpisode);
								this.scoreTestCount--;
								if(this.scoreTestCount == 0) {
									var sum = 0;
									var _g1 = 0;
									var _g2 = this.scores;
									while(_g1 < _g2.length) {
										var s = _g2[_g1];
										++_g1;
										sum += s;
									}
									sum /= this.scores.length - 1;
									this.testedScore = sum;
								}
							}
						}
					}
				}
			} else {
				if(this.input.mouse.dleft == 1) {
					var _this = this.humanoid.torso;
					var v_x = -2 + Math.random() * 4;
					var v_y = 10;
					var v_z = -2 + Math.random() * 4;
					oimo_common_Vec3.numCreations++;
					if(_this._type != 1) {
						var dX;
						var dY;
						var dZ;
						dX = v_x;
						dY = v_y;
						dZ = v_z;
						_this._velX += dX;
						_this._velY += dY;
						_this._velZ += dZ;
					}
					_this._sleeping = false;
					_this._sleepTime = 0;
				}
				if(this.input.mouse.dright == 1) {
					this.noise = !this.noise;
				}
				this.ddpg.step(false);
			}
		} else {
			if(this.input.mouse.dleft == 1) {
				this.fast = !this.fast;
			}
			if(this.input.mouse.dright == 1) {
				this.noise = !this.noise;
			}
			var numSteps = this.fast ? 4 : 1;
			var _g11 = 0;
			var _g3 = numSteps;
			while(_g11 < _g3) {
				var i1 = _g11++;
				this.ddpg.step();
				if(this.ddpg.episodeTime == 0) {
					this.rewards.push(this.ddpg.totalRewardInLastEpisode);
					if(this.ddpg.episode % 100 == 0) {
						if(!this.save()) {
							console.log("src/RobotDDPGTest.hx:265:","NaN!!!");
							this.initSim();
							return;
						}
					}
				}
			}
		}
		this.g.beginScene();
		var _this1 = this.g;
		_this1.gl.clearColor(0,0,0,1);
		_this1.gl.clearDepth(1);
		_this1.gl.clear(16640);
		var _this2 = this.humanoid.torso;
		var pos_x = 0;
		var pos_y = 0;
		var pos_z = 0;
		oimo_common_Vec3.numCreations++;
		pos_x = _this2._transform._positionX;
		pos_y = _this2._transform._positionY;
		pos_z = _this2._transform._positionZ;
		var _this3 = this.g;
		_this3.cameraSet = true;
		_this3.cameraPosX = -6 + pos_x;
		_this3.cameraPosY = 5;
		_this3.cameraPosZ = pos_z;
		_this3.cameraAtX = pos_x;
		_this3.cameraAtY = 1;
		_this3.cameraAtZ = pos_z;
		_this3.cameraUpX = 0;
		_this3.cameraUpY = 1;
		_this3.cameraUpZ = 0;
		_this3.viewMat.lookAt(_this3.cameraPosX,_this3.cameraPosY,_this3.cameraPosZ,_this3.cameraAtX,_this3.cameraAtY,_this3.cameraAtZ,_this3.cameraUpX,_this3.cameraUpY,_this3.cameraUpZ);
		var _this4 = this.g;
		if(!_this4.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(_this4.numLights == 8) {
			throw new Error("too many lights");
		}
		var light = _this4.lightBuf[_this4.numLights++];
		light.r = 0.2;
		light.g = 0.2;
		light.b = 0.2;
		light.posX = 0;
		light.posY = 0;
		light.posZ = 0;
		light.posW = 0;
		light.norX = 0;
		light.norY = 0;
		light.norZ = 0;
		var dirX = -_this4.viewMat.array[2];
		var dirY = -_this4.viewMat.array[6];
		var dirZ = -_this4.viewMat.array[10];
		if(!_this4.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(_this4.numLights == 8) {
			throw new Error("too many lights");
		}
		var light1 = _this4.lightBuf[_this4.numLights++];
		var invLen = Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		dirX *= invLen;
		dirY *= invLen;
		dirZ *= invLen;
		light1.r = 0.8;
		light1.g = 0.8;
		light1.b = 0.8;
		light1.posX = 0;
		light1.posY = 0;
		light1.posZ = 0;
		light1.posW = 0;
		light1.norX = dirX;
		light1.norY = dirY;
		light1.norZ = dirZ;
		this.g.beginShape(4);
		this.humanoid.draw();
		var _this5 = this.g;
		var shader = _this5.chooseShader();
		var pg = shader.pg;
		_this5.modelviewMat.mul(_this5.viewMat,_this5.modelMat);
		_this5.normalMat.inverse(_this5.modelviewMat);
		_this5.normalMat.transpose(_this5.normalMat);
		var tmp;
		var _this6 = shader.map;
		if(__map_reserved["model"] != null ? _this6.existsReserved("model") : _this6.h.hasOwnProperty("model")) {
			var _this11 = shader.map;
			tmp = __map_reserved["model"] != null ? _this11.getReserved("model") : _this11.h["model"];
		} else {
			var ul = shader.gl.getUniformLocation(shader.pg,"model");
			var _this21 = shader.map;
			if(__map_reserved["model"] != null) {
				_this21.setReserved("model",ul);
			} else {
				_this21.h["model"] = ul;
			}
			tmp = ul;
		}
		if(tmp != null) {
			shader.setMatrix("model",_this5.modelMat.array);
		}
		var tmp1;
		var _this31 = shader.map;
		if(__map_reserved["view"] != null ? _this31.existsReserved("view") : _this31.h.hasOwnProperty("view")) {
			var _this41 = shader.map;
			tmp1 = __map_reserved["view"] != null ? _this41.getReserved("view") : _this41.h["view"];
		} else {
			var ul1 = shader.gl.getUniformLocation(shader.pg,"view");
			var _this51 = shader.map;
			if(__map_reserved["view"] != null) {
				_this51.setReserved("view",ul1);
			} else {
				_this51.h["view"] = ul1;
			}
			tmp1 = ul1;
		}
		if(tmp1 != null) {
			shader.setMatrix("view",_this5.viewMat.array);
		}
		var tmp2;
		var _this61 = shader.map;
		if(__map_reserved["projection"] != null ? _this61.existsReserved("projection") : _this61.h.hasOwnProperty("projection")) {
			var _this7 = shader.map;
			tmp2 = __map_reserved["projection"] != null ? _this7.getReserved("projection") : _this7.h["projection"];
		} else {
			var ul2 = shader.gl.getUniformLocation(shader.pg,"projection");
			var _this8 = shader.map;
			if(__map_reserved["projection"] != null) {
				_this8.setReserved("projection",ul2);
			} else {
				_this8.h["projection"] = ul2;
			}
			tmp2 = ul2;
		}
		if(tmp2 != null) {
			shader.setMatrix("projection",_this5.projMat.array);
		}
		var tmp3;
		var _this9 = shader.map;
		if(__map_reserved["transform"] != null ? _this9.existsReserved("transform") : _this9.h.hasOwnProperty("transform")) {
			var _this10 = shader.map;
			tmp3 = __map_reserved["transform"] != null ? _this10.getReserved("transform") : _this10.h["transform"];
		} else {
			var ul3 = shader.gl.getUniformLocation(shader.pg,"transform");
			var _this111 = shader.map;
			if(__map_reserved["transform"] != null) {
				_this111.setReserved("transform",ul3);
			} else {
				_this111.h["transform"] = ul3;
			}
			tmp3 = ul3;
		}
		if(tmp3 != null) {
			_this5.mvpMat.mul(_this5.projMat,_this5.modelviewMat);
			shader.setMatrix("transform",_this5.mvpMat.array);
		}
		var tmp4;
		var _this12 = shader.map;
		if(__map_reserved["modelview"] != null ? _this12.existsReserved("modelview") : _this12.h.hasOwnProperty("modelview")) {
			var _this13 = shader.map;
			tmp4 = __map_reserved["modelview"] != null ? _this13.getReserved("modelview") : _this13.h["modelview"];
		} else {
			var ul4 = shader.gl.getUniformLocation(shader.pg,"modelview");
			var _this14 = shader.map;
			if(__map_reserved["modelview"] != null) {
				_this14.setReserved("modelview",ul4);
			} else {
				_this14.h["modelview"] = ul4;
			}
			tmp4 = ul4;
		}
		if(tmp4 != null) {
			shader.setMatrix("modelview",_this5.modelviewMat.array);
		}
		var tmp5;
		var _this15 = shader.map;
		if(__map_reserved["normalMatrix"] != null ? _this15.existsReserved("normalMatrix") : _this15.h.hasOwnProperty("normalMatrix")) {
			var _this16 = shader.map;
			tmp5 = __map_reserved["normalMatrix"] != null ? _this16.getReserved("normalMatrix") : _this16.h["normalMatrix"];
		} else {
			var ul5 = shader.gl.getUniformLocation(shader.pg,"normalMatrix");
			var _this17 = shader.map;
			if(__map_reserved["normalMatrix"] != null) {
				_this17.setReserved("normalMatrix",ul5);
			} else {
				_this17.h["normalMatrix"] = ul5;
			}
			tmp5 = ul5;
		}
		if(tmp5 != null) {
			_this5.normalMat.toMat3();
			shader.setMatrix("normalMatrix",_this5.normalMat.array3);
		}
		if(_this5.currentTexture != null) {
			shader.setTexture("texture",_this5.currentTexture);
			var tmp6;
			var _this18 = shader.map;
			if(__map_reserved["texResolution"] != null ? _this18.existsReserved("texResolution") : _this18.h.hasOwnProperty("texResolution")) {
				var _this19 = shader.map;
				tmp6 = __map_reserved["texResolution"] != null ? _this19.getReserved("texResolution") : _this19.h["texResolution"];
			} else {
				var ul6 = shader.gl.getUniformLocation(shader.pg,"texResolution");
				var _this20 = shader.map;
				if(__map_reserved["texResolution"] != null) {
					_this20.setReserved("texResolution",ul6);
				} else {
					_this20.h["texResolution"] = ul6;
				}
				tmp6 = ul6;
			}
			if(tmp6 != null) {
				shader.setFloat("texResolution",_this5.currentTexture.textureWidth,_this5.currentTexture.textureHeight);
			}
			var tmp7;
			var _this211 = shader.map;
			if(__map_reserved["texViewport"] != null ? _this211.existsReserved("texViewport") : _this211.h.hasOwnProperty("texViewport")) {
				var _this22 = shader.map;
				tmp7 = __map_reserved["texViewport"] != null ? _this22.getReserved("texViewport") : _this22.h["texViewport"];
			} else {
				var ul7 = shader.gl.getUniformLocation(shader.pg,"texViewport");
				var _this23 = shader.map;
				if(__map_reserved["texViewport"] != null) {
					_this23.setReserved("texViewport",ul7);
				} else {
					_this23.h["texViewport"] = ul7;
				}
				tmp7 = ul7;
			}
			if(tmp7 != null) {
				var x = 0;
				var y = 1 - _this5.currentTexture.height / _this5.currentTexture.textureHeight;
				var w = _this5.currentTexture.width / _this5.currentTexture.textureWidth;
				var h = _this5.currentTexture.height / _this5.currentTexture.textureHeight;
				shader.setFloat("texViewport",x,y,w,h);
			}
		}
		var tmp8;
		var _this24 = shader.map;
		if(__map_reserved["ambient"] != null ? _this24.existsReserved("ambient") : _this24.h.hasOwnProperty("ambient")) {
			var _this25 = shader.map;
			tmp8 = __map_reserved["ambient"] != null ? _this25.getReserved("ambient") : _this25.h["ambient"];
		} else {
			var ul8 = shader.gl.getUniformLocation(shader.pg,"ambient");
			var _this26 = shader.map;
			if(__map_reserved["ambient"] != null) {
				_this26.setReserved("ambient",ul8);
			} else {
				_this26.h["ambient"] = ul8;
			}
			tmp8 = ul8;
		}
		if(tmp8 != null) {
			shader.setFloat("ambient",_this5.materialAmb);
		}
		var tmp9;
		var _this27 = shader.map;
		if(__map_reserved["diffuse"] != null ? _this27.existsReserved("diffuse") : _this27.h.hasOwnProperty("diffuse")) {
			var _this28 = shader.map;
			tmp9 = __map_reserved["diffuse"] != null ? _this28.getReserved("diffuse") : _this28.h["diffuse"];
		} else {
			var ul9 = shader.gl.getUniformLocation(shader.pg,"diffuse");
			var _this29 = shader.map;
			if(__map_reserved["diffuse"] != null) {
				_this29.setReserved("diffuse",ul9);
			} else {
				_this29.h["diffuse"] = ul9;
			}
			tmp9 = ul9;
		}
		if(tmp9 != null) {
			shader.setFloat("diffuse",_this5.materialDif);
		}
		var tmp10;
		var _this30 = shader.map;
		if(__map_reserved["specular"] != null ? _this30.existsReserved("specular") : _this30.h.hasOwnProperty("specular")) {
			var _this311 = shader.map;
			tmp10 = __map_reserved["specular"] != null ? _this311.getReserved("specular") : _this311.h["specular"];
		} else {
			var ul10 = shader.gl.getUniformLocation(shader.pg,"specular");
			var _this32 = shader.map;
			if(__map_reserved["specular"] != null) {
				_this32.setReserved("specular",ul10);
			} else {
				_this32.h["specular"] = ul10;
			}
			tmp10 = ul10;
		}
		if(tmp10 != null) {
			shader.setFloat("specular",_this5.materialSpc);
		}
		var tmp11;
		var _this33 = shader.map;
		if(__map_reserved["shininess"] != null ? _this33.existsReserved("shininess") : _this33.h.hasOwnProperty("shininess")) {
			var _this34 = shader.map;
			tmp11 = __map_reserved["shininess"] != null ? _this34.getReserved("shininess") : _this34.h["shininess"];
		} else {
			var ul11 = shader.gl.getUniformLocation(shader.pg,"shininess");
			var _this35 = shader.map;
			if(__map_reserved["shininess"] != null) {
				_this35.setReserved("shininess",ul11);
			} else {
				_this35.h["shininess"] = ul11;
			}
			tmp11 = ul11;
		}
		if(tmp11 != null) {
			shader.setFloat("shininess",_this5.materialShn);
		}
		var tmp12;
		var _this36 = shader.map;
		if(__map_reserved["emission"] != null ? _this36.existsReserved("emission") : _this36.h.hasOwnProperty("emission")) {
			var _this37 = shader.map;
			tmp12 = __map_reserved["emission"] != null ? _this37.getReserved("emission") : _this37.h["emission"];
		} else {
			var ul12 = shader.gl.getUniformLocation(shader.pg,"emission");
			var _this38 = shader.map;
			if(__map_reserved["emission"] != null) {
				_this38.setReserved("emission",ul12);
			} else {
				_this38.h["emission"] = ul12;
			}
			tmp12 = ul12;
		}
		if(tmp12 != null) {
			shader.setFloat("emission",_this5.materialEmi);
		}
		var tmp13;
		var _this39 = shader.map;
		if(__map_reserved["numLights"] != null ? _this39.existsReserved("numLights") : _this39.h.hasOwnProperty("numLights")) {
			var _this40 = shader.map;
			tmp13 = __map_reserved["numLights"] != null ? _this40.getReserved("numLights") : _this40.h["numLights"];
		} else {
			var ul13 = shader.gl.getUniformLocation(shader.pg,"numLights");
			var _this411 = shader.map;
			if(__map_reserved["numLights"] != null) {
				_this411.setReserved("numLights",ul13);
			} else {
				_this411.h["numLights"] = ul13;
			}
			tmp13 = ul13;
		}
		if(tmp13 != null) {
			shader.setInt("numLights",_this5.numLights);
		}
		var tmp14;
		var _this42 = shader.map;
		if(__map_reserved["lightPositions"] != null ? _this42.existsReserved("lightPositions") : _this42.h.hasOwnProperty("lightPositions")) {
			var _this43 = shader.map;
			tmp14 = __map_reserved["lightPositions"] != null ? _this43.getReserved("lightPositions") : _this43.h["lightPositions"];
		} else {
			var ul14 = shader.gl.getUniformLocation(shader.pg,"lightPositions");
			var _this44 = shader.map;
			if(__map_reserved["lightPositions"] != null) {
				_this44.setReserved("lightPositions",ul14);
			} else {
				_this44.h["lightPositions"] = ul14;
			}
			tmp14 = ul14;
		}
		if(tmp14 != null) {
			var _g12 = 0;
			var _g4 = _this5.numLights;
			while(_g12 < _g4) {
				var i2 = _g12++;
				var light2 = _this5.lightBuf[i2];
				var x1 = light2.posX * _this5.viewMat.array[0] + light2.posY * _this5.viewMat.array[4] + light2.posZ * _this5.viewMat.array[8] + _this5.viewMat.array[12];
				var y1 = light2.posX * _this5.viewMat.array[1] + light2.posY * _this5.viewMat.array[5] + light2.posZ * _this5.viewMat.array[9] + _this5.viewMat.array[13];
				var z = light2.posX * _this5.viewMat.array[2] + light2.posY * _this5.viewMat.array[6] + light2.posZ * _this5.viewMat.array[10] + _this5.viewMat.array[14];
				shader.setFloat("lightPositions[" + i2 + "]",x1,y1,z,light2.posW);
			}
		}
		var tmp15;
		var _this45 = shader.map;
		if(__map_reserved["lightNormals"] != null ? _this45.existsReserved("lightNormals") : _this45.h.hasOwnProperty("lightNormals")) {
			var _this46 = shader.map;
			tmp15 = __map_reserved["lightNormals"] != null ? _this46.getReserved("lightNormals") : _this46.h["lightNormals"];
		} else {
			var ul15 = shader.gl.getUniformLocation(shader.pg,"lightNormals");
			var _this47 = shader.map;
			if(__map_reserved["lightNormals"] != null) {
				_this47.setReserved("lightNormals",ul15);
			} else {
				_this47.h["lightNormals"] = ul15;
			}
			tmp15 = ul15;
		}
		if(tmp15 != null) {
			var _g111 = 0;
			var _g21 = _this5.numLights;
			while(_g111 < _g21) {
				var i11 = _g111++;
				var light11 = _this5.lightBuf[i11];
				var x2 = light11.norX * _this5.viewMat.array[0] + light11.norY * _this5.viewMat.array[4] + light11.norZ * _this5.viewMat.array[8];
				var y2 = light11.norX * _this5.viewMat.array[1] + light11.norY * _this5.viewMat.array[5] + light11.norZ * _this5.viewMat.array[9];
				var z1 = light11.norX * _this5.viewMat.array[2] + light11.norY * _this5.viewMat.array[6] + light11.norZ * _this5.viewMat.array[10];
				shader.setFloat("lightNormals[" + i11 + "]",x2,y2,z1);
			}
		}
		var tmp16;
		var _this48 = shader.map;
		if(__map_reserved["lightColors"] != null ? _this48.existsReserved("lightColors") : _this48.h.hasOwnProperty("lightColors")) {
			var _this49 = shader.map;
			tmp16 = __map_reserved["lightColors"] != null ? _this49.getReserved("lightColors") : _this49.h["lightColors"];
		} else {
			var ul16 = shader.gl.getUniformLocation(shader.pg,"lightColors");
			var _this50 = shader.map;
			if(__map_reserved["lightColors"] != null) {
				_this50.setReserved("lightColors",ul16);
			} else {
				_this50.h["lightColors"] = ul16;
			}
			tmp16 = ul16;
		}
		if(tmp16 != null) {
			var _g121 = 0;
			var _g31 = _this5.numLights;
			while(_g121 < _g31) {
				var i21 = _g121++;
				var light21 = _this5.lightBuf[i21];
				shader.setFloat("lightColors[" + i21 + "]",light21.r,light21.g,light21.b);
			}
		}
		var _this511 = _this5.indexBuf;
		_this511.gl.bindBuffer(34963,_this511.buffer);
		_this511.gl.bufferData(34963,new Int16Array(_this511.array.buffer,0,_this511.length),35044);
		_this511.gl.bindBuffer(34963,null);
		var _this52 = _this5.positionBuf;
		_this52.gl.bindBuffer(34962,_this52.buffer);
		_this52.gl.bufferData(34962,new Float32Array(_this52.array.buffer,0,_this52.length),35044);
		_this52.gl.bindBuffer(34962,null);
		var _this53 = _this5.colorBuf;
		_this53.gl.bindBuffer(34962,_this53.buffer);
		_this53.gl.bufferData(34962,new Float32Array(_this53.array.buffer,0,_this53.length),35044);
		_this53.gl.bindBuffer(34962,null);
		var _this54 = _this5.normalBuf;
		_this54.gl.bindBuffer(34962,_this54.buffer);
		_this54.gl.bufferData(34962,new Float32Array(_this54.array.buffer,0,_this54.length),35044);
		_this54.gl.bindBuffer(34962,null);
		var _this55 = _this5.texCoordBuf;
		_this55.gl.bindBuffer(34962,_this55.buffer);
		_this55.gl.bufferData(34962,new Float32Array(_this55.array.buffer,0,_this55.length),35044);
		_this55.gl.bindBuffer(34962,null);
		var _this56 = _this5.positionBuf;
		var idx = _this56.gl.getAttribLocation(pg,_this56.name);
		if(idx != -1) {
			_this56.gl.bindBuffer(34962,_this56.buffer);
			_this56.gl.enableVertexAttribArray(idx);
			_this56.gl.vertexAttribPointer(idx,_this56.size,5126,false,0,0);
			_this56.gl.bindBuffer(34962,null);
		}
		var _this57 = _this5.colorBuf;
		var idx1 = _this57.gl.getAttribLocation(pg,_this57.name);
		if(idx1 != -1) {
			_this57.gl.bindBuffer(34962,_this57.buffer);
			_this57.gl.enableVertexAttribArray(idx1);
			_this57.gl.vertexAttribPointer(idx1,_this57.size,5126,false,0,0);
			_this57.gl.bindBuffer(34962,null);
		}
		var _this58 = _this5.normalBuf;
		var idx2 = _this58.gl.getAttribLocation(pg,_this58.name);
		if(idx2 != -1) {
			_this58.gl.bindBuffer(34962,_this58.buffer);
			_this58.gl.enableVertexAttribArray(idx2);
			_this58.gl.vertexAttribPointer(idx2,_this58.size,5126,false,0,0);
			_this58.gl.bindBuffer(34962,null);
		}
		var _this59 = _this5.texCoordBuf;
		var idx3 = _this59.gl.getAttribLocation(pg,_this59.name);
		if(idx3 != -1) {
			_this59.gl.bindBuffer(34962,_this59.buffer);
			_this59.gl.enableVertexAttribArray(idx3);
			_this59.gl.vertexAttribPointer(idx3,_this59.size,5126,false,0,0);
			_this59.gl.bindBuffer(34962,null);
		}
		if(!shader.compiled) {
			throw new Error("shader is not compiled");
		}
		shader.gl.useProgram(shader.pg);
		var texUnit = 0;
		var name1 = shader.uniforms.keys();
		while(name1.hasNext()) {
			var name11 = name1.next();
			var _this60 = shader.uniforms;
			var uniform = __map_reserved[name11] != null ? _this60.getReserved(name11) : _this60.h[name11];
			if(uniform.type == 11) {
				uniform.texUnit = texUnit;
				++texUnit;
			}
		}
		var name3 = shader.uniforms.keys();
		while(name3.hasNext()) {
			var name31 = name3.next();
			var _this611 = shader.uniforms;
			var uniform1 = __map_reserved[name31] != null ? _this611.getReserved(name31) : _this611.h[name31];
			var loc;
			var _this62 = shader.map;
			if(__map_reserved[name31] != null ? _this62.existsReserved(name31) : _this62.h.hasOwnProperty(name31)) {
				var _this63 = shader.map;
				loc = __map_reserved[name31] != null ? _this63.getReserved(name31) : _this63.h[name31];
			} else {
				var ul17 = shader.gl.getUniformLocation(shader.pg,name31);
				var _this64 = shader.map;
				if(__map_reserved[name31] != null) {
					_this64.setReserved(name31,ul17);
				} else {
					_this64.h[name31] = ul17;
				}
				loc = ul17;
			}
			var _g41 = uniform1.type;
			switch(_g41) {
			case 0:
				shader.gl.uniform1i(loc,uniform1.i1);
				break;
			case 1:
				shader.gl.uniform2i(loc,uniform1.i1,uniform1.i2);
				break;
			case 2:
				shader.gl.uniform3i(loc,uniform1.i1,uniform1.i2,uniform1.i3);
				break;
			case 3:
				shader.gl.uniform4i(loc,uniform1.i1,uniform1.i2,uniform1.i3,uniform1.i4);
				break;
			case 4:
				shader.gl.uniform1f(loc,uniform1.f1);
				break;
			case 5:
				shader.gl.uniform2f(loc,uniform1.f1,uniform1.f2);
				break;
			case 6:
				shader.gl.uniform3f(loc,uniform1.f1,uniform1.f2,uniform1.f3);
				break;
			case 7:
				shader.gl.uniform4f(loc,uniform1.f1,uniform1.f2,uniform1.f3,uniform1.f4);
				break;
			case 8:
				shader.gl.uniformMatrix2fv(loc,false,uniform1.m2);
				break;
			case 9:
				shader.gl.uniformMatrix3fv(loc,false,uniform1.m3);
				break;
			case 10:
				shader.gl.uniformMatrix4fv(loc,false,uniform1.m4);
				break;
			case 11:
				shader.gl.activeTexture(33984 + uniform1.texUnit);
				shader.gl.bindTexture(3553,uniform1.tex == null ? null : uniform1.tex.texture);
				shader.gl.uniform1i(loc,uniform1.texUnit);
				break;
			}
		}
		shader.gl.activeTexture(33984);
		var _this65 = _this5.indexBuf;
		var mode = _this5.shapeMode;
		_this65.gl.bindBuffer(34963,_this65.buffer);
		_this65.gl.drawElements(mode,_this65.length,5123,0);
		_this65.gl.bindBuffer(34963,null);
		var _this66 = this.g;
		if(!_this66.sceneOpen) {
			throw new Error("scene already ended");
		}
		_this66.sceneOpen = false;
		_this66.gl.flush();
		var tmp17 = "Episode: " + this.ddpg.episode + "<br>Elapsed: " + this.ddpg.episodeTime + "<br>Total reward in the last episode: " + this.ddpg.totalRewardInLastEpisode + "<br>the last reward: " + this.ddpg.lastReward + "<br>the last Q-value: " + this.ddpg.lastValueWithoutNoise + "<br>noise: " + (this.noise ? "ON" : "OFF") + "<br>FPS: " + this.fps + "<br>average score: ";
		var tmp18 = this.scoreTestCount > 0 ? "testing... (" + this.scoreTestCount + " left)" : this.testedScore == 0 ? "---" : "" + (this.testedScore * 100 | 0) / 100;
		window.document.getElementById("text").innerHTML = tmp17 + tmp18;
	}
});
var oimo_dynamics_callback_ContactCallback = function() {
};
oimo_dynamics_callback_ContactCallback.__name__ = true;
oimo_dynamics_callback_ContactCallback.prototype = {
	beginContact: function(c) {
	}
	,preSolve: function(c) {
	}
	,postSolve: function(c) {
	}
	,endContact: function(c) {
	}
};
var _$RobotDDPGTest_HumanoidContactCallback = function(onContact) {
	oimo_dynamics_callback_ContactCallback.call(this);
	this.onContact = onContact;
};
_$RobotDDPGTest_HumanoidContactCallback.__name__ = true;
_$RobotDDPGTest_HumanoidContactCallback.__super__ = oimo_dynamics_callback_ContactCallback;
_$RobotDDPGTest_HumanoidContactCallback.prototype = $extend(oimo_dynamics_callback_ContactCallback.prototype,{
	beginContact: function(c) {
		this.onContact(c._s1._rigidBody,c._s2._rigidBody);
	}
});
var webdl_rl_ddpg_Agent = function() { };
webdl_rl_ddpg_Agent.__name__ = true;
var _$RobotDDPGTest_Humanoid = function(g) {
	this.g = g;
};
_$RobotDDPGTest_Humanoid.__name__ = true;
_$RobotDDPGTest_Humanoid.__interfaces__ = [webdl_rl_ddpg_Agent];
_$RobotDDPGTest_Humanoid.prototype = {
	reset: function() {
		this.w = new oimo_dynamics_World();
		this.w._numPositionIterations = 5;
		this.w._numVelocityIterations = 10;
		this.w._debugDraw = new _$RobotDDPGTest_Renderer(this.g);
		var _g = -10;
		while(_g < 100) {
			var i = _g++;
			this.box(-5,0.2,i,0.2,0.2,0.2,true)._shapeList._collisionMask = 0;
			this.box(5,0.2,i,0.2,0.2,0.2,true)._shapeList._collisionMask = 0;
		}
		this.ground = this.box(0,-0.5,1000,20,0.5,1010,true);
		this.ground._shapeList._contactCallback = new _$RobotDDPGTest_HumanoidContactCallback($bind(this,this.onContact));
		this.createRobot(0,1.2,0);
		var b = this.w._rigidBodyList;
		while(b != null) {
			var _this_x = -1 + Math.random() * 2;
			var _this_y = -1 + Math.random() * 2;
			var _this_z = -1 + Math.random() * 2;
			oimo_common_Vec3.numCreations++;
			var v_x = _this_x * 0.5;
			var v_y = _this_y * 0.5;
			var v_z = _this_z * 0.5;
			oimo_common_Vec3.numCreations++;
			if(b._type == 1) {
				b._velX = 0;
				b._velY = 0;
				b._velZ = 0;
			} else {
				b._velX = v_x;
				b._velY = v_y;
				b._velZ = v_z;
			}
			b._sleeping = false;
			b._sleepTime = 0;
			var _this_x1 = -1 + Math.random() * 2;
			var _this_y1 = -1 + Math.random() * 2;
			var _this_z1 = -1 + Math.random() * 2;
			oimo_common_Vec3.numCreations++;
			var v_x1 = _this_x1 * 0.5;
			var v_y1 = _this_y1 * 0.5;
			var v_z1 = _this_z1 * 0.5;
			oimo_common_Vec3.numCreations++;
			if(b._type == 1) {
				b._angVelX = 0;
				b._angVelY = 0;
				b._angVelZ = 0;
			} else {
				b._angVelX = v_x1;
				b._angVelY = v_y1;
				b._angVelZ = v_z1;
			}
			b._sleeping = false;
			b._sleepTime = 0;
			b = b._next;
		}
		var _this = this.torso;
		var v_x2 = -1 + Math.random() * 2;
		var v_y2 = -1 + Math.random() * 2;
		var v_z2 = -1 + Math.random() * 2;
		oimo_common_Vec3.numCreations++;
		var tx = v_x2 * 0.01;
		var ty = v_y2 * 0;
		var tz = v_z2 * 0.01;
		v_x2 = tx;
		v_y2 = ty;
		v_z2 = tz;
		var tx1 = v_x2;
		var ty1 = v_y2;
		var tz1 = v_z2 + 0.5;
		v_x2 = tx1;
		v_y2 = ty1;
		v_z2 = tz1;
		if(_this._type == 1) {
			_this._velX = 0;
			_this._velY = 0;
			_this._velZ = 0;
		} else {
			_this._velX = v_x2;
			_this._velY = v_y2;
			_this._velZ = v_z2;
		}
		_this._sleeping = false;
		_this._sleepTime = 0;
		var burnIn = 7;
		this.robot.bodyLegLMotor1.get_limitMotor().setMotor(3,1);
		this.robot.bodyLegRMotor1.get_limitMotor().setMotor(3,1);
		this.robot.armArmLMotor.get_limitMotor().setMotor(2,1);
		this.robot.armArmRMotor.get_limitMotor().setMotor(2,1);
		this.robot.legLegLMotor.get_limitMotor().setMotor(2,1);
		this.robot.legLegRMotor.get_limitMotor().setMotor(2,1);
		var _g1 = 0;
		var _g2 = burnIn;
		while(_g1 < _g2) {
			var i1 = _g1++;
			this.w.step(0.016666666666666666);
			this.w.step(0.016666666666666666);
		}
		this.robot.armArmLMotor.get_limitMotor().setMotor(0,0);
		this.robot.armArmRMotor.get_limitMotor().setMotor(0,0);
		this.robot.legLegLMotor.get_limitMotor().setMotor(0,0);
		this.robot.legLegRMotor.get_limitMotor().setMotor(0,0);
		var b1 = this.w._rigidBodyList;
		while(b1 != null) {
			var _this_x2 = -1 + Math.random() * 2;
			var _this_y2 = -1 + Math.random() * 2;
			var _this_z2 = -1 + Math.random() * 2;
			oimo_common_Vec3.numCreations++;
			var v_x3 = _this_x2 * 0.05;
			var v_y3 = _this_y2 * 0.05;
			var v_z3 = _this_z2 * 0.05;
			oimo_common_Vec3.numCreations++;
			if(b1._type == 1) {
				b1._velX = 0;
				b1._velY = 0;
				b1._velZ = 0;
			} else {
				b1._velX = v_x3;
				b1._velY = v_y3;
				b1._velZ = v_z3;
			}
			b1._sleeping = false;
			b1._sleepTime = 0;
			var _this_x3 = -1 + Math.random() * 2;
			var _this_y3 = -1 + Math.random() * 2;
			var _this_z3 = -1 + Math.random() * 2;
			oimo_common_Vec3.numCreations++;
			var v_x4 = _this_x3 * 0.05;
			var v_y4 = _this_y3 * 0.05;
			var v_z4 = _this_z3 * 0.05;
			oimo_common_Vec3.numCreations++;
			if(b1._type == 1) {
				b1._angVelX = 0;
				b1._angVelY = 0;
				b1._angVelZ = 0;
			} else {
				b1._angVelX = v_x4;
				b1._angVelY = v_y4;
				b1._angVelZ = v_z4;
			}
			b1._sleeping = false;
			b1._sleepTime = 0;
			b1 = b1._next;
		}
		this.w.step(0.016666666666666666);
		this.end = false;
		this.count = 0;
		var _g3 = [];
		var _g21 = 0;
		var _g11 = this.bodies.length * 6;
		while(_g21 < _g11) {
			var i2 = _g21++;
			_g3.push(0.0);
		}
		this.impulses = _g3;
		this.clearImpulses();
		return this.state();
	}
	,onContact: function(b1,b2) {
		if(b1 == this.ground || b2 == this.ground) {
			var other = b1 == this.ground ? b2 : b1;
			if(other != this.robot.lowerLegL && other != this.robot.lowerLegR) {
				this.end = true;
			}
		}
	}
	,step: function(action) {
		var _this = this.torso;
		var rot_e00 = 1;
		var rot_e01 = 0;
		var rot_e02 = 0;
		var rot_e10 = 0;
		var rot_e11 = 1;
		var rot_e12 = 0;
		var rot_e20 = 0;
		var rot_e21 = 0;
		var rot_e22 = 1;
		oimo_common_Mat3.numCreations++;
		rot_e00 = _this._transform._rotation00;
		rot_e01 = _this._transform._rotation01;
		rot_e02 = _this._transform._rotation02;
		rot_e10 = _this._transform._rotation10;
		rot_e11 = _this._transform._rotation11;
		rot_e12 = _this._transform._rotation12;
		rot_e20 = _this._transform._rotation20;
		rot_e21 = _this._transform._rotation21;
		rot_e22 = _this._transform._rotation22;
		var _this1 = this.torso;
		var v1_x = 0;
		var v1_y = 0;
		var v1_z = 0;
		oimo_common_Vec3.numCreations++;
		v1_x = _this1._transform._positionX;
		v1_y = _this1._transform._positionY;
		v1_z = _this1._transform._positionZ;
		var height = v1_y;
		var up1 = new oimo_common_Vec3(rot_e01,rot_e11,rot_e21).y;
		var _this2 = this.robot.lowerBody;
		var m1_e00 = 1;
		var m1_e01 = 0;
		var m1_e02 = 0;
		var m1_e10 = 0;
		var m1_e11 = 1;
		var m1_e12 = 0;
		var m1_e20 = 0;
		var m1_e21 = 0;
		var m1_e22 = 1;
		oimo_common_Mat3.numCreations++;
		m1_e00 = _this2._transform._rotation00;
		m1_e01 = _this2._transform._rotation01;
		m1_e02 = _this2._transform._rotation02;
		m1_e10 = _this2._transform._rotation10;
		m1_e11 = _this2._transform._rotation11;
		m1_e12 = _this2._transform._rotation12;
		m1_e20 = _this2._transform._rotation20;
		m1_e21 = _this2._transform._rotation21;
		m1_e22 = _this2._transform._rotation22;
		var up2 = new oimo_common_Vec3(m1_e01,m1_e11,m1_e21).y;
		if(up1 < 0.3 || up2 < 0.3 || height < 1.3) {
			this.end = true;
		}
		var i = 0;
		var controlCost = 0;
		var _g = 0;
		var _g1 = this.ams;
		while(_g < _g1.length) {
			var am = _g1[_g];
			++_g;
			var x = action[i];
			var signedTorque = (x < -1 ? -1 : x > 1 ? 1 : x) * _$RobotDDPGTest_Humanoid.MAX_TORQUE;
			var absTorque = signedTorque < 0 ? -signedTorque : signedTorque;
			var targetSpeed = signedTorque / _$RobotDDPGTest_Humanoid.MAX_TORQUE * _$RobotDDPGTest_Humanoid.MAX_SPEED;
			var outRatio = absTorque / _$RobotDDPGTest_Humanoid.MAX_TORQUE;
			var maxTorque = _$RobotDDPGTest_Humanoid.MAX_TORQUE * this.gears[i] * 0.1;
			var minTorque = _$RobotDDPGTest_Humanoid.MAX_TORQUE * this.damping[i] * 0.01;
			var interpolatedTorque = minTorque + outRatio * (maxTorque - minTorque);
			am.get_limitMotor().setMotor(targetSpeed,interpolatedTorque);
			controlCost += outRatio * outRatio;
			++i;
		}
		controlCost *= 0.1;
		var dt = 0.016666666666666666;
		var prevpos = this.cogZ();
		this.clearImpulses();
		var div = 1;
		var _g11 = 0;
		var _g2 = div;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.w.step(dt / div);
			this.accumulateImpulses();
		}
		this.scaleImpulses(1 / dt);
		var impulseCost = 0;
		var _g3 = 0;
		var _g12 = this.impulses;
		while(_g3 < _g12.length) {
			var impulse = _g12[_g3];
			++_g3;
			impulseCost += impulse * 0.1;
		}
		if(impulseCost > 3) {
			impulseCost = 3;
		}
		var postpos = this.cogZ();
		var aliveReward = 3.0;
		var heightReward = (height - 1.0) * 0.4;
		var velocityReward = 4.0 * (postpos - prevpos) / dt;
		var totalReward = aliveReward + velocityReward - controlCost - impulseCost;
		if(isNaN(totalReward)) {
			return { nextState : this.reset(), reward : 0, done : true};
		}
		return { nextState : this.state(), reward : this.end ? -50 : totalReward, done : this.end};
	}
	,cogZ: function() {
		var z = 0;
		var denom = 0;
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var v1_x = 0;
			var v1_y = 0;
			var v1_z = 0;
			oimo_common_Vec3.numCreations++;
			v1_x = b._transform._positionX;
			v1_y = b._transform._positionY;
			v1_z = b._transform._positionZ;
			z += v1_z * b._mass;
			denom += b._mass;
		}
		return z / denom;
	}
	,clearImpulses: function() {
		var _g1 = 0;
		var _g = this.impulses.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.impulses[i] = 0;
		}
	}
	,accumulateImpulses: function() {
		var i = 0;
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var li_x = 0;
			var li_y = 0;
			var li_z = 0;
			oimo_common_Vec3.numCreations++;
			li_x = b._linearContactImpulseX;
			li_y = b._linearContactImpulseY;
			li_z = b._linearContactImpulseZ;
			var ai_x = 0;
			var ai_y = 0;
			var ai_z = 0;
			oimo_common_Vec3.numCreations++;
			ai_x = b._angularContactImpulseX;
			ai_y = b._angularContactImpulseY;
			ai_z = b._angularContactImpulseZ;
			this.impulses[i++] += li_x;
			this.impulses[i++] += li_y;
			this.impulses[i++] += li_z;
			this.impulses[i++] += ai_x;
			this.impulses[i++] += ai_y;
			this.impulses[i++] += ai_z;
		}
	}
	,scaleImpulses: function(scale) {
		var _g1 = 0;
		var _g = this.impulses.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.impulses[i] *= scale;
		}
	}
	,state: function() {
		var state = [];
		var _this = this.torso;
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = _this._transform._positionX;
		v1.y = _this._transform._positionY;
		v1.z = _this._transform._positionZ;
		var torsoPos = v;
		state.push(torsoPos.y);
		state = state.concat(this.bodyVels(this.torso));
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b != this.torso) {
				state = state.concat(this.bodyPos(b,torsoPos));
				state = state.concat(this.bodyVels(b));
			}
		}
		var _g2 = 0;
		var _g11 = this.ams;
		while(_g2 < _g11.length) {
			var am = _g11[_g2];
			++_g2;
			state = state.concat(this.jointState(am));
		}
		state = state.concat(this.impulses);
		return state;
	}
	,bodyVels: function(b) {
		var lv_x = 0;
		var lv_y = 0;
		var lv_z = 0;
		oimo_common_Vec3.numCreations++;
		lv_x = b._velX;
		lv_y = b._velY;
		lv_z = b._velZ;
		var av_x = 0;
		var av_y = 0;
		var av_z = 0;
		oimo_common_Vec3.numCreations++;
		av_x = b._angVelX;
		av_y = b._angVelY;
		av_z = b._angVelZ;
		return [lv_x,lv_y,lv_z,av_x,av_y,av_z];
	}
	,bodyPos: function(b,basePos) {
		var q_x = 0;
		var q_y = 0;
		var q_z = 0;
		var q_w = 1;
		oimo_common_Quat.numCreations++;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = b._transform._rotation00;
		var e11 = b._transform._rotation11;
		var e22 = b._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (b._transform._rotation21 - b._transform._rotation12) * s;
			iqY = (b._transform._rotation02 - b._transform._rotation20) * s;
			iqZ = (b._transform._rotation10 - b._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (b._transform._rotation01 + b._transform._rotation10) * s;
				iqZ = (b._transform._rotation02 + b._transform._rotation20) * s;
				iqW = (b._transform._rotation21 - b._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (b._transform._rotation02 + b._transform._rotation20) * s;
				iqY = (b._transform._rotation12 + b._transform._rotation21) * s;
				iqW = (b._transform._rotation10 - b._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (b._transform._rotation01 + b._transform._rotation10) * s;
			iqZ = (b._transform._rotation12 + b._transform._rotation21) * s;
			iqW = (b._transform._rotation02 - b._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (b._transform._rotation02 + b._transform._rotation20) * s;
			iqY = (b._transform._rotation12 + b._transform._rotation21) * s;
			iqW = (b._transform._rotation10 - b._transform._rotation01) * s;
		}
		q_x = iqX;
		q_y = iqY;
		q_z = iqZ;
		q_w = iqW;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		oimo_common_Vec3.numCreations++;
		p_x = b._transform._positionX;
		p_y = b._transform._positionY;
		p_z = b._transform._positionZ;
		var tx = p_x - basePos.x;
		var ty = p_y - basePos.y;
		var tz = p_z - basePos.z;
		p_x = tx;
		p_y = ty;
		p_z = tz;
		return [p_x,p_y,p_z,q_x,q_y,q_z,q_w];
	}
	,jointState: function(am) {
		return [am.get_angularVelocity(),am.get_angle()];
	}
	,createRobot: function(x,y,z) {
		this.robot = new Robot();
		this.robot.init(this.w,x,y,z);
		this.bodies = [this.robot.upperBody,this.robot.lowerBody,this.robot.upperArmL,this.robot.lowerArmL,this.robot.upperLegL,this.robot.lowerLegL,this.robot.upperArmR,this.robot.lowerArmR,this.robot.upperLegR,this.robot.lowerLegR];
		this.ams = [this.robot.bodyLegLMotor1,this.robot.bodyLegLMotor2,this.robot.bodyLegRMotor1,this.robot.bodyLegRMotor2,this.robot.bodyArmLMotor1,this.robot.bodyArmLMotor2,this.robot.bodyArmRMotor1,this.robot.bodyArmRMotor2,this.robot.armArmLMotor,this.robot.armArmRMotor,this.robot.legLegLMotor,this.robot.legLegRMotor,this.robot.bodyBodyMotor];
		this.gears = [3.0,3.0,3.0,3.0,0.5,0.5,0.5,0.5,0.3,0.3,2.0,2.0,2.0];
		this.damping = [3.0,3.0,3.0,3.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,3.0];
		this.torso = this.robot.upperBody;
	}
	,box: function(x,y,z,w,h,d,wall) {
		var rc = new oimo_dynamics_rigidbody_RigidBodyConfig();
		rc.type = wall ? oimo_dynamics_rigidbody_RigidBodyType.STATIC : oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC;
		rc.position.init(x,y,z);
		var sc = new oimo_dynamics_rigidbody_ShapeConfig();
		sc.geometry = new oimo_collision_geometry_BoxGeometry(new oimo_common_Vec3(w,h,d));
		var rb = new oimo_dynamics_rigidbody_RigidBody(rc);
		rb.addShape(new oimo_dynamics_rigidbody_Shape(sc));
		this.w.addRigidBody(rb);
		return rb;
	}
	,draw: function() {
		this.w.debugDraw();
	}
};
var oimo_dynamics_common_DebugDraw = function() {
	this.p = new oimo_common_Pool();
	this.wireframe = false;
	this.drawShapes = true;
	this.drawBvh = false;
	this.drawBvhMinLevel = 0;
	this.drawBvhMaxLevel = 65536;
	this.drawAabbs = false;
	this.drawBases = false;
	this.drawPairs = false;
	this.drawContacts = false;
	this.drawJoints = true;
	this.drawJointLimits = false;
	var nt = 4;
	var dt = 3.14159265358979 / nt;
	var np = 8;
	var dp = 6.28318530717958 / np;
	var this1 = new Array(nt + 1);
	this.sphereCoords = this1;
	var this2 = new Array(nt + 1);
	this.tmpSphereVerts = this2;
	var this3 = new Array(nt + 1);
	this.tmpSphereNorms = this3;
	var _g1 = 0;
	var _g = nt + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var num = i == 0 || i == nt ? 1 : np;
		var this4 = this.sphereCoords;
		var this5 = new Array(num);
		this4[i] = this5;
		var this6 = this.tmpSphereVerts;
		var this7 = new Array(num);
		this6[i] = this7;
		var this8 = this.tmpSphereNorms;
		var this9 = new Array(num);
		this8[i] = this9;
		var _g3 = 0;
		var _g2 = np;
		while(_g3 < _g2) {
			var j = _g3++;
			var theta = i * dt;
			var phi = j * dp;
			this.sphereCoords[i][j] = new oimo_common_Vec3(Math.sin(theta) * Math.cos(phi),Math.cos(theta),-Math.sin(theta) * Math.sin(phi));
			this.tmpSphereVerts[i][j] = new oimo_common_Vec3();
			this.tmpSphereNorms[i][j] = new oimo_common_Vec3();
		}
	}
	var this10 = new Array(8);
	this.circleCoords = this10;
	var this11 = new Array(8);
	this.circleCoordsShift = this11;
	var this12 = new Array(8);
	this.tmpCircleVerts1 = this12;
	var this13 = new Array(8);
	this.tmpCircleVerts2 = this13;
	var this14 = new Array(8);
	this.tmpCircleNorms = this14;
	var td = 0.7853981633974475;
	var _g4 = 0;
	while(_g4 < 8) {
		var i1 = _g4++;
		this.circleCoords[i1] = new oimo_common_Vec3(Math.cos(i1 * td),0,-Math.sin(i1 * td));
		this.circleCoordsShift[i1] = new oimo_common_Vec3(Math.cos((i1 + 0.5) * td),0,-Math.sin((i1 + 0.5) * td));
		this.tmpCircleVerts1[i1] = new oimo_common_Vec3();
		this.tmpCircleVerts2[i1] = new oimo_common_Vec3();
		this.tmpCircleNorms[i1] = new oimo_common_Vec3();
	}
	this.style = new oimo_dynamics_common_DebugDrawStyle();
};
oimo_dynamics_common_DebugDraw.__name__ = true;
oimo_dynamics_common_DebugDraw.prototype = {
	polarCoord: function(origin,x,y,r,theta) {
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = origin.x;
		_this1.y = origin.y;
		_this1.z = origin.z;
		var _this2 = _this1;
		var s = r * Math.cos(theta);
		var tx = _this2.x + x.x * s;
		var ty = _this2.y + x.y * s;
		var tz = _this2.z + x.z * s;
		_this2.x = tx;
		_this2.y = ty;
		_this2.z = tz;
		var _this3 = _this2;
		var s1 = r * Math.sin(theta);
		var tx1 = _this3.x + y.x * s1;
		var ty1 = _this3.y + y.y * s1;
		var tz1 = _this3.z + y.z * s1;
		_this3.x = tx1;
		_this3.y = ty1;
		_this3.z = tz1;
		var v = _this3;
		return v;
	}
	,aabb: function(min,max,color) {
		var _this = this.p;
		var v1 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,min.y,min.z);
		var _this1 = this.p;
		var v2 = (_this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3]).init(min.x,min.y,max.z);
		var _this2 = this.p;
		var v3 = (_this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3]).init(min.x,max.y,min.z);
		var _this3 = this.p;
		var v4 = (_this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3]).init(min.x,max.y,max.z);
		var _this4 = this.p;
		var v5 = (_this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3]).init(max.x,min.y,min.z);
		var _this5 = this.p;
		var v6 = (_this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3]).init(max.x,min.y,max.z);
		var _this6 = this.p;
		var v7 = (_this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3]).init(max.x,max.y,min.z);
		var _this7 = this.p;
		var v8 = (_this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3]).init(max.x,max.y,max.z);
		this.line(v1,v2,color);
		this.line(v3,v4,color);
		this.line(v5,v6,color);
		this.line(v7,v8,color);
		this.line(v1,v3,color);
		this.line(v2,v4,color);
		this.line(v5,v7,color);
		this.line(v6,v8,color);
		this.line(v1,v5,color);
		this.line(v2,v6,color);
		this.line(v3,v7,color);
		this.line(v4,v8,color);
		var _this8 = this.p;
		if(v1 != null) {
			v1.zero();
			if(_this8.sizeVec3 == _this8.stackVec3.length) {
				var newLength = _this8.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g1 = 0;
				var _g = _this8.sizeVec3;
				while(_g1 < _g) {
					var i = _g1++;
					newArray[i] = _this8.stackVec3[i];
					_this8.stackVec3[i] = null;
				}
				_this8.stackVec3 = newArray;
			}
			_this8.stackVec3[_this8.sizeVec3++] = v1;
		}
		var _this9 = this.p;
		if(v2 != null) {
			v2.zero();
			if(_this9.sizeVec3 == _this9.stackVec3.length) {
				var newLength1 = _this9.sizeVec3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g11 = 0;
				var _g2 = _this9.sizeVec3;
				while(_g11 < _g2) {
					var i1 = _g11++;
					newArray1[i1] = _this9.stackVec3[i1];
					_this9.stackVec3[i1] = null;
				}
				_this9.stackVec3 = newArray1;
			}
			_this9.stackVec3[_this9.sizeVec3++] = v2;
		}
		var _this10 = this.p;
		if(v3 != null) {
			v3.zero();
			if(_this10.sizeVec3 == _this10.stackVec3.length) {
				var newLength2 = _this10.sizeVec3 << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g12 = 0;
				var _g3 = _this10.sizeVec3;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray2[i2] = _this10.stackVec3[i2];
					_this10.stackVec3[i2] = null;
				}
				_this10.stackVec3 = newArray2;
			}
			_this10.stackVec3[_this10.sizeVec3++] = v3;
		}
		var _this11 = this.p;
		if(v4 != null) {
			v4.zero();
			if(_this11.sizeVec3 == _this11.stackVec3.length) {
				var newLength3 = _this11.sizeVec3 << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g13 = 0;
				var _g4 = _this11.sizeVec3;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray3[i3] = _this11.stackVec3[i3];
					_this11.stackVec3[i3] = null;
				}
				_this11.stackVec3 = newArray3;
			}
			_this11.stackVec3[_this11.sizeVec3++] = v4;
		}
		var _this12 = this.p;
		if(v5 != null) {
			v5.zero();
			if(_this12.sizeVec3 == _this12.stackVec3.length) {
				var newLength4 = _this12.sizeVec3 << 1;
				var this5 = new Array(newLength4);
				var newArray4 = this5;
				var _g14 = 0;
				var _g5 = _this12.sizeVec3;
				while(_g14 < _g5) {
					var i4 = _g14++;
					newArray4[i4] = _this12.stackVec3[i4];
					_this12.stackVec3[i4] = null;
				}
				_this12.stackVec3 = newArray4;
			}
			_this12.stackVec3[_this12.sizeVec3++] = v5;
		}
		var _this13 = this.p;
		if(v6 != null) {
			v6.zero();
			if(_this13.sizeVec3 == _this13.stackVec3.length) {
				var newLength5 = _this13.sizeVec3 << 1;
				var this6 = new Array(newLength5);
				var newArray5 = this6;
				var _g15 = 0;
				var _g6 = _this13.sizeVec3;
				while(_g15 < _g6) {
					var i5 = _g15++;
					newArray5[i5] = _this13.stackVec3[i5];
					_this13.stackVec3[i5] = null;
				}
				_this13.stackVec3 = newArray5;
			}
			_this13.stackVec3[_this13.sizeVec3++] = v6;
		}
		var _this14 = this.p;
		if(v7 != null) {
			v7.zero();
			if(_this14.sizeVec3 == _this14.stackVec3.length) {
				var newLength6 = _this14.sizeVec3 << 1;
				var this7 = new Array(newLength6);
				var newArray6 = this7;
				var _g16 = 0;
				var _g7 = _this14.sizeVec3;
				while(_g16 < _g7) {
					var i6 = _g16++;
					newArray6[i6] = _this14.stackVec3[i6];
					_this14.stackVec3[i6] = null;
				}
				_this14.stackVec3 = newArray6;
			}
			_this14.stackVec3[_this14.sizeVec3++] = v7;
		}
		var _this15 = this.p;
		if(v8 != null) {
			v8.zero();
			if(_this15.sizeVec3 == _this15.stackVec3.length) {
				var newLength7 = _this15.sizeVec3 << 1;
				var this8 = new Array(newLength7);
				var newArray7 = this8;
				var _g17 = 0;
				var _g8 = _this15.sizeVec3;
				while(_g17 < _g8) {
					var i7 = _g17++;
					newArray7[i7] = _this15.stackVec3[i7];
					_this15.stackVec3[i7] = null;
				}
				_this15.stackVec3 = newArray7;
			}
			_this15.stackVec3[_this15.sizeVec3++] = v8;
		}
	}
	,basis: function(transform,length,colorX,colorY,colorZ) {
		var _this = this.p;
		var pos = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this.p;
		var rot = _this1.sizeMat3 == 0 ? new oimo_common_Mat3() : _this1.stackMat3[--_this1.sizeMat3];
		var _this2 = this.p;
		var ex = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		var _this3 = this.p;
		var ey = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		var _this4 = this.p;
		var ez = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
		var v = pos;
		v.x = transform._positionX;
		v.y = transform._positionY;
		v.z = transform._positionZ;
		var m = rot;
		m.e00 = transform._rotation00;
		m.e01 = transform._rotation01;
		m.e02 = transform._rotation02;
		m.e10 = transform._rotation10;
		m.e11 = transform._rotation11;
		m.e12 = transform._rotation12;
		m.e20 = transform._rotation20;
		m.e21 = transform._rotation21;
		m.e22 = transform._rotation22;
		ex.init(rot.e00,rot.e10,rot.e20);
		ey.init(rot.e01,rot.e11,rot.e21);
		ez.init(rot.e02,rot.e12,rot.e22);
		var tx = ex.x * length;
		var ty = ex.y * length;
		var tz = ex.z * length;
		ex.x = tx;
		ex.y = ty;
		ex.z = tz;
		var _this5 = ex;
		var tx1 = _this5.x + pos.x;
		var ty1 = _this5.y + pos.y;
		var tz1 = _this5.z + pos.z;
		_this5.x = tx1;
		_this5.y = ty1;
		_this5.z = tz1;
		var tx2 = ey.x * length;
		var ty2 = ey.y * length;
		var tz2 = ey.z * length;
		ey.x = tx2;
		ey.y = ty2;
		ey.z = tz2;
		var _this6 = ey;
		var tx3 = _this6.x + pos.x;
		var ty3 = _this6.y + pos.y;
		var tz3 = _this6.z + pos.z;
		_this6.x = tx3;
		_this6.y = ty3;
		_this6.z = tz3;
		var tx4 = ez.x * length;
		var ty4 = ez.y * length;
		var tz4 = ez.z * length;
		ez.x = tx4;
		ez.y = ty4;
		ez.z = tz4;
		var _this7 = ez;
		var tx5 = _this7.x + pos.x;
		var ty5 = _this7.y + pos.y;
		var tz5 = _this7.z + pos.z;
		_this7.x = tx5;
		_this7.y = ty5;
		_this7.z = tz5;
		this.line(pos,ex,colorX);
		this.line(pos,ey,colorY);
		this.line(pos,ez,colorZ);
		var _this8 = this.p;
		if(pos != null) {
			pos.zero();
			if(_this8.sizeVec3 == _this8.stackVec3.length) {
				var newLength = _this8.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g1 = 0;
				var _g = _this8.sizeVec3;
				while(_g1 < _g) {
					var i = _g1++;
					newArray[i] = _this8.stackVec3[i];
					_this8.stackVec3[i] = null;
				}
				_this8.stackVec3 = newArray;
			}
			_this8.stackVec3[_this8.sizeVec3++] = pos;
		}
		var _this9 = this.p;
		if(rot != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			rot.e00 = t00;
			rot.e01 = t01;
			rot.e02 = t02;
			rot.e10 = t10;
			rot.e11 = t11;
			rot.e12 = t12;
			rot.e20 = t20;
			rot.e21 = t21;
			rot.e22 = t22;
			if(_this9.sizeMat3 == _this9.stackMat3.length) {
				var newLength1 = _this9.sizeMat3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g11 = 0;
				var _g2 = _this9.sizeMat3;
				while(_g11 < _g2) {
					var i1 = _g11++;
					newArray1[i1] = _this9.stackMat3[i1];
					_this9.stackMat3[i1] = null;
				}
				_this9.stackMat3 = newArray1;
			}
			_this9.stackMat3[_this9.sizeMat3++] = rot;
		}
		var _this10 = this.p;
		if(ex != null) {
			ex.zero();
			if(_this10.sizeVec3 == _this10.stackVec3.length) {
				var newLength2 = _this10.sizeVec3 << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g12 = 0;
				var _g3 = _this10.sizeVec3;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray2[i2] = _this10.stackVec3[i2];
					_this10.stackVec3[i2] = null;
				}
				_this10.stackVec3 = newArray2;
			}
			_this10.stackVec3[_this10.sizeVec3++] = ex;
		}
		var _this11 = this.p;
		if(ey != null) {
			ey.zero();
			if(_this11.sizeVec3 == _this11.stackVec3.length) {
				var newLength3 = _this11.sizeVec3 << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g13 = 0;
				var _g4 = _this11.sizeVec3;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray3[i3] = _this11.stackVec3[i3];
					_this11.stackVec3[i3] = null;
				}
				_this11.stackVec3 = newArray3;
			}
			_this11.stackVec3[_this11.sizeVec3++] = ey;
		}
		var _this12 = this.p;
		if(ez != null) {
			ez.zero();
			if(_this12.sizeVec3 == _this12.stackVec3.length) {
				var newLength4 = _this12.sizeVec3 << 1;
				var this5 = new Array(newLength4);
				var newArray4 = this5;
				var _g14 = 0;
				var _g5 = _this12.sizeVec3;
				while(_g14 < _g5) {
					var i4 = _g14++;
					newArray4[i4] = _this12.stackVec3[i4];
					_this12.stackVec3[i4] = null;
				}
				_this12.stackVec3 = newArray4;
			}
			_this12.stackVec3[_this12.sizeVec3++] = ez;
		}
	}
	,ellipse: function(center,ex,ey,radiusX,radiusY,color) {
		this.arc(center,ex,ey,radiusX,radiusY,0,6.28318530717958,false,color);
	}
	,arc: function(center,ex,ey,radiusX,radiusY,startAngle,endAngle,drawSector,color) {
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = ex.x;
		_this1.y = ex.y;
		_this1.z = ex.z;
		var _this2 = _this1;
		var tx = _this2.x * radiusX;
		var ty = _this2.y * radiusX;
		var tz = _this2.z * radiusX;
		_this2.x = tx;
		_this2.y = ty;
		_this2.z = tz;
		ex = _this2;
		var _this3 = this.p;
		var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		_this4.x = ey.x;
		_this4.y = ey.y;
		_this4.z = ey.z;
		var _this5 = _this4;
		var tx1 = _this5.x * radiusY;
		var ty1 = _this5.y * radiusY;
		var tz1 = _this5.z * radiusY;
		_this5.x = tx1;
		_this5.y = ty1;
		_this5.z = tz1;
		ey = _this5;
		var step = 0.52359877559829837;
		var angDiff = endAngle - startAngle;
		if(angDiff < 0) {
			angDiff = -angDiff;
		}
		var n = angDiff / step + 0.5 | 0;
		if(n == 0) {
			n = 1;
		}
		var theta = startAngle;
		var dt = (endAngle - startAngle) / n;
		var _this6 = this.p;
		var _this7 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
		_this7.x = center.x;
		_this7.y = center.y;
		_this7.z = center.z;
		var _this8 = _this7;
		var s = Math.cos(theta);
		var tx2 = _this8.x + ex.x * s;
		var ty2 = _this8.y + ex.y * s;
		var tz2 = _this8.z + ex.z * s;
		_this8.x = tx2;
		_this8.y = ty2;
		_this8.z = tz2;
		var _this9 = _this8;
		var s1 = Math.sin(theta);
		var tx3 = _this9.x + ey.x * s1;
		var ty3 = _this9.y + ey.y * s1;
		var tz3 = _this9.z + ey.z * s1;
		_this9.x = tx3;
		_this9.y = ty3;
		_this9.z = tz3;
		var v = _this9;
		var prevV = v;
		if(drawSector) {
			this.line(center,prevV,color);
		}
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			theta += dt;
			var _this10 = this.p;
			var _this11 = _this10.sizeVec3 == 0 ? new oimo_common_Vec3() : _this10.stackVec3[--_this10.sizeVec3];
			_this11.x = center.x;
			_this11.y = center.y;
			_this11.z = center.z;
			var _this12 = _this11;
			var s2 = Math.cos(theta);
			var tx4 = _this12.x + ex.x * s2;
			var ty4 = _this12.y + ex.y * s2;
			var tz4 = _this12.z + ex.z * s2;
			_this12.x = tx4;
			_this12.y = ty4;
			_this12.z = tz4;
			var _this13 = _this12;
			var s3 = Math.sin(theta);
			var tx5 = _this13.x + ey.x * s3;
			var ty5 = _this13.y + ey.y * s3;
			var tz5 = _this13.z + ey.z * s3;
			_this13.x = tx5;
			_this13.y = ty5;
			_this13.z = tz5;
			var v1 = _this13;
			var v2 = v1;
			this.line(prevV,v2,color);
			var _this14 = this.p;
			if(prevV != null) {
				prevV.zero();
				if(_this14.sizeVec3 == _this14.stackVec3.length) {
					var newLength = _this14.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g11 = 0;
					var _g2 = _this14.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray[i1] = _this14.stackVec3[i1];
						_this14.stackVec3[i1] = null;
					}
					_this14.stackVec3 = newArray;
				}
				_this14.stackVec3[_this14.sizeVec3++] = prevV;
			}
			prevV = v2;
		}
		if(drawSector) {
			this.line(center,prevV,color);
		}
		var _this15 = this.p;
		if(prevV != null) {
			prevV.zero();
			if(_this15.sizeVec3 == _this15.stackVec3.length) {
				var newLength1 = _this15.sizeVec3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g12 = 0;
				var _g3 = _this15.sizeVec3;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray1[i2] = _this15.stackVec3[i2];
					_this15.stackVec3[i2] = null;
				}
				_this15.stackVec3 = newArray1;
			}
			_this15.stackVec3[_this15.sizeVec3++] = prevV;
		}
		var _this16 = this.p;
		if(ex != null) {
			ex.zero();
			if(_this16.sizeVec3 == _this16.stackVec3.length) {
				var newLength2 = _this16.sizeVec3 << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g13 = 0;
				var _g4 = _this16.sizeVec3;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray2[i3] = _this16.stackVec3[i3];
					_this16.stackVec3[i3] = null;
				}
				_this16.stackVec3 = newArray2;
			}
			_this16.stackVec3[_this16.sizeVec3++] = ex;
		}
		var _this17 = this.p;
		if(ey != null) {
			ey.zero();
			if(_this17.sizeVec3 == _this17.stackVec3.length) {
				var newLength3 = _this17.sizeVec3 << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g14 = 0;
				var _g5 = _this17.sizeVec3;
				while(_g14 < _g5) {
					var i4 = _g14++;
					newArray3[i4] = _this17.stackVec3[i4];
					_this17.stackVec3[i4] = null;
				}
				_this17.stackVec3 = newArray3;
			}
			_this17.stackVec3[_this17.sizeVec3++] = ey;
		}
	}
	,cone: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this.p;
		var ey = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		var _this2 = this.p;
		var ez = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		var _this3 = this.p;
		var o = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		var _this4 = this.p;
		var m = _this4.sizeMat3 == 0 ? new oimo_common_Mat3() : _this4.stackMat3[--_this4.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var _this5 = this.p;
		var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
		_this6.x = o.x;
		_this6.y = o.y;
		_this6.z = o.z;
		var _this7 = _this6;
		var tx = _this7.x + ey.x * halfHeight;
		var ty = _this7.y + ey.y * halfHeight;
		var tz = _this7.z + ey.z * halfHeight;
		_this7.x = tx;
		_this7.y = ty;
		_this7.z = tz;
		var top = _this7;
		var _this8 = this.p;
		var _this9 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
		_this9.x = o.x;
		_this9.y = o.y;
		_this9.z = o.z;
		var _this10 = _this9;
		var s = -halfHeight;
		var tx1 = _this10.x + ey.x * s;
		var ty1 = _this10.y + ey.y * s;
		var tz1 = _this10.z + ey.z * s;
		_this10.x = tx1;
		_this10.y = ty1;
		_this10.z = tz1;
		var bottom = _this10;
		if(this.wireframe) {
			var _this11 = this.p;
			var _this12 = _this11.sizeVec3 == 0 ? new oimo_common_Vec3() : _this11.stackVec3[--_this11.sizeVec3];
			_this12.x = bottom.x;
			_this12.y = bottom.y;
			_this12.z = bottom.z;
			var _this13 = _this12;
			var s1 = -radius;
			var tx2 = _this13.x + ex.x * s1;
			var ty2 = _this13.y + ex.y * s1;
			var tz2 = _this13.z + ex.z * s1;
			_this13.x = tx2;
			_this13.y = ty2;
			_this13.z = tz2;
			var _this14 = _this13;
			var tx3 = _this14.x + ez.x * 0;
			var ty3 = _this14.y + ez.y * 0;
			var tz3 = _this14.z + ez.z * 0;
			_this14.x = tx3;
			_this14.y = ty3;
			_this14.z = tz3;
			var bottom1 = _this14;
			var _this15 = this.p;
			var _this16 = _this15.sizeVec3 == 0 ? new oimo_common_Vec3() : _this15.stackVec3[--_this15.sizeVec3];
			_this16.x = bottom.x;
			_this16.y = bottom.y;
			_this16.z = bottom.z;
			var _this17 = _this16;
			var tx4 = _this17.x + ex.x * radius;
			var ty4 = _this17.y + ex.y * radius;
			var tz4 = _this17.z + ex.z * radius;
			_this17.x = tx4;
			_this17.y = ty4;
			_this17.z = tz4;
			var _this18 = _this17;
			var tx5 = _this18.x + ez.x * 0;
			var ty5 = _this18.y + ez.y * 0;
			var tz5 = _this18.z + ez.z * 0;
			_this18.x = tx5;
			_this18.y = ty5;
			_this18.z = tz5;
			var bottom2 = _this18;
			var _this19 = this.p;
			var _this20 = _this19.sizeVec3 == 0 ? new oimo_common_Vec3() : _this19.stackVec3[--_this19.sizeVec3];
			_this20.x = bottom.x;
			_this20.y = bottom.y;
			_this20.z = bottom.z;
			var _this21 = _this20;
			var tx6 = _this21.x + ex.x * 0;
			var ty6 = _this21.y + ex.y * 0;
			var tz6 = _this21.z + ex.z * 0;
			_this21.x = tx6;
			_this21.y = ty6;
			_this21.z = tz6;
			var _this22 = _this21;
			var s2 = -radius;
			var tx7 = _this22.x + ez.x * s2;
			var ty7 = _this22.y + ez.y * s2;
			var tz7 = _this22.z + ez.z * s2;
			_this22.x = tx7;
			_this22.y = ty7;
			_this22.z = tz7;
			var bottom3 = _this22;
			var _this23 = this.p;
			var _this24 = _this23.sizeVec3 == 0 ? new oimo_common_Vec3() : _this23.stackVec3[--_this23.sizeVec3];
			_this24.x = bottom.x;
			_this24.y = bottom.y;
			_this24.z = bottom.z;
			var _this25 = _this24;
			var tx8 = _this25.x + ex.x * 0;
			var ty8 = _this25.y + ex.y * 0;
			var tz8 = _this25.z + ex.z * 0;
			_this25.x = tx8;
			_this25.y = ty8;
			_this25.z = tz8;
			var _this26 = _this25;
			var tx9 = _this26.x + ez.x * radius;
			var ty9 = _this26.y + ez.y * radius;
			var tz9 = _this26.z + ez.z * radius;
			_this26.x = tx9;
			_this26.y = ty9;
			_this26.z = tz9;
			var bottom4 = _this26;
			this.ellipse(bottom,ex,ez,radius,radius,color);
			this.line(top,bottom1,color);
			this.line(top,bottom2,color);
			this.line(top,bottom3,color);
			this.line(top,bottom4,color);
			var _this27 = this.p;
			if(bottom1 != null) {
				bottom1.zero();
				if(_this27.sizeVec3 == _this27.stackVec3.length) {
					var newLength = _this27.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this27.sizeVec3;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this27.stackVec3[i];
						_this27.stackVec3[i] = null;
					}
					_this27.stackVec3 = newArray;
				}
				_this27.stackVec3[_this27.sizeVec3++] = bottom1;
			}
			var _this28 = this.p;
			if(bottom2 != null) {
				bottom2.zero();
				if(_this28.sizeVec3 == _this28.stackVec3.length) {
					var newLength1 = _this28.sizeVec3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g11 = 0;
					var _g2 = _this28.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray1[i1] = _this28.stackVec3[i1];
						_this28.stackVec3[i1] = null;
					}
					_this28.stackVec3 = newArray1;
				}
				_this28.stackVec3[_this28.sizeVec3++] = bottom2;
			}
			var _this29 = this.p;
			if(bottom3 != null) {
				bottom3.zero();
				if(_this29.sizeVec3 == _this29.stackVec3.length) {
					var newLength2 = _this29.sizeVec3 << 1;
					var this3 = new Array(newLength2);
					var newArray2 = this3;
					var _g12 = 0;
					var _g3 = _this29.sizeVec3;
					while(_g12 < _g3) {
						var i2 = _g12++;
						newArray2[i2] = _this29.stackVec3[i2];
						_this29.stackVec3[i2] = null;
					}
					_this29.stackVec3 = newArray2;
				}
				_this29.stackVec3[_this29.sizeVec3++] = bottom3;
			}
			var _this30 = this.p;
			if(bottom4 != null) {
				bottom4.zero();
				if(_this30.sizeVec3 == _this30.stackVec3.length) {
					var newLength3 = _this30.sizeVec3 << 1;
					var this4 = new Array(newLength3);
					var newArray3 = this4;
					var _g13 = 0;
					var _g4 = _this30.sizeVec3;
					while(_g13 < _g4) {
						var i3 = _g13++;
						newArray3[i3] = _this30.stackVec3[i3];
						_this30.stackVec3[i3] = null;
					}
					_this30.stackVec3 = newArray3;
				}
				_this30.stackVec3[_this30.sizeVec3++] = bottom4;
			}
		} else {
			var invDenom = 1 / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
			var cos = 2 * halfHeight * invDenom;
			var sin = radius * invDenom;
			var invDenom2 = 1 / Math.sqrt(2 * (1 + cos));
			var _g5 = 0;
			while(_g5 < 8) {
				var i4 = _g5++;
				var _this31 = this.tmpCircleNorms[i4];
				var v1 = this.circleCoords[i4];
				_this31.x = v1.x;
				_this31.y = v1.y;
				_this31.z = v1.z;
				var _this32 = _this31;
				var tx10 = _this32.x * cos;
				var ty10 = _this32.y * cos;
				var tz10 = _this32.z * cos;
				_this32.x = tx10;
				_this32.y = ty10;
				_this32.z = tz10;
				_this32.y += sin;
				var _this33 = this.tmpCircleNorms[i4];
				var tx11 = _this33.x * m.e00 + _this33.y * m.e01 + _this33.z * m.e02;
				var ty11 = _this33.x * m.e10 + _this33.y * m.e11 + _this33.z * m.e12;
				var tz11 = _this33.x * m.e20 + _this33.y * m.e21 + _this33.z * m.e22;
				_this33.x = tx11;
				_this33.y = ty11;
				_this33.z = tz11;
				var _this34 = this.tmpCircleVerts1[i4];
				var v2 = this.circleCoordsShift[i4];
				_this34.x = v2.x;
				_this34.y = v2.y;
				_this34.z = v2.z;
				var _this35 = _this34;
				var tx12 = _this35.x * cos;
				var ty12 = _this35.y * cos;
				var tz12 = _this35.z * cos;
				_this35.x = tx12;
				_this35.y = ty12;
				_this35.z = tz12;
				_this35.y += sin;
				var _this36 = this.tmpCircleVerts1[i4];
				var tx13 = _this36.x * m.e00 + _this36.y * m.e01 + _this36.z * m.e02;
				var ty13 = _this36.x * m.e10 + _this36.y * m.e11 + _this36.z * m.e12;
				var tz13 = _this36.x * m.e20 + _this36.y * m.e21 + _this36.z * m.e22;
				_this36.x = tx13;
				_this36.y = ty13;
				_this36.z = tz13;
				var _this37 = this.tmpCircleVerts2[i4];
				var v3 = this.circleCoords[i4];
				_this37.x = v3.x;
				_this37.y = v3.y;
				_this37.z = v3.z;
				var _this38 = _this37;
				var tx14 = _this38.x * m.e00 + _this38.y * m.e01 + _this38.z * m.e02;
				var ty14 = _this38.x * m.e10 + _this38.y * m.e11 + _this38.z * m.e12;
				var tz14 = _this38.x * m.e20 + _this38.y * m.e21 + _this38.z * m.e22;
				_this38.x = tx14;
				_this38.y = ty14;
				_this38.z = tz14;
				var _this39 = _this38;
				var tx15 = _this39.x * radius;
				var ty15 = _this39.y * radius;
				var tz15 = _this39.z * radius;
				_this39.x = tx15;
				_this39.y = ty15;
				_this39.z = tz15;
				var _this40 = _this39;
				var tx16 = _this40.x + o.x;
				var ty16 = _this40.y + o.y;
				var tz16 = _this40.z + o.z;
				_this40.x = tx16;
				_this40.y = ty16;
				_this40.z = tz16;
				var _this41 = this.tmpCircleVerts2[i4];
				var s3 = -halfHeight;
				var tx17 = _this41.x + ey.x * s3;
				var ty17 = _this41.y + ey.y * s3;
				var tz17 = _this41.z + ey.z * s3;
				_this41.x = tx17;
				_this41.y = ty17;
				_this41.z = tz17;
			}
			var _g6 = 0;
			while(_g6 < 8) {
				var i5 = _g6++;
				var v11 = top;
				var v21 = this.tmpCircleVerts2[i5];
				var v31 = this.tmpCircleVerts2[(i5 + 1) % 8];
				var n1 = this.tmpCircleVerts1[i5];
				var n2 = this.tmpCircleNorms[i5];
				var n3 = this.tmpCircleNorms[(i5 + 1) % 8];
				this.triangle(v11,v21,v31,n1,n2,n3,color);
				v11 = bottom;
				v21 = this.tmpCircleVerts2[(i5 + 1) % 8];
				v31 = this.tmpCircleVerts2[i5];
				var _this42 = this.p;
				var _this43 = _this42.sizeVec3 == 0 ? new oimo_common_Vec3() : _this42.stackVec3[--_this42.sizeVec3];
				_this43.x = ey.x;
				_this43.y = ey.y;
				_this43.z = ey.z;
				var _this44 = _this43;
				var tx18 = -_this44.x;
				var ty18 = -_this44.y;
				var tz18 = -_this44.z;
				_this44.x = tx18;
				_this44.y = ty18;
				_this44.z = tz18;
				n1 = _this44;
				this.triangle(v11,v21,v31,n1,n1,n1,color);
				var _this45 = this.p;
				if(n1 != null) {
					n1.zero();
					if(_this45.sizeVec3 == _this45.stackVec3.length) {
						var newLength4 = _this45.sizeVec3 << 1;
						var this5 = new Array(newLength4);
						var newArray4 = this5;
						var _g14 = 0;
						var _g7 = _this45.sizeVec3;
						while(_g14 < _g7) {
							var i6 = _g14++;
							newArray4[i6] = _this45.stackVec3[i6];
							_this45.stackVec3[i6] = null;
						}
						_this45.stackVec3 = newArray4;
					}
					_this45.stackVec3[_this45.sizeVec3++] = n1;
				}
			}
		}
		var _this46 = this.p;
		if(top != null) {
			top.zero();
			if(_this46.sizeVec3 == _this46.stackVec3.length) {
				var newLength5 = _this46.sizeVec3 << 1;
				var this6 = new Array(newLength5);
				var newArray5 = this6;
				var _g15 = 0;
				var _g8 = _this46.sizeVec3;
				while(_g15 < _g8) {
					var i7 = _g15++;
					newArray5[i7] = _this46.stackVec3[i7];
					_this46.stackVec3[i7] = null;
				}
				_this46.stackVec3 = newArray5;
			}
			_this46.stackVec3[_this46.sizeVec3++] = top;
		}
		var _this47 = this.p;
		if(bottom != null) {
			bottom.zero();
			if(_this47.sizeVec3 == _this47.stackVec3.length) {
				var newLength6 = _this47.sizeVec3 << 1;
				var this7 = new Array(newLength6);
				var newArray6 = this7;
				var _g16 = 0;
				var _g9 = _this47.sizeVec3;
				while(_g16 < _g9) {
					var i8 = _g16++;
					newArray6[i8] = _this47.stackVec3[i8];
					_this47.stackVec3[i8] = null;
				}
				_this47.stackVec3 = newArray6;
			}
			_this47.stackVec3[_this47.sizeVec3++] = bottom;
		}
		var _this48 = this.p;
		if(o != null) {
			o.zero();
			if(_this48.sizeVec3 == _this48.stackVec3.length) {
				var newLength7 = _this48.sizeVec3 << 1;
				var this8 = new Array(newLength7);
				var newArray7 = this8;
				var _g17 = 0;
				var _g10 = _this48.sizeVec3;
				while(_g17 < _g10) {
					var i9 = _g17++;
					newArray7[i9] = _this48.stackVec3[i9];
					_this48.stackVec3[i9] = null;
				}
				_this48.stackVec3 = newArray7;
			}
			_this48.stackVec3[_this48.sizeVec3++] = o;
		}
		var _this49 = this.p;
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this49.sizeMat3 == _this49.stackMat3.length) {
				var newLength8 = _this49.sizeMat3 << 1;
				var this9 = new Array(newLength8);
				var newArray8 = this9;
				var _g18 = 0;
				var _g19 = _this49.sizeMat3;
				while(_g18 < _g19) {
					var i10 = _g18++;
					newArray8[i10] = _this49.stackMat3[i10];
					_this49.stackMat3[i10] = null;
				}
				_this49.stackMat3 = newArray8;
			}
			_this49.stackMat3[_this49.sizeMat3++] = m;
		}
		var _this50 = this.p;
		if(ex != null) {
			ex.zero();
			if(_this50.sizeVec3 == _this50.stackVec3.length) {
				var newLength9 = _this50.sizeVec3 << 1;
				var this10 = new Array(newLength9);
				var newArray9 = this10;
				var _g110 = 0;
				var _g20 = _this50.sizeVec3;
				while(_g110 < _g20) {
					var i11 = _g110++;
					newArray9[i11] = _this50.stackVec3[i11];
					_this50.stackVec3[i11] = null;
				}
				_this50.stackVec3 = newArray9;
			}
			_this50.stackVec3[_this50.sizeVec3++] = ex;
		}
		var _this51 = this.p;
		if(ey != null) {
			ey.zero();
			if(_this51.sizeVec3 == _this51.stackVec3.length) {
				var newLength10 = _this51.sizeVec3 << 1;
				var this11 = new Array(newLength10);
				var newArray10 = this11;
				var _g111 = 0;
				var _g21 = _this51.sizeVec3;
				while(_g111 < _g21) {
					var i12 = _g111++;
					newArray10[i12] = _this51.stackVec3[i12];
					_this51.stackVec3[i12] = null;
				}
				_this51.stackVec3 = newArray10;
			}
			_this51.stackVec3[_this51.sizeVec3++] = ey;
		}
		var _this52 = this.p;
		if(ez != null) {
			ez.zero();
			if(_this52.sizeVec3 == _this52.stackVec3.length) {
				var newLength11 = _this52.sizeVec3 << 1;
				var this12 = new Array(newLength11);
				var newArray11 = this12;
				var _g112 = 0;
				var _g22 = _this52.sizeVec3;
				while(_g112 < _g22) {
					var i13 = _g112++;
					newArray11[i13] = _this52.stackVec3[i13];
					_this52.stackVec3[i13] = null;
				}
				_this52.stackVec3 = newArray11;
			}
			_this52.stackVec3[_this52.sizeVec3++] = ez;
		}
	}
	,cylinder: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this.p;
		var ey = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		var _this2 = this.p;
		var ez = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		var _this3 = this.p;
		var o = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		var _this4 = this.p;
		var m = _this4.sizeMat3 == 0 ? new oimo_common_Mat3() : _this4.stackMat3[--_this4.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var _this5 = this.p;
		var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
		_this6.x = o.x;
		_this6.y = o.y;
		_this6.z = o.z;
		var _this7 = _this6;
		var tx = _this7.x + ey.x * halfHeight;
		var ty = _this7.y + ey.y * halfHeight;
		var tz = _this7.z + ey.z * halfHeight;
		_this7.x = tx;
		_this7.y = ty;
		_this7.z = tz;
		var top = _this7;
		var _this8 = this.p;
		var _this9 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
		_this9.x = o.x;
		_this9.y = o.y;
		_this9.z = o.z;
		var _this10 = _this9;
		var s = -halfHeight;
		var tx1 = _this10.x + ey.x * s;
		var ty1 = _this10.y + ey.y * s;
		var tz1 = _this10.z + ey.z * s;
		_this10.x = tx1;
		_this10.y = ty1;
		_this10.z = tz1;
		var bottom = _this10;
		if(this.wireframe) {
			var _this11 = this.p;
			var _this12 = _this11.sizeVec3 == 0 ? new oimo_common_Vec3() : _this11.stackVec3[--_this11.sizeVec3];
			_this12.x = top.x;
			_this12.y = top.y;
			_this12.z = top.z;
			var _this13 = _this12;
			var s1 = -radius;
			var tx2 = _this13.x + ex.x * s1;
			var ty2 = _this13.y + ex.y * s1;
			var tz2 = _this13.z + ex.z * s1;
			_this13.x = tx2;
			_this13.y = ty2;
			_this13.z = tz2;
			var _this14 = _this13;
			var tx3 = _this14.x + ez.x * 0;
			var ty3 = _this14.y + ez.y * 0;
			var tz3 = _this14.z + ez.z * 0;
			_this14.x = tx3;
			_this14.y = ty3;
			_this14.z = tz3;
			var top1 = _this14;
			var _this15 = this.p;
			var _this16 = _this15.sizeVec3 == 0 ? new oimo_common_Vec3() : _this15.stackVec3[--_this15.sizeVec3];
			_this16.x = top.x;
			_this16.y = top.y;
			_this16.z = top.z;
			var _this17 = _this16;
			var tx4 = _this17.x + ex.x * radius;
			var ty4 = _this17.y + ex.y * radius;
			var tz4 = _this17.z + ex.z * radius;
			_this17.x = tx4;
			_this17.y = ty4;
			_this17.z = tz4;
			var _this18 = _this17;
			var tx5 = _this18.x + ez.x * 0;
			var ty5 = _this18.y + ez.y * 0;
			var tz5 = _this18.z + ez.z * 0;
			_this18.x = tx5;
			_this18.y = ty5;
			_this18.z = tz5;
			var top2 = _this18;
			var _this19 = this.p;
			var _this20 = _this19.sizeVec3 == 0 ? new oimo_common_Vec3() : _this19.stackVec3[--_this19.sizeVec3];
			_this20.x = top.x;
			_this20.y = top.y;
			_this20.z = top.z;
			var _this21 = _this20;
			var tx6 = _this21.x + ex.x * 0;
			var ty6 = _this21.y + ex.y * 0;
			var tz6 = _this21.z + ex.z * 0;
			_this21.x = tx6;
			_this21.y = ty6;
			_this21.z = tz6;
			var _this22 = _this21;
			var s2 = -radius;
			var tx7 = _this22.x + ez.x * s2;
			var ty7 = _this22.y + ez.y * s2;
			var tz7 = _this22.z + ez.z * s2;
			_this22.x = tx7;
			_this22.y = ty7;
			_this22.z = tz7;
			var top3 = _this22;
			var _this23 = this.p;
			var _this24 = _this23.sizeVec3 == 0 ? new oimo_common_Vec3() : _this23.stackVec3[--_this23.sizeVec3];
			_this24.x = top.x;
			_this24.y = top.y;
			_this24.z = top.z;
			var _this25 = _this24;
			var tx8 = _this25.x + ex.x * 0;
			var ty8 = _this25.y + ex.y * 0;
			var tz8 = _this25.z + ex.z * 0;
			_this25.x = tx8;
			_this25.y = ty8;
			_this25.z = tz8;
			var _this26 = _this25;
			var tx9 = _this26.x + ez.x * radius;
			var ty9 = _this26.y + ez.y * radius;
			var tz9 = _this26.z + ez.z * radius;
			_this26.x = tx9;
			_this26.y = ty9;
			_this26.z = tz9;
			var top4 = _this26;
			var _this27 = this.p;
			var _this28 = _this27.sizeVec3 == 0 ? new oimo_common_Vec3() : _this27.stackVec3[--_this27.sizeVec3];
			_this28.x = bottom.x;
			_this28.y = bottom.y;
			_this28.z = bottom.z;
			var _this29 = _this28;
			var s3 = -radius;
			var tx10 = _this29.x + ex.x * s3;
			var ty10 = _this29.y + ex.y * s3;
			var tz10 = _this29.z + ex.z * s3;
			_this29.x = tx10;
			_this29.y = ty10;
			_this29.z = tz10;
			var _this30 = _this29;
			var tx11 = _this30.x + ez.x * 0;
			var ty11 = _this30.y + ez.y * 0;
			var tz11 = _this30.z + ez.z * 0;
			_this30.x = tx11;
			_this30.y = ty11;
			_this30.z = tz11;
			var bottom1 = _this30;
			var _this31 = this.p;
			var _this32 = _this31.sizeVec3 == 0 ? new oimo_common_Vec3() : _this31.stackVec3[--_this31.sizeVec3];
			_this32.x = bottom.x;
			_this32.y = bottom.y;
			_this32.z = bottom.z;
			var _this33 = _this32;
			var tx12 = _this33.x + ex.x * radius;
			var ty12 = _this33.y + ex.y * radius;
			var tz12 = _this33.z + ex.z * radius;
			_this33.x = tx12;
			_this33.y = ty12;
			_this33.z = tz12;
			var _this34 = _this33;
			var tx13 = _this34.x + ez.x * 0;
			var ty13 = _this34.y + ez.y * 0;
			var tz13 = _this34.z + ez.z * 0;
			_this34.x = tx13;
			_this34.y = ty13;
			_this34.z = tz13;
			var bottom2 = _this34;
			var _this35 = this.p;
			var _this36 = _this35.sizeVec3 == 0 ? new oimo_common_Vec3() : _this35.stackVec3[--_this35.sizeVec3];
			_this36.x = bottom.x;
			_this36.y = bottom.y;
			_this36.z = bottom.z;
			var _this37 = _this36;
			var tx14 = _this37.x + ex.x * 0;
			var ty14 = _this37.y + ex.y * 0;
			var tz14 = _this37.z + ex.z * 0;
			_this37.x = tx14;
			_this37.y = ty14;
			_this37.z = tz14;
			var _this38 = _this37;
			var s4 = -radius;
			var tx15 = _this38.x + ez.x * s4;
			var ty15 = _this38.y + ez.y * s4;
			var tz15 = _this38.z + ez.z * s4;
			_this38.x = tx15;
			_this38.y = ty15;
			_this38.z = tz15;
			var bottom3 = _this38;
			var _this39 = this.p;
			var _this40 = _this39.sizeVec3 == 0 ? new oimo_common_Vec3() : _this39.stackVec3[--_this39.sizeVec3];
			_this40.x = bottom.x;
			_this40.y = bottom.y;
			_this40.z = bottom.z;
			var _this41 = _this40;
			var tx16 = _this41.x + ex.x * 0;
			var ty16 = _this41.y + ex.y * 0;
			var tz16 = _this41.z + ex.z * 0;
			_this41.x = tx16;
			_this41.y = ty16;
			_this41.z = tz16;
			var _this42 = _this41;
			var tx17 = _this42.x + ez.x * radius;
			var ty17 = _this42.y + ez.y * radius;
			var tz17 = _this42.z + ez.z * radius;
			_this42.x = tx17;
			_this42.y = ty17;
			_this42.z = tz17;
			var bottom4 = _this42;
			this.ellipse(top,ex,ez,radius,radius,color);
			this.ellipse(bottom,ex,ez,radius,radius,color);
			this.line(top1,bottom1,color);
			this.line(top2,bottom2,color);
			this.line(top3,bottom3,color);
			this.line(top4,bottom4,color);
			var _this43 = this.p;
			if(top1 != null) {
				top1.zero();
				if(_this43.sizeVec3 == _this43.stackVec3.length) {
					var newLength = _this43.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this43.sizeVec3;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this43.stackVec3[i];
						_this43.stackVec3[i] = null;
					}
					_this43.stackVec3 = newArray;
				}
				_this43.stackVec3[_this43.sizeVec3++] = top1;
			}
			var _this44 = this.p;
			if(top2 != null) {
				top2.zero();
				if(_this44.sizeVec3 == _this44.stackVec3.length) {
					var newLength1 = _this44.sizeVec3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g11 = 0;
					var _g2 = _this44.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray1[i1] = _this44.stackVec3[i1];
						_this44.stackVec3[i1] = null;
					}
					_this44.stackVec3 = newArray1;
				}
				_this44.stackVec3[_this44.sizeVec3++] = top2;
			}
			var _this45 = this.p;
			if(top3 != null) {
				top3.zero();
				if(_this45.sizeVec3 == _this45.stackVec3.length) {
					var newLength2 = _this45.sizeVec3 << 1;
					var this3 = new Array(newLength2);
					var newArray2 = this3;
					var _g12 = 0;
					var _g3 = _this45.sizeVec3;
					while(_g12 < _g3) {
						var i2 = _g12++;
						newArray2[i2] = _this45.stackVec3[i2];
						_this45.stackVec3[i2] = null;
					}
					_this45.stackVec3 = newArray2;
				}
				_this45.stackVec3[_this45.sizeVec3++] = top3;
			}
			var _this46 = this.p;
			if(top4 != null) {
				top4.zero();
				if(_this46.sizeVec3 == _this46.stackVec3.length) {
					var newLength3 = _this46.sizeVec3 << 1;
					var this4 = new Array(newLength3);
					var newArray3 = this4;
					var _g13 = 0;
					var _g4 = _this46.sizeVec3;
					while(_g13 < _g4) {
						var i3 = _g13++;
						newArray3[i3] = _this46.stackVec3[i3];
						_this46.stackVec3[i3] = null;
					}
					_this46.stackVec3 = newArray3;
				}
				_this46.stackVec3[_this46.sizeVec3++] = top4;
			}
			var _this47 = this.p;
			if(bottom1 != null) {
				bottom1.zero();
				if(_this47.sizeVec3 == _this47.stackVec3.length) {
					var newLength4 = _this47.sizeVec3 << 1;
					var this5 = new Array(newLength4);
					var newArray4 = this5;
					var _g14 = 0;
					var _g5 = _this47.sizeVec3;
					while(_g14 < _g5) {
						var i4 = _g14++;
						newArray4[i4] = _this47.stackVec3[i4];
						_this47.stackVec3[i4] = null;
					}
					_this47.stackVec3 = newArray4;
				}
				_this47.stackVec3[_this47.sizeVec3++] = bottom1;
			}
			var _this48 = this.p;
			if(bottom2 != null) {
				bottom2.zero();
				if(_this48.sizeVec3 == _this48.stackVec3.length) {
					var newLength5 = _this48.sizeVec3 << 1;
					var this6 = new Array(newLength5);
					var newArray5 = this6;
					var _g15 = 0;
					var _g6 = _this48.sizeVec3;
					while(_g15 < _g6) {
						var i5 = _g15++;
						newArray5[i5] = _this48.stackVec3[i5];
						_this48.stackVec3[i5] = null;
					}
					_this48.stackVec3 = newArray5;
				}
				_this48.stackVec3[_this48.sizeVec3++] = bottom2;
			}
			var _this49 = this.p;
			if(bottom3 != null) {
				bottom3.zero();
				if(_this49.sizeVec3 == _this49.stackVec3.length) {
					var newLength6 = _this49.sizeVec3 << 1;
					var this7 = new Array(newLength6);
					var newArray6 = this7;
					var _g16 = 0;
					var _g7 = _this49.sizeVec3;
					while(_g16 < _g7) {
						var i6 = _g16++;
						newArray6[i6] = _this49.stackVec3[i6];
						_this49.stackVec3[i6] = null;
					}
					_this49.stackVec3 = newArray6;
				}
				_this49.stackVec3[_this49.sizeVec3++] = bottom3;
			}
			var _this50 = this.p;
			if(bottom4 != null) {
				bottom4.zero();
				if(_this50.sizeVec3 == _this50.stackVec3.length) {
					var newLength7 = _this50.sizeVec3 << 1;
					var this8 = new Array(newLength7);
					var newArray7 = this8;
					var _g17 = 0;
					var _g8 = _this50.sizeVec3;
					while(_g17 < _g8) {
						var i7 = _g17++;
						newArray7[i7] = _this50.stackVec3[i7];
						_this50.stackVec3[i7] = null;
					}
					_this50.stackVec3 = newArray7;
				}
				_this50.stackVec3[_this50.sizeVec3++] = bottom4;
			}
		} else {
			var _g9 = 0;
			while(_g9 < 8) {
				var i8 = _g9++;
				var _this51 = this.tmpCircleNorms[i8];
				var v1 = this.circleCoords[i8];
				_this51.x = v1.x;
				_this51.y = v1.y;
				_this51.z = v1.z;
				var _this52 = _this51;
				var tx18 = _this52.x * m.e00 + _this52.y * m.e01 + _this52.z * m.e02;
				var ty18 = _this52.x * m.e10 + _this52.y * m.e11 + _this52.z * m.e12;
				var tz18 = _this52.x * m.e20 + _this52.y * m.e21 + _this52.z * m.e22;
				_this52.x = tx18;
				_this52.y = ty18;
				_this52.z = tz18;
				var _this53 = this.tmpCircleVerts1[i8];
				var v2 = this.tmpCircleNorms[i8];
				_this53.x = v2.x;
				_this53.y = v2.y;
				_this53.z = v2.z;
				var _this54 = _this53;
				var tx19 = _this54.x * radius;
				var ty19 = _this54.y * radius;
				var tz19 = _this54.z * radius;
				_this54.x = tx19;
				_this54.y = ty19;
				_this54.z = tz19;
				var _this55 = _this54;
				var tx20 = _this55.x + o.x;
				var ty20 = _this55.y + o.y;
				var tz20 = _this55.z + o.z;
				_this55.x = tx20;
				_this55.y = ty20;
				_this55.z = tz20;
				var _this56 = this.tmpCircleVerts2[i8];
				var v3 = this.tmpCircleVerts1[i8];
				_this56.x = v3.x;
				_this56.y = v3.y;
				_this56.z = v3.z;
				var _this57 = this.tmpCircleVerts1[i8];
				var tx21 = _this57.x + ey.x * halfHeight;
				var ty21 = _this57.y + ey.y * halfHeight;
				var tz21 = _this57.z + ey.z * halfHeight;
				_this57.x = tx21;
				_this57.y = ty21;
				_this57.z = tz21;
				var _this58 = this.tmpCircleVerts2[i8];
				var s5 = -halfHeight;
				var tx22 = _this58.x + ey.x * s5;
				var ty22 = _this58.y + ey.y * s5;
				var tz22 = _this58.z + ey.z * s5;
				_this58.x = tx22;
				_this58.y = ty22;
				_this58.z = tz22;
			}
			var _g10 = 0;
			while(_g10 < 8) {
				var i9 = _g10++;
				var n3;
				var n4;
				var v11 = top;
				var v21 = this.tmpCircleVerts1[i9];
				var v31 = this.tmpCircleVerts1[(i9 + 1) % 8];
				var n1 = ey;
				this.triangle(v11,v21,v31,n1,n1,n1,color);
				v11 = bottom;
				v21 = this.tmpCircleVerts2[(i9 + 1) % 8];
				v31 = this.tmpCircleVerts2[i9];
				var _this59 = this.p;
				var _this60 = _this59.sizeVec3 == 0 ? new oimo_common_Vec3() : _this59.stackVec3[--_this59.sizeVec3];
				_this60.x = ey.x;
				_this60.y = ey.y;
				_this60.z = ey.z;
				var _this61 = _this60;
				var tx23 = -_this61.x;
				var ty23 = -_this61.y;
				var tz23 = -_this61.z;
				_this61.x = tx23;
				_this61.y = ty23;
				_this61.z = tz23;
				n1 = _this61;
				this.triangle(v11,v21,v31,n1,n1,n1,color);
				var _this62 = this.p;
				if(n1 != null) {
					n1.zero();
					if(_this62.sizeVec3 == _this62.stackVec3.length) {
						var newLength8 = _this62.sizeVec3 << 1;
						var this9 = new Array(newLength8);
						var newArray8 = this9;
						var _g18 = 0;
						var _g19 = _this62.sizeVec3;
						while(_g18 < _g19) {
							var i10 = _g18++;
							newArray8[i10] = _this62.stackVec3[i10];
							_this62.stackVec3[i10] = null;
						}
						_this62.stackVec3 = newArray8;
					}
					_this62.stackVec3[_this62.sizeVec3++] = n1;
				}
				v11 = this.tmpCircleVerts1[i9];
				v21 = this.tmpCircleVerts2[i9];
				v31 = this.tmpCircleVerts2[(i9 + 1) % 8];
				var v4 = this.tmpCircleVerts1[(i9 + 1) % 8];
				n1 = this.tmpCircleNorms[i9];
				var n2 = this.tmpCircleNorms[(i9 + 1) % 8];
				this.rect(v11,v21,v31,v4,n1,n1,n2,n2,color);
			}
		}
		var _this63 = this.p;
		if(top != null) {
			top.zero();
			if(_this63.sizeVec3 == _this63.stackVec3.length) {
				var newLength9 = _this63.sizeVec3 << 1;
				var this10 = new Array(newLength9);
				var newArray9 = this10;
				var _g110 = 0;
				var _g20 = _this63.sizeVec3;
				while(_g110 < _g20) {
					var i11 = _g110++;
					newArray9[i11] = _this63.stackVec3[i11];
					_this63.stackVec3[i11] = null;
				}
				_this63.stackVec3 = newArray9;
			}
			_this63.stackVec3[_this63.sizeVec3++] = top;
		}
		var _this64 = this.p;
		if(bottom != null) {
			bottom.zero();
			if(_this64.sizeVec3 == _this64.stackVec3.length) {
				var newLength10 = _this64.sizeVec3 << 1;
				var this11 = new Array(newLength10);
				var newArray10 = this11;
				var _g111 = 0;
				var _g21 = _this64.sizeVec3;
				while(_g111 < _g21) {
					var i12 = _g111++;
					newArray10[i12] = _this64.stackVec3[i12];
					_this64.stackVec3[i12] = null;
				}
				_this64.stackVec3 = newArray10;
			}
			_this64.stackVec3[_this64.sizeVec3++] = bottom;
		}
		var _this65 = this.p;
		if(o != null) {
			o.zero();
			if(_this65.sizeVec3 == _this65.stackVec3.length) {
				var newLength11 = _this65.sizeVec3 << 1;
				var this12 = new Array(newLength11);
				var newArray11 = this12;
				var _g112 = 0;
				var _g22 = _this65.sizeVec3;
				while(_g112 < _g22) {
					var i13 = _g112++;
					newArray11[i13] = _this65.stackVec3[i13];
					_this65.stackVec3[i13] = null;
				}
				_this65.stackVec3 = newArray11;
			}
			_this65.stackVec3[_this65.sizeVec3++] = o;
		}
		var _this66 = this.p;
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this66.sizeMat3 == _this66.stackMat3.length) {
				var newLength12 = _this66.sizeMat3 << 1;
				var this13 = new Array(newLength12);
				var newArray12 = this13;
				var _g113 = 0;
				var _g23 = _this66.sizeMat3;
				while(_g113 < _g23) {
					var i14 = _g113++;
					newArray12[i14] = _this66.stackMat3[i14];
					_this66.stackMat3[i14] = null;
				}
				_this66.stackMat3 = newArray12;
			}
			_this66.stackMat3[_this66.sizeMat3++] = m;
		}
		var _this67 = this.p;
		if(ex != null) {
			ex.zero();
			if(_this67.sizeVec3 == _this67.stackVec3.length) {
				var newLength13 = _this67.sizeVec3 << 1;
				var this14 = new Array(newLength13);
				var newArray13 = this14;
				var _g114 = 0;
				var _g24 = _this67.sizeVec3;
				while(_g114 < _g24) {
					var i15 = _g114++;
					newArray13[i15] = _this67.stackVec3[i15];
					_this67.stackVec3[i15] = null;
				}
				_this67.stackVec3 = newArray13;
			}
			_this67.stackVec3[_this67.sizeVec3++] = ex;
		}
		var _this68 = this.p;
		if(ey != null) {
			ey.zero();
			if(_this68.sizeVec3 == _this68.stackVec3.length) {
				var newLength14 = _this68.sizeVec3 << 1;
				var this15 = new Array(newLength14);
				var newArray14 = this15;
				var _g115 = 0;
				var _g25 = _this68.sizeVec3;
				while(_g115 < _g25) {
					var i16 = _g115++;
					newArray14[i16] = _this68.stackVec3[i16];
					_this68.stackVec3[i16] = null;
				}
				_this68.stackVec3 = newArray14;
			}
			_this68.stackVec3[_this68.sizeVec3++] = ey;
		}
		var _this69 = this.p;
		if(ez != null) {
			ez.zero();
			if(_this69.sizeVec3 == _this69.stackVec3.length) {
				var newLength15 = _this69.sizeVec3 << 1;
				var this16 = new Array(newLength15);
				var newArray15 = this16;
				var _g116 = 0;
				var _g26 = _this69.sizeVec3;
				while(_g116 < _g26) {
					var i17 = _g116++;
					newArray15[i17] = _this69.stackVec3[i17];
					_this69.stackVec3[i17] = null;
				}
				_this69.stackVec3 = newArray15;
			}
			_this69.stackVec3[_this69.sizeVec3++] = ez;
		}
	}
	,capsule: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this.p;
		var ey = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		var _this2 = this.p;
		var ez = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		var _this3 = this.p;
		var o = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		var _this4 = this.p;
		var m = _this4.sizeMat3 == 0 ? new oimo_common_Mat3() : _this4.stackMat3[--_this4.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var nt = 4;
		var np = 8;
		var vs = this.tmpSphereVerts;
		var ns = this.tmpSphereNorms;
		var _g1 = 0;
		var _g = nt + 1;
		while(_g1 < _g) {
			var i2 = _g1++;
			var n = this.tmpSphereVerts[i2].length;
			var _g3 = 0;
			var _g2 = n;
			while(_g3 < _g2) {
				var j2 = _g3++;
				var _this5 = ns[i2][j2];
				var v1 = this.sphereCoords[i2][j2];
				_this5.x = v1.x;
				_this5.y = v1.y;
				_this5.z = v1.z;
				var _this6 = _this5;
				var tx = _this6.x * m.e00 + _this6.y * m.e01 + _this6.z * m.e02;
				var ty = _this6.x * m.e10 + _this6.y * m.e11 + _this6.z * m.e12;
				var tz = _this6.x * m.e20 + _this6.y * m.e21 + _this6.z * m.e22;
				_this6.x = tx;
				_this6.y = ty;
				_this6.z = tz;
			}
		}
		var _g11 = 0;
		var _g4 = nt;
		while(_g11 < _g4) {
			var i = _g11++;
			if(i == 0) {
				var half = nt >> 1;
				var _g31 = 0;
				var _g21 = half + 1;
				while(_g31 < _g21) {
					var i21 = _g31++;
					var n1 = this.tmpSphereVerts[i21].length;
					var _g5 = 0;
					var _g41 = n1;
					while(_g5 < _g41) {
						var j21 = _g5++;
						var _this7 = vs[i21][j21];
						var v2 = ns[i21][j21];
						_this7.x = v2.x;
						_this7.y = v2.y;
						_this7.z = v2.z;
						var _this8 = _this7;
						var tx1 = _this8.x * radius;
						var ty1 = _this8.y * radius;
						var tz1 = _this8.z * radius;
						_this8.x = tx1;
						_this8.y = ty1;
						_this8.z = tz1;
						var _this9 = _this8;
						var tx2 = _this9.x + o.x;
						var ty2 = _this9.y + o.y;
						var tz2 = _this9.z + o.z;
						_this9.x = tx2;
						_this9.y = ty2;
						_this9.z = tz2;
						var _this10 = _this9;
						var tx3 = _this10.x + ey.x * halfHeight;
						var ty3 = _this10.y + ey.y * halfHeight;
						var tz3 = _this10.z + ey.z * halfHeight;
						_this10.x = tx3;
						_this10.y = ty3;
						_this10.z = tz3;
					}
				}
			}
			if(i == nt >> 1) {
				var half1 = nt >> 1;
				var _g32 = half1;
				var _g22 = nt + 1;
				while(_g32 < _g22) {
					var i22 = _g32++;
					var n2 = this.tmpSphereVerts[i22].length;
					var _g51 = 0;
					var _g42 = n2;
					while(_g51 < _g42) {
						var j22 = _g51++;
						var _this11 = vs[i22][j22];
						var v3 = ns[i22][j22];
						_this11.x = v3.x;
						_this11.y = v3.y;
						_this11.z = v3.z;
						var _this12 = _this11;
						var tx4 = _this12.x * radius;
						var ty4 = _this12.y * radius;
						var tz4 = _this12.z * radius;
						_this12.x = tx4;
						_this12.y = ty4;
						_this12.z = tz4;
						var _this13 = _this12;
						var tx5 = _this13.x + o.x;
						var ty5 = _this13.y + o.y;
						var tz5 = _this13.z + o.z;
						_this13.x = tx5;
						_this13.y = ty5;
						_this13.z = tz5;
						var _this14 = _this13;
						var s = -halfHeight;
						var tx6 = _this14.x + ey.x * s;
						var ty6 = _this14.y + ey.y * s;
						var tz6 = _this14.z + ey.z * s;
						_this14.x = tx6;
						_this14.y = ty6;
						_this14.z = tz6;
					}
				}
			}
			var _g33 = 0;
			var _g23 = np;
			while(_g33 < _g23) {
				var j = _g33++;
				var v11;
				var v21;
				var v31;
				var v4;
				var n11;
				var n21;
				var n3;
				var n4;
				if(i == 0) {
					if(this.wireframe) {
						v11 = vs[0][0];
						v21 = vs[1][j];
						this.line(v11,v21,color);
					} else {
						v11 = vs[0][0];
						v21 = vs[1][j];
						v31 = vs[1][(j + 1) % np];
						n11 = ns[0][0];
						n21 = ns[1][j];
						n3 = ns[1][(j + 1) % np];
						this.triangle(v11,v21,v31,n11,n21,n3,color);
					}
				} else if(i == nt - 1) {
					if(this.wireframe) {
						v11 = vs[nt][0];
						v21 = vs[i][(j + 1) % np];
						v31 = vs[i][j];
						this.line(v11,v21,color);
						this.line(v21,v31,color);
					} else {
						v11 = vs[nt][0];
						v21 = vs[i][(j + 1) % np];
						v31 = vs[i][j];
						n11 = ns[nt][0];
						n21 = ns[i][(j + 1) % np];
						n3 = ns[i][j];
						this.triangle(v11,v21,v31,n11,n21,n3,color);
					}
				} else if(this.wireframe) {
					v11 = vs[i][j];
					v21 = vs[i][(j + 1) % np];
					v31 = vs[i + 1][j];
					this.line(v11,v21,color);
					this.line(v11,v31,color);
				} else {
					v11 = vs[i][j];
					v21 = vs[i][(j + 1) % np];
					v31 = vs[i + 1][j];
					v4 = vs[i + 1][(j + 1) % np];
					n11 = ns[i][j];
					n21 = ns[i][(j + 1) % np];
					n3 = ns[i + 1][j];
					n4 = ns[i + 1][(j + 1) % np];
					this.rect(v11,v31,v4,v21,n11,n3,n4,n21,color);
				}
			}
		}
		var _this15 = this.p;
		var _this16 = _this15.sizeVec3 == 0 ? new oimo_common_Vec3() : _this15.stackVec3[--_this15.sizeVec3];
		_this16.x = o.x;
		_this16.y = o.y;
		_this16.z = o.z;
		var _this17 = _this16;
		var tx7 = _this17.x + ey.x * halfHeight;
		var ty7 = _this17.y + ey.y * halfHeight;
		var tz7 = _this17.z + ey.z * halfHeight;
		_this17.x = tx7;
		_this17.y = ty7;
		_this17.z = tz7;
		var top = _this17;
		var _this18 = this.p;
		var _this19 = _this18.sizeVec3 == 0 ? new oimo_common_Vec3() : _this18.stackVec3[--_this18.sizeVec3];
		_this19.x = o.x;
		_this19.y = o.y;
		_this19.z = o.z;
		var _this20 = _this19;
		var s1 = -halfHeight;
		var tx8 = _this20.x + ey.x * s1;
		var ty8 = _this20.y + ey.y * s1;
		var tz8 = _this20.z + ey.z * s1;
		_this20.x = tx8;
		_this20.y = ty8;
		_this20.z = tz8;
		var bottom = _this20;
		if(this.wireframe) {
			var _this21 = this.p;
			var _this22 = _this21.sizeVec3 == 0 ? new oimo_common_Vec3() : _this21.stackVec3[--_this21.sizeVec3];
			_this22.x = top.x;
			_this22.y = top.y;
			_this22.z = top.z;
			var _this23 = _this22;
			var s2 = -radius;
			var tx9 = _this23.x + ex.x * s2;
			var ty9 = _this23.y + ex.y * s2;
			var tz9 = _this23.z + ex.z * s2;
			_this23.x = tx9;
			_this23.y = ty9;
			_this23.z = tz9;
			var _this24 = _this23;
			var tx10 = _this24.x + ez.x * 0;
			var ty10 = _this24.y + ez.y * 0;
			var tz10 = _this24.z + ez.z * 0;
			_this24.x = tx10;
			_this24.y = ty10;
			_this24.z = tz10;
			var top1 = _this24;
			var _this25 = this.p;
			var _this26 = _this25.sizeVec3 == 0 ? new oimo_common_Vec3() : _this25.stackVec3[--_this25.sizeVec3];
			_this26.x = top.x;
			_this26.y = top.y;
			_this26.z = top.z;
			var _this27 = _this26;
			var tx11 = _this27.x + ex.x * radius;
			var ty11 = _this27.y + ex.y * radius;
			var tz11 = _this27.z + ex.z * radius;
			_this27.x = tx11;
			_this27.y = ty11;
			_this27.z = tz11;
			var _this28 = _this27;
			var tx12 = _this28.x + ez.x * 0;
			var ty12 = _this28.y + ez.y * 0;
			var tz12 = _this28.z + ez.z * 0;
			_this28.x = tx12;
			_this28.y = ty12;
			_this28.z = tz12;
			var top2 = _this28;
			var _this29 = this.p;
			var _this30 = _this29.sizeVec3 == 0 ? new oimo_common_Vec3() : _this29.stackVec3[--_this29.sizeVec3];
			_this30.x = top.x;
			_this30.y = top.y;
			_this30.z = top.z;
			var _this31 = _this30;
			var tx13 = _this31.x + ex.x * 0;
			var ty13 = _this31.y + ex.y * 0;
			var tz13 = _this31.z + ex.z * 0;
			_this31.x = tx13;
			_this31.y = ty13;
			_this31.z = tz13;
			var _this32 = _this31;
			var s3 = -radius;
			var tx14 = _this32.x + ez.x * s3;
			var ty14 = _this32.y + ez.y * s3;
			var tz14 = _this32.z + ez.z * s3;
			_this32.x = tx14;
			_this32.y = ty14;
			_this32.z = tz14;
			var top3 = _this32;
			var _this33 = this.p;
			var _this34 = _this33.sizeVec3 == 0 ? new oimo_common_Vec3() : _this33.stackVec3[--_this33.sizeVec3];
			_this34.x = top.x;
			_this34.y = top.y;
			_this34.z = top.z;
			var _this35 = _this34;
			var tx15 = _this35.x + ex.x * 0;
			var ty15 = _this35.y + ex.y * 0;
			var tz15 = _this35.z + ex.z * 0;
			_this35.x = tx15;
			_this35.y = ty15;
			_this35.z = tz15;
			var _this36 = _this35;
			var tx16 = _this36.x + ez.x * radius;
			var ty16 = _this36.y + ez.y * radius;
			var tz16 = _this36.z + ez.z * radius;
			_this36.x = tx16;
			_this36.y = ty16;
			_this36.z = tz16;
			var top4 = _this36;
			var _this37 = this.p;
			var _this38 = _this37.sizeVec3 == 0 ? new oimo_common_Vec3() : _this37.stackVec3[--_this37.sizeVec3];
			_this38.x = bottom.x;
			_this38.y = bottom.y;
			_this38.z = bottom.z;
			var _this39 = _this38;
			var s4 = -radius;
			var tx17 = _this39.x + ex.x * s4;
			var ty17 = _this39.y + ex.y * s4;
			var tz17 = _this39.z + ex.z * s4;
			_this39.x = tx17;
			_this39.y = ty17;
			_this39.z = tz17;
			var _this40 = _this39;
			var tx18 = _this40.x + ez.x * 0;
			var ty18 = _this40.y + ez.y * 0;
			var tz18 = _this40.z + ez.z * 0;
			_this40.x = tx18;
			_this40.y = ty18;
			_this40.z = tz18;
			var bottom1 = _this40;
			var _this41 = this.p;
			var _this42 = _this41.sizeVec3 == 0 ? new oimo_common_Vec3() : _this41.stackVec3[--_this41.sizeVec3];
			_this42.x = bottom.x;
			_this42.y = bottom.y;
			_this42.z = bottom.z;
			var _this43 = _this42;
			var tx19 = _this43.x + ex.x * radius;
			var ty19 = _this43.y + ex.y * radius;
			var tz19 = _this43.z + ex.z * radius;
			_this43.x = tx19;
			_this43.y = ty19;
			_this43.z = tz19;
			var _this44 = _this43;
			var tx20 = _this44.x + ez.x * 0;
			var ty20 = _this44.y + ez.y * 0;
			var tz20 = _this44.z + ez.z * 0;
			_this44.x = tx20;
			_this44.y = ty20;
			_this44.z = tz20;
			var bottom2 = _this44;
			var _this45 = this.p;
			var _this46 = _this45.sizeVec3 == 0 ? new oimo_common_Vec3() : _this45.stackVec3[--_this45.sizeVec3];
			_this46.x = bottom.x;
			_this46.y = bottom.y;
			_this46.z = bottom.z;
			var _this47 = _this46;
			var tx21 = _this47.x + ex.x * 0;
			var ty21 = _this47.y + ex.y * 0;
			var tz21 = _this47.z + ex.z * 0;
			_this47.x = tx21;
			_this47.y = ty21;
			_this47.z = tz21;
			var _this48 = _this47;
			var s5 = -radius;
			var tx22 = _this48.x + ez.x * s5;
			var ty22 = _this48.y + ez.y * s5;
			var tz22 = _this48.z + ez.z * s5;
			_this48.x = tx22;
			_this48.y = ty22;
			_this48.z = tz22;
			var bottom3 = _this48;
			var _this49 = this.p;
			var _this50 = _this49.sizeVec3 == 0 ? new oimo_common_Vec3() : _this49.stackVec3[--_this49.sizeVec3];
			_this50.x = bottom.x;
			_this50.y = bottom.y;
			_this50.z = bottom.z;
			var _this51 = _this50;
			var tx23 = _this51.x + ex.x * 0;
			var ty23 = _this51.y + ex.y * 0;
			var tz23 = _this51.z + ex.z * 0;
			_this51.x = tx23;
			_this51.y = ty23;
			_this51.z = tz23;
			var _this52 = _this51;
			var tx24 = _this52.x + ez.x * radius;
			var ty24 = _this52.y + ez.y * radius;
			var tz24 = _this52.z + ez.z * radius;
			_this52.x = tx24;
			_this52.y = ty24;
			_this52.z = tz24;
			var bottom4 = _this52;
			this.ellipse(top,ex,ez,radius,radius,color);
			this.ellipse(bottom,ex,ez,radius,radius,color);
			this.line(top1,bottom1,color);
			this.line(top2,bottom2,color);
			this.line(top3,bottom3,color);
			this.line(top4,bottom4,color);
			var _this53 = this.p;
			if(top1 != null) {
				top1.zero();
				if(_this53.sizeVec3 == _this53.stackVec3.length) {
					var newLength = _this53.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g12 = 0;
					var _g6 = _this53.sizeVec3;
					while(_g12 < _g6) {
						var i1 = _g12++;
						newArray[i1] = _this53.stackVec3[i1];
						_this53.stackVec3[i1] = null;
					}
					_this53.stackVec3 = newArray;
				}
				_this53.stackVec3[_this53.sizeVec3++] = top1;
			}
			var _this54 = this.p;
			if(top2 != null) {
				top2.zero();
				if(_this54.sizeVec3 == _this54.stackVec3.length) {
					var newLength1 = _this54.sizeVec3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g13 = 0;
					var _g7 = _this54.sizeVec3;
					while(_g13 < _g7) {
						var i3 = _g13++;
						newArray1[i3] = _this54.stackVec3[i3];
						_this54.stackVec3[i3] = null;
					}
					_this54.stackVec3 = newArray1;
				}
				_this54.stackVec3[_this54.sizeVec3++] = top2;
			}
			var _this55 = this.p;
			if(top3 != null) {
				top3.zero();
				if(_this55.sizeVec3 == _this55.stackVec3.length) {
					var newLength2 = _this55.sizeVec3 << 1;
					var this3 = new Array(newLength2);
					var newArray2 = this3;
					var _g14 = 0;
					var _g8 = _this55.sizeVec3;
					while(_g14 < _g8) {
						var i4 = _g14++;
						newArray2[i4] = _this55.stackVec3[i4];
						_this55.stackVec3[i4] = null;
					}
					_this55.stackVec3 = newArray2;
				}
				_this55.stackVec3[_this55.sizeVec3++] = top3;
			}
			var _this56 = this.p;
			if(top4 != null) {
				top4.zero();
				if(_this56.sizeVec3 == _this56.stackVec3.length) {
					var newLength3 = _this56.sizeVec3 << 1;
					var this4 = new Array(newLength3);
					var newArray3 = this4;
					var _g15 = 0;
					var _g9 = _this56.sizeVec3;
					while(_g15 < _g9) {
						var i5 = _g15++;
						newArray3[i5] = _this56.stackVec3[i5];
						_this56.stackVec3[i5] = null;
					}
					_this56.stackVec3 = newArray3;
				}
				_this56.stackVec3[_this56.sizeVec3++] = top4;
			}
			var _this57 = this.p;
			if(bottom1 != null) {
				bottom1.zero();
				if(_this57.sizeVec3 == _this57.stackVec3.length) {
					var newLength4 = _this57.sizeVec3 << 1;
					var this5 = new Array(newLength4);
					var newArray4 = this5;
					var _g16 = 0;
					var _g10 = _this57.sizeVec3;
					while(_g16 < _g10) {
						var i6 = _g16++;
						newArray4[i6] = _this57.stackVec3[i6];
						_this57.stackVec3[i6] = null;
					}
					_this57.stackVec3 = newArray4;
				}
				_this57.stackVec3[_this57.sizeVec3++] = bottom1;
			}
			var _this58 = this.p;
			if(bottom2 != null) {
				bottom2.zero();
				if(_this58.sizeVec3 == _this58.stackVec3.length) {
					var newLength5 = _this58.sizeVec3 << 1;
					var this6 = new Array(newLength5);
					var newArray5 = this6;
					var _g17 = 0;
					var _g18 = _this58.sizeVec3;
					while(_g17 < _g18) {
						var i7 = _g17++;
						newArray5[i7] = _this58.stackVec3[i7];
						_this58.stackVec3[i7] = null;
					}
					_this58.stackVec3 = newArray5;
				}
				_this58.stackVec3[_this58.sizeVec3++] = bottom2;
			}
			var _this59 = this.p;
			if(bottom3 != null) {
				bottom3.zero();
				if(_this59.sizeVec3 == _this59.stackVec3.length) {
					var newLength6 = _this59.sizeVec3 << 1;
					var this7 = new Array(newLength6);
					var newArray6 = this7;
					var _g19 = 0;
					var _g20 = _this59.sizeVec3;
					while(_g19 < _g20) {
						var i8 = _g19++;
						newArray6[i8] = _this59.stackVec3[i8];
						_this59.stackVec3[i8] = null;
					}
					_this59.stackVec3 = newArray6;
				}
				_this59.stackVec3[_this59.sizeVec3++] = bottom3;
			}
			var _this60 = this.p;
			if(bottom4 != null) {
				bottom4.zero();
				if(_this60.sizeVec3 == _this60.stackVec3.length) {
					var newLength7 = _this60.sizeVec3 << 1;
					var this8 = new Array(newLength7);
					var newArray7 = this8;
					var _g110 = 0;
					var _g24 = _this60.sizeVec3;
					while(_g110 < _g24) {
						var i9 = _g110++;
						newArray7[i9] = _this60.stackVec3[i9];
						_this60.stackVec3[i9] = null;
					}
					_this60.stackVec3 = newArray7;
				}
				_this60.stackVec3[_this60.sizeVec3++] = bottom4;
			}
		} else {
			var _g25 = 0;
			while(_g25 < 8) {
				var i10 = _g25++;
				var _this61 = this.tmpCircleNorms[i10];
				var v5 = this.circleCoords[i10];
				_this61.x = v5.x;
				_this61.y = v5.y;
				_this61.z = v5.z;
				var _this62 = _this61;
				var tx25 = _this62.x * m.e00 + _this62.y * m.e01 + _this62.z * m.e02;
				var ty25 = _this62.x * m.e10 + _this62.y * m.e11 + _this62.z * m.e12;
				var tz25 = _this62.x * m.e20 + _this62.y * m.e21 + _this62.z * m.e22;
				_this62.x = tx25;
				_this62.y = ty25;
				_this62.z = tz25;
				var _this63 = this.tmpCircleVerts1[i10];
				var v6 = this.tmpCircleNorms[i10];
				_this63.x = v6.x;
				_this63.y = v6.y;
				_this63.z = v6.z;
				var _this64 = _this63;
				var tx26 = _this64.x * radius;
				var ty26 = _this64.y * radius;
				var tz26 = _this64.z * radius;
				_this64.x = tx26;
				_this64.y = ty26;
				_this64.z = tz26;
				var _this65 = _this64;
				var tx27 = _this65.x + o.x;
				var ty27 = _this65.y + o.y;
				var tz27 = _this65.z + o.z;
				_this65.x = tx27;
				_this65.y = ty27;
				_this65.z = tz27;
				var _this66 = this.tmpCircleVerts2[i10];
				var v7 = this.tmpCircleVerts1[i10];
				_this66.x = v7.x;
				_this66.y = v7.y;
				_this66.z = v7.z;
				var _this67 = this.tmpCircleVerts1[i10];
				var tx28 = _this67.x + ey.x * halfHeight;
				var ty28 = _this67.y + ey.y * halfHeight;
				var tz28 = _this67.z + ey.z * halfHeight;
				_this67.x = tx28;
				_this67.y = ty28;
				_this67.z = tz28;
				var _this68 = this.tmpCircleVerts2[i10];
				var s6 = -halfHeight;
				var tx29 = _this68.x + ey.x * s6;
				var ty29 = _this68.y + ey.y * s6;
				var tz29 = _this68.z + ey.z * s6;
				_this68.x = tx29;
				_this68.y = ty29;
				_this68.z = tz29;
			}
			var _g26 = 0;
			while(_g26 < 8) {
				var i11 = _g26++;
				var v12 = this.tmpCircleVerts1[i11];
				var v22 = this.tmpCircleVerts2[i11];
				var v32 = this.tmpCircleVerts2[(i11 + 1) % 8];
				var v41 = this.tmpCircleVerts1[(i11 + 1) % 8];
				var n12 = this.tmpCircleNorms[i11];
				var n22 = this.tmpCircleNorms[(i11 + 1) % 8];
				this.rect(v12,v22,v32,v41,n12,n12,n22,n22,color);
			}
		}
		var _this69 = this.p;
		if(top != null) {
			top.zero();
			if(_this69.sizeVec3 == _this69.stackVec3.length) {
				var newLength8 = _this69.sizeVec3 << 1;
				var this9 = new Array(newLength8);
				var newArray8 = this9;
				var _g111 = 0;
				var _g27 = _this69.sizeVec3;
				while(_g111 < _g27) {
					var i12 = _g111++;
					newArray8[i12] = _this69.stackVec3[i12];
					_this69.stackVec3[i12] = null;
				}
				_this69.stackVec3 = newArray8;
			}
			_this69.stackVec3[_this69.sizeVec3++] = top;
		}
		var _this70 = this.p;
		if(bottom != null) {
			bottom.zero();
			if(_this70.sizeVec3 == _this70.stackVec3.length) {
				var newLength9 = _this70.sizeVec3 << 1;
				var this10 = new Array(newLength9);
				var newArray9 = this10;
				var _g112 = 0;
				var _g28 = _this70.sizeVec3;
				while(_g112 < _g28) {
					var i13 = _g112++;
					newArray9[i13] = _this70.stackVec3[i13];
					_this70.stackVec3[i13] = null;
				}
				_this70.stackVec3 = newArray9;
			}
			_this70.stackVec3[_this70.sizeVec3++] = bottom;
		}
		var _this71 = this.p;
		if(o != null) {
			o.zero();
			if(_this71.sizeVec3 == _this71.stackVec3.length) {
				var newLength10 = _this71.sizeVec3 << 1;
				var this11 = new Array(newLength10);
				var newArray10 = this11;
				var _g113 = 0;
				var _g29 = _this71.sizeVec3;
				while(_g113 < _g29) {
					var i14 = _g113++;
					newArray10[i14] = _this71.stackVec3[i14];
					_this71.stackVec3[i14] = null;
				}
				_this71.stackVec3 = newArray10;
			}
			_this71.stackVec3[_this71.sizeVec3++] = o;
		}
		var _this72 = this.p;
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this72.sizeMat3 == _this72.stackMat3.length) {
				var newLength11 = _this72.sizeMat3 << 1;
				var this12 = new Array(newLength11);
				var newArray11 = this12;
				var _g114 = 0;
				var _g30 = _this72.sizeMat3;
				while(_g114 < _g30) {
					var i15 = _g114++;
					newArray11[i15] = _this72.stackMat3[i15];
					_this72.stackMat3[i15] = null;
				}
				_this72.stackMat3 = newArray11;
			}
			_this72.stackMat3[_this72.sizeMat3++] = m;
		}
		var _this73 = this.p;
		if(ex != null) {
			ex.zero();
			if(_this73.sizeVec3 == _this73.stackVec3.length) {
				var newLength12 = _this73.sizeVec3 << 1;
				var this13 = new Array(newLength12);
				var newArray12 = this13;
				var _g115 = 0;
				var _g34 = _this73.sizeVec3;
				while(_g115 < _g34) {
					var i16 = _g115++;
					newArray12[i16] = _this73.stackVec3[i16];
					_this73.stackVec3[i16] = null;
				}
				_this73.stackVec3 = newArray12;
			}
			_this73.stackVec3[_this73.sizeVec3++] = ex;
		}
		var _this74 = this.p;
		if(ey != null) {
			ey.zero();
			if(_this74.sizeVec3 == _this74.stackVec3.length) {
				var newLength13 = _this74.sizeVec3 << 1;
				var this14 = new Array(newLength13);
				var newArray13 = this14;
				var _g116 = 0;
				var _g35 = _this74.sizeVec3;
				while(_g116 < _g35) {
					var i17 = _g116++;
					newArray13[i17] = _this74.stackVec3[i17];
					_this74.stackVec3[i17] = null;
				}
				_this74.stackVec3 = newArray13;
			}
			_this74.stackVec3[_this74.sizeVec3++] = ey;
		}
		var _this75 = this.p;
		if(ez != null) {
			ez.zero();
			if(_this75.sizeVec3 == _this75.stackVec3.length) {
				var newLength14 = _this75.sizeVec3 << 1;
				var this15 = new Array(newLength14);
				var newArray14 = this15;
				var _g117 = 0;
				var _g36 = _this75.sizeVec3;
				while(_g117 < _g36) {
					var i18 = _g117++;
					newArray14[i18] = _this75.stackVec3[i18];
					_this75.stackVec3[i18] = null;
				}
				_this75.stackVec3 = newArray14;
			}
			_this75.stackVec3[_this75.sizeVec3++] = ez;
		}
	}
	,sphere: function(tf,radius,color) {
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this.p;
		var m = _this1.sizeMat3 == 0 ? new oimo_common_Mat3() : _this1.stackMat3[--_this1.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		var nt = 4;
		var np = 8;
		var vs = this.tmpSphereVerts;
		var ns = this.tmpSphereNorms;
		var _g1 = 0;
		var _g = nt + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.tmpSphereVerts[i].length;
			var _g3 = 0;
			var _g2 = n;
			while(_g3 < _g2) {
				var j = _g3++;
				var _this2 = ns[i][j];
				var v1 = this.sphereCoords[i][j];
				_this2.x = v1.x;
				_this2.y = v1.y;
				_this2.z = v1.z;
				var _this3 = _this2;
				var tx = _this3.x * m.e00 + _this3.y * m.e01 + _this3.z * m.e02;
				var ty = _this3.x * m.e10 + _this3.y * m.e11 + _this3.z * m.e12;
				var tz = _this3.x * m.e20 + _this3.y * m.e21 + _this3.z * m.e22;
				_this3.x = tx;
				_this3.y = ty;
				_this3.z = tz;
				var _this4 = vs[i][j];
				var v2 = ns[i][j];
				_this4.x = v2.x;
				_this4.y = v2.y;
				_this4.z = v2.z;
				var _this5 = _this4;
				var tx1 = _this5.x * radius;
				var ty1 = _this5.y * radius;
				var tz1 = _this5.z * radius;
				_this5.x = tx1;
				_this5.y = ty1;
				_this5.z = tz1;
				var _this6 = _this5;
				var tx2 = _this6.x + o.x;
				var ty2 = _this6.y + o.y;
				var tz2 = _this6.z + o.z;
				_this6.x = tx2;
				_this6.y = ty2;
				_this6.z = tz2;
			}
		}
		var _g11 = 0;
		var _g4 = nt;
		while(_g11 < _g4) {
			var i1 = _g11++;
			var _g31 = 0;
			var _g21 = np;
			while(_g31 < _g21) {
				var j1 = _g31++;
				var v11;
				var v21;
				var v3;
				var v4;
				var n1;
				var n2;
				var n3;
				var n4;
				if(i1 == 0) {
					if(this.wireframe) {
						v11 = vs[0][0];
						v21 = vs[1][j1];
						this.line(v11,v21,color);
					} else {
						v11 = vs[0][0];
						v21 = vs[1][j1];
						v3 = vs[1][(j1 + 1) % np];
						n1 = ns[0][0];
						n2 = ns[1][j1];
						n3 = ns[1][(j1 + 1) % np];
						this.triangle(v11,v21,v3,n1,n2,n3,color);
					}
				} else if(i1 == nt - 1) {
					if(this.wireframe) {
						v11 = vs[nt][0];
						v21 = vs[i1][(j1 + 1) % np];
						v3 = vs[i1][j1];
						this.line(v11,v21,color);
						this.line(v21,v3,color);
					} else {
						v11 = vs[nt][0];
						v21 = vs[i1][(j1 + 1) % np];
						v3 = vs[i1][j1];
						n1 = ns[nt][0];
						n2 = ns[i1][(j1 + 1) % np];
						n3 = ns[i1][j1];
						this.triangle(v11,v21,v3,n1,n2,n3,color);
					}
				} else if(this.wireframe) {
					v11 = vs[i1][j1];
					v21 = vs[i1][(j1 + 1) % np];
					v3 = vs[i1 + 1][j1];
					this.line(v11,v21,color);
					this.line(v11,v3,color);
				} else {
					v11 = vs[i1][j1];
					v21 = vs[i1][(j1 + 1) % np];
					v3 = vs[i1 + 1][j1];
					v4 = vs[i1 + 1][(j1 + 1) % np];
					n1 = ns[i1][j1];
					n2 = ns[i1][(j1 + 1) % np];
					n3 = ns[i1 + 1][j1];
					n4 = ns[i1 + 1][(j1 + 1) % np];
					this.rect(v11,v3,v4,v21,n1,n3,n4,n2,color);
				}
			}
		}
		var _this7 = this.p;
		if(o != null) {
			o.zero();
			if(_this7.sizeVec3 == _this7.stackVec3.length) {
				var newLength = _this7.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g12 = 0;
				var _g5 = _this7.sizeVec3;
				while(_g12 < _g5) {
					var i2 = _g12++;
					newArray[i2] = _this7.stackVec3[i2];
					_this7.stackVec3[i2] = null;
				}
				_this7.stackVec3 = newArray;
			}
			_this7.stackVec3[_this7.sizeVec3++] = o;
		}
		var _this8 = this.p;
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this8.sizeMat3 == _this8.stackMat3.length) {
				var newLength1 = _this8.sizeMat3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g13 = 0;
				var _g6 = _this8.sizeMat3;
				while(_g13 < _g6) {
					var i3 = _g13++;
					newArray1[i3] = _this8.stackMat3[i3];
					_this8.stackMat3[i3] = null;
				}
				_this8.stackMat3 = newArray1;
			}
			_this8.stackMat3[_this8.sizeMat3++] = m;
		}
	}
	,box: function(tf,halfExtents,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this.p;
		var ey = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		var _this2 = this.p;
		var ez = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		var _this3 = this.p;
		var o = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		var _this4 = this.p;
		var m = _this4.sizeMat3 == 0 ? new oimo_common_Mat3() : _this4.stackMat3[--_this4.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var hx = halfExtents.x;
		var hy = halfExtents.y;
		var hz = halfExtents.z;
		var _this5 = this.p;
		var _this6 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
		_this6.x = o.x;
		_this6.y = o.y;
		_this6.z = o.z;
		var _this7 = _this6;
		var s = -hx;
		var tx = _this7.x + ex.x * s;
		var ty = _this7.y + ex.y * s;
		var tz = _this7.z + ex.z * s;
		_this7.x = tx;
		_this7.y = ty;
		_this7.z = tz;
		var _this8 = _this7;
		var s1 = -hy;
		var tx1 = _this8.x + ey.x * s1;
		var ty1 = _this8.y + ey.y * s1;
		var tz1 = _this8.z + ey.z * s1;
		_this8.x = tx1;
		_this8.y = ty1;
		_this8.z = tz1;
		var _this9 = _this8;
		var s2 = -hz;
		var tx2 = _this9.x + ez.x * s2;
		var ty2 = _this9.y + ez.y * s2;
		var tz2 = _this9.z + ez.z * s2;
		_this9.x = tx2;
		_this9.y = ty2;
		_this9.z = tz2;
		var v1 = _this9;
		var _this10 = this.p;
		var _this11 = _this10.sizeVec3 == 0 ? new oimo_common_Vec3() : _this10.stackVec3[--_this10.sizeVec3];
		_this11.x = o.x;
		_this11.y = o.y;
		_this11.z = o.z;
		var _this12 = _this11;
		var s3 = -hx;
		var tx3 = _this12.x + ex.x * s3;
		var ty3 = _this12.y + ex.y * s3;
		var tz3 = _this12.z + ex.z * s3;
		_this12.x = tx3;
		_this12.y = ty3;
		_this12.z = tz3;
		var _this13 = _this12;
		var s4 = -hy;
		var tx4 = _this13.x + ey.x * s4;
		var ty4 = _this13.y + ey.y * s4;
		var tz4 = _this13.z + ey.z * s4;
		_this13.x = tx4;
		_this13.y = ty4;
		_this13.z = tz4;
		var _this14 = _this13;
		var tx5 = _this14.x + ez.x * hz;
		var ty5 = _this14.y + ez.y * hz;
		var tz5 = _this14.z + ez.z * hz;
		_this14.x = tx5;
		_this14.y = ty5;
		_this14.z = tz5;
		var v2 = _this14;
		var _this15 = this.p;
		var _this16 = _this15.sizeVec3 == 0 ? new oimo_common_Vec3() : _this15.stackVec3[--_this15.sizeVec3];
		_this16.x = o.x;
		_this16.y = o.y;
		_this16.z = o.z;
		var _this17 = _this16;
		var s5 = -hx;
		var tx6 = _this17.x + ex.x * s5;
		var ty6 = _this17.y + ex.y * s5;
		var tz6 = _this17.z + ex.z * s5;
		_this17.x = tx6;
		_this17.y = ty6;
		_this17.z = tz6;
		var _this18 = _this17;
		var tx7 = _this18.x + ey.x * hy;
		var ty7 = _this18.y + ey.y * hy;
		var tz7 = _this18.z + ey.z * hy;
		_this18.x = tx7;
		_this18.y = ty7;
		_this18.z = tz7;
		var _this19 = _this18;
		var s6 = -hz;
		var tx8 = _this19.x + ez.x * s6;
		var ty8 = _this19.y + ez.y * s6;
		var tz8 = _this19.z + ez.z * s6;
		_this19.x = tx8;
		_this19.y = ty8;
		_this19.z = tz8;
		var v3 = _this19;
		var _this20 = this.p;
		var _this21 = _this20.sizeVec3 == 0 ? new oimo_common_Vec3() : _this20.stackVec3[--_this20.sizeVec3];
		_this21.x = o.x;
		_this21.y = o.y;
		_this21.z = o.z;
		var _this22 = _this21;
		var s7 = -hx;
		var tx9 = _this22.x + ex.x * s7;
		var ty9 = _this22.y + ex.y * s7;
		var tz9 = _this22.z + ex.z * s7;
		_this22.x = tx9;
		_this22.y = ty9;
		_this22.z = tz9;
		var _this23 = _this22;
		var tx10 = _this23.x + ey.x * hy;
		var ty10 = _this23.y + ey.y * hy;
		var tz10 = _this23.z + ey.z * hy;
		_this23.x = tx10;
		_this23.y = ty10;
		_this23.z = tz10;
		var _this24 = _this23;
		var tx11 = _this24.x + ez.x * hz;
		var ty11 = _this24.y + ez.y * hz;
		var tz11 = _this24.z + ez.z * hz;
		_this24.x = tx11;
		_this24.y = ty11;
		_this24.z = tz11;
		var v4 = _this24;
		var _this25 = this.p;
		var _this26 = _this25.sizeVec3 == 0 ? new oimo_common_Vec3() : _this25.stackVec3[--_this25.sizeVec3];
		_this26.x = o.x;
		_this26.y = o.y;
		_this26.z = o.z;
		var _this27 = _this26;
		var tx12 = _this27.x + ex.x * hx;
		var ty12 = _this27.y + ex.y * hx;
		var tz12 = _this27.z + ex.z * hx;
		_this27.x = tx12;
		_this27.y = ty12;
		_this27.z = tz12;
		var _this28 = _this27;
		var s8 = -hy;
		var tx13 = _this28.x + ey.x * s8;
		var ty13 = _this28.y + ey.y * s8;
		var tz13 = _this28.z + ey.z * s8;
		_this28.x = tx13;
		_this28.y = ty13;
		_this28.z = tz13;
		var _this29 = _this28;
		var s9 = -hz;
		var tx14 = _this29.x + ez.x * s9;
		var ty14 = _this29.y + ez.y * s9;
		var tz14 = _this29.z + ez.z * s9;
		_this29.x = tx14;
		_this29.y = ty14;
		_this29.z = tz14;
		var v5 = _this29;
		var _this30 = this.p;
		var _this31 = _this30.sizeVec3 == 0 ? new oimo_common_Vec3() : _this30.stackVec3[--_this30.sizeVec3];
		_this31.x = o.x;
		_this31.y = o.y;
		_this31.z = o.z;
		var _this32 = _this31;
		var tx15 = _this32.x + ex.x * hx;
		var ty15 = _this32.y + ex.y * hx;
		var tz15 = _this32.z + ex.z * hx;
		_this32.x = tx15;
		_this32.y = ty15;
		_this32.z = tz15;
		var _this33 = _this32;
		var s10 = -hy;
		var tx16 = _this33.x + ey.x * s10;
		var ty16 = _this33.y + ey.y * s10;
		var tz16 = _this33.z + ey.z * s10;
		_this33.x = tx16;
		_this33.y = ty16;
		_this33.z = tz16;
		var _this34 = _this33;
		var tx17 = _this34.x + ez.x * hz;
		var ty17 = _this34.y + ez.y * hz;
		var tz17 = _this34.z + ez.z * hz;
		_this34.x = tx17;
		_this34.y = ty17;
		_this34.z = tz17;
		var v6 = _this34;
		var _this35 = this.p;
		var _this36 = _this35.sizeVec3 == 0 ? new oimo_common_Vec3() : _this35.stackVec3[--_this35.sizeVec3];
		_this36.x = o.x;
		_this36.y = o.y;
		_this36.z = o.z;
		var _this37 = _this36;
		var tx18 = _this37.x + ex.x * hx;
		var ty18 = _this37.y + ex.y * hx;
		var tz18 = _this37.z + ex.z * hx;
		_this37.x = tx18;
		_this37.y = ty18;
		_this37.z = tz18;
		var _this38 = _this37;
		var tx19 = _this38.x + ey.x * hy;
		var ty19 = _this38.y + ey.y * hy;
		var tz19 = _this38.z + ey.z * hy;
		_this38.x = tx19;
		_this38.y = ty19;
		_this38.z = tz19;
		var _this39 = _this38;
		var s11 = -hz;
		var tx20 = _this39.x + ez.x * s11;
		var ty20 = _this39.y + ez.y * s11;
		var tz20 = _this39.z + ez.z * s11;
		_this39.x = tx20;
		_this39.y = ty20;
		_this39.z = tz20;
		var v7 = _this39;
		var _this40 = this.p;
		var _this41 = _this40.sizeVec3 == 0 ? new oimo_common_Vec3() : _this40.stackVec3[--_this40.sizeVec3];
		_this41.x = o.x;
		_this41.y = o.y;
		_this41.z = o.z;
		var _this42 = _this41;
		var tx21 = _this42.x + ex.x * hx;
		var ty21 = _this42.y + ex.y * hx;
		var tz21 = _this42.z + ex.z * hx;
		_this42.x = tx21;
		_this42.y = ty21;
		_this42.z = tz21;
		var _this43 = _this42;
		var tx22 = _this43.x + ey.x * hy;
		var ty22 = _this43.y + ey.y * hy;
		var tz22 = _this43.z + ey.z * hy;
		_this43.x = tx22;
		_this43.y = ty22;
		_this43.z = tz22;
		var _this44 = _this43;
		var tx23 = _this44.x + ez.x * hz;
		var ty23 = _this44.y + ez.y * hz;
		var tz23 = _this44.z + ez.z * hz;
		_this44.x = tx23;
		_this44.y = ty23;
		_this44.z = tz23;
		var v8 = _this44;
		if(this.wireframe) {
			this.line(v1,v2,color);
			this.line(v3,v4,color);
			this.line(v5,v6,color);
			this.line(v7,v8,color);
			this.line(v1,v3,color);
			this.line(v2,v4,color);
			this.line(v5,v7,color);
			this.line(v6,v8,color);
			this.line(v1,v5,color);
			this.line(v2,v6,color);
			this.line(v3,v7,color);
			this.line(v4,v8,color);
		} else {
			var _this45 = this.p;
			var _this46 = _this45.sizeVec3 == 0 ? new oimo_common_Vec3() : _this45.stackVec3[--_this45.sizeVec3];
			_this46.x = ex.x;
			_this46.y = ex.y;
			_this46.z = ex.z;
			var _this47 = _this46;
			var tx24 = -_this47.x;
			var ty24 = -_this47.y;
			var tz24 = -_this47.z;
			_this47.x = tx24;
			_this47.y = ty24;
			_this47.z = tz24;
			var nex = _this47;
			var _this48 = this.p;
			var _this49 = _this48.sizeVec3 == 0 ? new oimo_common_Vec3() : _this48.stackVec3[--_this48.sizeVec3];
			_this49.x = ey.x;
			_this49.y = ey.y;
			_this49.z = ey.z;
			var _this50 = _this49;
			var tx25 = -_this50.x;
			var ty25 = -_this50.y;
			var tz25 = -_this50.z;
			_this50.x = tx25;
			_this50.y = ty25;
			_this50.z = tz25;
			var ney = _this50;
			var _this51 = this.p;
			var _this52 = _this51.sizeVec3 == 0 ? new oimo_common_Vec3() : _this51.stackVec3[--_this51.sizeVec3];
			_this52.x = ez.x;
			_this52.y = ez.y;
			_this52.z = ez.z;
			var _this53 = _this52;
			var tx26 = -_this53.x;
			var ty26 = -_this53.y;
			var tz26 = -_this53.z;
			_this53.x = tx26;
			_this53.y = ty26;
			_this53.z = tz26;
			var nez = _this53;
			this.rect(v1,v2,v4,v3,nex,nex,nex,nex,color);
			this.rect(v5,v7,v8,v6,ex,ex,ex,ex,color);
			this.rect(v1,v5,v6,v2,ney,ney,ney,ney,color);
			this.rect(v3,v4,v8,v7,ey,ey,ey,ey,color);
			this.rect(v1,v3,v7,v5,nez,nez,nez,nez,color);
			this.rect(v2,v6,v8,v4,ez,ez,ez,ez,color);
			var _this54 = this.p;
			if(nex != null) {
				nex.zero();
				if(_this54.sizeVec3 == _this54.stackVec3.length) {
					var newLength = _this54.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this54.sizeVec3;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this54.stackVec3[i];
						_this54.stackVec3[i] = null;
					}
					_this54.stackVec3 = newArray;
				}
				_this54.stackVec3[_this54.sizeVec3++] = nex;
			}
			var _this55 = this.p;
			if(ney != null) {
				ney.zero();
				if(_this55.sizeVec3 == _this55.stackVec3.length) {
					var newLength1 = _this55.sizeVec3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g11 = 0;
					var _g2 = _this55.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray1[i1] = _this55.stackVec3[i1];
						_this55.stackVec3[i1] = null;
					}
					_this55.stackVec3 = newArray1;
				}
				_this55.stackVec3[_this55.sizeVec3++] = ney;
			}
			var _this56 = this.p;
			if(nez != null) {
				nez.zero();
				if(_this56.sizeVec3 == _this56.stackVec3.length) {
					var newLength2 = _this56.sizeVec3 << 1;
					var this3 = new Array(newLength2);
					var newArray2 = this3;
					var _g12 = 0;
					var _g3 = _this56.sizeVec3;
					while(_g12 < _g3) {
						var i2 = _g12++;
						newArray2[i2] = _this56.stackVec3[i2];
						_this56.stackVec3[i2] = null;
					}
					_this56.stackVec3 = newArray2;
				}
				_this56.stackVec3[_this56.sizeVec3++] = nez;
			}
		}
		var _this57 = this.p;
		if(v1 != null) {
			v1.zero();
			if(_this57.sizeVec3 == _this57.stackVec3.length) {
				var newLength3 = _this57.sizeVec3 << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g13 = 0;
				var _g4 = _this57.sizeVec3;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray3[i3] = _this57.stackVec3[i3];
					_this57.stackVec3[i3] = null;
				}
				_this57.stackVec3 = newArray3;
			}
			_this57.stackVec3[_this57.sizeVec3++] = v1;
		}
		var _this58 = this.p;
		if(v2 != null) {
			v2.zero();
			if(_this58.sizeVec3 == _this58.stackVec3.length) {
				var newLength4 = _this58.sizeVec3 << 1;
				var this5 = new Array(newLength4);
				var newArray4 = this5;
				var _g14 = 0;
				var _g5 = _this58.sizeVec3;
				while(_g14 < _g5) {
					var i4 = _g14++;
					newArray4[i4] = _this58.stackVec3[i4];
					_this58.stackVec3[i4] = null;
				}
				_this58.stackVec3 = newArray4;
			}
			_this58.stackVec3[_this58.sizeVec3++] = v2;
		}
		var _this59 = this.p;
		if(v3 != null) {
			v3.zero();
			if(_this59.sizeVec3 == _this59.stackVec3.length) {
				var newLength5 = _this59.sizeVec3 << 1;
				var this6 = new Array(newLength5);
				var newArray5 = this6;
				var _g15 = 0;
				var _g6 = _this59.sizeVec3;
				while(_g15 < _g6) {
					var i5 = _g15++;
					newArray5[i5] = _this59.stackVec3[i5];
					_this59.stackVec3[i5] = null;
				}
				_this59.stackVec3 = newArray5;
			}
			_this59.stackVec3[_this59.sizeVec3++] = v3;
		}
		var _this60 = this.p;
		if(v4 != null) {
			v4.zero();
			if(_this60.sizeVec3 == _this60.stackVec3.length) {
				var newLength6 = _this60.sizeVec3 << 1;
				var this7 = new Array(newLength6);
				var newArray6 = this7;
				var _g16 = 0;
				var _g7 = _this60.sizeVec3;
				while(_g16 < _g7) {
					var i6 = _g16++;
					newArray6[i6] = _this60.stackVec3[i6];
					_this60.stackVec3[i6] = null;
				}
				_this60.stackVec3 = newArray6;
			}
			_this60.stackVec3[_this60.sizeVec3++] = v4;
		}
		var _this61 = this.p;
		if(v5 != null) {
			v5.zero();
			if(_this61.sizeVec3 == _this61.stackVec3.length) {
				var newLength7 = _this61.sizeVec3 << 1;
				var this8 = new Array(newLength7);
				var newArray7 = this8;
				var _g17 = 0;
				var _g8 = _this61.sizeVec3;
				while(_g17 < _g8) {
					var i7 = _g17++;
					newArray7[i7] = _this61.stackVec3[i7];
					_this61.stackVec3[i7] = null;
				}
				_this61.stackVec3 = newArray7;
			}
			_this61.stackVec3[_this61.sizeVec3++] = v5;
		}
		var _this62 = this.p;
		if(v6 != null) {
			v6.zero();
			if(_this62.sizeVec3 == _this62.stackVec3.length) {
				var newLength8 = _this62.sizeVec3 << 1;
				var this9 = new Array(newLength8);
				var newArray8 = this9;
				var _g18 = 0;
				var _g9 = _this62.sizeVec3;
				while(_g18 < _g9) {
					var i8 = _g18++;
					newArray8[i8] = _this62.stackVec3[i8];
					_this62.stackVec3[i8] = null;
				}
				_this62.stackVec3 = newArray8;
			}
			_this62.stackVec3[_this62.sizeVec3++] = v6;
		}
		var _this63 = this.p;
		if(v7 != null) {
			v7.zero();
			if(_this63.sizeVec3 == _this63.stackVec3.length) {
				var newLength9 = _this63.sizeVec3 << 1;
				var this10 = new Array(newLength9);
				var newArray9 = this10;
				var _g19 = 0;
				var _g10 = _this63.sizeVec3;
				while(_g19 < _g10) {
					var i9 = _g19++;
					newArray9[i9] = _this63.stackVec3[i9];
					_this63.stackVec3[i9] = null;
				}
				_this63.stackVec3 = newArray9;
			}
			_this63.stackVec3[_this63.sizeVec3++] = v7;
		}
		var _this64 = this.p;
		if(v8 != null) {
			v8.zero();
			if(_this64.sizeVec3 == _this64.stackVec3.length) {
				var newLength10 = _this64.sizeVec3 << 1;
				var this11 = new Array(newLength10);
				var newArray10 = this11;
				var _g110 = 0;
				var _g20 = _this64.sizeVec3;
				while(_g110 < _g20) {
					var i10 = _g110++;
					newArray10[i10] = _this64.stackVec3[i10];
					_this64.stackVec3[i10] = null;
				}
				_this64.stackVec3 = newArray10;
			}
			_this64.stackVec3[_this64.sizeVec3++] = v8;
		}
		var _this65 = this.p;
		if(o != null) {
			o.zero();
			if(_this65.sizeVec3 == _this65.stackVec3.length) {
				var newLength11 = _this65.sizeVec3 << 1;
				var this12 = new Array(newLength11);
				var newArray11 = this12;
				var _g111 = 0;
				var _g21 = _this65.sizeVec3;
				while(_g111 < _g21) {
					var i11 = _g111++;
					newArray11[i11] = _this65.stackVec3[i11];
					_this65.stackVec3[i11] = null;
				}
				_this65.stackVec3 = newArray11;
			}
			_this65.stackVec3[_this65.sizeVec3++] = o;
		}
		var _this66 = this.p;
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this66.sizeMat3 == _this66.stackMat3.length) {
				var newLength12 = _this66.sizeMat3 << 1;
				var this13 = new Array(newLength12);
				var newArray12 = this13;
				var _g112 = 0;
				var _g22 = _this66.sizeMat3;
				while(_g112 < _g22) {
					var i12 = _g112++;
					newArray12[i12] = _this66.stackMat3[i12];
					_this66.stackMat3[i12] = null;
				}
				_this66.stackMat3 = newArray12;
			}
			_this66.stackMat3[_this66.sizeMat3++] = m;
		}
		var _this67 = this.p;
		if(ex != null) {
			ex.zero();
			if(_this67.sizeVec3 == _this67.stackVec3.length) {
				var newLength13 = _this67.sizeVec3 << 1;
				var this14 = new Array(newLength13);
				var newArray13 = this14;
				var _g113 = 0;
				var _g23 = _this67.sizeVec3;
				while(_g113 < _g23) {
					var i13 = _g113++;
					newArray13[i13] = _this67.stackVec3[i13];
					_this67.stackVec3[i13] = null;
				}
				_this67.stackVec3 = newArray13;
			}
			_this67.stackVec3[_this67.sizeVec3++] = ex;
		}
		var _this68 = this.p;
		if(ey != null) {
			ey.zero();
			if(_this68.sizeVec3 == _this68.stackVec3.length) {
				var newLength14 = _this68.sizeVec3 << 1;
				var this15 = new Array(newLength14);
				var newArray14 = this15;
				var _g114 = 0;
				var _g24 = _this68.sizeVec3;
				while(_g114 < _g24) {
					var i14 = _g114++;
					newArray14[i14] = _this68.stackVec3[i14];
					_this68.stackVec3[i14] = null;
				}
				_this68.stackVec3 = newArray14;
			}
			_this68.stackVec3[_this68.sizeVec3++] = ey;
		}
		var _this69 = this.p;
		if(ez != null) {
			ez.zero();
			if(_this69.sizeVec3 == _this69.stackVec3.length) {
				var newLength15 = _this69.sizeVec3 << 1;
				var this16 = new Array(newLength15);
				var newArray15 = this16;
				var _g115 = 0;
				var _g25 = _this69.sizeVec3;
				while(_g115 < _g25) {
					var i15 = _g115++;
					newArray15[i15] = _this69.stackVec3[i15];
					_this69.stackVec3[i15] = null;
				}
				_this69.stackVec3 = newArray15;
			}
			_this69.stackVec3[_this69.sizeVec3++] = ez;
		}
	}
	,rect: function(v1,v2,v3,v4,n1,n2,n3,n4,color) {
		this.triangle(v1,v2,v3,n1,n2,n3,color);
		this.triangle(v1,v3,v4,n1,n3,n4,color);
	}
	,point: function(v,color) {
	}
	,triangle: function(v1,v2,v3,n1,n2,n3,color) {
	}
	,line: function(v1,v2,color) {
	}
};
var _$RobotDDPGTest_Renderer = function(g) {
	oimo_dynamics_common_DebugDraw.call(this);
	this.g = g;
};
_$RobotDDPGTest_Renderer.__name__ = true;
_$RobotDDPGTest_Renderer.__super__ = oimo_dynamics_common_DebugDraw;
_$RobotDDPGTest_Renderer.prototype = $extend(oimo_dynamics_common_DebugDraw.prototype,{
	triangle: function(v1,v2,v3,n1,n2,n3,color) {
		var _this = this.g;
		_this.colorR = color.x;
		_this.colorG = color.y;
		_this.colorB = color.z;
		_this.colorA = 1;
		var _this1 = this.g;
		_this1.normalX = n1.x;
		_this1.normalY = n1.y;
		_this1.normalZ = n1.z;
		this.g.vertex(v1.x,v1.y,v1.z);
		var _this2 = this.g;
		_this2.normalX = n2.x;
		_this2.normalY = n2.y;
		_this2.normalZ = n2.z;
		this.g.vertex(v2.x,v2.y,v2.z);
		var _this3 = this.g;
		_this3.normalX = n3.x;
		_this3.normalY = n3.y;
		_this3.normalZ = n3.z;
		this.g.vertex(v3.x,v3.y,v3.z);
		var floorY = 0.0;
		if(v1.y > floorY || v2.y > floorY || v3.y > floorY) {
			var _this4 = this.g;
			_this4.colorR = 0.2;
			_this4.colorG = 0.2;
			_this4.colorB = 0.2;
			_this4.colorA = 1;
			var _this5 = this.g;
			_this5.normalX = 0;
			_this5.normalY = 0;
			_this5.normalZ = 0;
			this.g.vertex(v1.x,floorY + 0.005,v1.z);
			this.g.vertex(v2.x,floorY + 0.005,v2.z);
			this.g.vertex(v3.x,floorY + 0.005,v3.z);
		}
	}
});
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
haxe_ds__$Vector_Vector_$Impl_$.__name__ = true;
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = (eof instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if((eof1 instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,close: function() {
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		var i = this.getInt32(byteOffset,littleEndian);
		var sign = 1 - (i >>> 31 << 1);
		var e = i >> 23 & 255;
		if(e == 255) {
			if((i & 8388607) == 0) {
				if(sign > 0) {
					return Infinity;
				} else {
					return -Infinity;
				}
			} else {
				return NaN;
			}
		} else {
			var m = e == 0 ? (i & 8388607) << 1 : i & 8388607 | 8388608;
			return sign * m * Math.pow(2,e - 150);
		}
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		var lo = littleEndian ? a : b;
		var hi = littleEndian ? b : a;
		var sign = 1 - (hi >>> 31 << 1);
		var e = hi >> 20 & 2047;
		if(e == 2047) {
			if(lo == 0 && (hi & 1048575) == 0) {
				if(sign > 0) {
					return Infinity;
				} else {
					return -Infinity;
				}
			} else {
				return NaN;
			}
		} else {
			var m = 2.220446049250313e-16 * ((hi & 1048575) * 4294967296. + (lo >>> 31) * 2147483648. + (lo & 2147483647));
			if(e == 0) {
				m *= 2.0;
			} else {
				m += 1.0;
			}
			return sign * m * Math.pow(2,e - 1023);
		}
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		var tmp;
		if(value == 0) {
			tmp = 0;
		} else {
			var af = value < 0 ? -value : value;
			var exp = Math.floor(Math.log(af) / 0.6931471805599453);
			if(exp > 127) {
				tmp = 2139095040;
			} else {
				if(exp <= -127) {
					exp = -127;
					af *= 7.1362384635298e+44;
				} else {
					af = (af / Math.pow(2,exp) - 1.0) * 8388608;
				}
				tmp = (value < 0 ? -2147483648 : 0) | exp + 127 << 23 | Math.round(af);
			}
		}
		this.setUint32(byteOffset,tmp,littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.i64tmp;
		if(value == 0) {
			i64.low = 0;
			i64.high = 0;
		} else if(!isFinite(value)) {
			i64.low = 0;
			i64.high = value > 0 ? 2146435072 : -1048576;
		} else {
			var av = value < 0 ? -value : value;
			var exp = Math.floor(Math.log(av) / 0.6931471805599453);
			if(exp > 1023) {
				i64.low = -1;
				i64.high = 2146435071;
			} else {
				if(exp <= -1023) {
					exp = -1023;
					av /= 2.2250738585072014e-308;
				} else {
					av = av / Math.pow(2,exp) - 1.0;
				}
				var sig = Math.round(av * 4503599627370496.);
				var sig_l = sig | 0;
				var sig_h = sig / 4294967296.0 | 0;
				i64.low = sig_l;
				i64.high = (value < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
			}
		}
		var i641 = i64;
		if(littleEndian) {
			this.setUint32(byteOffset,i641.low,true);
			this.setUint32(byteOffset + 4,i641.high,true);
		} else {
			this.setUint32(byteOffset,i641.high,false);
			this.setUint32(byteOffset + 4,i641.low,false);
		}
	}
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(offset == null) {
		offset = 0;
	}
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(offset == null) {
		offset = 0;
	}
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var oimo_collision_broadphase_BroadPhase = function(type) {
	this._type = type;
	this._numProxies = 0;
	this._proxyList = null;
	this._proxyListLast = null;
	this._proxyPairList = null;
	this._incremental = false;
	this._testCount = 0;
	this._proxyPairPool = null;
	this._idCount = 0;
	this._convexSweep = new oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry();
	this._aabb = new oimo_collision_broadphase__$BroadPhase_AabbGeometry();
	this.identity = new oimo_common_Transform();
	this.zero = new oimo_common_Vec3();
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
};
oimo_collision_broadphase_BroadPhase.__name__ = true;
oimo_collision_broadphase_BroadPhase.prototype = {
	createProxy: function(userData,aabb) {
		return null;
	}
	,destroyProxy: function(proxy) {
	}
	,moveProxy: function(proxy,aabb,displacement) {
	}
	,isOverlapping: function(proxy1,proxy2) {
		if(proxy1._aabbMinX < proxy2._aabbMaxX && proxy1._aabbMaxX > proxy2._aabbMinX && proxy1._aabbMinY < proxy2._aabbMaxY && proxy1._aabbMaxY > proxy2._aabbMinY && proxy1._aabbMinZ < proxy2._aabbMaxZ) {
			return proxy1._aabbMaxZ > proxy2._aabbMinZ;
		} else {
			return false;
		}
	}
	,collectPairs: function() {
	}
	,getProxyPairList: function() {
		return this._proxyPairList;
	}
	,isIncremental: function() {
		return this._incremental;
	}
	,getTestCount: function() {
		return this._testCount;
	}
	,rayCast: function(begin,end,callback) {
	}
	,convexCast: function(convex,begin,translation,callback) {
	}
	,aabbTest: function(aabb,callback) {
	}
};
var oimo_collision_geometry_Geometry = function(type) {
	this._type = type;
	this._volume = 0;
};
oimo_collision_geometry_Geometry.__name__ = true;
oimo_collision_geometry_Geometry.prototype = {
	_updateMass: function() {
	}
	,_computeAabb: function(aabb,tf) {
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		return false;
	}
	,getType: function() {
		return this._type;
	}
	,getVolume: function() {
		return this._volume;
	}
	,rayCast: function(begin,end,transform,hit) {
		var beginLocal;
		var beginLocalX;
		var beginLocalY;
		var beginLocalZ;
		var endLocal;
		var endLocalX;
		var endLocalY;
		var endLocalZ;
		var v = begin;
		beginLocalX = v.x;
		beginLocalY = v.y;
		beginLocalZ = v.z;
		var v1 = end;
		endLocalX = v1.x;
		endLocalY = v1.y;
		endLocalZ = v1.z;
		beginLocalX -= transform._positionX;
		beginLocalY -= transform._positionY;
		beginLocalZ -= transform._positionZ;
		endLocalX -= transform._positionX;
		endLocalY -= transform._positionY;
		endLocalZ -= transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * beginLocalX + transform._rotation10 * beginLocalY + transform._rotation20 * beginLocalZ;
		__tmp__Y = transform._rotation01 * beginLocalX + transform._rotation11 * beginLocalY + transform._rotation21 * beginLocalZ;
		__tmp__Z = transform._rotation02 * beginLocalX + transform._rotation12 * beginLocalY + transform._rotation22 * beginLocalZ;
		beginLocalX = __tmp__X;
		beginLocalY = __tmp__Y;
		beginLocalZ = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = transform._rotation00 * endLocalX + transform._rotation10 * endLocalY + transform._rotation20 * endLocalZ;
		__tmp__Y1 = transform._rotation01 * endLocalX + transform._rotation11 * endLocalY + transform._rotation21 * endLocalZ;
		__tmp__Z1 = transform._rotation02 * endLocalX + transform._rotation12 * endLocalY + transform._rotation22 * endLocalZ;
		endLocalX = __tmp__X1;
		endLocalY = __tmp__Y1;
		endLocalZ = __tmp__Z1;
		if(this._rayCastLocal(beginLocalX,beginLocalY,beginLocalZ,endLocalX,endLocalY,endLocalZ,hit)) {
			var localPos;
			var localPosX;
			var localPosY;
			var localPosZ;
			var localNormal;
			var localNormalX;
			var localNormalY;
			var localNormalZ;
			var v2 = hit.position;
			localPosX = v2.x;
			localPosY = v2.y;
			localPosZ = v2.z;
			var v3 = hit.normal;
			localNormalX = v3.x;
			localNormalY = v3.y;
			localNormalZ = v3.z;
			var __tmp__X2;
			var __tmp__Y2;
			var __tmp__Z2;
			__tmp__X2 = transform._rotation00 * localPosX + transform._rotation01 * localPosY + transform._rotation02 * localPosZ;
			__tmp__Y2 = transform._rotation10 * localPosX + transform._rotation11 * localPosY + transform._rotation12 * localPosZ;
			__tmp__Z2 = transform._rotation20 * localPosX + transform._rotation21 * localPosY + transform._rotation22 * localPosZ;
			localPosX = __tmp__X2;
			localPosY = __tmp__Y2;
			localPosZ = __tmp__Z2;
			var __tmp__X3;
			var __tmp__Y3;
			var __tmp__Z3;
			__tmp__X3 = transform._rotation00 * localNormalX + transform._rotation01 * localNormalY + transform._rotation02 * localNormalZ;
			__tmp__Y3 = transform._rotation10 * localNormalX + transform._rotation11 * localNormalY + transform._rotation12 * localNormalZ;
			__tmp__Z3 = transform._rotation20 * localNormalX + transform._rotation21 * localNormalY + transform._rotation22 * localNormalZ;
			localNormalX = __tmp__X3;
			localNormalY = __tmp__Y3;
			localNormalZ = __tmp__Z3;
			localPosX += transform._positionX;
			localPosY += transform._positionY;
			localPosZ += transform._positionZ;
			var v4 = hit.position;
			v4.x = localPosX;
			v4.y = localPosY;
			v4.z = localPosZ;
			var v5 = hit.normal;
			v5.x = localNormalX;
			v5.y = localNormalY;
			v5.z = localNormalZ;
			return true;
		}
		return false;
	}
};
var oimo_collision_geometry_ConvexGeometry = function(type) {
	oimo_collision_geometry_Geometry.call(this,type);
	this._gjkMargin = oimo_common_Setting.defaultGJKMargin;
	this._useGjkRayCast = false;
};
oimo_collision_geometry_ConvexGeometry.__name__ = true;
oimo_collision_geometry_ConvexGeometry.__super__ = oimo_collision_geometry_Geometry;
oimo_collision_geometry_ConvexGeometry.prototype = $extend(oimo_collision_geometry_Geometry.prototype,{
	getGjkMergin: function() {
		return this._gjkMargin;
	}
	,setGjkMergin: function(gjkMergin) {
		if(gjkMergin < 0) {
			gjkMergin = 0;
		}
		this._gjkMargin = gjkMergin;
	}
	,computeLocalSupportingVertex: function(dir,out) {
	}
	,rayCast: function(begin,end,transform,hit) {
		if(this._useGjkRayCast) {
			return oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance.rayCast(this,transform,begin,end,hit);
		} else {
			return oimo_collision_geometry_Geometry.prototype.rayCast.call(this,begin,end,transform,hit);
		}
	}
});
var oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry = function() {
	oimo_collision_geometry_ConvexGeometry.call(this,-1);
};
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.__name__ = true;
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	init: function(c,transform,translation) {
		this.c = c;
		var tr;
		var trX;
		var trY;
		var trZ;
		var v = translation;
		trX = v.x;
		trY = v.y;
		trZ = v.z;
		var localTr;
		var localTrX;
		var localTrY;
		var localTrZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * trX + transform._rotation10 * trY + transform._rotation20 * trZ;
		__tmp__Y = transform._rotation01 * trX + transform._rotation11 * trY + transform._rotation21 * trZ;
		__tmp__Z = transform._rotation02 * trX + transform._rotation12 * trY + transform._rotation22 * trZ;
		localTrX = __tmp__X;
		localTrY = __tmp__Y;
		localTrZ = __tmp__Z;
		this.localTranslation = new oimo_common_Vec3();
		var v1 = this.localTranslation;
		v1.x = localTrX;
		v1.y = localTrY;
		v1.z = localTrZ;
		this._gjkMargin = c._gjkMargin;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		this.c.computeLocalSupportingVertex(dir,out);
		var v = this.localTranslation;
		if(dir.x * v.x + dir.y * v.y + dir.z * v.z > 0) {
			var v1 = this.localTranslation;
			var tx = out.x + v1.x;
			var ty = out.y + v1.y;
			var tz = out.z + v1.z;
			out.x = tx;
			out.y = ty;
			out.z = tz;
		}
	}
});
var oimo_collision_broadphase__$BroadPhase_AabbGeometry = function() {
	oimo_collision_geometry_ConvexGeometry.call(this,-1);
	this.min = new oimo_common_Vec3();
	this.max = new oimo_common_Vec3();
};
oimo_collision_broadphase__$BroadPhase_AabbGeometry.__name__ = true;
oimo_collision_broadphase__$BroadPhase_AabbGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_broadphase__$BroadPhase_AabbGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	computeLocalSupportingVertex: function(dir,out) {
		out.x = dir.x > 0 ? this.max.x : this.min.x;
		out.y = dir.y > 0 ? this.max.y : this.min.y;
		out.z = dir.z > 0 ? this.max.z : this.min.z;
	}
});
var oimo_collision_broadphase_BroadPhaseProxyCallback = function() {
};
oimo_collision_broadphase_BroadPhaseProxyCallback.__name__ = true;
oimo_collision_broadphase_BroadPhaseProxyCallback.prototype = {
	process: function(proxy) {
	}
};
var oimo_collision_broadphase_BroadPhaseType = function() { };
oimo_collision_broadphase_BroadPhaseType.__name__ = true;
var oimo_collision_broadphase_Proxy = function(userData,id) {
	this.userData = userData;
	this._id = id;
	this._prev = null;
	this._next = null;
	this._aabbMinX = 0;
	this._aabbMinY = 0;
	this._aabbMinZ = 0;
	this._aabbMaxX = 0;
	this._aabbMaxY = 0;
	this._aabbMaxZ = 0;
};
oimo_collision_broadphase_Proxy.__name__ = true;
oimo_collision_broadphase_Proxy.prototype = {
	getId: function() {
		return this._id;
	}
	,getFatAabb: function() {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._aabbMinX;
		aabb._minY = this._aabbMinY;
		aabb._minZ = this._aabbMinZ;
		aabb._maxX = this._aabbMaxX;
		aabb._maxY = this._aabbMaxY;
		aabb._maxZ = this._aabbMaxZ;
		return aabb;
	}
	,getFatAabbTo: function(aabb) {
		aabb._minX = this._aabbMinX;
		aabb._minY = this._aabbMinY;
		aabb._minZ = this._aabbMinZ;
		aabb._maxX = this._aabbMaxX;
		aabb._maxY = this._aabbMaxY;
		aabb._maxZ = this._aabbMaxZ;
	}
};
var oimo_collision_broadphase_ProxyPair = function() {
	this._p1 = null;
	this._p2 = null;
};
oimo_collision_broadphase_ProxyPair.__name__ = true;
oimo_collision_broadphase_ProxyPair.prototype = {
	getProxy1: function() {
		return this._p1;
	}
	,getProxy2: function() {
		return this._p2;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_collision_broadphase_bruteforce_BruteForceBroadPhase = function() {
	oimo_collision_broadphase_BroadPhase.call(this,1);
	this._incremental = false;
};
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.__name__ = true;
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.__super__ = oimo_collision_broadphase_BroadPhase;
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.prototype = $extend(oimo_collision_broadphase_BroadPhase.prototype,{
	createProxy: function(userData,aabb) {
		var proxy = new oimo_collision_broadphase_Proxy(userData,this._idCount++);
		this._numProxies++;
		if(this._proxyList == null) {
			this._proxyList = proxy;
			this._proxyListLast = proxy;
		} else {
			this._proxyListLast._next = proxy;
			proxy._prev = this._proxyListLast;
			this._proxyListLast = proxy;
		}
		proxy._aabbMinX = aabb._minX;
		proxy._aabbMinY = aabb._minY;
		proxy._aabbMinZ = aabb._minZ;
		proxy._aabbMaxX = aabb._maxX;
		proxy._aabbMaxY = aabb._maxY;
		proxy._aabbMaxZ = aabb._maxZ;
		return proxy;
	}
	,destroyProxy: function(proxy) {
		this._numProxies--;
		var prev = proxy._prev;
		var next = proxy._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(proxy == this._proxyList) {
			this._proxyList = this._proxyList._next;
		}
		if(proxy == this._proxyListLast) {
			this._proxyListLast = this._proxyListLast._prev;
		}
		proxy._next = null;
		proxy._prev = null;
		proxy.userData = null;
	}
	,moveProxy: function(proxy,aabb,dislacement) {
		proxy._aabbMinX = aabb._minX;
		proxy._aabbMinY = aabb._minY;
		proxy._aabbMinZ = aabb._minZ;
		proxy._aabbMaxX = aabb._maxX;
		proxy._aabbMaxY = aabb._maxY;
		proxy._aabbMaxZ = aabb._maxZ;
	}
	,collectPairs: function() {
		var p = this._proxyPairList;
		if(p != null) {
			while(true) {
				p._p1 = null;
				p._p2 = null;
				p = p._next;
				if(!(p != null)) {
					break;
				}
			}
			this._proxyPairList._next = this._proxyPairPool;
			this._proxyPairPool = this._proxyPairList;
			this._proxyPairList = null;
		}
		this._testCount = 0;
		var p1 = this._proxyList;
		while(p1 != null) {
			var n = p1._next;
			var p2 = p1._next;
			while(p2 != null) {
				var n1 = p2._next;
				this._testCount++;
				if(p1._aabbMinX < p2._aabbMaxX && p1._aabbMaxX > p2._aabbMinX && p1._aabbMinY < p2._aabbMaxY && p1._aabbMaxY > p2._aabbMinY && p1._aabbMinZ < p2._aabbMaxZ && p1._aabbMaxZ > p2._aabbMinZ) {
					var first = this._proxyPairPool;
					if(first != null) {
						this._proxyPairPool = first._next;
						first._next = null;
					} else {
						first = new oimo_collision_broadphase_ProxyPair();
					}
					var pp = first;
					if(this._proxyPairList == null) {
						this._proxyPairList = pp;
					} else {
						pp._next = this._proxyPairList;
						this._proxyPairList = pp;
					}
					pp._p1 = p1;
					pp._p2 = p2;
				}
				p2 = n1;
			}
			p1 = n;
		}
	}
	,rayCast: function(begin,end,callback) {
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var dir;
		var dirX;
		var dirY;
		var dirZ;
		var v = begin;
		p1X = v.x;
		p1Y = v.y;
		p1Z = v.z;
		var v1 = end;
		p2X = v1.x;
		p2Y = v1.y;
		p2Z = v1.z;
		dirX = p2X - p1X;
		dirY = p2Y - p1Y;
		dirZ = p2Z - p1Z;
		var min;
		var minX;
		var minY;
		var minZ;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		minX = p1X < p2X ? p1X : p2X;
		minY = p1Y < p2Y ? p1Y : p2Y;
		minZ = p1Z < p2Z ? p1Z : p2Z;
		maxX = p1X > p2X ? p1X : p2X;
		maxY = p1Y > p2Y ? p1Y : p2Y;
		maxZ = p1Z > p2Z ? p1Z : p2Z;
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			var x1 = p1X;
			var y1 = p1Y;
			var z1 = p1Z;
			var x2 = p2X;
			var y2 = p2Y;
			var z2 = p2Z;
			var sminx = x1 < x2 ? x1 : x2;
			var sminy = y1 < y2 ? y1 : y2;
			var sminz = z1 < z2 ? z1 : z2;
			var smaxx = x1 > x2 ? x1 : x2;
			var smaxy = y1 > y2 ? y1 : y2;
			var smaxz = z1 > z2 ? z1 : z2;
			var pminx = p._aabbMinX;
			var pminy = p._aabbMinY;
			var pminz = p._aabbMinZ;
			var pmaxx = p._aabbMaxX;
			var pmaxy = p._aabbMaxY;
			var pmaxz = p._aabbMaxZ;
			var tmp;
			if(pminx > smaxx || pmaxx < sminx || pminy > smaxy || pmaxy < sminy || pminz > smaxz || pmaxz < sminz) {
				tmp = false;
			} else {
				var dx = x2 - x1;
				var dy = y2 - y1;
				var dz = z2 - z1;
				var adx = dx < 0 ? -dx : dx;
				var ady = dy < 0 ? -dy : dy;
				var adz = dz < 0 ? -dz : dz;
				var pextx = (pmaxx - pminx) * 0.5;
				var pexty = (pmaxy - pminy) * 0.5;
				var pextz = (pmaxz - pminz) * 0.5;
				var pcntx = (pmaxx + pminx) * 0.5;
				var pcnty = (pmaxy + pminy) * 0.5;
				var pcntz = (pmaxz + pminz) * 0.5;
				var cpx = x1 - pcntx;
				var cpy = y1 - pcnty;
				var cpz = z1 - pcntz;
				var tmp1;
				var tmp2;
				var x = cpy * dz - cpz * dy;
				if(!((x < 0 ? -x : x) - (pexty * adz + pextz * ady) > 0)) {
					var x3 = cpz * dx - cpx * dz;
					tmp2 = (x3 < 0 ? -x3 : x3) - (pextz * adx + pextx * adz) > 0;
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var x4 = cpx * dy - cpy * dx;
					tmp1 = (x4 < 0 ? -x4 : x4) - (pextx * ady + pexty * adx) > 0;
				} else {
					tmp1 = true;
				}
				tmp = tmp1 ? false : true;
			}
			if(tmp) {
				callback.process(p);
			}
			p = n;
		}
	}
	,convexCast: function(convex,begin,translation,callback) {
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			var v = this._aabb.min;
			v.x = p._aabbMinX;
			v.y = p._aabbMinY;
			v.z = p._aabbMinZ;
			var v1 = this._aabb.max;
			v1.x = p._aabbMaxX;
			v1.y = p._aabbMaxY;
			v1.z = p._aabbMaxZ;
			this._convexSweep.init(convex,begin,translation);
			var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
			if(gjkEpa.computeClosestPointsImpl(this._convexSweep,this._aabb,begin,this.identity,null,false) == 0 && gjkEpa.distance <= 0) {
				callback.process(p);
			}
			p = n;
		}
	}
	,aabbTest: function(aabb,callback) {
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			if(aabb._minX < p._aabbMaxX && aabb._maxX > p._aabbMinX && aabb._minY < p._aabbMaxY && aabb._maxY > p._aabbMinY && aabb._minZ < p._aabbMaxZ && aabb._maxZ > p._aabbMinZ) {
				callback.process(p);
			}
			p = n;
		}
	}
});
var oimo_collision_broadphase_bvh_BvhBroadPhase = function() {
	oimo_collision_broadphase_BroadPhase.call(this,2);
	this._incremental = true;
	this._tree = new oimo_collision_broadphase_bvh_BvhTree();
	var this1 = new Array(1024);
	this.movedProxies = this1;
	this.numMovedProxies = 0;
};
oimo_collision_broadphase_bvh_BvhBroadPhase.__name__ = true;
oimo_collision_broadphase_bvh_BvhBroadPhase.__super__ = oimo_collision_broadphase_BroadPhase;
oimo_collision_broadphase_bvh_BvhBroadPhase.prototype = $extend(oimo_collision_broadphase_BroadPhase.prototype,{
	collide: function(n1,n2) {
		this._testCount++;
		var l1 = n1._height == 0;
		var l2 = n2._height == 0;
		if(n1 == n2) {
			if(l1) {
				return;
			}
			this.collide(n1._children[0],n2);
			this.collide(n1._children[1],n2);
			return;
		}
		if(!(n1._aabbMinX < n2._aabbMaxX && n1._aabbMaxX > n2._aabbMinX && n1._aabbMinY < n2._aabbMaxY && n1._aabbMaxY > n2._aabbMinY && n1._aabbMinZ < n2._aabbMaxZ && n1._aabbMaxZ > n2._aabbMinZ)) {
			return;
		}
		if(l1 && l2) {
			var p1 = n1._proxy;
			var p2 = n2._proxy;
			var first = this._proxyPairPool;
			if(first != null) {
				this._proxyPairPool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_broadphase_ProxyPair();
			}
			var pp = first;
			if(this._proxyPairList == null) {
				this._proxyPairList = pp;
			} else {
				pp._next = this._proxyPairList;
				this._proxyPairList = pp;
			}
			pp._p1 = p1;
			pp._p2 = p2;
			return;
		}
		if(l2 || n1._height > n2._height) {
			this.collide(n1._children[0],n2);
			this.collide(n1._children[1],n2);
		} else {
			this.collide(n2._children[0],n1);
			this.collide(n2._children[1],n1);
		}
	}
	,rayCastRecursive: function(node,_p1X,_p1Y,_p1Z,_p2X,_p2Y,_p2Z,callback) {
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		p1X = _p1X;
		p1Y = _p1Y;
		p1Z = _p1Z;
		p2X = _p2X;
		p2Y = _p2Y;
		p2Z = _p2Z;
		var x1 = p1X;
		var y1 = p1Y;
		var z1 = p1Z;
		var x2 = p2X;
		var y2 = p2Y;
		var z2 = p2Z;
		var sminx = x1 < x2 ? x1 : x2;
		var sminy = y1 < y2 ? y1 : y2;
		var sminz = z1 < z2 ? z1 : z2;
		var smaxx = x1 > x2 ? x1 : x2;
		var smaxy = y1 > y2 ? y1 : y2;
		var smaxz = z1 > z2 ? z1 : z2;
		var pminx = node._aabbMinX;
		var pminy = node._aabbMinY;
		var pminz = node._aabbMinZ;
		var pmaxx = node._aabbMaxX;
		var pmaxy = node._aabbMaxY;
		var pmaxz = node._aabbMaxZ;
		var tmp;
		if(pminx > smaxx || pmaxx < sminx || pminy > smaxy || pmaxy < sminy || pminz > smaxz || pmaxz < sminz) {
			tmp = false;
		} else {
			var dx = x2 - x1;
			var dy = y2 - y1;
			var dz = z2 - z1;
			var adx = dx < 0 ? -dx : dx;
			var ady = dy < 0 ? -dy : dy;
			var adz = dz < 0 ? -dz : dz;
			var pextx = (pmaxx - pminx) * 0.5;
			var pexty = (pmaxy - pminy) * 0.5;
			var pextz = (pmaxz - pminz) * 0.5;
			var pcntx = (pmaxx + pminx) * 0.5;
			var pcnty = (pmaxy + pminy) * 0.5;
			var pcntz = (pmaxz + pminz) * 0.5;
			var cpx = x1 - pcntx;
			var cpy = y1 - pcnty;
			var cpz = z1 - pcntz;
			var tmp1;
			var tmp2;
			var x = cpy * dz - cpz * dy;
			if(!((x < 0 ? -x : x) - (pexty * adz + pextz * ady) > 0)) {
				var x3 = cpz * dx - cpx * dz;
				tmp2 = (x3 < 0 ? -x3 : x3) - (pextz * adx + pextx * adz) > 0;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				var x4 = cpx * dy - cpy * dx;
				tmp1 = (x4 < 0 ? -x4 : x4) - (pextx * ady + pexty * adx) > 0;
			} else {
				tmp1 = true;
			}
			tmp = tmp1 ? false : true;
		}
		if(!tmp) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.rayCastRecursive(node._children[0],p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
		this.rayCastRecursive(node._children[1],p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
	}
	,convexCastRecursive: function(node,convex,begin,translation,callback) {
		var v = this._aabb.min;
		v.x = node._aabbMinX;
		v.y = node._aabbMinY;
		v.z = node._aabbMinZ;
		var v1 = this._aabb.max;
		v1.x = node._aabbMaxX;
		v1.y = node._aabbMaxY;
		v1.z = node._aabbMaxZ;
		this._convexSweep.init(convex,begin,translation);
		var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
		if(!(gjkEpa.computeClosestPointsImpl(this._convexSweep,this._aabb,begin,this.identity,null,false) == 0 && gjkEpa.distance <= 0)) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.convexCastRecursive(node._children[0],convex,begin,translation,callback);
		this.convexCastRecursive(node._children[1],convex,begin,translation,callback);
	}
	,aabbTestRecursive: function(node,aabb,callback) {
		if(!(node._aabbMinX < aabb._maxX && node._aabbMaxX > aabb._minX && node._aabbMinY < aabb._maxY && node._aabbMaxY > aabb._minY && node._aabbMinZ < aabb._maxZ && node._aabbMaxZ > aabb._minZ)) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.aabbTestRecursive(node._children[0],aabb,callback);
		this.aabbTestRecursive(node._children[1],aabb,callback);
	}
	,createProxy: function(userData,aabb) {
		var p = new oimo_collision_broadphase_bvh_BvhProxy(userData,this._idCount++);
		this._numProxies++;
		if(this._proxyList == null) {
			this._proxyList = p;
			this._proxyListLast = p;
		} else {
			this._proxyListLast._next = p;
			p._prev = this._proxyListLast;
			this._proxyListLast = p;
		}
		p._aabbMinX = aabb._minX;
		p._aabbMinY = aabb._minY;
		p._aabbMinZ = aabb._minZ;
		p._aabbMaxX = aabb._maxX;
		p._aabbMaxY = aabb._maxY;
		p._aabbMaxZ = aabb._maxZ;
		var padding = oimo_common_Setting.bvhProxyPadding;
		var paddingVec;
		var paddingVecX;
		var paddingVecY;
		var paddingVecZ;
		paddingVecX = padding;
		paddingVecY = padding;
		paddingVecZ = padding;
		p._aabbMinX -= paddingVecX;
		p._aabbMinY -= paddingVecY;
		p._aabbMinZ -= paddingVecZ;
		p._aabbMaxX += paddingVecX;
		p._aabbMaxY += paddingVecY;
		p._aabbMaxZ += paddingVecZ;
		var _this = this._tree;
		var first = _this._nodePool;
		if(first != null) {
			_this._nodePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_broadphase_bvh_BvhNode();
		}
		var leaf = first;
		leaf._proxy = p;
		p._leaf = leaf;
		leaf._aabbMinX = p._aabbMinX;
		leaf._aabbMinY = p._aabbMinY;
		leaf._aabbMinZ = p._aabbMinZ;
		leaf._aabbMaxX = p._aabbMaxX;
		leaf._aabbMaxY = p._aabbMaxY;
		leaf._aabbMaxZ = p._aabbMaxZ;
		_this._numLeaves++;
		if(_this.leafList == null) {
			_this.leafList = leaf;
			_this.leafListLast = leaf;
		} else {
			_this.leafListLast._nextLeaf = leaf;
			leaf._prevLeaf = _this.leafListLast;
			_this.leafListLast = leaf;
		}
		if(_this._root == null) {
			_this._root = leaf;
		} else {
			var sibling = _this._root;
			while(sibling._height > 0) {
				var nextStep = _this._strategy._decideInsertion(sibling,leaf);
				if(nextStep == -1) {
					break;
				} else {
					sibling = sibling._children[nextStep];
				}
			}
			var parent = sibling._parent;
			var first1 = _this._nodePool;
			if(first1 != null) {
				_this._nodePool = first1._next;
				first1._next = null;
			} else {
				first1 = new oimo_collision_broadphase_bvh_BvhNode();
			}
			var node = first1;
			if(parent == null) {
				_this._root = node;
			} else {
				var index = sibling._childIndex;
				parent._children[index] = node;
				node._parent = parent;
				node._childIndex = index;
			}
			var index1 = sibling._childIndex;
			node._children[index1] = sibling;
			sibling._parent = node;
			sibling._childIndex = index1;
			var index2 = sibling._childIndex ^ 1;
			node._children[index2] = leaf;
			leaf._parent = node;
			leaf._childIndex = index2;
			while(node != null) {
				if(_this._strategy._balancingEnabled) {
					var nh = node._height;
					if(nh < 2) {
						node = node;
					} else {
						var p1 = node._parent;
						var l = node._children[0];
						var r = node._children[1];
						var lh = l._height;
						var rh = r._height;
						var balance = lh - rh;
						var nodeIndex = node._childIndex;
						if(balance > 1) {
							var ll = l._children[0];
							var lr = l._children[1];
							var llh = ll._height;
							var lrh = lr._height;
							if(llh > lrh) {
								l._children[1] = node;
								node._parent = l;
								node._childIndex = 1;
								node._children[0] = lr;
								lr._parent = node;
								lr._childIndex = 0;
								var c1 = l._children[0];
								var c2 = l._children[1];
								l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
								l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
								l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
								l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
								l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
								l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
								var h1 = l._children[0]._height;
								var h2 = l._children[1]._height;
								l._height = (h1 > h2 ? h1 : h2) + 1;
								var c11 = node._children[0];
								var c21 = node._children[1];
								node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
								node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
								node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
								node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
								node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
								node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
								var h11 = node._children[0]._height;
								var h21 = node._children[1]._height;
								node._height = (h11 > h21 ? h11 : h21) + 1;
							} else {
								l._children[0] = node;
								node._parent = l;
								node._childIndex = 0;
								node._children[0] = ll;
								ll._parent = node;
								ll._childIndex = 0;
								var c12 = l._children[0];
								var c22 = l._children[1];
								l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
								l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
								l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
								l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
								l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
								l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
								var h12 = l._children[0]._height;
								var h22 = l._children[1]._height;
								l._height = (h12 > h22 ? h12 : h22) + 1;
								var c13 = node._children[0];
								var c23 = node._children[1];
								node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
								node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
								node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
								node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
								node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
								node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
								var h13 = node._children[0]._height;
								var h23 = node._children[1]._height;
								node._height = (h13 > h23 ? h13 : h23) + 1;
							}
							if(p1 != null) {
								p1._children[nodeIndex] = l;
								l._parent = p1;
								l._childIndex = nodeIndex;
							} else {
								_this._root = l;
								l._parent = null;
							}
							node = l;
						} else if(balance < -1) {
							var rl = r._children[0];
							var rr = r._children[1];
							var rlh = rl._height;
							var rrh = rr._height;
							if(rlh > rrh) {
								r._children[1] = node;
								node._parent = r;
								node._childIndex = 1;
								node._children[1] = rr;
								rr._parent = node;
								rr._childIndex = 1;
								var c14 = r._children[0];
								var c24 = r._children[1];
								r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
								r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
								r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
								r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
								r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
								r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
								var h14 = r._children[0]._height;
								var h24 = r._children[1]._height;
								r._height = (h14 > h24 ? h14 : h24) + 1;
								var c15 = node._children[0];
								var c25 = node._children[1];
								node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
								node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
								node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
								node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
								node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
								node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
								var h15 = node._children[0]._height;
								var h25 = node._children[1]._height;
								node._height = (h15 > h25 ? h15 : h25) + 1;
							} else {
								r._children[0] = node;
								node._parent = r;
								node._childIndex = 0;
								node._children[1] = rl;
								rl._parent = node;
								rl._childIndex = 1;
								var c16 = r._children[0];
								var c26 = r._children[1];
								r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
								r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
								r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
								r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
								r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
								r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
								var h16 = r._children[0]._height;
								var h26 = r._children[1]._height;
								r._height = (h16 > h26 ? h16 : h26) + 1;
								var c17 = node._children[0];
								var c27 = node._children[1];
								node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
								node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
								node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
								node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
								node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
								node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
								var h17 = node._children[0]._height;
								var h27 = node._children[1]._height;
								node._height = (h17 > h27 ? h17 : h27) + 1;
							}
							if(p1 != null) {
								p1._children[nodeIndex] = r;
								r._parent = p1;
								r._childIndex = nodeIndex;
							} else {
								_this._root = r;
								r._parent = null;
							}
							node = r;
						} else {
							node = node;
						}
					}
				}
				var h18 = node._children[0]._height;
				var h28 = node._children[1]._height;
				node._height = (h18 > h28 ? h18 : h28) + 1;
				var c18 = node._children[0];
				var c28 = node._children[1];
				node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
				node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
				node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
				node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
				node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
				node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
				node = node._parent;
			}
		}
		if(!p._moved) {
			p._moved = true;
			if(this.movedProxies.length == this.numMovedProxies) {
				var newLength = this.numMovedProxies << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g1 = 0;
				var _g = this.numMovedProxies;
				while(_g1 < _g) {
					var i = _g1++;
					newArray[i] = this.movedProxies[i];
					this.movedProxies[i] = null;
				}
				this.movedProxies = newArray;
			}
			this.movedProxies[this.numMovedProxies++] = p;
		}
		return p;
	}
	,destroyProxy: function(proxy) {
		this._numProxies--;
		var prev = proxy._prev;
		var next = proxy._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(proxy == this._proxyList) {
			this._proxyList = this._proxyList._next;
		}
		if(proxy == this._proxyListLast) {
			this._proxyListLast = this._proxyListLast._prev;
		}
		proxy._next = null;
		proxy._prev = null;
		var bvhProxy = proxy;
		var _this = this._tree;
		var leaf = bvhProxy._leaf;
		_this._numLeaves--;
		var prev1 = leaf._prevLeaf;
		var next1 = leaf._nextLeaf;
		if(prev1 != null) {
			prev1._nextLeaf = next1;
		}
		if(next1 != null) {
			next1._prevLeaf = prev1;
		}
		if(leaf == _this.leafList) {
			_this.leafList = _this.leafList._nextLeaf;
		}
		if(leaf == _this.leafListLast) {
			_this.leafListLast = _this.leafListLast._prevLeaf;
		}
		leaf._nextLeaf = null;
		leaf._prevLeaf = null;
		if(_this._root == leaf) {
			_this._root = null;
		} else {
			var parent = leaf._parent;
			var sibling = parent._children[leaf._childIndex ^ 1];
			var grandParent = parent._parent;
			if(grandParent == null) {
				sibling._parent = null;
				sibling._childIndex = 0;
				_this._root = sibling;
				parent._next = null;
				parent._childIndex = 0;
				parent._children[0] = null;
				parent._children[1] = null;
				parent._childIndex = 0;
				parent._parent = null;
				parent._height = 0;
				parent._proxy = null;
				parent._next = _this._nodePool;
				_this._nodePool = parent;
			} else {
				sibling._parent = grandParent;
				var index = parent._childIndex;
				grandParent._children[index] = sibling;
				sibling._parent = grandParent;
				sibling._childIndex = index;
				parent._next = null;
				parent._childIndex = 0;
				parent._children[0] = null;
				parent._children[1] = null;
				parent._childIndex = 0;
				parent._parent = null;
				parent._height = 0;
				parent._proxy = null;
				parent._next = _this._nodePool;
				_this._nodePool = parent;
				var node = grandParent;
				while(node != null) {
					if(_this._strategy._balancingEnabled) {
						var nh = node._height;
						if(nh < 2) {
							node = node;
						} else {
							var p = node._parent;
							var l = node._children[0];
							var r = node._children[1];
							var lh = l._height;
							var rh = r._height;
							var balance = lh - rh;
							var nodeIndex = node._childIndex;
							if(balance > 1) {
								var ll = l._children[0];
								var lr = l._children[1];
								var llh = ll._height;
								var lrh = lr._height;
								if(llh > lrh) {
									l._children[1] = node;
									node._parent = l;
									node._childIndex = 1;
									node._children[0] = lr;
									lr._parent = node;
									lr._childIndex = 0;
									var c1 = l._children[0];
									var c2 = l._children[1];
									l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
									l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
									l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
									l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
									l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
									l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
									var h1 = l._children[0]._height;
									var h2 = l._children[1]._height;
									l._height = (h1 > h2 ? h1 : h2) + 1;
									var c11 = node._children[0];
									var c21 = node._children[1];
									node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
									node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
									node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
									node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
									node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
									node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
									var h11 = node._children[0]._height;
									var h21 = node._children[1]._height;
									node._height = (h11 > h21 ? h11 : h21) + 1;
								} else {
									l._children[0] = node;
									node._parent = l;
									node._childIndex = 0;
									node._children[0] = ll;
									ll._parent = node;
									ll._childIndex = 0;
									var c12 = l._children[0];
									var c22 = l._children[1];
									l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
									l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
									l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
									l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
									l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
									l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
									var h12 = l._children[0]._height;
									var h22 = l._children[1]._height;
									l._height = (h12 > h22 ? h12 : h22) + 1;
									var c13 = node._children[0];
									var c23 = node._children[1];
									node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
									node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
									node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
									node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
									node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
									node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
									var h13 = node._children[0]._height;
									var h23 = node._children[1]._height;
									node._height = (h13 > h23 ? h13 : h23) + 1;
								}
								if(p != null) {
									p._children[nodeIndex] = l;
									l._parent = p;
									l._childIndex = nodeIndex;
								} else {
									_this._root = l;
									l._parent = null;
								}
								node = l;
							} else if(balance < -1) {
								var rl = r._children[0];
								var rr = r._children[1];
								var rlh = rl._height;
								var rrh = rr._height;
								if(rlh > rrh) {
									r._children[1] = node;
									node._parent = r;
									node._childIndex = 1;
									node._children[1] = rr;
									rr._parent = node;
									rr._childIndex = 1;
									var c14 = r._children[0];
									var c24 = r._children[1];
									r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
									r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
									r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
									r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
									r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
									r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
									var h14 = r._children[0]._height;
									var h24 = r._children[1]._height;
									r._height = (h14 > h24 ? h14 : h24) + 1;
									var c15 = node._children[0];
									var c25 = node._children[1];
									node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
									node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
									node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
									node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
									node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
									node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
									var h15 = node._children[0]._height;
									var h25 = node._children[1]._height;
									node._height = (h15 > h25 ? h15 : h25) + 1;
								} else {
									r._children[0] = node;
									node._parent = r;
									node._childIndex = 0;
									node._children[1] = rl;
									rl._parent = node;
									rl._childIndex = 1;
									var c16 = r._children[0];
									var c26 = r._children[1];
									r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
									r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
									r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
									r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
									r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
									r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
									var h16 = r._children[0]._height;
									var h26 = r._children[1]._height;
									r._height = (h16 > h26 ? h16 : h26) + 1;
									var c17 = node._children[0];
									var c27 = node._children[1];
									node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
									node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
									node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
									node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
									node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
									node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
									var h17 = node._children[0]._height;
									var h27 = node._children[1]._height;
									node._height = (h17 > h27 ? h17 : h27) + 1;
								}
								if(p != null) {
									p._children[nodeIndex] = r;
									r._parent = p;
									r._childIndex = nodeIndex;
								} else {
									_this._root = r;
									r._parent = null;
								}
								node = r;
							} else {
								node = node;
							}
						}
					}
					var h18 = node._children[0]._height;
					var h28 = node._children[1]._height;
					node._height = (h18 > h28 ? h18 : h28) + 1;
					var c18 = node._children[0];
					var c28 = node._children[1];
					node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
					node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
					node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
					node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
					node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
					node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
					node = node._parent;
				}
			}
		}
		bvhProxy._leaf = null;
		leaf._next = null;
		leaf._childIndex = 0;
		leaf._children[0] = null;
		leaf._children[1] = null;
		leaf._childIndex = 0;
		leaf._parent = null;
		leaf._height = 0;
		leaf._proxy = null;
		leaf._next = _this._nodePool;
		_this._nodePool = leaf;
		bvhProxy.userData = null;
		bvhProxy._next = null;
		bvhProxy._prev = null;
		if(bvhProxy._moved) {
			bvhProxy._moved = false;
		}
	}
	,moveProxy: function(proxy,aabb,displacement) {
		var p = proxy;
		if(p._aabbMinX <= aabb._minX && p._aabbMaxX >= aabb._maxX && p._aabbMinY <= aabb._minY && p._aabbMaxY >= aabb._maxY && p._aabbMinZ <= aabb._minZ && p._aabbMaxZ >= aabb._maxZ) {
			return;
		}
		p._aabbMinX = aabb._minX;
		p._aabbMinY = aabb._minY;
		p._aabbMinZ = aabb._minZ;
		p._aabbMaxX = aabb._maxX;
		p._aabbMaxY = aabb._maxY;
		p._aabbMaxZ = aabb._maxZ;
		var padding = oimo_common_Setting.bvhProxyPadding;
		var paddingVec;
		var paddingVecX;
		var paddingVecY;
		var paddingVecZ;
		paddingVecX = padding;
		paddingVecY = padding;
		paddingVecZ = padding;
		p._aabbMinX -= paddingVecX;
		p._aabbMinY -= paddingVecY;
		p._aabbMinZ -= paddingVecZ;
		p._aabbMaxX += paddingVecX;
		p._aabbMaxY += paddingVecY;
		p._aabbMaxZ += paddingVecZ;
		if(displacement != null) {
			var d;
			var dX;
			var dY;
			var dZ;
			var zero;
			var zeroX;
			var zeroY;
			var zeroZ;
			var addToMin;
			var addToMinX;
			var addToMinY;
			var addToMinZ;
			var addToMax;
			var addToMaxX;
			var addToMaxY;
			var addToMaxZ;
			zeroX = 0;
			zeroY = 0;
			zeroZ = 0;
			var v = displacement;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			addToMinX = zeroX < dX ? zeroX : dX;
			addToMinY = zeroY < dY ? zeroY : dY;
			addToMinZ = zeroZ < dZ ? zeroZ : dZ;
			addToMaxX = zeroX > dX ? zeroX : dX;
			addToMaxY = zeroY > dY ? zeroY : dY;
			addToMaxZ = zeroZ > dZ ? zeroZ : dZ;
			p._aabbMinX += addToMinX;
			p._aabbMinY += addToMinY;
			p._aabbMinZ += addToMinZ;
			p._aabbMaxX += addToMaxX;
			p._aabbMaxY += addToMaxY;
			p._aabbMaxZ += addToMaxZ;
		}
		if(!p._moved) {
			p._moved = true;
			if(this.movedProxies.length == this.numMovedProxies) {
				var newLength = this.numMovedProxies << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g1 = 0;
				var _g = this.numMovedProxies;
				while(_g1 < _g) {
					var i = _g1++;
					newArray[i] = this.movedProxies[i];
					this.movedProxies[i] = null;
				}
				this.movedProxies = newArray;
			}
			this.movedProxies[this.numMovedProxies++] = p;
		}
	}
	,collectPairs: function() {
		var p = this._proxyPairList;
		if(p != null) {
			while(true) {
				p._p1 = null;
				p._p2 = null;
				p = p._next;
				if(!(p != null)) {
					break;
				}
			}
			this._proxyPairList._next = this._proxyPairPool;
			this._proxyPairPool = this._proxyPairList;
			this._proxyPairList = null;
		}
		this._testCount = 0;
		if(this._numProxies < 2) {
			return;
		}
		var topDown = false;
		if(topDown) {
			while(this.numMovedProxies > 0) this.movedProxies[--this.numMovedProxies] = null;
			var _this = this._tree;
			if(_this._root != null) {
				if(_this._root != null) {
					_this.decomposeRecursive(_this._root);
					_this._root = null;
				}
				while(_this.tmp.length < _this._numLeaves) {
					var newLength = _this.tmp.length << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this.tmp.length;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this.tmp[i];
						_this.tmp[i] = null;
					}
					_this.tmp = newArray;
				}
				var idx = 0;
				var leaf = _this.leafList;
				while(leaf != null) {
					var n = leaf._nextLeaf;
					_this.tmp[idx] = leaf;
					++idx;
					leaf = n;
				}
				_this._root = _this.buildTopDownRecursive(_this.tmp,0,_this._numLeaves);
			}
			this.collide(this._tree._root,this._tree._root);
			return;
		}
		var incrementalCollision = this.numMovedProxies / this._numProxies < oimo_common_Setting.bvhIncrementalCollisionThreshold;
		var _g11 = 0;
		var _g2 = this.numMovedProxies;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p1 = this.movedProxies[i1];
			if(p1._moved) {
				var _this1 = this._tree;
				var leaf1 = p1._leaf;
				_this1._numLeaves--;
				var prev = leaf1._prevLeaf;
				var next = leaf1._nextLeaf;
				if(prev != null) {
					prev._nextLeaf = next;
				}
				if(next != null) {
					next._prevLeaf = prev;
				}
				if(leaf1 == _this1.leafList) {
					_this1.leafList = _this1.leafList._nextLeaf;
				}
				if(leaf1 == _this1.leafListLast) {
					_this1.leafListLast = _this1.leafListLast._prevLeaf;
				}
				leaf1._nextLeaf = null;
				leaf1._prevLeaf = null;
				if(_this1._root == leaf1) {
					_this1._root = null;
				} else {
					var parent = leaf1._parent;
					var sibling = parent._children[leaf1._childIndex ^ 1];
					var grandParent = parent._parent;
					if(grandParent == null) {
						sibling._parent = null;
						sibling._childIndex = 0;
						_this1._root = sibling;
						parent._next = null;
						parent._childIndex = 0;
						parent._children[0] = null;
						parent._children[1] = null;
						parent._childIndex = 0;
						parent._parent = null;
						parent._height = 0;
						parent._proxy = null;
						parent._next = _this1._nodePool;
						_this1._nodePool = parent;
					} else {
						sibling._parent = grandParent;
						var index = parent._childIndex;
						grandParent._children[index] = sibling;
						sibling._parent = grandParent;
						sibling._childIndex = index;
						parent._next = null;
						parent._childIndex = 0;
						parent._children[0] = null;
						parent._children[1] = null;
						parent._childIndex = 0;
						parent._parent = null;
						parent._height = 0;
						parent._proxy = null;
						parent._next = _this1._nodePool;
						_this1._nodePool = parent;
						var node = grandParent;
						while(node != null) {
							if(_this1._strategy._balancingEnabled) {
								var nh = node._height;
								if(nh < 2) {
									node = node;
								} else {
									var p2 = node._parent;
									var l = node._children[0];
									var r = node._children[1];
									var lh = l._height;
									var rh = r._height;
									var balance = lh - rh;
									var nodeIndex = node._childIndex;
									if(balance > 1) {
										var ll = l._children[0];
										var lr = l._children[1];
										var llh = ll._height;
										var lrh = lr._height;
										if(llh > lrh) {
											l._children[1] = node;
											node._parent = l;
											node._childIndex = 1;
											node._children[0] = lr;
											lr._parent = node;
											lr._childIndex = 0;
											var c1 = l._children[0];
											var c2 = l._children[1];
											l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
											l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
											l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
											l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
											l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
											l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
											var h1 = l._children[0]._height;
											var h2 = l._children[1]._height;
											l._height = (h1 > h2 ? h1 : h2) + 1;
											var c11 = node._children[0];
											var c21 = node._children[1];
											node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
											node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
											node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
											node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
											node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
											node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
											var h11 = node._children[0]._height;
											var h21 = node._children[1]._height;
											node._height = (h11 > h21 ? h11 : h21) + 1;
										} else {
											l._children[0] = node;
											node._parent = l;
											node._childIndex = 0;
											node._children[0] = ll;
											ll._parent = node;
											ll._childIndex = 0;
											var c12 = l._children[0];
											var c22 = l._children[1];
											l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
											l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
											l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
											l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
											l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
											l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
											var h12 = l._children[0]._height;
											var h22 = l._children[1]._height;
											l._height = (h12 > h22 ? h12 : h22) + 1;
											var c13 = node._children[0];
											var c23 = node._children[1];
											node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
											node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
											node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
											node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
											node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
											node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
											var h13 = node._children[0]._height;
											var h23 = node._children[1]._height;
											node._height = (h13 > h23 ? h13 : h23) + 1;
										}
										if(p2 != null) {
											p2._children[nodeIndex] = l;
											l._parent = p2;
											l._childIndex = nodeIndex;
										} else {
											_this1._root = l;
											l._parent = null;
										}
										node = l;
									} else if(balance < -1) {
										var rl = r._children[0];
										var rr = r._children[1];
										var rlh = rl._height;
										var rrh = rr._height;
										if(rlh > rrh) {
											r._children[1] = node;
											node._parent = r;
											node._childIndex = 1;
											node._children[1] = rr;
											rr._parent = node;
											rr._childIndex = 1;
											var c14 = r._children[0];
											var c24 = r._children[1];
											r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
											r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
											r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
											r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
											r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
											r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
											var h14 = r._children[0]._height;
											var h24 = r._children[1]._height;
											r._height = (h14 > h24 ? h14 : h24) + 1;
											var c15 = node._children[0];
											var c25 = node._children[1];
											node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
											node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
											node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
											node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
											node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
											node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
											var h15 = node._children[0]._height;
											var h25 = node._children[1]._height;
											node._height = (h15 > h25 ? h15 : h25) + 1;
										} else {
											r._children[0] = node;
											node._parent = r;
											node._childIndex = 0;
											node._children[1] = rl;
											rl._parent = node;
											rl._childIndex = 1;
											var c16 = r._children[0];
											var c26 = r._children[1];
											r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
											r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
											r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
											r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
											r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
											r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
											var h16 = r._children[0]._height;
											var h26 = r._children[1]._height;
											r._height = (h16 > h26 ? h16 : h26) + 1;
											var c17 = node._children[0];
											var c27 = node._children[1];
											node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
											node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
											node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
											node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
											node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
											node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
											var h17 = node._children[0]._height;
											var h27 = node._children[1]._height;
											node._height = (h17 > h27 ? h17 : h27) + 1;
										}
										if(p2 != null) {
											p2._children[nodeIndex] = r;
											r._parent = p2;
											r._childIndex = nodeIndex;
										} else {
											_this1._root = r;
											r._parent = null;
										}
										node = r;
									} else {
										node = node;
									}
								}
							}
							var h18 = node._children[0]._height;
							var h28 = node._children[1]._height;
							node._height = (h18 > h28 ? h18 : h28) + 1;
							var c18 = node._children[0];
							var c28 = node._children[1];
							node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
							node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
							node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
							node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
							node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
							node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
							node = node._parent;
						}
					}
				}
				p1._leaf = null;
				leaf1._next = null;
				leaf1._childIndex = 0;
				leaf1._children[0] = null;
				leaf1._children[1] = null;
				leaf1._childIndex = 0;
				leaf1._parent = null;
				leaf1._height = 0;
				leaf1._proxy = null;
				leaf1._next = _this1._nodePool;
				_this1._nodePool = leaf1;
				var _this2 = this._tree;
				var first = _this2._nodePool;
				if(first != null) {
					_this2._nodePool = first._next;
					first._next = null;
				} else {
					first = new oimo_collision_broadphase_bvh_BvhNode();
				}
				var leaf2 = first;
				leaf2._proxy = p1;
				p1._leaf = leaf2;
				leaf2._aabbMinX = p1._aabbMinX;
				leaf2._aabbMinY = p1._aabbMinY;
				leaf2._aabbMinZ = p1._aabbMinZ;
				leaf2._aabbMaxX = p1._aabbMaxX;
				leaf2._aabbMaxY = p1._aabbMaxY;
				leaf2._aabbMaxZ = p1._aabbMaxZ;
				_this2._numLeaves++;
				if(_this2.leafList == null) {
					_this2.leafList = leaf2;
					_this2.leafListLast = leaf2;
				} else {
					_this2.leafListLast._nextLeaf = leaf2;
					leaf2._prevLeaf = _this2.leafListLast;
					_this2.leafListLast = leaf2;
				}
				if(_this2._root == null) {
					_this2._root = leaf2;
				} else {
					var sibling1 = _this2._root;
					while(sibling1._height > 0) {
						var nextStep = _this2._strategy._decideInsertion(sibling1,leaf2);
						if(nextStep == -1) {
							break;
						} else {
							sibling1 = sibling1._children[nextStep];
						}
					}
					var parent1 = sibling1._parent;
					var first1 = _this2._nodePool;
					if(first1 != null) {
						_this2._nodePool = first1._next;
						first1._next = null;
					} else {
						first1 = new oimo_collision_broadphase_bvh_BvhNode();
					}
					var node1 = first1;
					if(parent1 == null) {
						_this2._root = node1;
					} else {
						var index1 = sibling1._childIndex;
						parent1._children[index1] = node1;
						node1._parent = parent1;
						node1._childIndex = index1;
					}
					var index2 = sibling1._childIndex;
					node1._children[index2] = sibling1;
					sibling1._parent = node1;
					sibling1._childIndex = index2;
					var index3 = sibling1._childIndex ^ 1;
					node1._children[index3] = leaf2;
					leaf2._parent = node1;
					leaf2._childIndex = index3;
					while(node1 != null) {
						if(_this2._strategy._balancingEnabled) {
							var nh1 = node1._height;
							if(nh1 < 2) {
								node1 = node1;
							} else {
								var p3 = node1._parent;
								var l1 = node1._children[0];
								var r1 = node1._children[1];
								var lh1 = l1._height;
								var rh1 = r1._height;
								var balance1 = lh1 - rh1;
								var nodeIndex1 = node1._childIndex;
								if(balance1 > 1) {
									var ll1 = l1._children[0];
									var lr1 = l1._children[1];
									var llh1 = ll1._height;
									var lrh1 = lr1._height;
									if(llh1 > lrh1) {
										l1._children[1] = node1;
										node1._parent = l1;
										node1._childIndex = 1;
										node1._children[0] = lr1;
										lr1._parent = node1;
										lr1._childIndex = 0;
										var c19 = l1._children[0];
										var c29 = l1._children[1];
										l1._aabbMinX = c19._aabbMinX < c29._aabbMinX ? c19._aabbMinX : c29._aabbMinX;
										l1._aabbMinY = c19._aabbMinY < c29._aabbMinY ? c19._aabbMinY : c29._aabbMinY;
										l1._aabbMinZ = c19._aabbMinZ < c29._aabbMinZ ? c19._aabbMinZ : c29._aabbMinZ;
										l1._aabbMaxX = c19._aabbMaxX > c29._aabbMaxX ? c19._aabbMaxX : c29._aabbMaxX;
										l1._aabbMaxY = c19._aabbMaxY > c29._aabbMaxY ? c19._aabbMaxY : c29._aabbMaxY;
										l1._aabbMaxZ = c19._aabbMaxZ > c29._aabbMaxZ ? c19._aabbMaxZ : c29._aabbMaxZ;
										var h19 = l1._children[0]._height;
										var h29 = l1._children[1]._height;
										l1._height = (h19 > h29 ? h19 : h29) + 1;
										var c110 = node1._children[0];
										var c210 = node1._children[1];
										node1._aabbMinX = c110._aabbMinX < c210._aabbMinX ? c110._aabbMinX : c210._aabbMinX;
										node1._aabbMinY = c110._aabbMinY < c210._aabbMinY ? c110._aabbMinY : c210._aabbMinY;
										node1._aabbMinZ = c110._aabbMinZ < c210._aabbMinZ ? c110._aabbMinZ : c210._aabbMinZ;
										node1._aabbMaxX = c110._aabbMaxX > c210._aabbMaxX ? c110._aabbMaxX : c210._aabbMaxX;
										node1._aabbMaxY = c110._aabbMaxY > c210._aabbMaxY ? c110._aabbMaxY : c210._aabbMaxY;
										node1._aabbMaxZ = c110._aabbMaxZ > c210._aabbMaxZ ? c110._aabbMaxZ : c210._aabbMaxZ;
										var h110 = node1._children[0]._height;
										var h210 = node1._children[1]._height;
										node1._height = (h110 > h210 ? h110 : h210) + 1;
									} else {
										l1._children[0] = node1;
										node1._parent = l1;
										node1._childIndex = 0;
										node1._children[0] = ll1;
										ll1._parent = node1;
										ll1._childIndex = 0;
										var c111 = l1._children[0];
										var c211 = l1._children[1];
										l1._aabbMinX = c111._aabbMinX < c211._aabbMinX ? c111._aabbMinX : c211._aabbMinX;
										l1._aabbMinY = c111._aabbMinY < c211._aabbMinY ? c111._aabbMinY : c211._aabbMinY;
										l1._aabbMinZ = c111._aabbMinZ < c211._aabbMinZ ? c111._aabbMinZ : c211._aabbMinZ;
										l1._aabbMaxX = c111._aabbMaxX > c211._aabbMaxX ? c111._aabbMaxX : c211._aabbMaxX;
										l1._aabbMaxY = c111._aabbMaxY > c211._aabbMaxY ? c111._aabbMaxY : c211._aabbMaxY;
										l1._aabbMaxZ = c111._aabbMaxZ > c211._aabbMaxZ ? c111._aabbMaxZ : c211._aabbMaxZ;
										var h111 = l1._children[0]._height;
										var h211 = l1._children[1]._height;
										l1._height = (h111 > h211 ? h111 : h211) + 1;
										var c112 = node1._children[0];
										var c212 = node1._children[1];
										node1._aabbMinX = c112._aabbMinX < c212._aabbMinX ? c112._aabbMinX : c212._aabbMinX;
										node1._aabbMinY = c112._aabbMinY < c212._aabbMinY ? c112._aabbMinY : c212._aabbMinY;
										node1._aabbMinZ = c112._aabbMinZ < c212._aabbMinZ ? c112._aabbMinZ : c212._aabbMinZ;
										node1._aabbMaxX = c112._aabbMaxX > c212._aabbMaxX ? c112._aabbMaxX : c212._aabbMaxX;
										node1._aabbMaxY = c112._aabbMaxY > c212._aabbMaxY ? c112._aabbMaxY : c212._aabbMaxY;
										node1._aabbMaxZ = c112._aabbMaxZ > c212._aabbMaxZ ? c112._aabbMaxZ : c212._aabbMaxZ;
										var h112 = node1._children[0]._height;
										var h212 = node1._children[1]._height;
										node1._height = (h112 > h212 ? h112 : h212) + 1;
									}
									if(p3 != null) {
										p3._children[nodeIndex1] = l1;
										l1._parent = p3;
										l1._childIndex = nodeIndex1;
									} else {
										_this2._root = l1;
										l1._parent = null;
									}
									node1 = l1;
								} else if(balance1 < -1) {
									var rl1 = r1._children[0];
									var rr1 = r1._children[1];
									var rlh1 = rl1._height;
									var rrh1 = rr1._height;
									if(rlh1 > rrh1) {
										r1._children[1] = node1;
										node1._parent = r1;
										node1._childIndex = 1;
										node1._children[1] = rr1;
										rr1._parent = node1;
										rr1._childIndex = 1;
										var c113 = r1._children[0];
										var c213 = r1._children[1];
										r1._aabbMinX = c113._aabbMinX < c213._aabbMinX ? c113._aabbMinX : c213._aabbMinX;
										r1._aabbMinY = c113._aabbMinY < c213._aabbMinY ? c113._aabbMinY : c213._aabbMinY;
										r1._aabbMinZ = c113._aabbMinZ < c213._aabbMinZ ? c113._aabbMinZ : c213._aabbMinZ;
										r1._aabbMaxX = c113._aabbMaxX > c213._aabbMaxX ? c113._aabbMaxX : c213._aabbMaxX;
										r1._aabbMaxY = c113._aabbMaxY > c213._aabbMaxY ? c113._aabbMaxY : c213._aabbMaxY;
										r1._aabbMaxZ = c113._aabbMaxZ > c213._aabbMaxZ ? c113._aabbMaxZ : c213._aabbMaxZ;
										var h113 = r1._children[0]._height;
										var h213 = r1._children[1]._height;
										r1._height = (h113 > h213 ? h113 : h213) + 1;
										var c114 = node1._children[0];
										var c214 = node1._children[1];
										node1._aabbMinX = c114._aabbMinX < c214._aabbMinX ? c114._aabbMinX : c214._aabbMinX;
										node1._aabbMinY = c114._aabbMinY < c214._aabbMinY ? c114._aabbMinY : c214._aabbMinY;
										node1._aabbMinZ = c114._aabbMinZ < c214._aabbMinZ ? c114._aabbMinZ : c214._aabbMinZ;
										node1._aabbMaxX = c114._aabbMaxX > c214._aabbMaxX ? c114._aabbMaxX : c214._aabbMaxX;
										node1._aabbMaxY = c114._aabbMaxY > c214._aabbMaxY ? c114._aabbMaxY : c214._aabbMaxY;
										node1._aabbMaxZ = c114._aabbMaxZ > c214._aabbMaxZ ? c114._aabbMaxZ : c214._aabbMaxZ;
										var h114 = node1._children[0]._height;
										var h214 = node1._children[1]._height;
										node1._height = (h114 > h214 ? h114 : h214) + 1;
									} else {
										r1._children[0] = node1;
										node1._parent = r1;
										node1._childIndex = 0;
										node1._children[1] = rl1;
										rl1._parent = node1;
										rl1._childIndex = 1;
										var c115 = r1._children[0];
										var c215 = r1._children[1];
										r1._aabbMinX = c115._aabbMinX < c215._aabbMinX ? c115._aabbMinX : c215._aabbMinX;
										r1._aabbMinY = c115._aabbMinY < c215._aabbMinY ? c115._aabbMinY : c215._aabbMinY;
										r1._aabbMinZ = c115._aabbMinZ < c215._aabbMinZ ? c115._aabbMinZ : c215._aabbMinZ;
										r1._aabbMaxX = c115._aabbMaxX > c215._aabbMaxX ? c115._aabbMaxX : c215._aabbMaxX;
										r1._aabbMaxY = c115._aabbMaxY > c215._aabbMaxY ? c115._aabbMaxY : c215._aabbMaxY;
										r1._aabbMaxZ = c115._aabbMaxZ > c215._aabbMaxZ ? c115._aabbMaxZ : c215._aabbMaxZ;
										var h115 = r1._children[0]._height;
										var h215 = r1._children[1]._height;
										r1._height = (h115 > h215 ? h115 : h215) + 1;
										var c116 = node1._children[0];
										var c216 = node1._children[1];
										node1._aabbMinX = c116._aabbMinX < c216._aabbMinX ? c116._aabbMinX : c216._aabbMinX;
										node1._aabbMinY = c116._aabbMinY < c216._aabbMinY ? c116._aabbMinY : c216._aabbMinY;
										node1._aabbMinZ = c116._aabbMinZ < c216._aabbMinZ ? c116._aabbMinZ : c216._aabbMinZ;
										node1._aabbMaxX = c116._aabbMaxX > c216._aabbMaxX ? c116._aabbMaxX : c216._aabbMaxX;
										node1._aabbMaxY = c116._aabbMaxY > c216._aabbMaxY ? c116._aabbMaxY : c216._aabbMaxY;
										node1._aabbMaxZ = c116._aabbMaxZ > c216._aabbMaxZ ? c116._aabbMaxZ : c216._aabbMaxZ;
										var h116 = node1._children[0]._height;
										var h216 = node1._children[1]._height;
										node1._height = (h116 > h216 ? h116 : h216) + 1;
									}
									if(p3 != null) {
										p3._children[nodeIndex1] = r1;
										r1._parent = p3;
										r1._childIndex = nodeIndex1;
									} else {
										_this2._root = r1;
										r1._parent = null;
									}
									node1 = r1;
								} else {
									node1 = node1;
								}
							}
						}
						var h117 = node1._children[0]._height;
						var h217 = node1._children[1]._height;
						node1._height = (h117 > h217 ? h117 : h217) + 1;
						var c117 = node1._children[0];
						var c217 = node1._children[1];
						node1._aabbMinX = c117._aabbMinX < c217._aabbMinX ? c117._aabbMinX : c217._aabbMinX;
						node1._aabbMinY = c117._aabbMinY < c217._aabbMinY ? c117._aabbMinY : c217._aabbMinY;
						node1._aabbMinZ = c117._aabbMinZ < c217._aabbMinZ ? c117._aabbMinZ : c217._aabbMinZ;
						node1._aabbMaxX = c117._aabbMaxX > c217._aabbMaxX ? c117._aabbMaxX : c217._aabbMaxX;
						node1._aabbMaxY = c117._aabbMaxY > c217._aabbMaxY ? c117._aabbMaxY : c217._aabbMaxY;
						node1._aabbMaxZ = c117._aabbMaxZ > c217._aabbMaxZ ? c117._aabbMaxZ : c217._aabbMaxZ;
						node1 = node1._parent;
					}
				}
				if(incrementalCollision) {
					this.collide(this._tree._root,p1._leaf);
				}
				p1._moved = false;
			}
			this.movedProxies[i1] = null;
		}
		if(!incrementalCollision) {
			this.collide(this._tree._root,this._tree._root);
		}
		this.numMovedProxies = 0;
	}
	,rayCast: function(begin,end,callback) {
		if(this._tree._root == null) {
			return;
		}
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var v = begin;
		p1X = v.x;
		p1Y = v.y;
		p1Z = v.z;
		var v1 = end;
		p2X = v1.x;
		p2Y = v1.y;
		p2Z = v1.z;
		this.rayCastRecursive(this._tree._root,p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
	}
	,convexCast: function(convex,begin,translation,callback) {
		if(this._tree._root == null) {
			return;
		}
		this.convexCastRecursive(this._tree._root,convex,begin,translation,callback);
	}
	,aabbTest: function(aabb,callback) {
		if(this._tree._root == null) {
			return;
		}
		this.aabbTestRecursive(this._tree._root,aabb,callback);
	}
	,getTreeBalance: function() {
		return this._tree._getBalance();
	}
});
var oimo_collision_broadphase_bvh_BvhInsertionStrategy = function() { };
oimo_collision_broadphase_bvh_BvhInsertionStrategy.__name__ = true;
var oimo_collision_broadphase_bvh_BvhNode = function() {
	this._next = null;
	this._prevLeaf = null;
	this._nextLeaf = null;
	var this1 = new Array(2);
	this._children = this1;
	this._childIndex = 0;
	this._parent = null;
	this._height = 0;
	this._proxy = null;
	this._aabbMinX = 0;
	this._aabbMinY = 0;
	this._aabbMinZ = 0;
	this._aabbMaxX = 0;
	this._aabbMaxY = 0;
	this._aabbMaxZ = 0;
};
oimo_collision_broadphase_bvh_BvhNode.__name__ = true;
var oimo_collision_broadphase_bvh_BvhProxy = function(userData,id) {
	oimo_collision_broadphase_Proxy.call(this,userData,id);
	this._leaf = null;
	this._moved = false;
};
oimo_collision_broadphase_bvh_BvhProxy.__name__ = true;
oimo_collision_broadphase_bvh_BvhProxy.__super__ = oimo_collision_broadphase_Proxy;
oimo_collision_broadphase_bvh_BvhProxy.prototype = $extend(oimo_collision_broadphase_Proxy.prototype,{
});
var oimo_collision_broadphase_bvh_BvhStrategy = function() {
	this._insertionStrategy = 0;
	this._balancingEnabled = false;
};
oimo_collision_broadphase_bvh_BvhStrategy.__name__ = true;
oimo_collision_broadphase_bvh_BvhStrategy.prototype = {
	_decideInsertion: function(currentNode,leaf) {
		var _g = this._insertionStrategy;
		switch(_g) {
		case 0:
			var center;
			var centerX;
			var centerY;
			var centerZ;
			centerX = leaf._aabbMinX + leaf._aabbMaxX;
			centerY = leaf._aabbMinY + leaf._aabbMaxY;
			centerZ = leaf._aabbMinZ + leaf._aabbMaxZ;
			var c1 = currentNode._children[0];
			var c2 = currentNode._children[1];
			var diff1;
			var diff1X;
			var diff1Y;
			var diff1Z;
			var diff2;
			var diff2X;
			var diff2Y;
			var diff2Z;
			diff1X = c1._aabbMinX + c1._aabbMaxX;
			diff1Y = c1._aabbMinY + c1._aabbMaxY;
			diff1Z = c1._aabbMinZ + c1._aabbMaxZ;
			diff2X = c2._aabbMinX + c2._aabbMaxX;
			diff2Y = c2._aabbMinY + c2._aabbMaxY;
			diff2Z = c2._aabbMinZ + c2._aabbMaxZ;
			diff1X -= centerX;
			diff1Y -= centerY;
			diff1Z -= centerZ;
			diff2X -= centerX;
			diff2Y -= centerY;
			diff2Z -= centerZ;
			var dist1 = diff1X * diff1X + diff1Y * diff1Y + diff1Z * diff1Z;
			var dist2 = diff2X * diff2X + diff2Y * diff2Y + diff2Z * diff2Z;
			if(dist1 < dist2) {
				return 0;
			} else {
				return 1;
			}
			break;
		case 1:
			var c11 = currentNode._children[0];
			var c21 = currentNode._children[1];
			var ex = currentNode._aabbMaxX - currentNode._aabbMinX;
			var ey = currentNode._aabbMaxY - currentNode._aabbMinY;
			var ez = currentNode._aabbMaxZ - currentNode._aabbMinZ;
			var oldArea = (ex * (ey + ez) + ey * ez) * 2;
			var combinedMin;
			var combinedMinX;
			var combinedMinY;
			var combinedMinZ;
			var combinedMax;
			var combinedMaxX;
			var combinedMaxY;
			var combinedMaxZ;
			combinedMinX = currentNode._aabbMinX < leaf._aabbMinX ? currentNode._aabbMinX : leaf._aabbMinX;
			combinedMinY = currentNode._aabbMinY < leaf._aabbMinY ? currentNode._aabbMinY : leaf._aabbMinY;
			combinedMinZ = currentNode._aabbMinZ < leaf._aabbMinZ ? currentNode._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = currentNode._aabbMaxX > leaf._aabbMaxX ? currentNode._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = currentNode._aabbMaxY > leaf._aabbMaxY ? currentNode._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = currentNode._aabbMaxZ > leaf._aabbMaxZ ? currentNode._aabbMaxZ : leaf._aabbMaxZ;
			var ex1 = combinedMaxX - combinedMinX;
			var ey1 = combinedMaxY - combinedMinY;
			var ez1 = combinedMaxZ - combinedMinZ;
			var newArea = (ex1 * (ey1 + ez1) + ey1 * ez1) * 2;
			var creatingCost = newArea * 2;
			var incrementalCost = (newArea - oldArea) * 2;
			var descendingCost1 = incrementalCost;
			combinedMinX = c11._aabbMinX < leaf._aabbMinX ? c11._aabbMinX : leaf._aabbMinX;
			combinedMinY = c11._aabbMinY < leaf._aabbMinY ? c11._aabbMinY : leaf._aabbMinY;
			combinedMinZ = c11._aabbMinZ < leaf._aabbMinZ ? c11._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = c11._aabbMaxX > leaf._aabbMaxX ? c11._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = c11._aabbMaxY > leaf._aabbMaxY ? c11._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = c11._aabbMaxZ > leaf._aabbMaxZ ? c11._aabbMaxZ : leaf._aabbMaxZ;
			if(c11._height == 0) {
				var ex2 = combinedMaxX - combinedMinX;
				var ey2 = combinedMaxY - combinedMinY;
				var ez2 = combinedMaxZ - combinedMinZ;
				descendingCost1 += (ex2 * (ey2 + ez2) + ey2 * ez2) * 2;
			} else {
				var ex3 = combinedMaxX - combinedMinX;
				var ey3 = combinedMaxY - combinedMinY;
				var ez3 = combinedMaxZ - combinedMinZ;
				var ex4 = c11._aabbMaxX - c11._aabbMinX;
				var ey4 = c11._aabbMaxY - c11._aabbMinY;
				var ez4 = c11._aabbMaxZ - c11._aabbMinZ;
				descendingCost1 += (ex3 * (ey3 + ez3) + ey3 * ez3) * 2 - (ex4 * (ey4 + ez4) + ey4 * ez4) * 2;
			}
			var descendingCost2 = incrementalCost;
			combinedMinX = c21._aabbMinX < leaf._aabbMinX ? c21._aabbMinX : leaf._aabbMinX;
			combinedMinY = c21._aabbMinY < leaf._aabbMinY ? c21._aabbMinY : leaf._aabbMinY;
			combinedMinZ = c21._aabbMinZ < leaf._aabbMinZ ? c21._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = c21._aabbMaxX > leaf._aabbMaxX ? c21._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = c21._aabbMaxY > leaf._aabbMaxY ? c21._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = c21._aabbMaxZ > leaf._aabbMaxZ ? c21._aabbMaxZ : leaf._aabbMaxZ;
			if(c21._height == 0) {
				var ex5 = combinedMaxX - combinedMinX;
				var ey5 = combinedMaxY - combinedMinY;
				var ez5 = combinedMaxZ - combinedMinZ;
				descendingCost2 += (ex5 * (ey5 + ez5) + ey5 * ez5) * 2;
			} else {
				var ex6 = combinedMaxX - combinedMinX;
				var ey6 = combinedMaxY - combinedMinY;
				var ez6 = combinedMaxZ - combinedMinZ;
				var ex7 = c21._aabbMaxX - c21._aabbMinX;
				var ey7 = c21._aabbMaxY - c21._aabbMinY;
				var ez7 = c21._aabbMaxZ - c21._aabbMinZ;
				descendingCost2 += (ex6 * (ey6 + ez6) + ey6 * ez6) * 2 - (ex7 * (ey7 + ez7) + ey7 * ez7) * 2;
			}
			if(creatingCost < descendingCost1) {
				if(creatingCost < descendingCost2) {
					return -1;
				} else {
					return 1;
				}
			} else if(descendingCost1 < descendingCost2) {
				return 0;
			} else {
				return 1;
			}
			break;
		default:
			console.log("../../workspace_as3/OimoPhysics/src/oimo/collision/broadphase/bvh/BvhStrategy.hx:37:","invalid BVH insertion strategy: " + this._insertionStrategy);
			return -1;
		}
	}
	,_splitLeaves: function(leaves,from,until) {
		var invN = 1.0 / (until - from);
		var centerMean;
		var centerMeanX;
		var centerMeanY;
		var centerMeanZ;
		centerMeanX = 0;
		centerMeanY = 0;
		centerMeanZ = 0;
		var _g1 = from;
		var _g = until;
		while(_g1 < _g) {
			var i = _g1++;
			var leaf = leaves[i];
			leaf._tmpX = leaf._aabbMaxX + leaf._aabbMinX;
			leaf._tmpY = leaf._aabbMaxY + leaf._aabbMinY;
			leaf._tmpZ = leaf._aabbMaxZ + leaf._aabbMinZ;
			centerMeanX += leaf._tmpX;
			centerMeanY += leaf._tmpY;
			centerMeanZ += leaf._tmpZ;
		}
		centerMeanX *= invN;
		centerMeanY *= invN;
		centerMeanZ *= invN;
		var variance;
		var varianceX;
		var varianceY;
		var varianceZ;
		varianceX = 0;
		varianceY = 0;
		varianceZ = 0;
		var _g11 = from;
		var _g2 = until;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var leaf1 = leaves[i1];
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			diffX = leaf1._tmpX - centerMeanX;
			diffY = leaf1._tmpY - centerMeanY;
			diffZ = leaf1._tmpZ - centerMeanZ;
			diffX *= diffX;
			diffY *= diffY;
			diffZ *= diffZ;
			varianceX += diffX;
			varianceY += diffY;
			varianceZ += diffZ;
		}
		var varX = varianceX;
		var varY = varianceY;
		var varZ = varianceZ;
		var l = from;
		var r = until - 1;
		if(varX > varY) {
			if(varX > varZ) {
				var mean = centerMeanX;
				while(true) {
					while(true) {
						var leaf2 = leaves[l];
						if(leaf2._tmpX <= mean) {
							break;
						}
						++l;
					}
					while(true) {
						var leaf3 = leaves[r];
						if(leaf3._tmpX >= mean) {
							break;
						}
						--r;
					}
					if(l >= r) {
						break;
					}
					var tmp = leaves[l];
					leaves[l] = leaves[r];
					leaves[r] = tmp;
					++l;
					--r;
				}
			} else {
				var mean1 = centerMeanZ;
				while(true) {
					while(true) {
						var leaf4 = leaves[l];
						if(leaf4._tmpZ <= mean1) {
							break;
						}
						++l;
					}
					while(true) {
						var leaf5 = leaves[r];
						if(leaf5._tmpZ >= mean1) {
							break;
						}
						--r;
					}
					if(l >= r) {
						break;
					}
					var tmp1 = leaves[l];
					leaves[l] = leaves[r];
					leaves[r] = tmp1;
					++l;
					--r;
				}
			}
		} else if(varY > varZ) {
			var mean2 = centerMeanY;
			while(true) {
				while(true) {
					var leaf6 = leaves[l];
					if(leaf6._tmpY <= mean2) {
						break;
					}
					++l;
				}
				while(true) {
					var leaf7 = leaves[r];
					if(leaf7._tmpY >= mean2) {
						break;
					}
					--r;
				}
				if(l >= r) {
					break;
				}
				var tmp2 = leaves[l];
				leaves[l] = leaves[r];
				leaves[r] = tmp2;
				++l;
				--r;
			}
		} else {
			var mean3 = centerMeanZ;
			while(true) {
				while(true) {
					var leaf8 = leaves[l];
					if(leaf8._tmpZ <= mean3) {
						break;
					}
					++l;
				}
				while(true) {
					var leaf9 = leaves[r];
					if(leaf9._tmpZ >= mean3) {
						break;
					}
					--r;
				}
				if(l >= r) {
					break;
				}
				var tmp3 = leaves[l];
				leaves[l] = leaves[r];
				leaves[r] = tmp3;
				++l;
				--r;
			}
		}
		return l;
	}
};
var oimo_collision_broadphase_bvh_BvhTree = function() {
	this._root = null;
	this._numLeaves = 0;
	this._strategy = new oimo_collision_broadphase_bvh_BvhStrategy();
	this._nodePool = null;
	this.leafList = null;
	this.leafListLast = null;
	var this1 = new Array(1024);
	this.tmp = this1;
};
oimo_collision_broadphase_bvh_BvhTree.__name__ = true;
oimo_collision_broadphase_bvh_BvhTree.prototype = {
	_print: function(root,indent) {
		if(indent == null) {
			indent = "";
		}
		if(root == null) {
			return;
		}
		if(root._height == 0) {
			console.log("../../workspace_as3/OimoPhysics/src/oimo/collision/broadphase/bvh/BvhTree.hx:39:",indent + root._proxy._id);
		} else {
			this._print(root._children[0],indent + "  ");
			var tmp;
			var size;
			var sizeX;
			var sizeY;
			var sizeZ;
			sizeX = root._aabbMaxX - root._aabbMinX;
			sizeY = root._aabbMaxY - root._aabbMinY;
			sizeZ = root._aabbMaxZ - root._aabbMinZ;
			var x = sizeX;
			var y = sizeY;
			var z = sizeZ;
			if(x * (y + z) + y * z > 0) {
				var size1;
				var sizeX1;
				var sizeY1;
				var sizeZ1;
				sizeX1 = root._aabbMaxX - root._aabbMinX;
				sizeY1 = root._aabbMaxY - root._aabbMinY;
				sizeZ1 = root._aabbMaxZ - root._aabbMinZ;
				var x1 = sizeX1;
				var y1 = sizeY1;
				var z1 = sizeZ1;
				tmp = ((x1 * (y1 + z1) + y1 * z1) * 1000 + 0.5 | 0) / 1000;
			} else {
				var size2;
				var sizeX2;
				var sizeY2;
				var sizeZ2;
				sizeX2 = root._aabbMaxX - root._aabbMinX;
				sizeY2 = root._aabbMaxY - root._aabbMinY;
				sizeZ2 = root._aabbMaxZ - root._aabbMinZ;
				var x2 = sizeX2;
				var y2 = sizeY2;
				var z2 = sizeZ2;
				tmp = ((x2 * (y2 + z2) + y2 * z2) * 1000 - 0.5 | 0) / 1000;
			}
			console.log("../../workspace_as3/OimoPhysics/src/oimo/collision/broadphase/bvh/BvhTree.hx:42:",indent + "#" + root._height + ", " + tmp);
			this._print(root._children[1],indent + "  ");
		}
	}
	,_getBalance: function() {
		return this.getBalanceRecursive(this._root);
	}
	,deleteRecursive: function(root) {
		if(root._height == 0) {
			var prev = root._prevLeaf;
			var next = root._nextLeaf;
			if(prev != null) {
				prev._nextLeaf = next;
			}
			if(next != null) {
				next._prevLeaf = prev;
			}
			if(root == this.leafList) {
				this.leafList = this.leafList._nextLeaf;
			}
			if(root == this.leafListLast) {
				this.leafListLast = this.leafListLast._prevLeaf;
			}
			root._nextLeaf = null;
			root._prevLeaf = null;
			root._proxy._leaf = null;
			root._next = null;
			root._childIndex = 0;
			root._children[0] = null;
			root._children[1] = null;
			root._childIndex = 0;
			root._parent = null;
			root._height = 0;
			root._proxy = null;
			root._next = this._nodePool;
			this._nodePool = root;
			return;
		}
		this.deleteRecursive(root._children[0]);
		this.deleteRecursive(root._children[1]);
		root._next = null;
		root._childIndex = 0;
		root._children[0] = null;
		root._children[1] = null;
		root._childIndex = 0;
		root._parent = null;
		root._height = 0;
		root._proxy = null;
		root._next = this._nodePool;
		this._nodePool = root;
	}
	,decomposeRecursive: function(root) {
		if(root._height == 0) {
			root._childIndex = 0;
			root._parent = null;
			return;
		}
		this.decomposeRecursive(root._children[0]);
		this.decomposeRecursive(root._children[1]);
		root._next = null;
		root._childIndex = 0;
		root._children[0] = null;
		root._children[1] = null;
		root._childIndex = 0;
		root._parent = null;
		root._height = 0;
		root._proxy = null;
		root._next = this._nodePool;
		this._nodePool = root;
	}
	,buildTopDownRecursive: function(leaves,from,until) {
		var num = until - from;
		if(num == 1) {
			var leaf = leaves[from];
			var proxy = leaf._proxy;
			leaf._aabbMinX = proxy._aabbMinX;
			leaf._aabbMinY = proxy._aabbMinY;
			leaf._aabbMinZ = proxy._aabbMinZ;
			leaf._aabbMaxX = proxy._aabbMaxX;
			leaf._aabbMaxY = proxy._aabbMaxY;
			leaf._aabbMaxZ = proxy._aabbMaxZ;
			return leaf;
		}
		var splitAt = this._strategy._splitLeaves(leaves,from,until);
		var child1 = this.buildTopDownRecursive(leaves,from,splitAt);
		var child2 = this.buildTopDownRecursive(leaves,splitAt,until);
		var first = this._nodePool;
		if(first != null) {
			this._nodePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_broadphase_bvh_BvhNode();
		}
		var parent = first;
		parent._children[0] = child1;
		child1._parent = parent;
		child1._childIndex = 0;
		parent._children[1] = child2;
		child2._parent = parent;
		child2._childIndex = 1;
		var c1 = parent._children[0];
		var c2 = parent._children[1];
		parent._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
		parent._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
		parent._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
		parent._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
		parent._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
		parent._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
		var h1 = parent._children[0]._height;
		var h2 = parent._children[1]._height;
		parent._height = (h1 > h2 ? h1 : h2) + 1;
		return parent;
	}
	,getBalanceRecursive: function(root) {
		if(root == null || root._height == 0) {
			return 0;
		}
		var balance = root._children[0]._height - root._children[1]._height;
		if(balance < 0) {
			balance = -balance;
		}
		return balance + this.getBalanceRecursive(root._children[0]) + this.getBalanceRecursive(root._children[1]);
	}
};
var oimo_collision_geometry_Aabb = function() {
	this._minX = 0;
	this._minY = 0;
	this._minZ = 0;
	this._maxX = 0;
	this._maxY = 0;
	this._maxZ = 0;
};
oimo_collision_geometry_Aabb.__name__ = true;
oimo_collision_geometry_Aabb.prototype = {
	init: function(min,max) {
		var v = min;
		this._minX = v.x;
		this._minY = v.y;
		this._minZ = v.z;
		var v1 = max;
		this._maxX = v1.x;
		this._maxY = v1.y;
		this._maxZ = v1.z;
		return this;
	}
	,getMin: function() {
		var min = new oimo_common_Vec3();
		var v = min;
		v.x = this._minX;
		v.y = this._minY;
		v.z = this._minZ;
		return min;
	}
	,getMinTo: function(min) {
		var v = min;
		v.x = this._minX;
		v.y = this._minY;
		v.z = this._minZ;
	}
	,setMin: function(min) {
		var v = min;
		this._minX = v.x;
		this._minY = v.y;
		this._minZ = v.z;
		return this;
	}
	,getMax: function() {
		var max = new oimo_common_Vec3();
		var v = max;
		v.x = this._maxX;
		v.y = this._maxY;
		v.z = this._maxZ;
		return max;
	}
	,getMaxTo: function(max) {
		var v = max;
		v.x = this._maxX;
		v.y = this._maxY;
		v.z = this._maxZ;
	}
	,setMax: function(max) {
		var v = max;
		this._maxX = v.x;
		this._maxY = v.y;
		this._maxZ = v.z;
		return this;
	}
	,getCenter: function() {
		var v = new oimo_common_Vec3();
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._minX + this._maxX;
		cY = this._minY + this._maxY;
		cZ = this._minZ + this._maxZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v1 = v;
		v1.x = cX;
		v1.y = cY;
		v1.z = cZ;
		return v;
	}
	,getCenterTo: function(center) {
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._minX + this._maxX;
		cY = this._minY + this._maxY;
		cZ = this._minZ + this._maxZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v = center;
		v.x = cX;
		v.y = cY;
		v.z = cZ;
	}
	,getExtents: function() {
		var v = new oimo_common_Vec3();
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._maxX - this._minX;
		cY = this._maxY - this._minY;
		cZ = this._maxZ - this._minZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v1 = v;
		v1.x = cX;
		v1.y = cY;
		v1.z = cZ;
		return v;
	}
	,getExtentsTo: function(halfExtents) {
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._maxX - this._minX;
		cY = this._maxY - this._minY;
		cZ = this._maxZ - this._minZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v = halfExtents;
		v.x = cX;
		v.y = cY;
		v.z = cZ;
	}
	,combine: function(other) {
		this._minX = this._minX < other._minX ? this._minX : other._minX;
		this._minY = this._minY < other._minY ? this._minY : other._minY;
		this._minZ = this._minZ < other._minZ ? this._minZ : other._minZ;
		this._maxX = this._maxX > other._maxX ? this._maxX : other._maxX;
		this._maxY = this._maxY > other._maxY ? this._maxY : other._maxY;
		this._maxZ = this._maxZ > other._maxZ ? this._maxZ : other._maxZ;
		return this;
	}
	,combined: function(other) {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX < other._minX ? this._minX : other._minX;
		aabb._minY = this._minY < other._minY ? this._minY : other._minY;
		aabb._minZ = this._minZ < other._minZ ? this._minZ : other._minZ;
		aabb._maxX = this._maxX > other._maxX ? this._maxX : other._maxX;
		aabb._maxY = this._maxY > other._maxY ? this._maxY : other._maxY;
		aabb._maxZ = this._maxZ > other._maxZ ? this._maxZ : other._maxZ;
		return aabb;
	}
	,overlap: function(other) {
		if(this._minX < other._maxX && this._maxX > other._minX && this._minY < other._maxY && this._maxY > other._minY && this._minZ < other._maxZ) {
			return this._maxZ > other._minZ;
		} else {
			return false;
		}
	}
	,getIntersection: function(other) {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX > other._minX ? this._minX : other._minX;
		aabb._minY = this._minY > other._minY ? this._minY : other._minY;
		aabb._minZ = this._minZ > other._minZ ? this._minZ : other._minZ;
		aabb._maxX = this._maxX < other._maxX ? this._maxX : other._maxX;
		aabb._maxY = this._maxY < other._maxY ? this._maxY : other._maxY;
		aabb._maxZ = this._maxZ < other._maxZ ? this._maxZ : other._maxZ;
		return aabb;
	}
	,getIntersectionTo: function(other,intersection) {
		intersection._minX = this._minX > other._minX ? this._minX : other._minX;
		intersection._minY = this._minY > other._minY ? this._minY : other._minY;
		intersection._minZ = this._minZ > other._minZ ? this._minZ : other._minZ;
		intersection._maxX = this._maxX < other._maxX ? this._maxX : other._maxX;
		intersection._maxY = this._maxY < other._maxY ? this._maxY : other._maxY;
		intersection._maxZ = this._maxZ < other._maxZ ? this._maxZ : other._maxZ;
	}
	,copyFrom: function(aabb) {
		this._minX = aabb._minX;
		this._minY = aabb._minY;
		this._minZ = aabb._minZ;
		this._maxX = aabb._maxX;
		this._maxY = aabb._maxY;
		this._maxZ = aabb._maxZ;
		return this;
	}
	,clone: function() {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX;
		aabb._minY = this._minY;
		aabb._minZ = this._minZ;
		aabb._maxX = this._maxX;
		aabb._maxY = this._maxY;
		aabb._maxZ = this._maxZ;
		return aabb;
	}
};
var oimo_collision_geometry_BoxGeometry = function(halfExtents) {
	oimo_collision_geometry_ConvexGeometry.call(this,1);
	var v = halfExtents;
	this._halfExtentsX = v.x;
	this._halfExtentsY = v.y;
	this._halfExtentsZ = v.z;
	this._halfAxisXX = halfExtents.x;
	this._halfAxisXY = 0;
	this._halfAxisXZ = 0;
	this._halfAxisYX = 0;
	this._halfAxisYY = halfExtents.y;
	this._halfAxisYZ = 0;
	this._halfAxisZX = 0;
	this._halfAxisZY = 0;
	this._halfAxisZZ = halfExtents.z;
	this._updateMass();
	var minHalfExtents = halfExtents.x < halfExtents.y ? halfExtents.z < halfExtents.x ? halfExtents.z : halfExtents.x : halfExtents.z < halfExtents.y ? halfExtents.z : halfExtents.y;
	if(this._gjkMargin > minHalfExtents * 0.2) {
		this._gjkMargin = minHalfExtents * 0.2;
	}
};
oimo_collision_geometry_BoxGeometry.__name__ = true;
oimo_collision_geometry_BoxGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_BoxGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getHalfExtents: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._halfExtentsX;
		v1.y = this._halfExtentsY;
		v1.z = this._halfExtentsZ;
		return v;
	}
	,getHalfExtentsTo: function(halfExtents) {
		var v = halfExtents;
		v.x = this._halfExtentsX;
		v.y = this._halfExtentsY;
		v.z = this._halfExtentsZ;
	}
	,_updateMass: function() {
		this._volume = 8 * (this._halfExtentsX * this._halfExtentsY * this._halfExtentsZ);
		var sq;
		var sqX;
		var sqY;
		var sqZ;
		sqX = this._halfExtentsX * this._halfExtentsX;
		sqY = this._halfExtentsY * this._halfExtentsY;
		sqZ = this._halfExtentsZ * this._halfExtentsZ;
		this._inertiaCoeff00 = 0.33333333333333331 * (sqY + sqZ);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.33333333333333331 * (sqZ + sqX);
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.33333333333333331 * (sqX + sqY);
	}
	,_computeAabb: function(aabb,tf) {
		var tfx;
		var tfxX;
		var tfxY;
		var tfxZ;
		var tfy;
		var tfyX;
		var tfyY;
		var tfyZ;
		var tfz;
		var tfzX;
		var tfzY;
		var tfzZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisXX + tf._rotation01 * this._halfAxisXY + tf._rotation02 * this._halfAxisXZ;
		__tmp__Y = tf._rotation10 * this._halfAxisXX + tf._rotation11 * this._halfAxisXY + tf._rotation12 * this._halfAxisXZ;
		__tmp__Z = tf._rotation20 * this._halfAxisXX + tf._rotation21 * this._halfAxisXY + tf._rotation22 * this._halfAxisXZ;
		tfxX = __tmp__X;
		tfxY = __tmp__Y;
		tfxZ = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf._rotation00 * this._halfAxisYX + tf._rotation01 * this._halfAxisYY + tf._rotation02 * this._halfAxisYZ;
		__tmp__Y1 = tf._rotation10 * this._halfAxisYX + tf._rotation11 * this._halfAxisYY + tf._rotation12 * this._halfAxisYZ;
		__tmp__Z1 = tf._rotation20 * this._halfAxisYX + tf._rotation21 * this._halfAxisYY + tf._rotation22 * this._halfAxisYZ;
		tfyX = __tmp__X1;
		tfyY = __tmp__Y1;
		tfyZ = __tmp__Z1;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = tf._rotation00 * this._halfAxisZX + tf._rotation01 * this._halfAxisZY + tf._rotation02 * this._halfAxisZZ;
		__tmp__Y2 = tf._rotation10 * this._halfAxisZX + tf._rotation11 * this._halfAxisZY + tf._rotation12 * this._halfAxisZZ;
		__tmp__Z2 = tf._rotation20 * this._halfAxisZX + tf._rotation21 * this._halfAxisZY + tf._rotation22 * this._halfAxisZZ;
		tfzX = __tmp__X2;
		tfzY = __tmp__Y2;
		tfzZ = __tmp__Z2;
		tfxX = tfxX < 0 ? -tfxX : tfxX;
		tfxY = tfxY < 0 ? -tfxY : tfxY;
		tfxZ = tfxZ < 0 ? -tfxZ : tfxZ;
		tfyX = tfyX < 0 ? -tfyX : tfyX;
		tfyY = tfyY < 0 ? -tfyY : tfyY;
		tfyZ = tfyZ < 0 ? -tfyZ : tfyZ;
		tfzX = tfzX < 0 ? -tfzX : tfzX;
		tfzY = tfzY < 0 ? -tfzY : tfzY;
		tfzZ = tfzZ < 0 ? -tfzZ : tfzZ;
		var tfs;
		var tfsX;
		var tfsY;
		var tfsZ;
		tfsX = tfxX + tfyX;
		tfsY = tfxY + tfyY;
		tfsZ = tfxZ + tfyZ;
		tfsX += tfzX;
		tfsY += tfzY;
		tfsZ += tfzZ;
		aabb._minX = tf._positionX - tfsX;
		aabb._minY = tf._positionY - tfsY;
		aabb._minZ = tf._positionZ - tfsZ;
		aabb._maxX = tf._positionX + tfsX;
		aabb._maxY = tf._positionY + tfsY;
		aabb._maxZ = tf._positionZ + tfsZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var gjkMargins;
		var gjkMarginsX;
		var gjkMarginsY;
		var gjkMarginsZ;
		var coreExtents;
		var coreExtentsX;
		var coreExtentsY;
		var coreExtentsZ;
		gjkMarginsX = this._gjkMargin;
		gjkMarginsY = this._gjkMargin;
		gjkMarginsZ = this._gjkMargin;
		gjkMarginsX = gjkMarginsX < this._halfExtentsX ? gjkMarginsX : this._halfExtentsX;
		gjkMarginsY = gjkMarginsY < this._halfExtentsY ? gjkMarginsY : this._halfExtentsY;
		gjkMarginsZ = gjkMarginsZ < this._halfExtentsZ ? gjkMarginsZ : this._halfExtentsZ;
		coreExtentsX = this._halfExtentsX - gjkMarginsX;
		coreExtentsY = this._halfExtentsY - gjkMarginsY;
		coreExtentsZ = this._halfExtentsZ - gjkMarginsZ;
		out.x = dir.x > 0 ? coreExtentsX : -coreExtentsX;
		out.y = dir.y > 0 ? coreExtentsY : -coreExtentsY;
		out.z = dir.z > 0 ? coreExtentsZ : -coreExtentsZ;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfW = this._halfExtentsX;
		var halfH = this._halfExtentsY;
		var halfD = this._halfExtentsZ;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminx = 0;
		var tminy = 0;
		var tminz = 0;
		var tmaxx = 1;
		var tmaxy = 1;
		var tmaxz = 1;
		if(dx > -1e-6 && dx < 1e-6) {
			if(p1x <= -halfW || p1x >= halfW) {
				return false;
			}
		} else {
			var invDx = 1 / dx;
			var t1 = (-halfW - p1x) * invDx;
			var t2 = (halfW - p1x) * invDx;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminx = t1;
			}
			if(t2 < 1) {
				tmaxx = t2;
			}
		}
		if(dy > -1e-6 && dy < 1e-6) {
			if(p1y <= -halfH || p1y >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t11 = (-halfH - p1y) * invDy;
			var t21 = (halfH - p1y) * invDy;
			if(t11 > t21) {
				var tmp1 = t11;
				t11 = t21;
				t21 = tmp1;
			}
			if(t11 > 0) {
				tminy = t11;
			}
			if(t21 < 1) {
				tmaxy = t21;
			}
		}
		if(dz > -1e-6 && dz < 1e-6) {
			if(p1z <= -halfD || p1z >= halfD) {
				return false;
			}
		} else {
			var invDz = 1 / dz;
			var t12 = (-halfD - p1z) * invDz;
			var t22 = (halfD - p1z) * invDz;
			if(t12 > t22) {
				var tmp2 = t12;
				t12 = t22;
				t22 = tmp2;
			}
			if(t12 > 0) {
				tminz = t12;
			}
			if(t22 < 1) {
				tmaxz = t22;
			}
		}
		if(tminx >= 1 || tminy >= 1 || tminz >= 1 || tmaxx <= 0 || tmaxy <= 0 || tmaxz <= 0) {
			return false;
		}
		var min = tminx;
		var max = tmaxx;
		var hitDirection = 0;
		if(tminy > min) {
			min = tminy;
			hitDirection = 1;
		}
		if(tminz > min) {
			min = tminz;
			hitDirection = 2;
		}
		if(tmaxy < max) {
			max = tmaxy;
		}
		if(tmaxz < max) {
			max = tmaxz;
		}
		if(min > max) {
			return false;
		}
		if(min == 0) {
			return false;
		}
		switch(hitDirection) {
		case 0:
			hit.normal.init(dx > 0 ? -1 : 1,0,0);
			break;
		case 1:
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
			break;
		case 2:
			hit.normal.init(0,0,dz > 0 ? -1 : 1);
			break;
		}
		hit.position.init(p1x + min * dx,p1y + min * dy,p1z + min * dz);
		hit.fraction = min;
		return true;
	}
});
var oimo_collision_geometry_CapsuleGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,4);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this._gjkMargin = this._radius;
	this._updateMass();
};
oimo_collision_geometry_CapsuleGeometry.__name__ = true;
oimo_collision_geometry_CapsuleGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_CapsuleGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var hh2 = this._halfHeight * this._halfHeight;
		var cylinderVolume = 6.28318530717958 * r2 * this._halfHeight;
		var sphereVolume = 3.14159265358979 * r2 * this._radius * 4 / 3;
		this._volume = cylinderVolume + sphereVolume;
		var invVolume = this._volume == 0 ? 0 : 1 / this._volume;
		var inertiaY = invVolume * (cylinderVolume * r2 * 0.5 + sphereVolume * r2 * 0.4);
		var inertiaXZ = invVolume * (cylinderVolume * (r2 * 0.25 + hh2 / 3) + sphereVolume * (r2 * 0.4 + this._halfHeight * this._radius * 0.75 + hh2));
		this._inertiaCoeff00 = inertiaXZ;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = inertiaY;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = inertiaXZ;
	}
	,_computeAabb: function(aabb,tf) {
		var radVec;
		var radVecX;
		var radVecY;
		var radVecZ;
		radVecX = this._radius;
		radVecY = this._radius;
		radVecZ = this._radius;
		var axis;
		var axisX;
		var axisY;
		var axisZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		axisX = axisX < 0 ? -axisX : axisX;
		axisY = axisY < 0 ? -axisY : axisY;
		axisZ = axisZ < 0 ? -axisZ : axisZ;
		axisX *= this._halfHeight;
		axisY *= this._halfHeight;
		axisZ *= this._halfHeight;
		radVecX += axisX;
		radVecY += axisY;
		radVecZ += axisZ;
		aabb._minX = tf._positionX - radVecX;
		aabb._minY = tf._positionY - radVecY;
		aabb._minZ = tf._positionZ - radVecZ;
		aabb._maxX = tf._positionX + radVecX;
		aabb._maxY = tf._positionY + radVecY;
		aabb._maxZ = tf._positionZ + radVecZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		if(dir.y > 0) {
			out.init(0,this._halfHeight,0);
		} else {
			out.init(0,-this._halfHeight,0);
		}
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfH = this._halfHeight;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminxz = 0;
		var tmaxxz = 1;
		var a = dx * dx + dz * dz;
		var b = p1x * dx + p1z * dz;
		var c = p1x * p1x + p1z * p1z - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t;
		if(a > 0) {
			var sqrtD = Math.sqrt(D);
			tminxz = (-b - sqrtD) / a;
			tmaxxz = (-b + sqrtD) / a;
			if(tminxz >= 1 || tmaxxz <= 0) {
				return false;
			}
		} else {
			if(c >= 0) {
				return false;
			}
			tminxz = 0;
			tmaxxz = 1;
		}
		var crossY = p1y + dy * tminxz;
		var min;
		if(crossY > -halfH && crossY < halfH) {
			if(tminxz > 0) {
				min = tminxz;
				var _this = hit.normal.init(p1x + dx * min,0,p1z + dz * min);
				var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				var tx = _this.x * invLen;
				var ty = _this.y * invLen;
				var tz = _this.z * invLen;
				_this.x = tx;
				_this.y = ty;
				_this.z = tz;
				hit.position.init(p1x + min * dx,crossY,p1z + min * dz);
				hit.fraction = min;
				return true;
			}
			return false;
		}
		var sphereY = crossY < 0 ? -halfH : halfH;
		var spherePos;
		var spherePosX;
		var spherePosY;
		var spherePosZ;
		var sphereToBegin;
		var sphereToBeginX;
		var sphereToBeginY;
		var sphereToBeginZ;
		spherePosX = 0;
		spherePosY = sphereY;
		spherePosZ = 0;
		sphereToBeginX = beginX - spherePosX;
		sphereToBeginY = beginY - spherePosY;
		sphereToBeginZ = beginZ - spherePosZ;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = endX - beginX;
		dY = endY - beginY;
		dZ = endZ - beginZ;
		a = dX * dX + dY * dY + dZ * dZ;
		b = sphereToBeginX * dX + sphereToBeginY * dY + sphereToBeginZ * dZ;
		c = sphereToBeginX * sphereToBeginX + sphereToBeginY * sphereToBeginY + sphereToBeginZ * sphereToBeginZ - this._radius * this._radius;
		D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t1 = (-b - Math.sqrt(D)) / a;
		if(t1 < 0 || t1 > 1) {
			return false;
		}
		var hitPos;
		var hitPosX;
		var hitPosY;
		var hitPosZ;
		var hitNormal;
		var hitNormalX;
		var hitNormalY;
		var hitNormalZ;
		hitPosX = sphereToBeginX + dX * t1;
		hitPosY = sphereToBeginY + dY * t1;
		hitPosZ = sphereToBeginZ + dZ * t1;
		var l = hitPosX * hitPosX + hitPosY * hitPosY + hitPosZ * hitPosZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		hitNormalX = hitPosX * l;
		hitNormalY = hitPosY * l;
		hitNormalZ = hitPosZ * l;
		hitPosX += spherePosX;
		hitPosY += spherePosY;
		hitPosZ += spherePosZ;
		var v = hit.position;
		v.x = hitPosX;
		v.y = hitPosY;
		v.z = hitPosZ;
		var v1 = hit.normal;
		v1.x = hitNormalX;
		v1.y = hitNormalY;
		v1.z = hitNormalZ;
		hit.fraction = t1;
		return true;
	}
});
var oimo_collision_geometry_ConeGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,3);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this.sinTheta = radius / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
	this.cosTheta = 2 * halfHeight / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
	this._updateMass();
};
oimo_collision_geometry_ConeGeometry.__name__ = true;
oimo_collision_geometry_ConeGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_ConeGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var h2 = this._halfHeight * this._halfHeight * 4;
		this._volume = 3.14159265358979 * r2 * this._halfHeight * 2 / 3;
		this._inertiaCoeff00 = 0.05 * (3 * r2 + 2 * h2);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.3 * r2;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.05 * (3 * r2 + 2 * h2);
	}
	,_computeAabb: function(aabb,tf) {
		var axis;
		var axisX;
		var axisY;
		var axisZ;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		var eh;
		var ehX;
		var ehY;
		var ehZ;
		var er;
		var erX;
		var erY;
		var erZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		axis2X = axisX * axisX;
		axis2Y = axisY * axisY;
		axis2Z = axisZ * axisZ;
		var axis2x = axis2X;
		var axis2y = axis2Y;
		var axis2z = axis2Z;
		erX = Math.sqrt(1 - axis2x);
		erY = Math.sqrt(1 - axis2y);
		erZ = Math.sqrt(1 - axis2z);
		erX *= this._radius;
		erY *= this._radius;
		erZ *= this._radius;
		ehX = axisX * this._halfHeight;
		ehY = axisY * this._halfHeight;
		ehZ = axisZ * this._halfHeight;
		var rmin;
		var rminX;
		var rminY;
		var rminZ;
		var rmax;
		var rmaxX;
		var rmaxY;
		var rmaxZ;
		rminX = -ehX;
		rminY = -ehY;
		rminZ = -ehZ;
		rminX -= erX;
		rminY -= erY;
		rminZ -= erZ;
		rmaxX = -ehX;
		rmaxY = -ehY;
		rmaxZ = -ehZ;
		rmaxX += erX;
		rmaxY += erY;
		rmaxZ += erZ;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		var min;
		var minX;
		var minY;
		var minZ;
		maxX = rminX > rmaxX ? rminX : rmaxX;
		maxY = rminY > rmaxY ? rminY : rmaxY;
		maxZ = rminZ > rmaxZ ? rminZ : rmaxZ;
		maxX = maxX > ehX ? maxX : ehX;
		maxY = maxY > ehY ? maxY : ehY;
		maxZ = maxZ > ehZ ? maxZ : ehZ;
		minX = rminX < rmaxX ? rminX : rmaxX;
		minY = rminY < rmaxY ? rminY : rmaxY;
		minZ = rminZ < rmaxZ ? rminZ : rmaxZ;
		minX = minX < ehX ? minX : ehX;
		minY = minY < ehY ? minY : ehY;
		minZ = minZ < ehZ ? minZ : ehZ;
		aabb._minX = tf._positionX + minX;
		aabb._minY = tf._positionY + minY;
		aabb._minZ = tf._positionZ + minZ;
		aabb._maxX = tf._positionX + maxX;
		aabb._maxY = tf._positionY + maxY;
		aabb._maxZ = tf._positionZ + maxZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var dx = dir.x;
		var dy = dir.y;
		var dz = dir.z;
		if(dy > 0 && dy * dy > this.sinTheta * this.sinTheta * (dx * dx + dy * dy + dz * dz)) {
			out.init(0,this._halfHeight - this._gjkMargin / this.sinTheta,0);
			if(out.y < 0) {
				out.y = 0;
			}
			return;
		}
		var rx = dir.x;
		var rz = dir.z;
		var len = rx * rx + rz * rz;
		var height = 2 * this._halfHeight;
		var coreRadius = (height - this._gjkMargin) / height * this._radius - this._gjkMargin / this.cosTheta;
		if(coreRadius < 0) {
			coreRadius = 0;
		}
		var invLen = len > 0 ? coreRadius / Math.sqrt(len) : 0;
		var coreHalfHeight = this._halfHeight - this._gjkMargin;
		if(coreHalfHeight < 0) {
			coreHalfHeight = 0;
		}
		out.x = rx * invLen;
		out.y = -coreHalfHeight;
		out.z = rz * invLen;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfH = this._halfHeight;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminy = 0;
		var tmaxy = 1;
		if(dy > -1e-6 && dy < 1e-6) {
			if(p1y <= -halfH || p1y >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - p1y) * invDy;
			var t2 = (halfH - p1y) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(tminy >= 1 || tmaxy <= 0) {
			return false;
		}
		var tminxz = 0;
		var tmaxxz = 0;
		p1y -= halfH;
		var cos2 = this.cosTheta * this.cosTheta;
		var a = cos2 * (dx * dx + dy * dy + dz * dz) - dy * dy;
		var b = cos2 * (p1x * dx + p1y * dy + p1z * dz) - p1y * dy;
		var c = cos2 * (p1x * p1x + p1y * p1y + p1z * p1z) - p1y * p1y;
		var D = b * b - a * c;
		if(a != 0) {
			if(D < 0) {
				return false;
			}
			var sqrtD = Math.sqrt(D);
			if(a < 0) {
				if(dy > 0) {
					tminxz = 0;
					tmaxxz = (-b + sqrtD) / a;
					if(tmaxxz <= 0) {
						return false;
					}
				} else {
					tminxz = (-b - sqrtD) / a;
					tmaxxz = 1;
					if(tminxz >= 1) {
						return false;
					}
				}
			} else {
				tminxz = (-b - sqrtD) / a;
				tmaxxz = (-b + sqrtD) / a;
				if(tminxz >= 1 || tmaxxz <= 0) {
					return false;
				}
			}
		} else {
			var t = -c / (2 * b);
			if(b > 0) {
				tminxz = 0;
				tmaxxz = t;
				if(t <= 0) {
					return false;
				}
			} else {
				tminxz = t;
				tmaxxz = 1;
				if(t >= 1) {
					return false;
				}
			}
		}
		p1y += halfH;
		var min;
		if(tmaxxz <= tminy || tmaxy <= tminxz) {
			return false;
		}
		if(tminxz < tminy) {
			min = tminy;
			if(min == 0) {
				return false;
			}
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
		} else {
			min = tminxz;
			if(min == 0) {
				return false;
			}
			var _this = hit.normal.init(p1x + dx * min,0,p1z + dz * min);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = this.cosTheta;
			var tx1 = _this1.x * s;
			var ty1 = _this1.y * s;
			var tz1 = _this1.z * s;
			_this1.x = tx1;
			_this1.y = ty1;
			_this1.z = tz1;
			hit.normal.y += this.sinTheta;
		}
		hit.position.init(p1x + min * dx,p1y + min * dy,p1z + min * dz);
		hit.fraction = min;
		return true;
	}
});
var oimo_collision_geometry_ConvexHullGeometry = function(vertices) {
	oimo_collision_geometry_ConvexGeometry.call(this,5);
	this._numVertices = vertices.length;
	var this1 = new Array(this._numVertices);
	this._vertices = this1;
	var this2 = new Array(this._numVertices);
	this._tmpVertices = this2;
	var _g1 = 0;
	var _g = this._numVertices;
	while(_g1 < _g) {
		var i = _g1++;
		this._vertices[i] = vertices[i];
		this._tmpVertices[i] = new oimo_common_Vec3();
	}
	this._useGjkRayCast = true;
	this._updateMass();
};
oimo_collision_geometry_ConvexHullGeometry.__name__ = true;
oimo_collision_geometry_ConvexHullGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_ConvexHullGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getVertices: function() {
		return this._vertices;
	}
	,_updateMass: function() {
		this._volume = 1;
		this._inertiaCoeff00 = 1;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 1;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 1;
		var minx = this._vertices[0].x;
		var miny = this._vertices[0].y;
		var minz = this._vertices[0].z;
		var maxx = this._vertices[0].x;
		var maxy = this._vertices[0].y;
		var maxz = this._vertices[0].z;
		var _g1 = 1;
		var _g = this._numVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var vx = this._vertices[i].x;
			var vy = this._vertices[i].y;
			var vz = this._vertices[i].z;
			if(vx < minx) {
				minx = vx;
			} else if(vx > maxx) {
				maxx = vx;
			}
			if(vy < miny) {
				miny = vy;
			} else if(vy > maxy) {
				maxy = vy;
			}
			if(vz < minz) {
				minz = vz;
			} else if(vz > maxz) {
				maxz = vz;
			}
		}
		var sizex = maxx - minx;
		var sizey = maxy - miny;
		var sizez = maxz - minz;
		this._volume = sizex * sizey * sizez;
		var diffCog = ((minx + maxx) * (minx + maxx) + (miny + maxy) * (miny + maxy) + (minz + maxz) * (minz + maxz)) * 0.25;
		sizex = sizex * sizex * 0.25;
		sizey = sizey * sizey * 0.25;
		sizez = sizez * sizez * 0.25;
		this._inertiaCoeff00 = 0.33333333333333331 * (sizey + sizez) + diffCog;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.33333333333333331 * (sizez + sizex) + diffCog;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.33333333333333331 * (sizex + sizey) + diffCog;
	}
	,_computeAabb: function(aabb,tf) {
		var min;
		var minX;
		var minY;
		var minZ;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		var margin;
		var marginX;
		var marginY;
		var marginZ;
		marginX = this._gjkMargin;
		marginY = this._gjkMargin;
		marginZ = this._gjkMargin;
		var localV;
		var localVX;
		var localVY;
		var localVZ;
		var v = this._vertices[0];
		localVX = v.x;
		localVY = v.y;
		localVZ = v.z;
		var worldV;
		var worldVX;
		var worldVY;
		var worldVZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * localVX + tf._rotation01 * localVY + tf._rotation02 * localVZ;
		__tmp__Y = tf._rotation10 * localVX + tf._rotation11 * localVY + tf._rotation12 * localVZ;
		__tmp__Z = tf._rotation20 * localVX + tf._rotation21 * localVY + tf._rotation22 * localVZ;
		worldVX = __tmp__X;
		worldVY = __tmp__Y;
		worldVZ = __tmp__Z;
		worldVX += tf._positionX;
		worldVY += tf._positionY;
		worldVZ += tf._positionZ;
		minX = worldVX;
		minY = worldVY;
		minZ = worldVZ;
		maxX = worldVX;
		maxY = worldVY;
		maxZ = worldVZ;
		var _g1 = 1;
		var _g = this._numVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var v1 = this._vertices[i];
			localVX = v1.x;
			localVY = v1.y;
			localVZ = v1.z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf._rotation00 * localVX + tf._rotation01 * localVY + tf._rotation02 * localVZ;
			__tmp__Y1 = tf._rotation10 * localVX + tf._rotation11 * localVY + tf._rotation12 * localVZ;
			__tmp__Z1 = tf._rotation20 * localVX + tf._rotation21 * localVY + tf._rotation22 * localVZ;
			worldVX = __tmp__X1;
			worldVY = __tmp__Y1;
			worldVZ = __tmp__Z1;
			worldVX += tf._positionX;
			worldVY += tf._positionY;
			worldVZ += tf._positionZ;
			minX = minX < worldVX ? minX : worldVX;
			minY = minY < worldVY ? minY : worldVY;
			minZ = minZ < worldVZ ? minZ : worldVZ;
			maxX = maxX > worldVX ? maxX : worldVX;
			maxY = maxY > worldVY ? maxY : worldVY;
			maxZ = maxZ > worldVZ ? maxZ : worldVZ;
		}
		aabb._minX = minX - marginX;
		aabb._minY = minY - marginY;
		aabb._minZ = minZ - marginZ;
		aabb._maxX = maxX + marginX;
		aabb._maxY = maxY + marginY;
		aabb._maxZ = maxZ + marginZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var _this = this._vertices[0];
		var maxDot = _this.x * dir.x + _this.y * dir.y + _this.z * dir.z;
		var maxIndex = 0;
		var _g1 = 1;
		var _g = this._numVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var _this1 = this._vertices[i];
			var dot = _this1.x * dir.x + _this1.y * dir.y + _this1.z * dir.z;
			if(dot > maxDot) {
				maxDot = dot;
				maxIndex = i;
			}
		}
		var v = this._vertices[maxIndex];
		out.x = v.x;
		out.y = v.y;
		out.z = v.z;
	}
});
var oimo_collision_geometry_CylinderGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,2);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this._updateMass();
};
oimo_collision_geometry_CylinderGeometry.__name__ = true;
oimo_collision_geometry_CylinderGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_CylinderGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var h2 = this._halfHeight * this._halfHeight * 4;
		this._volume = 3.14159265358979 * r2 * this._halfHeight * 2;
		this._inertiaCoeff00 = 0.083333333333333329 * (3 * r2 + h2);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.5 * r2;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.083333333333333329 * (3 * r2 + h2);
	}
	,_computeAabb: function(aabb,tf) {
		var axis;
		var axisX;
		var axisY;
		var axisZ;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		var eh;
		var ehX;
		var ehY;
		var ehZ;
		var er;
		var erX;
		var erY;
		var erZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		axisX = axisX < 0 ? -axisX : axisX;
		axisY = axisY < 0 ? -axisY : axisY;
		axisZ = axisZ < 0 ? -axisZ : axisZ;
		axis2X = axisX * axisX;
		axis2Y = axisY * axisY;
		axis2Z = axisZ * axisZ;
		var axis2x = axis2X;
		var axis2y = axis2Y;
		var axis2z = axis2Z;
		erX = Math.sqrt(1 - axis2x);
		erY = Math.sqrt(1 - axis2y);
		erZ = Math.sqrt(1 - axis2z);
		erX *= this._radius;
		erY *= this._radius;
		erZ *= this._radius;
		ehX = axisX * this._halfHeight;
		ehY = axisY * this._halfHeight;
		ehZ = axisZ * this._halfHeight;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		maxX = erX + ehX;
		maxY = erY + ehY;
		maxZ = erZ + ehZ;
		aabb._minX = tf._positionX - maxX;
		aabb._minY = tf._positionY - maxY;
		aabb._minZ = tf._positionZ - maxZ;
		aabb._maxX = tf._positionX + maxX;
		aabb._maxY = tf._positionY + maxY;
		aabb._maxZ = tf._positionZ + maxZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var rx = dir.x;
		var rz = dir.z;
		var len = rx * rx + rz * rz;
		var coreRadius = this._radius - this._gjkMargin;
		if(coreRadius < 0) {
			coreRadius = 0;
		}
		var invLen = len > 0 ? coreRadius / Math.sqrt(len) : 0;
		var coreHeight = this._halfHeight - this._gjkMargin;
		if(coreHeight < 0) {
			coreHeight = 0;
		}
		out.x = rx * invLen;
		out.y = dir.y > 0 ? coreHeight : -coreHeight;
		out.z = rz * invLen;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfH = this._halfHeight;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminy = 0;
		var tmaxy = 1;
		if(dy > -1e-6 && dy < 1e-6) {
			if(p1y <= -halfH || p1y >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - p1y) * invDy;
			var t2 = (halfH - p1y) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(tminy >= 1 || tmaxy <= 0) {
			return false;
		}
		var tminxz = 0;
		var tmaxxz = 1;
		var a = dx * dx + dz * dz;
		var b = p1x * dx + p1z * dz;
		var c = p1x * p1x + p1z * p1z - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t;
		if(a > 0) {
			var sqrtD = Math.sqrt(D);
			tminxz = (-b - sqrtD) / a;
			tmaxxz = (-b + sqrtD) / a;
			if(tminxz >= 1 || tmaxxz <= 0) {
				return false;
			}
		} else {
			if(c >= 0) {
				return false;
			}
			tminxz = 0;
			tmaxxz = 1;
		}
		var min;
		if(tmaxxz <= tminy || tmaxy <= tminxz) {
			return false;
		}
		if(tminxz < tminy) {
			min = tminy;
			if(min == 0) {
				return false;
			}
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
		} else {
			min = tminxz;
			if(min == 0) {
				return false;
			}
			var _this = hit.normal.init(p1x + dx * min,0,p1z + dz * min);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
		}
		hit.position.init(p1x + min * dx,p1y + min * dy,p1z + min * dz);
		hit.fraction = min;
		return true;
	}
});
var oimo_collision_geometry_GeometryType = function() { };
oimo_collision_geometry_GeometryType.__name__ = true;
var oimo_collision_geometry_RayCastHit = function() {
	this.position = new oimo_common_Vec3();
	this.normal = new oimo_common_Vec3();
	this.fraction = 0;
};
oimo_collision_geometry_RayCastHit.__name__ = true;
var oimo_collision_geometry_SphereGeometry = function(radius) {
	oimo_collision_geometry_ConvexGeometry.call(this,0);
	this._radius = radius;
	this._gjkMargin = this._radius;
	this._updateMass();
};
oimo_collision_geometry_SphereGeometry.__name__ = true;
oimo_collision_geometry_SphereGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_SphereGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,_updateMass: function() {
		this._volume = 4.1887902047863861 * this._radius * this._radius * this._radius;
		this._inertiaCoeff00 = 0.4 * this._radius * this._radius;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.4 * this._radius * this._radius;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.4 * this._radius * this._radius;
	}
	,_computeAabb: function(aabb,tf) {
		var radVec;
		var radVecX;
		var radVecY;
		var radVecZ;
		radVecX = this._radius;
		radVecY = this._radius;
		radVecZ = this._radius;
		aabb._minX = tf._positionX - radVecX;
		aabb._minY = tf._positionY - radVecY;
		aabb._minZ = tf._positionZ - radVecZ;
		aabb._maxX = tf._positionX + radVecX;
		aabb._maxY = tf._positionY + radVecY;
		aabb._maxZ = tf._positionZ + radVecZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		out.zero();
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var d;
		var dX;
		var dY;
		var dZ;
		dX = endX - beginX;
		dY = endY - beginY;
		dZ = endZ - beginZ;
		var a = dX * dX + dY * dY + dZ * dZ;
		var b = beginX * dX + beginY * dY + beginZ * dZ;
		var c = beginX * beginX + beginY * beginY + beginZ * beginZ - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t = (-b - Math.sqrt(D)) / a;
		if(t < 0 || t > 1) {
			return false;
		}
		var hitPos;
		var hitPosX;
		var hitPosY;
		var hitPosZ;
		var hitNormal;
		var hitNormalX;
		var hitNormalY;
		var hitNormalZ;
		hitPosX = beginX + dX * t;
		hitPosY = beginY + dY * t;
		hitPosZ = beginZ + dZ * t;
		var l = hitPosX * hitPosX + hitPosY * hitPosY + hitPosZ * hitPosZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		hitNormalX = hitPosX * l;
		hitNormalY = hitPosY * l;
		hitNormalZ = hitPosZ * l;
		var v = hit.position;
		v.x = hitPosX;
		v.y = hitPosY;
		v.z = hitPosZ;
		var v1 = hit.normal;
		v1.x = hitNormalX;
		v1.y = hitNormalY;
		v1.z = hitNormalZ;
		hit.fraction = t;
		return true;
	}
});
var oimo_collision_narrowphase_CollisionMatrix = function() {
	var this1 = new Array(8);
	this.detectors = this1;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var this2 = this.detectors;
		var this3 = new Array(8);
		this2[i] = this3;
	}
	var gjkEpaDetector = new oimo_collision_narrowphase_detector_GjkEpaDetector();
	var sp = 0;
	var bo = 1;
	var cy = 2;
	var co = 3;
	var ca = 4;
	var ch = 5;
	this.detectors[sp][sp] = new oimo_collision_narrowphase_detector_SphereSphereDetector();
	this.detectors[sp][bo] = new oimo_collision_narrowphase_detector_SphereBoxDetector(false);
	this.detectors[sp][cy] = gjkEpaDetector;
	this.detectors[sp][co] = gjkEpaDetector;
	this.detectors[sp][ca] = new oimo_collision_narrowphase_detector_SphereCapsuleDetector(false);
	this.detectors[sp][ch] = gjkEpaDetector;
	this.detectors[bo][sp] = new oimo_collision_narrowphase_detector_SphereBoxDetector(true);
	this.detectors[bo][bo] = new oimo_collision_narrowphase_detector_BoxBoxDetector();
	this.detectors[bo][cy] = gjkEpaDetector;
	this.detectors[bo][co] = gjkEpaDetector;
	this.detectors[bo][ca] = gjkEpaDetector;
	this.detectors[bo][ch] = gjkEpaDetector;
	this.detectors[cy][sp] = gjkEpaDetector;
	this.detectors[cy][bo] = gjkEpaDetector;
	this.detectors[cy][cy] = gjkEpaDetector;
	this.detectors[cy][co] = gjkEpaDetector;
	this.detectors[cy][ca] = gjkEpaDetector;
	this.detectors[cy][ch] = gjkEpaDetector;
	this.detectors[co][sp] = gjkEpaDetector;
	this.detectors[co][bo] = gjkEpaDetector;
	this.detectors[co][cy] = gjkEpaDetector;
	this.detectors[co][co] = gjkEpaDetector;
	this.detectors[co][ca] = gjkEpaDetector;
	this.detectors[co][ch] = gjkEpaDetector;
	this.detectors[ca][sp] = new oimo_collision_narrowphase_detector_SphereCapsuleDetector(true);
	this.detectors[ca][bo] = gjkEpaDetector;
	this.detectors[ca][cy] = gjkEpaDetector;
	this.detectors[ca][co] = gjkEpaDetector;
	this.detectors[ca][ca] = new oimo_collision_narrowphase_detector_CapsuleCapsuleDetector();
	this.detectors[ca][ch] = gjkEpaDetector;
	this.detectors[ch][sp] = gjkEpaDetector;
	this.detectors[ch][bo] = gjkEpaDetector;
	this.detectors[ch][cy] = gjkEpaDetector;
	this.detectors[ch][co] = gjkEpaDetector;
	this.detectors[ch][ca] = gjkEpaDetector;
	this.detectors[ch][ch] = gjkEpaDetector;
};
oimo_collision_narrowphase_CollisionMatrix.__name__ = true;
oimo_collision_narrowphase_CollisionMatrix.prototype = {
	getDetector: function(geomType1,geomType2) {
		return this.detectors[geomType1][geomType2];
	}
};
var oimo_collision_narrowphase_DetectorResult = function() {
	this.numPoints = 0;
	this.normal = new oimo_common_Vec3();
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.points = this1;
	this.incremental = false;
	var _g1 = 0;
	var _g = oimo_common_Setting.maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this.points[i] = new oimo_collision_narrowphase_DetectorResultPoint();
	}
};
oimo_collision_narrowphase_DetectorResult.__name__ = true;
oimo_collision_narrowphase_DetectorResult.prototype = {
	getMaxDepth: function() {
		var max = 0;
		var _g1 = 0;
		var _g = this.numPoints;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.points[i].depth > max) {
				max = this.points[i].depth;
			}
		}
		return max;
	}
	,clear: function() {
		this.numPoints = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.position1.zero();
			p.position2.zero();
			p.depth = 0;
			p.id = 0;
		}
		this.normal.zero();
	}
};
var oimo_collision_narrowphase_DetectorResultPoint = function() {
	this.position1 = new oimo_common_Vec3();
	this.position2 = new oimo_common_Vec3();
	this.depth = 0;
	this.id = 0;
};
oimo_collision_narrowphase_DetectorResultPoint.__name__ = true;
var oimo_collision_narrowphase_detector_Detector = function(swapped) {
	this.swapped = swapped;
};
oimo_collision_narrowphase_detector_Detector.__name__ = true;
oimo_collision_narrowphase_detector_Detector.prototype = {
	setNormal: function(result,nX,nY,nZ) {
		var v = result.normal;
		v.x = nX;
		v.y = nY;
		v.z = nZ;
		if(this.swapped) {
			var _this = result.normal;
			var tx = -_this.x;
			var ty = -_this.y;
			var tz = -_this.z;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
		}
	}
	,addPoint: function(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,depth,id) {
		var p = result.points[result.numPoints++];
		p.depth = depth;
		p.id = id;
		if(this.swapped) {
			var v = p.position1;
			v.x = pos2X;
			v.y = pos2Y;
			v.z = pos2Z;
			var v1 = p.position2;
			v1.x = pos1X;
			v1.y = pos1Y;
			v1.z = pos1Z;
		} else {
			var v2 = p.position1;
			v2.x = pos1X;
			v2.y = pos1Y;
			v2.z = pos1Z;
			var v3 = p.position2;
			v3.x = pos2X;
			v3.y = pos2Y;
			v3.z = pos2Z;
		}
	}
	,detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
	}
	,detect: function(result,geom1,geom2,transform1,transform2,cachedData) {
		result.numPoints = 0;
		var _g = 0;
		var _g1 = result.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.position1.zero();
			p.position2.zero();
			p.depth = 0;
			p.id = 0;
		}
		result.normal.zero();
		if(this.swapped) {
			this.detectImpl(result,geom2,geom1,transform2,transform1,cachedData);
		} else {
			this.detectImpl(result,geom1,geom2,transform1,transform2,cachedData);
		}
	}
};
var oimo_collision_narrowphase_detector_BoxBoxDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
	this.clipper = new oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper();
};
oimo_collision_narrowphase_detector_BoxBoxDetector.__name__ = true;
oimo_collision_narrowphase_detector_BoxBoxDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_BoxBoxDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var b1 = geom1;
		var b2 = geom2;
		result.incremental = false;
		var c1;
		var c1X;
		var c1Y;
		var c1Z;
		var c2;
		var c2X;
		var c2Y;
		var c2Z;
		var c12;
		var c12X;
		var c12Y;
		var c12Z;
		c1X = tf1._positionX;
		c1Y = tf1._positionY;
		c1Z = tf1._positionZ;
		c2X = tf2._positionX;
		c2Y = tf2._positionY;
		c2Z = tf2._positionZ;
		c12X = c2X - c1X;
		c12Y = c2Y - c1Y;
		c12Z = c2Z - c1Z;
		var x1;
		var x1X;
		var x1Y;
		var x1Z;
		var y1;
		var y1X;
		var y1Y;
		var y1Z;
		var z1;
		var z1X;
		var z1Y;
		var z1Z;
		var x2;
		var x2X;
		var x2Y;
		var x2Z;
		var y2;
		var y2X;
		var y2Y;
		var y2Z;
		var z2;
		var z2X;
		var z2Y;
		var z2Z;
		x1X = tf1._rotation00;
		x1Y = tf1._rotation10;
		x1Z = tf1._rotation20;
		y1X = tf1._rotation01;
		y1Y = tf1._rotation11;
		y1Z = tf1._rotation21;
		z1X = tf1._rotation02;
		z1Y = tf1._rotation12;
		z1Z = tf1._rotation22;
		x2X = tf2._rotation00;
		x2Y = tf2._rotation10;
		x2Z = tf2._rotation20;
		y2X = tf2._rotation01;
		y2Y = tf2._rotation11;
		y2Z = tf2._rotation21;
		z2X = tf2._rotation02;
		z2Y = tf2._rotation12;
		z2Z = tf2._rotation22;
		var w1 = b1._halfExtentsX;
		var h1 = b1._halfExtentsY;
		var d1 = b1._halfExtentsZ;
		var w2 = b2._halfExtentsX;
		var h2 = b2._halfExtentsY;
		var d2 = b2._halfExtentsZ;
		var sx1;
		var sx1X;
		var sx1Y;
		var sx1Z;
		var sy1;
		var sy1X;
		var sy1Y;
		var sy1Z;
		var sz1;
		var sz1X;
		var sz1Y;
		var sz1Z;
		var sx2;
		var sx2X;
		var sx2Y;
		var sx2Z;
		var sy2;
		var sy2X;
		var sy2Y;
		var sy2Z;
		var sz2;
		var sz2X;
		var sz2Y;
		var sz2Z;
		sx1X = x1X * w1;
		sx1Y = x1Y * w1;
		sx1Z = x1Z * w1;
		sy1X = y1X * h1;
		sy1Y = y1Y * h1;
		sy1Z = y1Z * h1;
		sz1X = z1X * d1;
		sz1Y = z1Y * d1;
		sz1Z = z1Z * d1;
		sx2X = x2X * w2;
		sx2Y = x2Y * w2;
		sx2Z = x2Z * w2;
		sy2X = y2X * h2;
		sy2Y = y2Y * h2;
		sy2Z = y2Z * h2;
		sz2X = z2X * d2;
		sz2Y = z2Y * d2;
		sz2Z = z2Z * d2;
		var projSum;
		var projC12Abs;
		var mDepth = 1e65536;
		var mId = -1;
		var mSign = 0;
		var mAxis;
		var mAxisX;
		var mAxisY;
		var mAxisZ;
		mAxisX = 0;
		mAxisY = 0;
		mAxisZ = 0;
		var proj1 = w1;
		var dx = x1X * sx2X + x1Y * sx2Y + x1Z * sx2Z;
		var dy = x1X * sy2X + x1Y * sy2Y + x1Z * sy2Z;
		var dz = x1X * sz2X + x1Y * sz2Y + x1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		var proj2 = dx + dy + dz;
		var projC12 = x1X * c12X + x1Y * c12Y + x1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 0;
				mAxisX = x1X;
				mAxisY = x1Y;
				mAxisZ = x1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		proj1 = h1;
		var dx1 = y1X * sx2X + y1Y * sx2Y + y1Z * sx2Z;
		var dy1 = y1X * sy2X + y1Y * sy2Y + y1Z * sy2Z;
		var dz1 = y1X * sz2X + y1Y * sz2Y + y1Z * sz2Z;
		if(dx1 < 0) {
			dx1 = -dx1;
		}
		if(dy1 < 0) {
			dy1 = -dy1;
		}
		if(dz1 < 0) {
			dz1 = -dz1;
		}
		proj2 = dx1 + dy1 + dz1;
		projC12 = y1X * c12X + y1Y * c12Y + y1Z * c12Z;
		var sum1 = proj1 + proj2;
		var neg1 = projC12 < 0;
		var abs1 = neg1 ? -projC12 : projC12;
		if(abs1 < sum1) {
			var depth1 = sum1 - abs1;
			if(depth1 < mDepth) {
				mDepth = depth1;
				mId = 1;
				mAxisX = y1X;
				mAxisY = y1Y;
				mAxisZ = y1Z;
				mSign = neg1 ? -1 : 1;
			}
		} else {
			return;
		}
		proj1 = d1;
		var dx2 = z1X * sx2X + z1Y * sx2Y + z1Z * sx2Z;
		var dy2 = z1X * sy2X + z1Y * sy2Y + z1Z * sy2Z;
		var dz2 = z1X * sz2X + z1Y * sz2Y + z1Z * sz2Z;
		if(dx2 < 0) {
			dx2 = -dx2;
		}
		if(dy2 < 0) {
			dy2 = -dy2;
		}
		if(dz2 < 0) {
			dz2 = -dz2;
		}
		proj2 = dx2 + dy2 + dz2;
		projC12 = z1X * c12X + z1Y * c12Y + z1Z * c12Z;
		var sum2 = proj1 + proj2;
		var neg2 = projC12 < 0;
		var abs2 = neg2 ? -projC12 : projC12;
		if(abs2 < sum2) {
			var depth2 = sum2 - abs2;
			if(depth2 < mDepth) {
				mDepth = depth2;
				mId = 2;
				mAxisX = z1X;
				mAxisY = z1Y;
				mAxisZ = z1Z;
				mSign = neg2 ? -1 : 1;
			}
		} else {
			return;
		}
		if(mDepth > oimo_common_Setting.linearSlop) {
			mDepth -= oimo_common_Setting.linearSlop;
		} else {
			mDepth = 0;
		}
		var dx3 = x2X * sx1X + x2Y * sx1Y + x2Z * sx1Z;
		var dy3 = x2X * sy1X + x2Y * sy1Y + x2Z * sy1Z;
		var dz3 = x2X * sz1X + x2Y * sz1Y + x2Z * sz1Z;
		if(dx3 < 0) {
			dx3 = -dx3;
		}
		if(dy3 < 0) {
			dy3 = -dy3;
		}
		if(dz3 < 0) {
			dz3 = -dz3;
		}
		proj1 = dx3 + dy3 + dz3;
		proj2 = w2;
		projC12 = x2X * c12X + x2Y * c12Y + x2Z * c12Z;
		var sum3 = proj1 + proj2;
		var neg3 = projC12 < 0;
		var abs3 = neg3 ? -projC12 : projC12;
		if(abs3 < sum3) {
			var depth3 = sum3 - abs3;
			if(depth3 < mDepth) {
				mDepth = depth3;
				mId = 3;
				mAxisX = x2X;
				mAxisY = x2Y;
				mAxisZ = x2Z;
				mSign = neg3 ? -1 : 1;
			}
		} else {
			return;
		}
		var dx4 = y2X * sx1X + y2Y * sx1Y + y2Z * sx1Z;
		var dy4 = y2X * sy1X + y2Y * sy1Y + y2Z * sy1Z;
		var dz4 = y2X * sz1X + y2Y * sz1Y + y2Z * sz1Z;
		if(dx4 < 0) {
			dx4 = -dx4;
		}
		if(dy4 < 0) {
			dy4 = -dy4;
		}
		if(dz4 < 0) {
			dz4 = -dz4;
		}
		proj1 = dx4 + dy4 + dz4;
		proj2 = h2;
		projC12 = y2X * c12X + y2Y * c12Y + y2Z * c12Z;
		var sum4 = proj1 + proj2;
		var neg4 = projC12 < 0;
		var abs4 = neg4 ? -projC12 : projC12;
		if(abs4 < sum4) {
			var depth4 = sum4 - abs4;
			if(depth4 < mDepth) {
				mDepth = depth4;
				mId = 4;
				mAxisX = y2X;
				mAxisY = y2Y;
				mAxisZ = y2Z;
				mSign = neg4 ? -1 : 1;
			}
		} else {
			return;
		}
		var dx5 = z2X * sx1X + z2Y * sx1Y + z2Z * sx1Z;
		var dy5 = z2X * sy1X + z2Y * sy1Y + z2Z * sy1Z;
		var dz5 = z2X * sz1X + z2Y * sz1Y + z2Z * sz1Z;
		if(dx5 < 0) {
			dx5 = -dx5;
		}
		if(dy5 < 0) {
			dy5 = -dy5;
		}
		if(dz5 < 0) {
			dz5 = -dz5;
		}
		proj1 = dx5 + dy5 + dz5;
		proj2 = d2;
		projC12 = z2X * c12X + z2Y * c12Y + z2Z * c12Z;
		var sum5 = proj1 + proj2;
		var neg5 = projC12 < 0;
		var abs5 = neg5 ? -projC12 : projC12;
		if(abs5 < sum5) {
			var depth5 = sum5 - abs5;
			if(depth5 < mDepth) {
				mDepth = depth5;
				mId = 5;
				mAxisX = z2X;
				mAxisY = z2Y;
				mAxisZ = z2Z;
				mSign = neg5 ? -1 : 1;
			}
		} else {
			return;
		}
		if(mDepth > oimo_common_Setting.linearSlop) {
			mDepth -= oimo_common_Setting.linearSlop;
		} else {
			mDepth = 0;
		}
		var edgeAxis;
		var edgeAxisX;
		var edgeAxisY;
		var edgeAxisZ;
		edgeAxisX = x1Y * x2Z - x1Z * x2Y;
		edgeAxisY = x1Z * x2X - x1X * x2Z;
		edgeAxisZ = x1X * x2Y - x1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx6 = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy6 = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx6 < 0) {
				dx6 = -dx6;
			}
			if(dy6 < 0) {
				dy6 = -dy6;
			}
			proj1 = dx6 + dy6;
			var dx7 = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy7 = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx7 < 0) {
				dx7 = -dx7;
			}
			if(dy7 < 0) {
				dy7 = -dy7;
			}
			proj2 = dx7 + dy7;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum6 = proj1 + proj2;
			var neg6 = projC12 < 0;
			var abs6 = neg6 ? -projC12 : projC12;
			if(abs6 < sum6) {
				var depth6 = sum6 - abs6;
				if(depth6 < mDepth) {
					mDepth = depth6;
					mId = 6;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg6 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = x1Y * y2Z - x1Z * y2Y;
		edgeAxisY = x1Z * y2X - x1X * y2Z;
		edgeAxisZ = x1X * y2Y - x1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l1 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l1 > 0) {
				l1 = 1 / Math.sqrt(l1);
			}
			edgeAxisX *= l1;
			edgeAxisY *= l1;
			edgeAxisZ *= l1;
			var dx8 = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy8 = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx8 < 0) {
				dx8 = -dx8;
			}
			if(dy8 < 0) {
				dy8 = -dy8;
			}
			proj1 = dx8 + dy8;
			var dx9 = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy9 = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx9 < 0) {
				dx9 = -dx9;
			}
			if(dy9 < 0) {
				dy9 = -dy9;
			}
			proj2 = dx9 + dy9;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum7 = proj1 + proj2;
			var neg7 = projC12 < 0;
			var abs7 = neg7 ? -projC12 : projC12;
			if(abs7 < sum7) {
				var depth7 = sum7 - abs7;
				if(depth7 < mDepth) {
					mDepth = depth7;
					mId = 7;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg7 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = x1Y * z2Z - x1Z * z2Y;
		edgeAxisY = x1Z * z2X - x1X * z2Z;
		edgeAxisZ = x1X * z2Y - x1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l2 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l2 > 0) {
				l2 = 1 / Math.sqrt(l2);
			}
			edgeAxisX *= l2;
			edgeAxisY *= l2;
			edgeAxisZ *= l2;
			var dx10 = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy10 = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx10 < 0) {
				dx10 = -dx10;
			}
			if(dy10 < 0) {
				dy10 = -dy10;
			}
			proj1 = dx10 + dy10;
			var dx11 = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy11 = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx11 < 0) {
				dx11 = -dx11;
			}
			if(dy11 < 0) {
				dy11 = -dy11;
			}
			proj2 = dx11 + dy11;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum8 = proj1 + proj2;
			var neg8 = projC12 < 0;
			var abs8 = neg8 ? -projC12 : projC12;
			if(abs8 < sum8) {
				var depth8 = sum8 - abs8;
				if(depth8 < mDepth) {
					mDepth = depth8;
					mId = 8;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg8 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * x2Z - y1Z * x2Y;
		edgeAxisY = y1Z * x2X - y1X * x2Z;
		edgeAxisZ = y1X * x2Y - y1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l3 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l3 > 0) {
				l3 = 1 / Math.sqrt(l3);
			}
			edgeAxisX *= l3;
			edgeAxisY *= l3;
			edgeAxisZ *= l3;
			var dx12 = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy12 = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx12 < 0) {
				dx12 = -dx12;
			}
			if(dy12 < 0) {
				dy12 = -dy12;
			}
			proj1 = dx12 + dy12;
			var dx13 = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy13 = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx13 < 0) {
				dx13 = -dx13;
			}
			if(dy13 < 0) {
				dy13 = -dy13;
			}
			proj2 = dx13 + dy13;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum9 = proj1 + proj2;
			var neg9 = projC12 < 0;
			var abs9 = neg9 ? -projC12 : projC12;
			if(abs9 < sum9) {
				var depth9 = sum9 - abs9;
				if(depth9 < mDepth) {
					mDepth = depth9;
					mId = 9;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg9 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * y2Z - y1Z * y2Y;
		edgeAxisY = y1Z * y2X - y1X * y2Z;
		edgeAxisZ = y1X * y2Y - y1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l4 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l4 > 0) {
				l4 = 1 / Math.sqrt(l4);
			}
			edgeAxisX *= l4;
			edgeAxisY *= l4;
			edgeAxisZ *= l4;
			var dx14 = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy14 = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx14 < 0) {
				dx14 = -dx14;
			}
			if(dy14 < 0) {
				dy14 = -dy14;
			}
			proj1 = dx14 + dy14;
			var dx15 = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy15 = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx15 < 0) {
				dx15 = -dx15;
			}
			if(dy15 < 0) {
				dy15 = -dy15;
			}
			proj2 = dx15 + dy15;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum10 = proj1 + proj2;
			var neg10 = projC12 < 0;
			var abs10 = neg10 ? -projC12 : projC12;
			if(abs10 < sum10) {
				var depth10 = sum10 - abs10;
				if(depth10 < mDepth) {
					mDepth = depth10;
					mId = 10;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg10 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * z2Z - y1Z * z2Y;
		edgeAxisY = y1Z * z2X - y1X * z2Z;
		edgeAxisZ = y1X * z2Y - y1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l5 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l5 > 0) {
				l5 = 1 / Math.sqrt(l5);
			}
			edgeAxisX *= l5;
			edgeAxisY *= l5;
			edgeAxisZ *= l5;
			var dx16 = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy16 = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx16 < 0) {
				dx16 = -dx16;
			}
			if(dy16 < 0) {
				dy16 = -dy16;
			}
			proj1 = dx16 + dy16;
			var dx17 = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy17 = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx17 < 0) {
				dx17 = -dx17;
			}
			if(dy17 < 0) {
				dy17 = -dy17;
			}
			proj2 = dx17 + dy17;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum11 = proj1 + proj2;
			var neg11 = projC12 < 0;
			var abs11 = neg11 ? -projC12 : projC12;
			if(abs11 < sum11) {
				var depth11 = sum11 - abs11;
				if(depth11 < mDepth) {
					mDepth = depth11;
					mId = 11;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg11 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * x2Z - z1Z * x2Y;
		edgeAxisY = z1Z * x2X - z1X * x2Z;
		edgeAxisZ = z1X * x2Y - z1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l6 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l6 > 0) {
				l6 = 1 / Math.sqrt(l6);
			}
			edgeAxisX *= l6;
			edgeAxisY *= l6;
			edgeAxisZ *= l6;
			var dx18 = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy18 = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx18 < 0) {
				dx18 = -dx18;
			}
			if(dy18 < 0) {
				dy18 = -dy18;
			}
			proj1 = dx18 + dy18;
			var dx19 = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy19 = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx19 < 0) {
				dx19 = -dx19;
			}
			if(dy19 < 0) {
				dy19 = -dy19;
			}
			proj2 = dx19 + dy19;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum12 = proj1 + proj2;
			var neg12 = projC12 < 0;
			var abs12 = neg12 ? -projC12 : projC12;
			if(abs12 < sum12) {
				var depth12 = sum12 - abs12;
				if(depth12 < mDepth) {
					mDepth = depth12;
					mId = 12;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg12 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * y2Z - z1Z * y2Y;
		edgeAxisY = z1Z * y2X - z1X * y2Z;
		edgeAxisZ = z1X * y2Y - z1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l7 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l7 > 0) {
				l7 = 1 / Math.sqrt(l7);
			}
			edgeAxisX *= l7;
			edgeAxisY *= l7;
			edgeAxisZ *= l7;
			var dx20 = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy20 = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx20 < 0) {
				dx20 = -dx20;
			}
			if(dy20 < 0) {
				dy20 = -dy20;
			}
			proj1 = dx20 + dy20;
			var dx21 = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy21 = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx21 < 0) {
				dx21 = -dx21;
			}
			if(dy21 < 0) {
				dy21 = -dy21;
			}
			proj2 = dx21 + dy21;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum13 = proj1 + proj2;
			var neg13 = projC12 < 0;
			var abs13 = neg13 ? -projC12 : projC12;
			if(abs13 < sum13) {
				var depth13 = sum13 - abs13;
				if(depth13 < mDepth) {
					mDepth = depth13;
					mId = 13;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg13 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * z2Z - z1Z * z2Y;
		edgeAxisY = z1Z * z2X - z1X * z2Z;
		edgeAxisZ = z1X * z2Y - z1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l8 = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l8 > 0) {
				l8 = 1 / Math.sqrt(l8);
			}
			edgeAxisX *= l8;
			edgeAxisY *= l8;
			edgeAxisZ *= l8;
			var dx22 = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy22 = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx22 < 0) {
				dx22 = -dx22;
			}
			if(dy22 < 0) {
				dy22 = -dy22;
			}
			proj1 = dx22 + dy22;
			var dx23 = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy23 = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx23 < 0) {
				dx23 = -dx23;
			}
			if(dy23 < 0) {
				dy23 = -dy23;
			}
			proj2 = dx23 + dy23;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum14 = proj1 + proj2;
			var neg14 = projC12 < 0;
			var abs14 = neg14 ? -projC12 : projC12;
			if(abs14 < sum14) {
				var depth14 = sum14 - abs14;
				if(depth14 < mDepth) {
					mDepth = depth14;
					mId = 14;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg14 ? -1 : 1;
				}
			} else {
				return;
			}
		}
		if(mId >= 6) {
			mAxisX *= mSign;
			mAxisY *= mSign;
			mAxisZ *= mSign;
			var id1 = (mId - 6) / 3 | 0;
			var id2 = mId - 6 - id1 * 3;
			var p1;
			var p1X;
			var p1Y;
			var p1Z;
			var p2;
			var p2X;
			var p2Y;
			var p2Z;
			var d11;
			var d1X;
			var d1Y;
			var d1Z;
			var d21;
			var d2X;
			var d2Y;
			var d2Z;
			switch(id1) {
			case 0:
				d1X = x1X;
				d1Y = x1Y;
				d1Z = x1Z;
				var signX = sy1X * mAxisX + sy1Y * mAxisY + sy1Z * mAxisZ > 0;
				var signY = sz1X * mAxisX + sz1Y * mAxisY + sz1Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p1X = sy1X + sz1X;
						p1Y = sy1Y + sz1Y;
						p1Z = sy1Z + sz1Z;
					} else {
						p1X = sy1X - sz1X;
						p1Y = sy1Y - sz1Y;
						p1Z = sy1Z - sz1Z;
					}
				} else if(signY) {
					p1X = sz1X - sy1X;
					p1Y = sz1Y - sy1Y;
					p1Z = sz1Z - sy1Z;
				} else {
					p1X = sy1X + sz1X;
					p1Y = sy1Y + sz1Y;
					p1Z = sy1Z + sz1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
				break;
			case 1:
				d1X = y1X;
				d1Y = y1Y;
				d1Z = y1Z;
				var signX1 = sx1X * mAxisX + sx1Y * mAxisY + sx1Z * mAxisZ > 0;
				var signY1 = sz1X * mAxisX + sz1Y * mAxisY + sz1Z * mAxisZ > 0;
				if(signX1) {
					if(signY1) {
						p1X = sx1X + sz1X;
						p1Y = sx1Y + sz1Y;
						p1Z = sx1Z + sz1Z;
					} else {
						p1X = sx1X - sz1X;
						p1Y = sx1Y - sz1Y;
						p1Z = sx1Z - sz1Z;
					}
				} else if(signY1) {
					p1X = sz1X - sx1X;
					p1Y = sz1Y - sx1Y;
					p1Z = sz1Z - sx1Z;
				} else {
					p1X = sx1X + sz1X;
					p1Y = sx1Y + sz1Y;
					p1Z = sx1Z + sz1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
				break;
			default:
				d1X = z1X;
				d1Y = z1Y;
				d1Z = z1Z;
				var signX2 = sx1X * mAxisX + sx1Y * mAxisY + sx1Z * mAxisZ > 0;
				var signY2 = sy1X * mAxisX + sy1Y * mAxisY + sy1Z * mAxisZ > 0;
				if(signX2) {
					if(signY2) {
						p1X = sx1X + sy1X;
						p1Y = sx1Y + sy1Y;
						p1Z = sx1Z + sy1Z;
					} else {
						p1X = sx1X - sy1X;
						p1Y = sx1Y - sy1Y;
						p1Z = sx1Z - sy1Z;
					}
				} else if(signY2) {
					p1X = sy1X - sx1X;
					p1Y = sy1Y - sx1Y;
					p1Z = sy1Z - sx1Z;
				} else {
					p1X = sx1X + sy1X;
					p1Y = sx1Y + sy1Y;
					p1Z = sx1Z + sy1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
			}
			p1X = c1X + p1X;
			p1Y = c1Y + p1Y;
			p1Z = c1Z + p1Z;
			switch(id2) {
			case 0:
				d2X = x2X;
				d2Y = x2Y;
				d2Z = x2Z;
				var signX3 = sy2X * mAxisX + sy2Y * mAxisY + sy2Z * mAxisZ > 0;
				var signY3 = sz2X * mAxisX + sz2Y * mAxisY + sz2Z * mAxisZ > 0;
				if(signX3) {
					if(signY3) {
						p2X = sy2X + sz2X;
						p2Y = sy2Y + sz2Y;
						p2Z = sy2Z + sz2Z;
					} else {
						p2X = sy2X - sz2X;
						p2Y = sy2Y - sz2Y;
						p2Z = sy2Z - sz2Z;
					}
				} else if(signY3) {
					p2X = sz2X - sy2X;
					p2Y = sz2Y - sy2Y;
					p2Z = sz2Z - sy2Z;
				} else {
					p2X = sy2X + sz2X;
					p2Y = sy2Y + sz2Y;
					p2Z = sy2Z + sz2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
				break;
			case 1:
				d2X = y2X;
				d2Y = y2Y;
				d2Z = y2Z;
				var signX4 = sx2X * mAxisX + sx2Y * mAxisY + sx2Z * mAxisZ > 0;
				var signY4 = sz2X * mAxisX + sz2Y * mAxisY + sz2Z * mAxisZ > 0;
				if(signX4) {
					if(signY4) {
						p2X = sx2X + sz2X;
						p2Y = sx2Y + sz2Y;
						p2Z = sx2Z + sz2Z;
					} else {
						p2X = sx2X - sz2X;
						p2Y = sx2Y - sz2Y;
						p2Z = sx2Z - sz2Z;
					}
				} else if(signY4) {
					p2X = sz2X - sx2X;
					p2Y = sz2Y - sx2Y;
					p2Z = sz2Z - sx2Z;
				} else {
					p2X = sx2X + sz2X;
					p2Y = sx2Y + sz2Y;
					p2Z = sx2Z + sz2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
				break;
			default:
				d2X = z2X;
				d2Y = z2Y;
				d2Z = z2Z;
				var signX5 = sx2X * mAxisX + sx2Y * mAxisY + sx2Z * mAxisZ > 0;
				var signY5 = sy2X * mAxisX + sy2Y * mAxisY + sy2Z * mAxisZ > 0;
				if(signX5) {
					if(signY5) {
						p2X = sx2X + sy2X;
						p2Y = sx2Y + sy2Y;
						p2Z = sx2Z + sy2Z;
					} else {
						p2X = sx2X - sy2X;
						p2Y = sx2Y - sy2Y;
						p2Z = sx2Z - sy2Z;
					}
				} else if(signY5) {
					p2X = sy2X - sx2X;
					p2Y = sy2Y - sx2Y;
					p2Z = sy2Z - sx2Z;
				} else {
					p2X = sx2X + sy2X;
					p2Y = sx2Y + sy2Y;
					p2Z = sx2Z + sy2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
			}
			p2X = c2X - p2X;
			p2Y = c2Y - p2Y;
			p2Z = c2Z - p2Z;
			var r;
			var rX;
			var rY;
			var rZ;
			rX = p1X - p2X;
			rY = p1Y - p2Y;
			rZ = p1Z - p2Z;
			var dot12 = d1X * d2X + d1Y * d2Y + d1Z * d2Z;
			var dot1r = d1X * rX + d1Y * rY + d1Z * rZ;
			var dot2r = d2X * rX + d2Y * rY + d2Z * rZ;
			var invDet = 1 / (1 - dot12 * dot12);
			var t1 = (dot12 * dot2r - dot1r) * invDet;
			var t2 = (dot2r - dot12 * dot1r) * invDet;
			var cp1;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2;
			var cp2X;
			var cp2Y;
			var cp2Z;
			cp1X = p1X + d1X * t1;
			cp1Y = p1Y + d1Y * t1;
			cp1Z = p1Z + d1Z * t1;
			cp2X = p2X + d2X * t2;
			cp2Y = p2Y + d2Y * t2;
			cp2Z = p2Z + d2Z * t2;
			var normal;
			var normalX;
			var normalY;
			var normalZ;
			normalX = -mAxisX;
			normalY = -mAxisY;
			normalZ = -mAxisZ;
			this.setNormal(result,normalX,normalY,normalZ);
			this.addPoint(result,cp1X,cp1Y,cp1Z,cp2X,cp2Y,cp2Z,mDepth,4);
			return;
		}
		var tmp;
		var tmpX;
		var tmpY;
		var tmpZ;
		var swapped;
		if(mId >= 3) {
			mSign = -mSign;
			c12X = -c12X;
			c12Y = -c12Y;
			c12Z = -c12Z;
			var tmp1 = b1;
			b1 = b2;
			b2 = tmp1;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			var tmp3 = h1;
			h1 = h2;
			h2 = tmp3;
			var tmp4 = d1;
			d1 = d2;
			d2 = tmp4;
			tmpX = c1X;
			tmpY = c1Y;
			tmpZ = c1Z;
			c1X = c2X;
			c1Y = c2Y;
			c1Z = c2Z;
			c2X = tmpX;
			c2Y = tmpY;
			c2Z = tmpZ;
			tmpX = x1X;
			tmpY = x1Y;
			tmpZ = x1Z;
			x1X = x2X;
			x1Y = x2Y;
			x1Z = x2Z;
			x2X = tmpX;
			x2Y = tmpY;
			x2Z = tmpZ;
			tmpX = y1X;
			tmpY = y1Y;
			tmpZ = y1Z;
			y1X = y2X;
			y1Y = y2Y;
			y1Z = y2Z;
			y2X = tmpX;
			y2Y = tmpY;
			y2Z = tmpZ;
			tmpX = z1X;
			tmpY = z1Y;
			tmpZ = z1Z;
			z1X = z2X;
			z1Y = z2Y;
			z1Z = z2Z;
			z2X = tmpX;
			z2Y = tmpY;
			z2Z = tmpZ;
			tmpX = sx1X;
			tmpY = sx1Y;
			tmpZ = sx1Z;
			sx1X = sx2X;
			sx1Y = sx2Y;
			sx1Z = sx2Z;
			sx2X = tmpX;
			sx2Y = tmpY;
			sx2Z = tmpZ;
			tmpX = sy1X;
			tmpY = sy1Y;
			tmpZ = sy1Z;
			sy1X = sy2X;
			sy1Y = sy2Y;
			sy1Z = sy2Z;
			sy2X = tmpX;
			sy2Y = tmpY;
			sy2Z = tmpZ;
			tmpX = sz1X;
			tmpY = sz1Y;
			tmpZ = sz1Z;
			sz1X = sz2X;
			sz1Y = sz2Y;
			sz1Z = sz2Z;
			sz2X = tmpX;
			sz2Y = tmpY;
			sz2Z = tmpZ;
			mId -= 3;
			swapped = true;
		} else {
			swapped = false;
		}
		var refCenter;
		var refCenterX;
		var refCenterY;
		var refCenterZ;
		var refNormal;
		var refNormalX;
		var refNormalY;
		var refNormalZ;
		var refX;
		var refXX;
		var refXY;
		var refXZ;
		var refY;
		var refYX;
		var refYY;
		var refYZ;
		var refW;
		var refH;
		switch(mId) {
		case 0:
			refCenterX = sx1X;
			refCenterY = sx1Y;
			refCenterZ = sx1Z;
			refNormalX = x1X;
			refNormalY = x1Y;
			refNormalZ = x1Z;
			refXX = y1X;
			refXY = y1Y;
			refXZ = y1Z;
			refYX = z1X;
			refYY = z1Y;
			refYZ = z1Z;
			refW = h1;
			refH = d1;
			break;
		case 1:
			refCenterX = sy1X;
			refCenterY = sy1Y;
			refCenterZ = sy1Z;
			refNormalX = y1X;
			refNormalY = y1Y;
			refNormalZ = y1Z;
			refXX = z1X;
			refXY = z1Y;
			refXZ = z1Z;
			refYX = x1X;
			refYY = x1Y;
			refYZ = x1Z;
			refW = d1;
			refH = w1;
			break;
		default:
			refCenterX = sz1X;
			refCenterY = sz1Y;
			refCenterZ = sz1Z;
			refNormalX = z1X;
			refNormalY = z1Y;
			refNormalZ = z1Z;
			refXX = x1X;
			refXY = x1Y;
			refXZ = x1Z;
			refYX = y1X;
			refYY = y1Y;
			refYZ = y1Z;
			refW = w1;
			refH = h1;
		}
		if(mSign < 0) {
			refCenterX = -refCenterX;
			refCenterY = -refCenterY;
			refCenterZ = -refCenterZ;
			refNormalX = -refNormalX;
			refNormalY = -refNormalY;
			refNormalZ = -refNormalZ;
			tmpX = refXX;
			tmpY = refXY;
			tmpZ = refXZ;
			refXX = refYX;
			refXY = refYY;
			refXZ = refYZ;
			refYX = tmpX;
			refYY = tmpY;
			refYZ = tmpZ;
			var tmp5 = refW;
			refW = refH;
			refH = tmp5;
		}
		refCenterX += c1X;
		refCenterY += c1Y;
		refCenterZ += c1Z;
		var minIncDot = 1;
		var incId = 0;
		var incDot = refNormalX * x2X + refNormalY * x2Y + refNormalZ * x2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 0;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 1;
		}
		incDot = refNormalX * y2X + refNormalY * y2Y + refNormalZ * y2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 2;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 3;
		}
		incDot = refNormalX * z2X + refNormalY * z2Y + refNormalZ * z2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 4;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 5;
		}
		var incV1;
		var incV1X;
		var incV1Y;
		var incV1Z;
		var incV2;
		var incV2X;
		var incV2Y;
		var incV2Z;
		var incV3;
		var incV3X;
		var incV3Y;
		var incV3Z;
		var incV4;
		var incV4X;
		var incV4Y;
		var incV4Z;
		switch(incId) {
		case 0:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X - sy2X;
			incV2Y = sx2Y - sy2Y;
			incV2Z = sx2Z - sy2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X - sy2X;
			incV3Y = sx2Y - sy2Y;
			incV3Z = sx2Z - sy2Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X + sy2X;
			incV4Y = sx2Y + sy2Y;
			incV4Z = sx2Z + sy2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
			break;
		case 1:
			incV1X = sy2X - sx2X;
			incV1Y = sy2Y - sx2Y;
			incV1Z = sy2Z - sx2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sy2X - sx2X;
			incV2Y = sy2Y - sx2Y;
			incV2Z = sy2Z - sx2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X + sy2X;
			incV4Y = sx2Y + sy2Y;
			incV4Z = sx2Z + sy2Z;
			incV4X = -incV4X;
			incV4Y = -incV4Y;
			incV4Z = -incV4Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		case 2:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X + sy2X;
			incV2Y = sx2Y + sy2Y;
			incV2Z = sx2Z + sy2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sy2X - sx2X;
			incV3Y = sy2Y - sx2Y;
			incV3Z = sy2Z - sx2Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sy2X - sx2X;
			incV4Y = sy2Y - sx2Y;
			incV4Z = sy2Z - sx2Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		case 3:
			incV1X = sx2X - sy2X;
			incV1Y = sx2Y - sy2Y;
			incV1Z = sx2Z - sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X + sy2X;
			incV2Y = sx2Y + sy2Y;
			incV2Z = sx2Z + sy2Z;
			incV2X = -incV2X;
			incV2Y = -incV2Y;
			incV2Z = -incV2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X - sy2X;
			incV4Y = sx2Y - sy2Y;
			incV4Z = sx2Z - sy2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
			break;
		case 4:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sy2X - sx2X;
			incV2Y = sy2Y - sx2Y;
			incV2Z = sy2Z - sx2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X += sz2X;
			incV3Y += sz2Y;
			incV3Z += sz2Z;
			incV4X = sx2X - sy2X;
			incV4Y = sx2Y - sy2Y;
			incV4Z = sx2Z - sy2Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		default:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X -= sz2X;
			incV1Y -= sz2Y;
			incV1Z -= sz2Z;
			incV2X = sx2X - sy2X;
			incV2Y = sx2Y - sy2Y;
			incV2Z = sx2Z - sy2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sy2X - sx2X;
			incV4Y = sy2Y - sx2Y;
			incV4Z = sy2Z - sx2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
		}
		incV1X += c12X;
		incV1Y += c12Y;
		incV1Z += c12Z;
		incV2X += c12X;
		incV2Y += c12Y;
		incV2Z += c12Z;
		incV3X += c12X;
		incV3Y += c12Y;
		incV3Z += c12Z;
		incV4X += c12X;
		incV4Y += c12Y;
		incV4Z += c12Z;
		var _this = this.clipper;
		_this.w = refW;
		_this.h = refH;
		_this.numVertices = 0;
		_this.numTmpVertices = 0;
		var _this1 = this.clipper;
		var _this2 = _this1.vertices[_this1.numVertices++];
		_this2.x = incV1X * refXX + incV1Y * refXY + incV1Z * refXZ;
		_this2.y = incV1X * refYX + incV1Y * refYY + incV1Z * refYZ;
		_this2.wx = incV1X;
		_this2.wy = incV1Y;
		_this2.wz = incV1Z;
		var _this3 = this.clipper;
		var _this4 = _this3.vertices[_this3.numVertices++];
		_this4.x = incV2X * refXX + incV2Y * refXY + incV2Z * refXZ;
		_this4.y = incV2X * refYX + incV2Y * refYY + incV2Z * refYZ;
		_this4.wx = incV2X;
		_this4.wy = incV2Y;
		_this4.wz = incV2Z;
		var _this5 = this.clipper;
		var _this6 = _this5.vertices[_this5.numVertices++];
		_this6.x = incV3X * refXX + incV3Y * refXY + incV3Z * refXZ;
		_this6.y = incV3X * refYX + incV3Y * refYY + incV3Z * refYZ;
		_this6.wx = incV3X;
		_this6.wy = incV3Y;
		_this6.wz = incV3Z;
		var _this7 = this.clipper;
		var _this8 = _this7.vertices[_this7.numVertices++];
		_this8.x = incV4X * refXX + incV4Y * refXY + incV4Z * refXZ;
		_this8.y = incV4X * refYX + incV4Y * refYY + incV4Z * refYZ;
		_this8.wx = incV4X;
		_this8.wy = incV4Y;
		_this8.wz = incV4Z;
		this.clipper.clip();
		this.clipper.reduce();
		var normal1;
		var normalX1;
		var normalY1;
		var normalZ1;
		if(swapped) {
			normalX1 = refNormalX;
			normalY1 = refNormalY;
			normalZ1 = refNormalZ;
		} else {
			normalX1 = -refNormalX;
			normalY1 = -refNormalY;
			normalZ1 = -refNormalZ;
		}
		this.setNormal(result,normalX1,normalY1,normalZ1);
		var _g1 = 0;
		var _g = this.clipper.numVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var v = this.clipper.vertices[i];
			var clippedVertex;
			var clippedVertexX;
			var clippedVertexY;
			var clippedVertexZ;
			clippedVertexX = v.wx;
			clippedVertexY = v.wy;
			clippedVertexZ = v.wz;
			clippedVertexX += c1X;
			clippedVertexY += c1Y;
			clippedVertexZ += c1Z;
			var clippedVertexToRefCenter;
			var clippedVertexToRefCenterX;
			var clippedVertexToRefCenterY;
			var clippedVertexToRefCenterZ;
			clippedVertexToRefCenterX = refCenterX - clippedVertexX;
			clippedVertexToRefCenterY = refCenterY - clippedVertexY;
			clippedVertexToRefCenterZ = refCenterZ - clippedVertexZ;
			var depth15 = clippedVertexToRefCenterX * refNormalX + clippedVertexToRefCenterY * refNormalY + clippedVertexToRefCenterZ * refNormalZ;
			var clippedVertexOnRefFace;
			var clippedVertexOnRefFaceX;
			var clippedVertexOnRefFaceY;
			var clippedVertexOnRefFaceZ;
			clippedVertexOnRefFaceX = clippedVertexX + refNormalX * depth15;
			clippedVertexOnRefFaceY = clippedVertexY + refNormalY * depth15;
			clippedVertexOnRefFaceZ = clippedVertexZ + refNormalZ * depth15;
			if(depth15 > -oimo_common_Setting.contactPersistenceThreshold) {
				if(swapped) {
					this.addPoint(result,clippedVertexX,clippedVertexY,clippedVertexZ,clippedVertexOnRefFaceX,clippedVertexOnRefFaceY,clippedVertexOnRefFaceZ,depth15,i);
				} else {
					this.addPoint(result,clippedVertexOnRefFaceX,clippedVertexOnRefFaceY,clippedVertexOnRefFaceZ,clippedVertexX,clippedVertexY,clippedVertexZ,depth15,i);
				}
			}
		}
	}
});
var oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex = function() {
	this.x = 0;
	this.y = 0;
	this.wx = 0;
	this.wy = 0;
	this.wz = 0;
};
oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex.__name__ = true;
var oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper = function() {
	this.w = 0;
	this.h = 0;
	this.numVertices = 0;
	this.numTmpVertices = 0;
	var this1 = new Array(8);
	this.vertices = this1;
	var this2 = new Array(8);
	this.tmpVertices = this2;
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this.vertices[i] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
		this.tmpVertices[i] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	}
};
oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper.__name__ = true;
oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper.prototype = {
	clip: function() {
		var _g1 = 0;
		var _g = this.numVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.w + v1.x;
			var s2 = this.w + v2.x;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g11 = 0;
		var _g2 = this.numVertices;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var v11 = this.vertices[i1];
			var v21 = this.vertices[(i1 + 1) % this.numVertices];
			var s11 = this.w - v11.x;
			var s21 = this.w - v21.x;
			if(s11 > 0 && s21 > 0) {
				var _this4 = this.tmpVertices[this.numTmpVertices++];
				_this4.x = v11.x;
				_this4.y = v11.y;
				_this4.wx = v11.wx;
				_this4.wy = v11.wy;
				_this4.wz = v11.wz;
			} else if(s11 > 0 && s21 <= 0) {
				var _this5 = this.tmpVertices[this.numTmpVertices++];
				_this5.x = v11.x;
				_this5.y = v11.y;
				_this5.wx = v11.wx;
				_this5.wy = v11.wy;
				_this5.wz = v11.wz;
				var t2 = s11 / (s11 - s21);
				var _this6 = this.tmpVertices[this.numTmpVertices++];
				_this6.x = v11.x + (v21.x - v11.x) * t2;
				_this6.y = v11.y + (v21.y - v11.y) * t2;
				_this6.wx = v11.wx + (v21.wx - v11.wx) * t2;
				_this6.wy = v11.wy + (v21.wy - v11.wy) * t2;
				_this6.wz = v11.wz + (v21.wz - v11.wz) * t2;
			} else if(s11 <= 0 && s21 > 0) {
				var t3 = s11 / (s11 - s21);
				var _this7 = this.tmpVertices[this.numTmpVertices++];
				_this7.x = v11.x + (v21.x - v11.x) * t3;
				_this7.y = v11.y + (v21.y - v11.y) * t3;
				_this7.wx = v11.wx + (v21.wx - v11.wx) * t3;
				_this7.wy = v11.wy + (v21.wy - v11.wy) * t3;
				_this7.wz = v11.wz + (v21.wz - v11.wz) * t3;
			}
		}
		var tmp1 = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp1;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g12 = 0;
		var _g3 = this.numVertices;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var v12 = this.vertices[i2];
			var v22 = this.vertices[(i2 + 1) % this.numVertices];
			var s12 = this.h + v12.y;
			var s22 = this.h + v22.y;
			if(s12 > 0 && s22 > 0) {
				var _this8 = this.tmpVertices[this.numTmpVertices++];
				_this8.x = v12.x;
				_this8.y = v12.y;
				_this8.wx = v12.wx;
				_this8.wy = v12.wy;
				_this8.wz = v12.wz;
			} else if(s12 > 0 && s22 <= 0) {
				var _this9 = this.tmpVertices[this.numTmpVertices++];
				_this9.x = v12.x;
				_this9.y = v12.y;
				_this9.wx = v12.wx;
				_this9.wy = v12.wy;
				_this9.wz = v12.wz;
				var t4 = s12 / (s12 - s22);
				var _this10 = this.tmpVertices[this.numTmpVertices++];
				_this10.x = v12.x + (v22.x - v12.x) * t4;
				_this10.y = v12.y + (v22.y - v12.y) * t4;
				_this10.wx = v12.wx + (v22.wx - v12.wx) * t4;
				_this10.wy = v12.wy + (v22.wy - v12.wy) * t4;
				_this10.wz = v12.wz + (v22.wz - v12.wz) * t4;
			} else if(s12 <= 0 && s22 > 0) {
				var t5 = s12 / (s12 - s22);
				var _this11 = this.tmpVertices[this.numTmpVertices++];
				_this11.x = v12.x + (v22.x - v12.x) * t5;
				_this11.y = v12.y + (v22.y - v12.y) * t5;
				_this11.wx = v12.wx + (v22.wx - v12.wx) * t5;
				_this11.wy = v12.wy + (v22.wy - v12.wy) * t5;
				_this11.wz = v12.wz + (v22.wz - v12.wz) * t5;
			}
		}
		var tmp2 = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp2;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g13 = 0;
		var _g4 = this.numVertices;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var v13 = this.vertices[i3];
			var v23 = this.vertices[(i3 + 1) % this.numVertices];
			var s13 = this.h - v13.y;
			var s23 = this.h - v23.y;
			if(s13 > 0 && s23 > 0) {
				var _this12 = this.tmpVertices[this.numTmpVertices++];
				_this12.x = v13.x;
				_this12.y = v13.y;
				_this12.wx = v13.wx;
				_this12.wy = v13.wy;
				_this12.wz = v13.wz;
			} else if(s13 > 0 && s23 <= 0) {
				var _this13 = this.tmpVertices[this.numTmpVertices++];
				_this13.x = v13.x;
				_this13.y = v13.y;
				_this13.wx = v13.wx;
				_this13.wy = v13.wy;
				_this13.wz = v13.wz;
				var t6 = s13 / (s13 - s23);
				var _this14 = this.tmpVertices[this.numTmpVertices++];
				_this14.x = v13.x + (v23.x - v13.x) * t6;
				_this14.y = v13.y + (v23.y - v13.y) * t6;
				_this14.wx = v13.wx + (v23.wx - v13.wx) * t6;
				_this14.wy = v13.wy + (v23.wy - v13.wy) * t6;
				_this14.wz = v13.wz + (v23.wz - v13.wz) * t6;
			} else if(s13 <= 0 && s23 > 0) {
				var t7 = s13 / (s13 - s23);
				var _this15 = this.tmpVertices[this.numTmpVertices++];
				_this15.x = v13.x + (v23.x - v13.x) * t7;
				_this15.y = v13.y + (v23.y - v13.y) * t7;
				_this15.wx = v13.wx + (v23.wx - v13.wx) * t7;
				_this15.wy = v13.wy + (v23.wy - v13.wy) * t7;
				_this15.wz = v13.wz + (v23.wz - v13.wz) * t7;
			}
		}
		var tmp3 = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp3;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
	}
	,reduce: function() {
		if(this.numVertices < 4) {
			return;
		}
		var max1 = -1e65536;
		var min1 = 1e65536;
		var max2 = -1e65536;
		var min2 = 1e65536;
		var max1V = null;
		var min1V = null;
		var max2V = null;
		var min2V = null;
		var e1x = 1;
		var e1y = 1;
		var e2x = -1;
		var e2y = 1;
		var _g1 = 0;
		var _g = this.numVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var v = this.vertices[i];
			var dot1 = v.x * e1x + v.y * e1y;
			var dot2 = v.x * e2x + v.y * e2y;
			if(dot1 > max1) {
				max1 = dot1;
				max1V = v;
			}
			if(dot1 < min1) {
				min1 = dot1;
				min1V = v;
			}
			if(dot2 > max2) {
				max2 = dot2;
				max2V = v;
			}
			if(dot2 < min2) {
				min2 = dot2;
				min2V = v;
			}
		}
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = max1V.x;
		_this.y = max1V.y;
		_this.wx = max1V.wx;
		_this.wy = max1V.wy;
		_this.wz = max1V.wz;
		var _this1 = this.tmpVertices[this.numTmpVertices++];
		_this1.x = max2V.x;
		_this1.y = max2V.y;
		_this1.wx = max2V.wx;
		_this1.wy = max2V.wy;
		_this1.wz = max2V.wz;
		var _this2 = this.tmpVertices[this.numTmpVertices++];
		_this2.x = min1V.x;
		_this2.y = min1V.y;
		_this2.wx = min1V.wx;
		_this2.wy = min1V.wy;
		_this2.wz = min1V.wz;
		var _this3 = this.tmpVertices[this.numTmpVertices++];
		_this3.x = min2V.x;
		_this3.y = min2V.y;
		_this3.wx = min2V.wx;
		_this3.wy = min2V.wy;
		_this3.wz = min2V.wz;
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
	}
};
var oimo_collision_narrowphase_detector_BoxBoxDetectorMacro = function() { };
oimo_collision_narrowphase_detector_BoxBoxDetectorMacro.__name__ = true;
var oimo_collision_narrowphase_detector_CachedDetectorData = function() {
};
oimo_collision_narrowphase_detector_CachedDetectorData.__name__ = true;
oimo_collision_narrowphase_detector_CachedDetectorData.prototype = {
	_clear: function() {
		if(this._gjkCache != null) {
			this._gjkCache.clear();
		}
	}
};
var oimo_collision_narrowphase_detector_CapsuleCapsuleDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.__name__ = true;
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var c1 = geom1;
		var c2 = geom2;
		result.incremental = false;
		var axis1;
		var axis1X;
		var axis1Y;
		var axis1Z;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis1X = tf1._rotation01;
		axis1Y = tf1._rotation11;
		axis1Z = tf1._rotation21;
		axis2X = tf2._rotation01;
		axis2Y = tf2._rotation11;
		axis2Z = tf2._rotation21;
		var hh1 = c1._halfHeight;
		var hh2 = c2._halfHeight;
		var r1 = c1._radius;
		var r2 = c2._radius;
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var q1;
		var q1X;
		var q1Y;
		var q1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var q2;
		var q2X;
		var q2Y;
		var q2Z;
		p1X = tf1._positionX + axis1X * -hh1;
		p1Y = tf1._positionY + axis1Y * -hh1;
		p1Z = tf1._positionZ + axis1Z * -hh1;
		q1X = tf1._positionX + axis1X * hh1;
		q1Y = tf1._positionY + axis1Y * hh1;
		q1Z = tf1._positionZ + axis1Z * hh1;
		p2X = tf2._positionX + axis2X * -hh2;
		p2Y = tf2._positionY + axis2Y * -hh2;
		p2Z = tf2._positionZ + axis2Z * -hh2;
		q2X = tf2._positionX + axis2X * hh2;
		q2Y = tf2._positionY + axis2Y * hh2;
		q2Z = tf2._positionZ + axis2Z * hh2;
		var p12;
		var p12X;
		var p12Y;
		var p12Z;
		p12X = p1X - p2X;
		p12Y = p1Y - p2Y;
		p12Z = p1Z - p2Z;
		var d1;
		var d1X;
		var d1Y;
		var d1Z;
		var d2;
		var d2X;
		var d2Y;
		var d2Z;
		d1X = q1X - p1X;
		d1Y = q1Y - p1Y;
		d1Z = q1Z - p1Z;
		d2X = q2X - p2X;
		d2Y = q2Y - p2Y;
		d2Z = q2Z - p2Z;
		var p21d1 = -(p12X * d1X + p12Y * d1Y + p12Z * d1Z);
		var p12d2 = p12X * d2X + p12Y * d2Y + p12Z * d2Z;
		var d11 = hh1 * hh1 * 4;
		var d12 = d1X * d2X + d1Y * d2Y + d1Z * d2Z;
		var d22 = hh2 * hh2 * 4;
		var t1;
		var t2;
		if(d11 == 0 && d22 == 0) {
			t1 = 0;
			t2 = 0;
		} else if(d11 == 0) {
			t1 = 0;
			t2 = p12d2;
			if(t2 < 0) {
				t2 = 0;
			} else if(t2 > d22) {
				t2 = 1;
			} else {
				t2 /= d22;
			}
		} else if(d22 == 0) {
			t2 = 0;
			t1 = p21d1;
			if(t1 < 0) {
				t1 = 0;
			} else if(t1 > d11) {
				t1 = 1;
			} else {
				t1 /= d11;
			}
		} else {
			var det = d11 * d22 - d12 * d12;
			if(det == 0) {
				t1 = 0;
			} else {
				t1 = d12 * p12d2 + d22 * p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > det) {
					t1 = 1;
				} else {
					t1 /= det;
				}
			}
			t2 = t1 * d12 + p12d2;
			if(t2 < 0) {
				t2 = 0;
				t1 = p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > d11) {
					t1 = 1;
				} else {
					t1 /= d11;
				}
			} else if(t2 > d22) {
				t2 = 1;
				t1 = d12 + p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > d11) {
					t1 = 1;
				} else {
					t1 /= d11;
				}
			} else {
				t2 /= d22;
			}
		}
		var cp1;
		var cp1X;
		var cp1Y;
		var cp1Z;
		var cp2;
		var cp2X;
		var cp2Y;
		var cp2Z;
		cp1X = p1X + d1X * t1;
		cp1Y = p1Y + d1Y * t1;
		cp1Z = p1Z + d1Z * t1;
		cp2X = p2X + d2X * t2;
		cp2Y = p2Y + d2Y * t2;
		cp2Z = p2Z + d2Z * t2;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = cp1X - cp2X;
		dY = cp1Y - cp2Y;
		dZ = cp1Z - cp2Z;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var n;
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = cp1X + nX * -r1;
		pos1Y = cp1Y + nY * -r1;
		pos1Z = cp1Z + nZ * -r1;
		pos2X = cp2X + nX * r2;
		pos2Y = cp2Y + nY * r2;
		pos2Z = cp2Z + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
});
var oimo_collision_narrowphase_detector_GjkEpaDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_GjkEpaDetector.__name__ = true;
oimo_collision_narrowphase_detector_GjkEpaDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_GjkEpaDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
		var g1 = geom1;
		var g2 = geom2;
		var status = gjkEpa.computeClosestPointsImpl(g1,g2,tf1,tf2,oimo_common_Setting.enableGJKCaching ? cachedData : null,true);
		result.incremental = true;
		if(status != oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED) {
			console.log("../../workspace_as3/OimoPhysics/src/oimo/collision/narrowphase/detector/GjkEpaDetector.hx:28:","GJK/EPA failed: status=" + status);
			return;
		}
		var margin1 = g1._gjkMargin;
		var margin2 = g2._gjkMargin;
		if(gjkEpa.distance > margin1 + margin2) {
			return;
		}
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		var v = gjkEpa.closestPoint1;
		pos1X = v.x;
		pos1Y = v.y;
		pos1Z = v.z;
		var v1 = gjkEpa.closestPoint2;
		pos2X = v1.x;
		pos2Y = v1.y;
		pos2Z = v1.z;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		normalX = pos1X - pos2X;
		normalY = pos1Y - pos2Y;
		normalZ = pos1Z - pos2Z;
		if(normalX * normalX + normalY * normalY + normalZ * normalZ == 0) {
			return;
		}
		if(gjkEpa.distance < 0) {
			normalX = -normalX;
			normalY = -normalY;
			normalZ = -normalZ;
		}
		var l = normalX * normalX + normalY * normalY + normalZ * normalZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		normalX *= l;
		normalY *= l;
		normalZ *= l;
		this.setNormal(result,normalX,normalY,normalZ);
		pos1X += normalX * -g1._gjkMargin;
		pos1Y += normalY * -g1._gjkMargin;
		pos1Z += normalZ * -g1._gjkMargin;
		pos2X += normalX * g2._gjkMargin;
		pos2Y += normalY * g2._gjkMargin;
		pos2Z += normalZ * g2._gjkMargin;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,g1._gjkMargin + g2._gjkMargin - gjkEpa.distance,0);
	}
});
var oimo_collision_narrowphase_detector_SphereBoxDetector = function(swapped) {
	oimo_collision_narrowphase_detector_Detector.call(this,swapped);
};
oimo_collision_narrowphase_detector_SphereBoxDetector.__name__ = true;
oimo_collision_narrowphase_detector_SphereBoxDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereBoxDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var s = geom1;
		var b = geom2;
		result.incremental = false;
		var halfExt;
		var halfExtX;
		var halfExtY;
		var halfExtZ;
		var negHalfExt;
		var negHalfExtX;
		var negHalfExtY;
		var negHalfExtZ;
		halfExtX = b._halfExtentsX;
		halfExtY = b._halfExtentsY;
		halfExtZ = b._halfExtentsZ;
		negHalfExtX = -halfExtX;
		negHalfExtY = -halfExtY;
		negHalfExtZ = -halfExtZ;
		var r = s._radius;
		var boxToSphere;
		var boxToSphereX;
		var boxToSphereY;
		var boxToSphereZ;
		boxToSphereX = tf1._positionX - tf2._positionX;
		boxToSphereY = tf1._positionY - tf2._positionY;
		boxToSphereZ = tf1._positionZ - tf2._positionZ;
		var boxToSphereInBox;
		var boxToSphereInBoxX;
		var boxToSphereInBoxY;
		var boxToSphereInBoxZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * boxToSphereX + tf2._rotation10 * boxToSphereY + tf2._rotation20 * boxToSphereZ;
		__tmp__Y = tf2._rotation01 * boxToSphereX + tf2._rotation11 * boxToSphereY + tf2._rotation21 * boxToSphereZ;
		__tmp__Z = tf2._rotation02 * boxToSphereX + tf2._rotation12 * boxToSphereY + tf2._rotation22 * boxToSphereZ;
		boxToSphereInBoxX = __tmp__X;
		boxToSphereInBoxY = __tmp__Y;
		boxToSphereInBoxZ = __tmp__Z;
		var insideBox = negHalfExtX < boxToSphereInBoxX && halfExtX > boxToSphereInBoxX && negHalfExtY < boxToSphereInBoxY && halfExtY > boxToSphereInBoxY && negHalfExtZ < boxToSphereInBoxZ && halfExtZ > boxToSphereInBoxZ;
		if(insideBox) {
			var sphereToBoxSurface;
			var sphereToBoxSurfaceX;
			var sphereToBoxSurfaceY;
			var sphereToBoxSurfaceZ;
			sphereToBoxSurfaceX = boxToSphereInBoxX < 0 ? -boxToSphereInBoxX : boxToSphereInBoxX;
			sphereToBoxSurfaceY = boxToSphereInBoxY < 0 ? -boxToSphereInBoxY : boxToSphereInBoxY;
			sphereToBoxSurfaceZ = boxToSphereInBoxZ < 0 ? -boxToSphereInBoxZ : boxToSphereInBoxZ;
			sphereToBoxSurfaceX = halfExtX - sphereToBoxSurfaceX;
			sphereToBoxSurfaceY = halfExtY - sphereToBoxSurfaceY;
			sphereToBoxSurfaceZ = halfExtZ - sphereToBoxSurfaceZ;
			var normalInBox;
			var normalInBoxX;
			var normalInBoxY;
			var normalInBoxZ;
			var distX = sphereToBoxSurfaceX;
			var distY = sphereToBoxSurfaceY;
			var distZ = sphereToBoxSurfaceZ;
			var depth;
			var projectionMask;
			var projectionMaskX;
			var projectionMaskY;
			var projectionMaskZ;
			if(distX < distY) {
				if(distX < distZ) {
					if(boxToSphereInBoxX > 0) {
						normalInBoxX = 1;
						normalInBoxY = 0;
						normalInBoxZ = 0;
					} else {
						normalInBoxX = -1;
						normalInBoxY = 0;
						normalInBoxZ = 0;
					}
					projectionMaskX = 0;
					projectionMaskY = 1;
					projectionMaskZ = 1;
					depth = distX;
				} else {
					if(boxToSphereInBoxZ > 0) {
						normalInBoxX = 0;
						normalInBoxY = 0;
						normalInBoxZ = 1;
					} else {
						normalInBoxX = 0;
						normalInBoxY = 0;
						normalInBoxZ = -1;
					}
					projectionMaskX = 1;
					projectionMaskY = 1;
					projectionMaskZ = 0;
					depth = distZ;
				}
			} else if(distY < distZ) {
				if(boxToSphereInBoxY > 0) {
					normalInBoxX = 0;
					normalInBoxY = 1;
					normalInBoxZ = 0;
				} else {
					normalInBoxX = 0;
					normalInBoxY = -1;
					normalInBoxZ = 0;
				}
				projectionMaskX = 1;
				projectionMaskY = 0;
				projectionMaskZ = 1;
				depth = distY;
			} else {
				if(boxToSphereInBoxZ > 0) {
					normalInBoxX = 0;
					normalInBoxY = 0;
					normalInBoxZ = 1;
				} else {
					normalInBoxX = 0;
					normalInBoxY = 0;
					normalInBoxZ = -1;
				}
				projectionMaskX = 1;
				projectionMaskY = 1;
				projectionMaskZ = 0;
				depth = distZ;
			}
			var base;
			var baseX;
			var baseY;
			var baseZ;
			baseX = projectionMaskX * boxToSphereInBoxX;
			baseY = projectionMaskY * boxToSphereInBoxY;
			baseZ = projectionMaskZ * boxToSphereInBoxZ;
			var boxToClosestPointInBox;
			var boxToClosestPointInBoxX;
			var boxToClosestPointInBoxY;
			var boxToClosestPointInBoxZ;
			boxToClosestPointInBoxX = normalInBoxX * halfExtX;
			boxToClosestPointInBoxY = normalInBoxY * halfExtY;
			boxToClosestPointInBoxZ = normalInBoxZ * halfExtZ;
			boxToClosestPointInBoxX += baseX;
			boxToClosestPointInBoxY += baseY;
			boxToClosestPointInBoxZ += baseZ;
			var boxToClosestPoint;
			var boxToClosestPointX;
			var boxToClosestPointY;
			var boxToClosestPointZ;
			var normal;
			var normalX;
			var normalY;
			var normalZ;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * boxToClosestPointInBoxX + tf2._rotation01 * boxToClosestPointInBoxY + tf2._rotation02 * boxToClosestPointInBoxZ;
			__tmp__Y1 = tf2._rotation10 * boxToClosestPointInBoxX + tf2._rotation11 * boxToClosestPointInBoxY + tf2._rotation12 * boxToClosestPointInBoxZ;
			__tmp__Z1 = tf2._rotation20 * boxToClosestPointInBoxX + tf2._rotation21 * boxToClosestPointInBoxY + tf2._rotation22 * boxToClosestPointInBoxZ;
			boxToClosestPointX = __tmp__X1;
			boxToClosestPointY = __tmp__Y1;
			boxToClosestPointZ = __tmp__Z1;
			var __tmp__X2;
			var __tmp__Y2;
			var __tmp__Z2;
			__tmp__X2 = tf2._rotation00 * normalInBoxX + tf2._rotation01 * normalInBoxY + tf2._rotation02 * normalInBoxZ;
			__tmp__Y2 = tf2._rotation10 * normalInBoxX + tf2._rotation11 * normalInBoxY + tf2._rotation12 * normalInBoxZ;
			__tmp__Z2 = tf2._rotation20 * normalInBoxX + tf2._rotation21 * normalInBoxY + tf2._rotation22 * normalInBoxZ;
			normalX = __tmp__X2;
			normalY = __tmp__Y2;
			normalZ = __tmp__Z2;
			this.setNormal(result,normalX,normalY,normalZ);
			var pos1;
			var pos1X;
			var pos1Y;
			var pos1Z;
			var pos2;
			var pos2X;
			var pos2Y;
			var pos2Z;
			pos1X = tf1._positionX + normalX * -r;
			pos1Y = tf1._positionY + normalY * -r;
			pos1Z = tf1._positionZ + normalZ * -r;
			pos2X = tf2._positionX + boxToClosestPointX;
			pos2Y = tf2._positionY + boxToClosestPointY;
			pos2Z = tf2._positionZ + boxToClosestPointZ;
			this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,depth,0);
			return;
		}
		var boxToClosestPointInBox1;
		var boxToClosestPointInBoxX1;
		var boxToClosestPointInBoxY1;
		var boxToClosestPointInBoxZ1;
		var eps = 1e-9;
		var epsVec;
		var epsVecX;
		var epsVecY;
		var epsVecZ;
		epsVecX = eps;
		epsVecY = eps;
		epsVecZ = eps;
		halfExtX -= epsVecX;
		halfExtY -= epsVecY;
		halfExtZ -= epsVecZ;
		negHalfExtX += epsVecX;
		negHalfExtY += epsVecY;
		negHalfExtZ += epsVecZ;
		boxToClosestPointInBoxX1 = boxToSphereInBoxX < halfExtX ? boxToSphereInBoxX : halfExtX;
		boxToClosestPointInBoxY1 = boxToSphereInBoxY < halfExtY ? boxToSphereInBoxY : halfExtY;
		boxToClosestPointInBoxZ1 = boxToSphereInBoxZ < halfExtZ ? boxToSphereInBoxZ : halfExtZ;
		boxToClosestPointInBoxX1 = boxToClosestPointInBoxX1 > negHalfExtX ? boxToClosestPointInBoxX1 : negHalfExtX;
		boxToClosestPointInBoxY1 = boxToClosestPointInBoxY1 > negHalfExtY ? boxToClosestPointInBoxY1 : negHalfExtY;
		boxToClosestPointInBoxZ1 = boxToClosestPointInBoxZ1 > negHalfExtZ ? boxToClosestPointInBoxZ1 : negHalfExtZ;
		var closestPointToSphereInBox;
		var closestPointToSphereInBoxX;
		var closestPointToSphereInBoxY;
		var closestPointToSphereInBoxZ;
		closestPointToSphereInBoxX = boxToSphereInBoxX - boxToClosestPointInBoxX1;
		closestPointToSphereInBoxY = boxToSphereInBoxY - boxToClosestPointInBoxY1;
		closestPointToSphereInBoxZ = boxToSphereInBoxZ - boxToClosestPointInBoxZ1;
		var dist = closestPointToSphereInBoxX * closestPointToSphereInBoxX + closestPointToSphereInBoxY * closestPointToSphereInBoxY + closestPointToSphereInBoxZ * closestPointToSphereInBoxZ;
		if(dist >= r * r) {
			return;
		}
		dist = Math.sqrt(dist);
		var boxToClosestPoint1;
		var boxToClosestPointX1;
		var boxToClosestPointY1;
		var boxToClosestPointZ1;
		var closestPointToSphere;
		var closestPointToSphereX;
		var closestPointToSphereY;
		var closestPointToSphereZ;
		var __tmp__X3;
		var __tmp__Y3;
		var __tmp__Z3;
		__tmp__X3 = tf2._rotation00 * boxToClosestPointInBoxX1 + tf2._rotation01 * boxToClosestPointInBoxY1 + tf2._rotation02 * boxToClosestPointInBoxZ1;
		__tmp__Y3 = tf2._rotation10 * boxToClosestPointInBoxX1 + tf2._rotation11 * boxToClosestPointInBoxY1 + tf2._rotation12 * boxToClosestPointInBoxZ1;
		__tmp__Z3 = tf2._rotation20 * boxToClosestPointInBoxX1 + tf2._rotation21 * boxToClosestPointInBoxY1 + tf2._rotation22 * boxToClosestPointInBoxZ1;
		boxToClosestPointX1 = __tmp__X3;
		boxToClosestPointY1 = __tmp__Y3;
		boxToClosestPointZ1 = __tmp__Z3;
		var __tmp__X4;
		var __tmp__Y4;
		var __tmp__Z4;
		__tmp__X4 = tf2._rotation00 * closestPointToSphereInBoxX + tf2._rotation01 * closestPointToSphereInBoxY + tf2._rotation02 * closestPointToSphereInBoxZ;
		__tmp__Y4 = tf2._rotation10 * closestPointToSphereInBoxX + tf2._rotation11 * closestPointToSphereInBoxY + tf2._rotation12 * closestPointToSphereInBoxZ;
		__tmp__Z4 = tf2._rotation20 * closestPointToSphereInBoxX + tf2._rotation21 * closestPointToSphereInBoxY + tf2._rotation22 * closestPointToSphereInBoxZ;
		closestPointToSphereX = __tmp__X4;
		closestPointToSphereY = __tmp__Y4;
		closestPointToSphereZ = __tmp__Z4;
		var normal1;
		var normalX1;
		var normalY1;
		var normalZ1;
		var l = closestPointToSphereX * closestPointToSphereX + closestPointToSphereY * closestPointToSphereY + closestPointToSphereZ * closestPointToSphereZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		normalX1 = closestPointToSphereX * l;
		normalY1 = closestPointToSphereY * l;
		normalZ1 = closestPointToSphereZ * l;
		this.setNormal(result,normalX1,normalY1,normalZ1);
		var pos11;
		var pos1X1;
		var pos1Y1;
		var pos1Z1;
		var pos21;
		var pos2X1;
		var pos2Y1;
		var pos2Z1;
		pos1X1 = tf1._positionX + normalX1 * -r;
		pos1Y1 = tf1._positionY + normalY1 * -r;
		pos1Z1 = tf1._positionZ + normalZ1 * -r;
		pos2X1 = tf2._positionX + boxToClosestPointX1;
		pos2Y1 = tf2._positionY + boxToClosestPointY1;
		pos2Z1 = tf2._positionZ + boxToClosestPointZ1;
		this.addPoint(result,pos1X1,pos1Y1,pos1Z1,pos2X1,pos2Y1,pos2Z1,r - dist,0);
	}
});
var oimo_collision_narrowphase_detector_SphereCapsuleDetector = function(swapped) {
	oimo_collision_narrowphase_detector_Detector.call(this,swapped);
};
oimo_collision_narrowphase_detector_SphereCapsuleDetector.__name__ = true;
oimo_collision_narrowphase_detector_SphereCapsuleDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereCapsuleDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var s1 = geom1;
		var c2 = geom2;
		result.incremental = false;
		var hh2 = c2._halfHeight;
		var r1 = s1._radius;
		var r2 = c2._radius;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis2X = tf2._rotation01;
		axis2Y = tf2._rotation11;
		axis2Z = tf2._rotation21;
		var cp1;
		var cp1X;
		var cp1Y;
		var cp1Z;
		cp1X = tf1._positionX;
		cp1Y = tf1._positionY;
		cp1Z = tf1._positionZ;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var q2;
		var q2X;
		var q2Y;
		var q2Z;
		p2X = tf2._positionX + axis2X * -hh2;
		p2Y = tf2._positionY + axis2Y * -hh2;
		p2Z = tf2._positionZ + axis2Z * -hh2;
		q2X = tf2._positionX + axis2X * hh2;
		q2Y = tf2._positionY + axis2Y * hh2;
		q2Z = tf2._positionZ + axis2Z * hh2;
		var p12;
		var p12X;
		var p12Y;
		var p12Z;
		p12X = cp1X - p2X;
		p12Y = cp1Y - p2Y;
		p12Z = cp1Z - p2Z;
		var d2;
		var d2X;
		var d2Y;
		var d2Z;
		d2X = q2X - p2X;
		d2Y = q2Y - p2Y;
		d2Z = q2Z - p2Z;
		var d22 = hh2 * hh2 * 4;
		var t = p12X * d2X + p12Y * d2Y + p12Z * d2Z;
		if(t < 0) {
			t = 0;
		} else if(t > d22) {
			t = 1;
		} else {
			t /= d22;
		}
		var cp2;
		var cp2X;
		var cp2Y;
		var cp2Z;
		cp2X = p2X + d2X * t;
		cp2Y = p2Y + d2Y * t;
		cp2Z = p2Z + d2Z * t;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = cp1X - cp2X;
		dY = cp1Y - cp2Y;
		dZ = cp1Z - cp2Z;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var n;
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = cp1X + nX * -r1;
		pos1Y = cp1Y + nY * -r1;
		pos1Z = cp1Z + nZ * -r1;
		pos2X = cp2X + nX * r2;
		pos2Y = cp2Y + nY * r2;
		pos2Z = cp2Z + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
});
var oimo_collision_narrowphase_detector_SphereSphereDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_SphereSphereDetector.__name__ = true;
oimo_collision_narrowphase_detector_SphereSphereDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereSphereDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var s1 = geom1;
		var s2 = geom2;
		result.incremental = false;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = tf1._positionX - tf2._positionX;
		dY = tf1._positionY - tf2._positionY;
		dZ = tf1._positionZ - tf2._positionZ;
		var r1 = s1._radius;
		var r2 = s2._radius;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var n;
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = tf1._positionX + nX * -r1;
		pos1Y = tf1._positionY + nY * -r1;
		pos1Z = tf1._positionZ + nZ * -r1;
		pos2X = tf2._positionX + nX * r2;
		pos2Y = tf2._positionY + nY * r2;
		pos2Z = tf2._positionZ + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
});
var oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron = function() {
	var this1 = new Array(oimo_common_Setting.maxEPAVertices);
	this._vertices = this1;
	this._center = new oimo_common_Vec3();
	this._numVertices = 0;
	this._triangleList = null;
	this._triangleListLast = null;
	this._numTriangles = 0;
	this._trianglePool = null;
	this._vertexPool = null;
};
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron.prototype = {
	dumpHoleEdge: function(first) {
	}
	,validate: function() {
		var t = this._triangleList;
		while(t != null) {
			var n = t._next;
			var _g = 0;
			while(_g < 3) {
				var i = _g++;
				t._vertices[i]._tmpEdgeLoopOuterTriangle = null;
				t._vertices[i]._tmpEdgeLoopNext = null;
				if(t._adjacentPairIndex[i] == -1) {
					this._status = 2;
					return false;
				}
				if(t._adjacentTriangles[i] == null) {
					this._status = 3;
					return false;
				}
			}
			t = n;
		}
		return true;
	}
	,findEdgeLoop: function(id,base,from) {
		if(base._tmpDfsId == id) {
			return;
		}
		base._tmpDfsId = id;
		var _this = base.tmp;
		_this.x = from.x;
		_this.y = from.y;
		_this.z = from.z;
		var _this1 = _this;
		var v = base._vertices[0].v;
		var tx = _this1.x - v.x;
		var ty = _this1.y - v.y;
		var tz = _this1.z - v.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this2 = base.tmp;
		var v1 = base._normal;
		base._tmpDfsVisible = _this2.x * v1.x + _this2.y * v1.y + _this2.z * v1.z > 0;
		if(!base._tmpDfsVisible) {
			this._status = 6;
			return;
		}
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var t = base._adjacentTriangles[i];
			if(t == null) {
				continue;
			}
			var _this3 = t.tmp;
			_this3.x = from.x;
			_this3.y = from.y;
			_this3.z = from.z;
			var _this4 = _this3;
			var v2 = t._vertices[0].v;
			var tx1 = _this4.x - v2.x;
			var ty1 = _this4.y - v2.y;
			var tz1 = _this4.z - v2.z;
			_this4.x = tx1;
			_this4.y = ty1;
			_this4.z = tz1;
			var _this5 = t.tmp;
			var v3 = t._normal;
			t._tmpDfsVisible = _this5.x * v3.x + _this5.y * v3.y + _this5.z * v3.z > 0;
			if(t._tmpDfsVisible) {
				this.findEdgeLoop(id,t,from);
			} else {
				var i2 = base._nextIndex[i];
				var v11 = base._vertices[i];
				var v21 = base._vertices[i2];
				v11._tmpEdgeLoopNext = v21;
				v11._tmpEdgeLoopOuterTriangle = t;
			}
		}
		var _g1 = 0;
		while(_g1 < 3) {
			var i1 = _g1++;
			var triangle = base._adjacentTriangles[i1];
			if(triangle != null) {
				var pairIndex = base._adjacentPairIndex[i1];
				triangle._adjacentTriangles[pairIndex] = null;
				triangle._adjacentPairIndex[pairIndex] = -1;
				base._adjacentTriangles[i1] = null;
				base._adjacentPairIndex[i1] = -1;
			}
		}
		this._numTriangles--;
		var prev = base._prev;
		var next = base._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(base == this._triangleList) {
			this._triangleList = this._triangleList._next;
		}
		if(base == this._triangleListLast) {
			this._triangleListLast = this._triangleListLast._prev;
		}
		base._next = null;
		base._prev = null;
		base.removeReferences();
		base._next = this._trianglePool;
		this._trianglePool = base;
	}
	,_init: function(v1,v2,v3,v4) {
		this._status = 0;
		this._numVertices = 4;
		this._vertices[0] = v1;
		this._vertices[1] = v2;
		this._vertices[2] = v3;
		this._vertices[3] = v4;
		var _this = this._center;
		var v = v1.v;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = _this;
		var v5 = v2.v;
		var tx = _this1.x + v5.x;
		var ty = _this1.y + v5.y;
		var tz = _this1.z + v5.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this2 = _this1;
		var v6 = v3.v;
		var tx1 = _this2.x + v6.x;
		var ty1 = _this2.y + v6.y;
		var tz1 = _this2.z + v6.z;
		_this2.x = tx1;
		_this2.y = ty1;
		_this2.z = tz1;
		var _this3 = _this2;
		var v7 = v4.v;
		var tx2 = _this3.x + v7.x;
		var ty2 = _this3.y + v7.y;
		var tz2 = _this3.z + v7.z;
		_this3.x = tx2;
		_this3.y = ty2;
		_this3.z = tz2;
		var _this4 = _this3;
		var tx3 = _this4.x * 0.25;
		var ty3 = _this4.y * 0.25;
		var tz3 = _this4.z * 0.25;
		_this4.x = tx3;
		_this4.y = ty3;
		_this4.z = tz3;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t1 = first;
		var first1 = this._trianglePool;
		if(first1 != null) {
			this._trianglePool = first1._next;
			first1._next = null;
		} else {
			first1 = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t2 = first1;
		var first2 = this._trianglePool;
		if(first2 != null) {
			this._trianglePool = first2._next;
			first2._next = null;
		} else {
			first2 = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t3 = first2;
		var first3 = this._trianglePool;
		if(first3 != null) {
			this._trianglePool = first3._next;
			first3._next = null;
		} else {
			first3 = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t4 = first3;
		if(!t1.init(v1,v2,v3,this._center,true)) {
			this._status = 1;
		}
		if(!t2.init(v1,v2,v4,this._center,true)) {
			this._status = 1;
		}
		if(!t3.init(v1,v3,v4,this._center,true)) {
			this._status = 1;
		}
		if(!t4.init(v2,v3,v4,this._center,true)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t2)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t3)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		if(!t2.setAdjacentTriangle(t3)) {
			this._status = 1;
		}
		if(!t2.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		if(!t3.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t1;
			this._triangleListLast = t1;
		} else {
			this._triangleListLast._next = t1;
			t1._prev = this._triangleListLast;
			this._triangleListLast = t1;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t2;
			this._triangleListLast = t2;
		} else {
			this._triangleListLast._next = t2;
			t2._prev = this._triangleListLast;
			this._triangleListLast = t2;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t3;
			this._triangleListLast = t3;
		} else {
			this._triangleListLast._next = t3;
			t3._prev = this._triangleListLast;
			this._triangleListLast = t3;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t4;
			this._triangleListLast = t4;
		} else {
			this._triangleListLast._next = t4;
			t4._prev = this._triangleListLast;
			this._triangleListLast = t4;
		}
		return this._status == 0;
	}
	,_addVertex: function(vertex,base) {
		this._vertices[this._numVertices++] = vertex;
		var v1 = base._vertices[0];
		this.findEdgeLoop(this._numVertices,base,vertex.v);
		if(this._status != 0) {
			return false;
		}
		var v = v1;
		var firstV = v1;
		var prevT = null;
		var firstT = null;
		while(true) {
			if(v._tmpEdgeLoopNext == null) {
				this._dumpAsObjModel();
				this._status = 4;
				return false;
			}
			if(v._tmpEdgeLoopOuterTriangle == null) {
				this._status = 5;
				return false;
			}
			var first = this._trianglePool;
			if(first != null) {
				this._trianglePool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
			}
			var t = first;
			if(firstT == null) {
				firstT = t;
			}
			if(!t.init(v,v._tmpEdgeLoopNext,vertex,this._center,false)) {
				this._status = 1;
			}
			if(this._status != 0) {
				return false;
			}
			this._numTriangles++;
			if(this._triangleList == null) {
				this._triangleList = t;
				this._triangleListLast = t;
			} else {
				this._triangleListLast._next = t;
				t._prev = this._triangleListLast;
				this._triangleListLast = t;
			}
			if(!t.setAdjacentTriangle(v._tmpEdgeLoopOuterTriangle)) {
				this._status = 1;
			}
			if(prevT != null) {
				if(!t.setAdjacentTriangle(prevT)) {
					this._status = 1;
				}
			}
			prevT = t;
			v = v._tmpEdgeLoopNext;
			if(!(v != firstV)) {
				break;
			}
		}
		if(!prevT.setAdjacentTriangle(firstT)) {
			this._status = 1;
		}
		if(this._status == 0) {
			return this.validate();
		} else {
			return false;
		}
	}
	,_dumpAsObjModel: function() {
	}
};
var oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState = function() { };
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_EpaTriangle = function() {
	this.id = ++oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.count;
	this._next = null;
	this._prev = null;
	this._normal = new oimo_common_Vec3();
	this._distanceSq = 0;
	this._tmpDfsId = 0;
	this._tmpDfsVisible = false;
	var this1 = new Array(3);
	this._vertices = this1;
	var this2 = new Array(3);
	this._adjacentTriangles = this2;
	var this3 = new Array(3);
	this._adjacentPairIndex = this3;
	this.tmp = new oimo_common_Vec3();
	var this4 = new Array(3);
	this._nextIndex = this4;
	this._nextIndex[0] = 1;
	this._nextIndex[1] = 2;
	this._nextIndex[2] = 0;
};
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.prototype = {
	init: function(vertex1,vertex2,vertex3,center,autoCheck) {
		if(autoCheck == null) {
			autoCheck = false;
		}
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var vc;
		var vcX;
		var vcY;
		var vcZ;
		var v = vertex1.v;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v4 = vertex2.v;
		v2X = v4.x;
		v2Y = v4.y;
		v2Z = v4.z;
		var v5 = vertex3.v;
		v3X = v5.x;
		v3Y = v5.y;
		v3Z = v5.z;
		var v6 = center;
		vcX = v6.x;
		vcY = v6.y;
		vcZ = v6.z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var vc1;
		var vc1X;
		var vc1Y;
		var vc1Z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v13X = v3X - v1X;
		v13Y = v3Y - v1Y;
		v13Z = v3Z - v1Z;
		vc1X = v1X - vcX;
		vc1Y = v1Y - vcY;
		vc1Z = v1Z - vcZ;
		var inor;
		var inorX;
		var inorY;
		var inorZ;
		inorX = v12Y * v13Z - v12Z * v13Y;
		inorY = v12Z * v13X - v12X * v13Z;
		inorZ = v12X * v13Y - v12Y * v13X;
		var inverted = false;
		var d = vc1X * inorX + vc1Y * inorY + vc1Z * inorZ;
		if(d < 0) {
			if(autoCheck) {
				var tmp = vertex2;
				vertex2 = vertex3;
				vertex3 = tmp;
				inorX *= -1;
				inorY *= -1;
				inorZ *= -1;
			} else {
				inverted = true;
			}
		}
		this._vertices[0] = vertex1;
		this._vertices[1] = vertex2;
		this._vertices[2] = vertex3;
		var v7 = this._normal;
		v7.x = inorX;
		v7.y = inorY;
		v7.z = inorZ;
		var vec1 = vertex1.v;
		var vec2 = vertex2.v;
		var vec3 = vertex3.v;
		var out = this.tmp;
		var v11;
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v21;
		var v2X1;
		var v2Y1;
		var v2Z1;
		var v31;
		var v3X1;
		var v3Y1;
		var v3Z1;
		var v121;
		var v12X1;
		var v12Y1;
		var v12Z1;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		var v311;
		var v31X;
		var v31Y;
		var v31Z;
		var v8 = vec1;
		v1X1 = v8.x;
		v1Y1 = v8.y;
		v1Z1 = v8.z;
		var v9 = vec2;
		v2X1 = v9.x;
		v2Y1 = v9.y;
		v2Z1 = v9.z;
		var v10 = vec3;
		v3X1 = v10.x;
		v3Y1 = v10.y;
		v3Z1 = v10.z;
		v12X1 = v2X1 - v1X1;
		v12Y1 = v2Y1 - v1Y1;
		v12Z1 = v2Z1 - v1Z1;
		v23X = v3X1 - v2X1;
		v23Y = v3Y1 - v2Y1;
		v23Z = v3Z1 - v2Z1;
		v31X = v1X1 - v3X1;
		v31Y = v1Y1 - v3Y1;
		v31Z = v1Z1 - v3Z1;
		var n;
		var nX;
		var nY;
		var nZ;
		nX = v12Y1 * v23Z - v12Z1 * v23Y;
		nY = v12Z1 * v23X - v12X1 * v23Z;
		nZ = v12X1 * v23Y - v12Y1 * v23X;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y1 * nZ - v12Z1 * nY;
		n12Y = v12Z1 * nX - v12X1 * nZ;
		n12Z = v12X1 * nY - v12Y1 * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var d12 = v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z;
		var d23 = v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z;
		var d31 = v3X1 * n31X + v3Y1 * n31Y + v3Z1 * n31Z;
		var mind = -1;
		var minv;
		var minvX;
		var minvY;
		var minvZ;
		var mini = 0;
		minvX = 0;
		minvY = 0;
		minvZ = 0;
		if(d12 < 0) {
			var v14;
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v22;
			var v2X2;
			var v2Y2;
			var v2Z2;
			var v15 = vec1;
			v1X2 = v15.x;
			v1Y2 = v15.y;
			v1Z2 = v15.z;
			var v16 = vec2;
			v2X2 = v16.x;
			v2Y2 = v16.y;
			v2Z2 = v16.z;
			var v122;
			var v12X2;
			var v12Y2;
			var v12Z2;
			v12X2 = v2X2 - v1X2;
			v12Y2 = v2Y2 - v1Y2;
			v12Z2 = v2Z2 - v1Z2;
			var d1 = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
			var t = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
			t = -t / d1;
			var b;
			if(t < 0) {
				var v17 = out;
				v17.x = v1X2;
				v17.y = v1Y2;
				v17.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				var v18 = out;
				v18.x = v2X2;
				v18.y = v2Y2;
				v18.z = v2Z2;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X2 * t;
				pY = v1Y2 + v12Y2 * t;
				pZ = v1Z2 + v12Z2 * t;
				var v19 = out;
				v19.x = pX;
				v19.y = pY;
				v19.z = pZ;
				b = 3;
			}
			var d2 = out.x * out.x + out.y * out.y + out.z * out.z;
			mini = b;
			mind = d2;
			var v20 = out;
			minvX = v20.x;
			minvY = v20.y;
			minvZ = v20.z;
		}
		if(d23 < 0) {
			var v110;
			var v1X3;
			var v1Y3;
			var v1Z3;
			var v24;
			var v2X3;
			var v2Y3;
			var v2Z3;
			var v25 = vec2;
			v1X3 = v25.x;
			v1Y3 = v25.y;
			v1Z3 = v25.z;
			var v26 = vec3;
			v2X3 = v26.x;
			v2Y3 = v26.y;
			v2Z3 = v26.z;
			var v123;
			var v12X3;
			var v12Y3;
			var v12Z3;
			v12X3 = v2X3 - v1X3;
			v12Y3 = v2Y3 - v1Y3;
			v12Z3 = v2Z3 - v1Z3;
			var d3 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
			var t1 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
			t1 = -t1 / d3;
			var b1;
			if(t1 < 0) {
				var v27 = out;
				v27.x = v1X3;
				v27.y = v1Y3;
				v27.z = v1Z3;
				b1 = 1;
			} else if(t1 > 1) {
				var v28 = out;
				v28.x = v2X3;
				v28.y = v2Y3;
				v28.z = v2Z3;
				b1 = 2;
			} else {
				var p1;
				var pX1;
				var pY1;
				var pZ1;
				pX1 = v1X3 + v12X3 * t1;
				pY1 = v1Y3 + v12Y3 * t1;
				pZ1 = v1Z3 + v12Z3 * t1;
				var v29 = out;
				v29.x = pX1;
				v29.y = pY1;
				v29.z = pZ1;
				b1 = 3;
			}
			var d4 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind < 0 || d4 < mind) {
				mini = b1 << 1;
				mind = d4;
				var v30 = out;
				minvX = v30.x;
				minvY = v30.y;
				minvZ = v30.z;
			}
		}
		if(d31 < 0) {
			var v111;
			var v1X4;
			var v1Y4;
			var v1Z4;
			var v210;
			var v2X4;
			var v2Y4;
			var v2Z4;
			var v32 = vec1;
			v1X4 = v32.x;
			v1Y4 = v32.y;
			v1Z4 = v32.z;
			var v33 = vec3;
			v2X4 = v33.x;
			v2Y4 = v33.y;
			v2Z4 = v33.z;
			var v124;
			var v12X4;
			var v12Y4;
			var v12Z4;
			v12X4 = v2X4 - v1X4;
			v12Y4 = v2Y4 - v1Y4;
			v12Z4 = v2Z4 - v1Z4;
			var d5 = v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4;
			var t2 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
			t2 = -t2 / d5;
			var b2;
			if(t2 < 0) {
				var v34 = out;
				v34.x = v1X4;
				v34.y = v1Y4;
				v34.z = v1Z4;
				b2 = 1;
			} else if(t2 > 1) {
				var v35 = out;
				v35.x = v2X4;
				v35.y = v2Y4;
				v35.z = v2Z4;
				b2 = 2;
			} else {
				var p2;
				var pX2;
				var pY2;
				var pZ2;
				pX2 = v1X4 + v12X4 * t2;
				pY2 = v1Y4 + v12Y4 * t2;
				pZ2 = v1Z4 + v12Z4 * t2;
				var v36 = out;
				v36.x = pX2;
				v36.y = pY2;
				v36.z = pZ2;
				b2 = 3;
			}
			var d6 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind < 0 || d6 < mind) {
				mini = b2 & 1 | (b2 & 2) << 1;
				mind = d6;
				var v37 = out;
				minvX = v37.x;
				minvY = v37.y;
				minvZ = v37.z;
			}
		}
		if(mind > 0) {
			var v38 = out;
			v38.x = minvX;
			v38.y = minvY;
			v38.z = minvZ;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var dn = v1X1 * nX + v1Y1 * nY + v1Z1 * nZ;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = dn / l2;
			minvX = nX * l2;
			minvY = nY * l2;
			minvZ = nZ * l2;
			var v39 = out;
			v39.x = minvX;
			v39.y = minvY;
			v39.z = minvZ;
		}
		var _this = this.tmp;
		this._distanceSq = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		this._adjacentTriangles[0] = null;
		this._adjacentTriangles[1] = null;
		this._adjacentTriangles[2] = null;
		this._adjacentPairIndex[0] = -1;
		this._adjacentPairIndex[1] = -1;
		this._adjacentPairIndex[2] = -1;
		return !inverted;
	}
	,setAdjacentTriangle: function(triangle) {
		var count = 0;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var j = _g1++;
				var i2 = this._nextIndex[i];
				var j2 = this._nextIndex[j];
				if(this._vertices[i] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[j]) {
					this._adjacentTriangles[i] = triangle;
					this._adjacentPairIndex[i] = j;
					triangle._adjacentTriangles[j] = this;
					triangle._adjacentPairIndex[j] = i;
					++count;
				}
			}
		}
		if(count != 1) {
			return false;
		}
		return true;
	}
	,removeAdjacentTriangles: function() {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var triangle = this._adjacentTriangles[i];
			if(triangle != null) {
				var pairIndex = this._adjacentPairIndex[i];
				triangle._adjacentTriangles[pairIndex] = null;
				triangle._adjacentPairIndex[pairIndex] = -1;
				this._adjacentTriangles[i] = null;
				this._adjacentPairIndex[i] = -1;
			}
		}
	}
	,removeReferences: function() {
		this._next = null;
		this._prev = null;
		this._tmpDfsId = 0;
		this._tmpDfsVisible = false;
		this._distanceSq = 0;
		this._vertices[0] = null;
		this._vertices[1] = null;
		this._vertices[2] = null;
		this._adjacentTriangles[0] = null;
		this._adjacentTriangles[1] = null;
		this._adjacentTriangles[2] = null;
		this._adjacentPairIndex[0] = 0;
		this._adjacentPairIndex[1] = 0;
		this._adjacentPairIndex[2] = 0;
	}
	,dump: function() {
	}
};
var oimo_collision_narrowphase_detector_gjkepa_EpaVertex = function() {
	this.randId = Math.random() * 100000 | 0;
	this.v = new oimo_common_Vec3();
	this.w1 = new oimo_common_Vec3();
	this.w2 = new oimo_common_Vec3();
};
oimo_collision_narrowphase_detector_gjkepa_EpaVertex.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_EpaVertex.prototype = {
	init: function(v,w1,w2) {
		var _this = this.v;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = this.w1;
		_this1.x = w1.x;
		_this1.y = w1.y;
		_this1.z = w1.z;
		var _this2 = this.w2;
		_this2.x = w2.x;
		_this2.y = w2.y;
		_this2.z = w2.z;
		this._next = null;
		this._tmpEdgeLoopNext = null;
		this._tmpEdgeLoopOuterTriangle = null;
		return this;
	}
	,removeReferences: function() {
		this._next = null;
		this._tmpEdgeLoopNext = null;
		this._tmpEdgeLoopOuterTriangle = null;
	}
};
var oimo_collision_narrowphase_detector_gjkepa_GjkCache = function() {
	this.prevClosestDir = new oimo_common_Vec3();
};
oimo_collision_narrowphase_detector_gjkepa_GjkCache.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_GjkCache.prototype = {
	clear: function() {
		this.prevClosestDir.zero();
	}
};
var oimo_common_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	oimo_common_Vec3.numCreations++;
};
oimo_common_Vec3.__name__ = true;
oimo_common_Vec3.prototype = {
	init: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,zero: function() {
		var tx = 0;
		var ty = 0;
		var tz = 0;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,add: function(v) {
		return new oimo_common_Vec3(this.x + v.x,this.y + v.y,this.z + v.z);
	}
	,add3: function(vx,vy,vz) {
		return new oimo_common_Vec3(this.x + vx,this.y + vy,this.z + vz);
	}
	,addScaled: function(v,s) {
		return new oimo_common_Vec3(this.x + v.x * s,this.y + v.y * s,this.z + v.z * s);
	}
	,sub: function(v) {
		return new oimo_common_Vec3(this.x - v.x,this.y - v.y,this.z - v.z);
	}
	,sub3: function(vx,vy,vz) {
		return new oimo_common_Vec3(this.x - vx,this.y - vy,this.z - vz);
	}
	,scale: function(s) {
		return new oimo_common_Vec3(this.x * s,this.y * s,this.z * s);
	}
	,scale3: function(sx,sy,sz) {
		return new oimo_common_Vec3(this.x * sx,this.y * sy,this.z * sz);
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,cross: function(v) {
		return new oimo_common_Vec3(this.y * v.z - this.z * v.y,this.z * v.x - this.x * v.z,this.x * v.y - this.y * v.x);
	}
	,addEq: function(v) {
		var tx = this.x + v.x;
		var ty = this.y + v.y;
		var tz = this.z + v.z;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,add3Eq: function(vx,vy,vz) {
		var tx = this.x + vx;
		var ty = this.y + vy;
		var tz = this.z + vz;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,addScaledEq: function(v,s) {
		var tx = this.x + v.x * s;
		var ty = this.y + v.y * s;
		var tz = this.z + v.z * s;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,subEq: function(v) {
		var tx = this.x - v.x;
		var ty = this.y - v.y;
		var tz = this.z - v.z;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,sub3Eq: function(vx,vy,vz) {
		var tx = this.x - vx;
		var ty = this.y - vy;
		var tz = this.z - vz;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,scaleEq: function(s) {
		var tx = this.x * s;
		var ty = this.y * s;
		var tz = this.z * s;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,scale3Eq: function(sx,sy,sz) {
		var tx = this.x * sx;
		var ty = this.y * sy;
		var tz = this.z * sz;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,crossEq: function(v) {
		var tx = this.y * v.z - this.z * v.y;
		var ty = this.z * v.x - this.x * v.z;
		var tz = this.x * v.y - this.y * v.x;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,mulMat3: function(m) {
		return new oimo_common_Vec3(this.x * m.e00 + this.y * m.e01 + this.z * m.e02,this.x * m.e10 + this.y * m.e11 + this.z * m.e12,this.x * m.e20 + this.y * m.e21 + this.z * m.e22);
	}
	,mulMat4: function(m) {
		return new oimo_common_Vec3(this.x * m.e00 + this.y * m.e01 + this.z * m.e02 + m.e03,this.x * m.e10 + this.y * m.e11 + this.z * m.e12 + m.e13,this.x * m.e20 + this.y * m.e21 + this.z * m.e22 + m.e23);
	}
	,mulTransform: function(tf) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = this;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * vX + tf._rotation01 * vY + tf._rotation02 * vZ;
		__tmp__Y = tf._rotation10 * vX + tf._rotation11 * vY + tf._rotation12 * vZ;
		__tmp__Z = tf._rotation20 * vX + tf._rotation21 * vY + tf._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var res = new oimo_common_Vec3();
		var v2 = res;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		return res;
	}
	,mulMat3Eq: function(m) {
		var tx = this.x * m.e00 + this.y * m.e01 + this.z * m.e02;
		var ty = this.x * m.e10 + this.y * m.e11 + this.z * m.e12;
		var tz = this.x * m.e20 + this.y * m.e21 + this.z * m.e22;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,mulMat4Eq: function(m) {
		var tx = this.x * m.e00 + this.y * m.e01 + this.z * m.e02 + m.e03;
		var ty = this.x * m.e10 + this.y * m.e11 + this.z * m.e12 + m.e13;
		var tz = this.x * m.e20 + this.y * m.e21 + this.z * m.e22 + m.e23;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,mulTransformEq: function(tf) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = this;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * vX + tf._rotation01 * vY + tf._rotation02 * vZ;
		__tmp__Y = tf._rotation10 * vX + tf._rotation11 * vY + tf._rotation12 * vZ;
		__tmp__Z = tf._rotation20 * vX + tf._rotation21 * vY + tf._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var v2 = this;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,normalized: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		return new oimo_common_Vec3(this.x * invLen,this.y * invLen,this.z * invLen);
	}
	,normalize: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		var tx = this.x * invLen;
		var ty = this.y * invLen;
		var tz = this.z * invLen;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,negate: function() {
		return new oimo_common_Vec3(-this.x,-this.y,-this.z);
	}
	,negateEq: function() {
		var tx = -this.x;
		var ty = -this.y;
		var tz = -this.z;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,copyFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new oimo_common_Vec3(this.x,this.y,this.z);
	}
	,toString: function() {
		return "Vec3[" + (this.x > 0 ? (this.x * 10000000 + 0.5 | 0) / 10000000 : (this.x * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.y > 0 ? (this.y * 10000000 + 0.5 | 0) / 10000000 : (this.y * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.z > 0 ? (this.z * 10000000 + 0.5 | 0) / 10000000 : (this.z * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
};
var oimo_common_Transform = function() {
	this._positionX = 0;
	this._positionY = 0;
	this._positionZ = 0;
	this._rotation00 = 1;
	this._rotation01 = 0;
	this._rotation02 = 0;
	this._rotation10 = 0;
	this._rotation11 = 1;
	this._rotation12 = 0;
	this._rotation20 = 0;
	this._rotation21 = 0;
	this._rotation22 = 1;
};
oimo_common_Transform.__name__ = true;
oimo_common_Transform.prototype = {
	identity: function() {
		this._positionX = 0;
		this._positionY = 0;
		this._positionZ = 0;
		this._rotation00 = 1;
		this._rotation01 = 0;
		this._rotation02 = 0;
		this._rotation10 = 0;
		this._rotation11 = 1;
		this._rotation12 = 0;
		this._rotation20 = 0;
		this._rotation21 = 0;
		this._rotation22 = 1;
		return this;
	}
	,getPosition: function() {
		var position = new oimo_common_Vec3();
		var v = position;
		v.x = this._positionX;
		v.y = this._positionY;
		v.z = this._positionZ;
		return position;
	}
	,getPositionTo: function(position) {
		var v = position;
		v.x = this._positionX;
		v.y = this._positionY;
		v.z = this._positionZ;
	}
	,setPosition: function(position) {
		var v = position;
		this._positionX = v.x;
		this._positionY = v.y;
		this._positionZ = v.z;
		return this;
	}
	,translate: function(translation) {
		var diff;
		var diffX;
		var diffY;
		var diffZ;
		var v = translation;
		diffX = v.x;
		diffY = v.y;
		diffZ = v.z;
		this._positionX += diffX;
		this._positionY += diffY;
		this._positionZ += diffZ;
	}
	,getRotation: function() {
		var rotation = new oimo_common_Mat3();
		var m = rotation;
		m.e00 = this._rotation00;
		m.e01 = this._rotation01;
		m.e02 = this._rotation02;
		m.e10 = this._rotation10;
		m.e11 = this._rotation11;
		m.e12 = this._rotation12;
		m.e20 = this._rotation20;
		m.e21 = this._rotation21;
		m.e22 = this._rotation22;
		return rotation;
	}
	,getRotationTo: function(out) {
		var m = out;
		m.e00 = this._rotation00;
		m.e01 = this._rotation01;
		m.e02 = this._rotation02;
		m.e10 = this._rotation10;
		m.e11 = this._rotation11;
		m.e12 = this._rotation12;
		m.e20 = this._rotation20;
		m.e21 = this._rotation21;
		m.e22 = this._rotation22;
	}
	,setRotation: function(rotation) {
		var m = rotation;
		this._rotation00 = m.e00;
		this._rotation01 = m.e01;
		this._rotation02 = m.e02;
		this._rotation10 = m.e10;
		this._rotation11 = m.e11;
		this._rotation12 = m.e12;
		this._rotation20 = m.e20;
		this._rotation21 = m.e21;
		this._rotation22 = m.e22;
		return this;
	}
	,setRotationXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		this._rotation00 = cy * cz;
		this._rotation01 = -cy * sz;
		this._rotation02 = sy;
		this._rotation10 = cx * sz + cz * sx * sy;
		this._rotation11 = cx * cz - sx * sy * sz;
		this._rotation12 = -cy * sx;
		this._rotation20 = sx * sz - cx * cz * sy;
		this._rotation21 = cz * sx + cx * sy * sz;
		this._rotation22 = cx * cy;
	}
	,rotate: function(rotation) {
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var m = rotation;
		rot00 = m.e00;
		rot01 = m.e01;
		rot02 = m.e02;
		rot10 = m.e10;
		rot11 = m.e11;
		rot12 = m.e12;
		rot20 = m.e20;
		rot21 = m.e21;
		rot22 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._rotation00 + rot01 * this._rotation10 + rot02 * this._rotation20;
		__tmp__01 = rot00 * this._rotation01 + rot01 * this._rotation11 + rot02 * this._rotation21;
		__tmp__02 = rot00 * this._rotation02 + rot01 * this._rotation12 + rot02 * this._rotation22;
		__tmp__10 = rot10 * this._rotation00 + rot11 * this._rotation10 + rot12 * this._rotation20;
		__tmp__11 = rot10 * this._rotation01 + rot11 * this._rotation11 + rot12 * this._rotation21;
		__tmp__12 = rot10 * this._rotation02 + rot11 * this._rotation12 + rot12 * this._rotation22;
		__tmp__20 = rot20 * this._rotation00 + rot21 * this._rotation10 + rot22 * this._rotation20;
		__tmp__21 = rot20 * this._rotation01 + rot21 * this._rotation11 + rot22 * this._rotation21;
		__tmp__22 = rot20 * this._rotation02 + rot21 * this._rotation12 + rot22 * this._rotation22;
		this._rotation00 = __tmp__00;
		this._rotation01 = __tmp__01;
		this._rotation02 = __tmp__02;
		this._rotation10 = __tmp__10;
		this._rotation11 = __tmp__11;
		this._rotation12 = __tmp__12;
		this._rotation20 = __tmp__20;
		this._rotation21 = __tmp__21;
		this._rotation22 = __tmp__22;
	}
	,rotateXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._rotation00 + rot01 * this._rotation10 + rot02 * this._rotation20;
		__tmp__01 = rot00 * this._rotation01 + rot01 * this._rotation11 + rot02 * this._rotation21;
		__tmp__02 = rot00 * this._rotation02 + rot01 * this._rotation12 + rot02 * this._rotation22;
		__tmp__10 = rot10 * this._rotation00 + rot11 * this._rotation10 + rot12 * this._rotation20;
		__tmp__11 = rot10 * this._rotation01 + rot11 * this._rotation11 + rot12 * this._rotation21;
		__tmp__12 = rot10 * this._rotation02 + rot11 * this._rotation12 + rot12 * this._rotation22;
		__tmp__20 = rot20 * this._rotation00 + rot21 * this._rotation10 + rot22 * this._rotation20;
		__tmp__21 = rot20 * this._rotation01 + rot21 * this._rotation11 + rot22 * this._rotation21;
		__tmp__22 = rot20 * this._rotation02 + rot21 * this._rotation12 + rot22 * this._rotation22;
		this._rotation00 = __tmp__00;
		this._rotation01 = __tmp__01;
		this._rotation02 = __tmp__02;
		this._rotation10 = __tmp__10;
		this._rotation11 = __tmp__11;
		this._rotation12 = __tmp__12;
		this._rotation20 = __tmp__20;
		this._rotation21 = __tmp__21;
		this._rotation22 = __tmp__22;
	}
	,getOrientation: function() {
		var q = new oimo_common_Quat();
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._rotation00;
		var e11 = this._rotation11;
		var e22 = this._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation21 - this._rotation12) * s;
			iqY = (this._rotation02 - this._rotation20) * s;
			iqZ = (this._rotation10 - this._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._rotation01 + this._rotation10) * s;
				iqZ = (this._rotation02 + this._rotation20) * s;
				iqW = (this._rotation21 - this._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._rotation02 + this._rotation20) * s;
				iqY = (this._rotation12 + this._rotation21) * s;
				iqW = (this._rotation10 - this._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation01 + this._rotation10) * s;
			iqZ = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation02 - this._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation02 + this._rotation20) * s;
			iqY = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation10 - this._rotation01) * s;
		}
		var q1 = q;
		q1.x = iqX;
		q1.y = iqY;
		q1.z = iqZ;
		q1.w = iqW;
		return q;
	}
	,getOrientationTo: function(orientation) {
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._rotation00;
		var e11 = this._rotation11;
		var e22 = this._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation21 - this._rotation12) * s;
			iqY = (this._rotation02 - this._rotation20) * s;
			iqZ = (this._rotation10 - this._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._rotation01 + this._rotation10) * s;
				iqZ = (this._rotation02 + this._rotation20) * s;
				iqW = (this._rotation21 - this._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._rotation02 + this._rotation20) * s;
				iqY = (this._rotation12 + this._rotation21) * s;
				iqW = (this._rotation10 - this._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation01 + this._rotation10) * s;
			iqZ = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation02 - this._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation02 + this._rotation20) * s;
			iqY = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation10 - this._rotation01) * s;
		}
		var q = orientation;
		q.x = iqX;
		q.y = iqY;
		q.z = iqZ;
		q.w = iqW;
	}
	,setOrientation: function(quaternion) {
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var q1 = quaternion;
		qX = q1.x;
		qY = q1.y;
		qZ = q1.z;
		qW = q1.w;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this._rotation00 = 1 - yy - zz;
		this._rotation01 = xy - wz;
		this._rotation02 = xz + wy;
		this._rotation10 = xy + wz;
		this._rotation11 = 1 - xx - zz;
		this._rotation12 = yz - wx;
		this._rotation20 = xz - wy;
		this._rotation21 = yz + wx;
		this._rotation22 = 1 - xx - yy;
		return this;
	}
	,clone: function() {
		var tf = new oimo_common_Transform();
		tf._positionX = this._positionX;
		tf._positionY = this._positionY;
		tf._positionZ = this._positionZ;
		tf._rotation00 = this._rotation00;
		tf._rotation01 = this._rotation01;
		tf._rotation02 = this._rotation02;
		tf._rotation10 = this._rotation10;
		tf._rotation11 = this._rotation11;
		tf._rotation12 = this._rotation12;
		tf._rotation20 = this._rotation20;
		tf._rotation21 = this._rotation21;
		tf._rotation22 = this._rotation22;
		return tf;
	}
	,copyFrom: function(transform) {
		this._positionX = transform._positionX;
		this._positionY = transform._positionY;
		this._positionZ = transform._positionZ;
		this._rotation00 = transform._rotation00;
		this._rotation01 = transform._rotation01;
		this._rotation02 = transform._rotation02;
		this._rotation10 = transform._rotation10;
		this._rotation11 = transform._rotation11;
		this._rotation12 = transform._rotation12;
		this._rotation20 = transform._rotation20;
		this._rotation21 = transform._rotation21;
		this._rotation22 = transform._rotation22;
		return this;
	}
};
var oimo_common_Setting = function() { };
oimo_common_Setting.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_GjkEpa = function() {
	var this1 = new Array(4);
	this.s = this1;
	var this2 = new Array(4);
	this.w1 = this2;
	var this3 = new Array(4);
	this.w2 = this3;
	var this4 = new Array(3);
	this.baseDirs = this4;
	this.baseDirs[0] = new oimo_common_Vec3(1,0,0);
	this.baseDirs[1] = new oimo_common_Vec3(0,1,0);
	this.baseDirs[2] = new oimo_common_Vec3(0,0,1);
	this.tl1 = new oimo_common_Vec3();
	this.tl2 = new oimo_common_Vec3();
	this.rayX = new oimo_common_Vec3();
	this.rayR = new oimo_common_Vec3();
	this.tempTransform = new oimo_common_Transform();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.s[i] = new oimo_common_Vec3();
		this.w1[i] = new oimo_common_Vec3();
		this.w2[i] = new oimo_common_Vec3();
	}
	this.dir = new oimo_common_Vec3();
	this.closest = new oimo_common_Vec3();
	this.closestPoint1 = new oimo_common_Vec3();
	this.closestPoint2 = new oimo_common_Vec3();
	this.polyhedron = new oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron();
};
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.getInstance = function() {
	return oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
};
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.prototype = {
	computeClosestPointsImpl: function(c1,c2,tf1,tf2,cache,useEpa) {
		this.c1 = c1;
		this.c2 = c2;
		this.tf1 = tf1;
		this.tf2 = tf2;
		var s = this.s;
		var w1 = this.w1;
		var w2 = this.w2;
		var closest = this.closest;
		var dir = this.dir;
		if(cache != null) {
			if(cache._gjkCache == null) {
				cache._gjkCache = new oimo_collision_narrowphase_detector_gjkepa_GjkCache();
			}
			this.loadCache(cache._gjkCache);
		} else {
			dir.zero();
		}
		if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z == 0) {
			var firstDir;
			var firstDirX;
			var firstDirY;
			var firstDirZ;
			firstDirX = tf2._positionX - tf1._positionX;
			firstDirY = tf2._positionY - tf1._positionY;
			firstDirZ = tf2._positionZ - tf1._positionZ;
			var v = dir;
			v.x = firstDirX;
			v.y = firstDirY;
			v.z = firstDirZ;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-6) {
				dir.init(1,0,0);
			}
		}
		this.simplexSize = 0;
		this.computeWitnessPoint1(false);
		this.computeWitnessPoint2(false);
		var _this = this.s[this.simplexSize];
		var v1 = this.w1[this.simplexSize];
		_this.x = v1.x;
		_this.y = v1.y;
		_this.z = v1.z;
		var _this1 = _this;
		var v2 = this.w2[this.simplexSize];
		var tx = _this1.x - v2.x;
		var ty = _this1.y - v2.y;
		var tz = _this1.z - v2.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		this.simplexSize = 1;
		var count = 0;
		var max = 40;
		var eps = 1e-4;
		var eps2 = eps * eps;
		while(count < max) {
			var v3 = 0;
			var _g = this.simplexSize;
			switch(_g) {
			case 1:
				var v4 = s[0];
				closest.x = v4.x;
				closest.y = v4.y;
				closest.z = v4.z;
				v3 = 1;
				break;
			case 2:
				var v11;
				var v1X;
				var v1Y;
				var v1Z;
				var v21;
				var v2X;
				var v2Y;
				var v2Z;
				var v5 = s[0];
				v1X = v5.x;
				v1Y = v5.y;
				v1Z = v5.z;
				var v6 = s[1];
				v2X = v6.x;
				v2Y = v6.y;
				v2Z = v6.z;
				var v12;
				var v12X;
				var v12Y;
				var v12Z;
				v12X = v2X - v1X;
				v12Y = v2Y - v1Y;
				v12Z = v2Z - v1Z;
				var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
				var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
				t = -t / d;
				if(t < 0) {
					var v7 = closest;
					v7.x = v1X;
					v7.y = v1Y;
					v7.z = v1Z;
					v3 = 1;
				} else if(t > 1) {
					var v8 = closest;
					v8.x = v2X;
					v8.y = v2Y;
					v8.z = v2Z;
					v3 = 2;
				} else {
					var p;
					var pX;
					var pY;
					var pZ;
					pX = v1X + v12X * t;
					pY = v1Y + v12Y * t;
					pZ = v1Z + v12Z * t;
					var v9 = closest;
					v9.x = pX;
					v9.y = pY;
					v9.z = pZ;
					v3 = 3;
				}
				break;
			case 3:
				var vec1 = s[0];
				var vec2 = s[1];
				var vec3 = s[2];
				var v13;
				var v1X1;
				var v1Y1;
				var v1Z1;
				var v22;
				var v2X1;
				var v2Y1;
				var v2Z1;
				var v31;
				var v3X;
				var v3Y;
				var v3Z;
				var v121;
				var v12X1;
				var v12Y1;
				var v12Z1;
				var v23;
				var v23X;
				var v23Y;
				var v23Z;
				var v311;
				var v31X;
				var v31Y;
				var v31Z;
				var v10 = vec1;
				v1X1 = v10.x;
				v1Y1 = v10.y;
				v1Z1 = v10.z;
				var v14 = vec2;
				v2X1 = v14.x;
				v2Y1 = v14.y;
				v2Z1 = v14.z;
				var v15 = vec3;
				v3X = v15.x;
				v3Y = v15.y;
				v3Z = v15.z;
				v12X1 = v2X1 - v1X1;
				v12Y1 = v2Y1 - v1Y1;
				v12Z1 = v2Z1 - v1Z1;
				v23X = v3X - v2X1;
				v23Y = v3Y - v2Y1;
				v23Z = v3Z - v2Z1;
				v31X = v1X1 - v3X;
				v31Y = v1Y1 - v3Y;
				v31Z = v1Z1 - v3Z;
				var n;
				var nX;
				var nY;
				var nZ;
				nX = v12Y1 * v23Z - v12Z1 * v23Y;
				nY = v12Z1 * v23X - v12X1 * v23Z;
				nZ = v12X1 * v23Y - v12Y1 * v23X;
				var n12;
				var n12X;
				var n12Y;
				var n12Z;
				var n23;
				var n23X;
				var n23Y;
				var n23Z;
				var n31;
				var n31X;
				var n31Y;
				var n31Z;
				n12X = v12Y1 * nZ - v12Z1 * nY;
				n12Y = v12Z1 * nX - v12X1 * nZ;
				n12Z = v12X1 * nY - v12Y1 * nX;
				n23X = v23Y * nZ - v23Z * nY;
				n23Y = v23Z * nX - v23X * nZ;
				n23Z = v23X * nY - v23Y * nX;
				n31X = v31Y * nZ - v31Z * nY;
				n31Y = v31Z * nX - v31X * nZ;
				n31Z = v31X * nY - v31Y * nX;
				var d12 = v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z;
				var d23 = v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z;
				var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
				var mind = -1;
				var minv;
				var minvX;
				var minvY;
				var minvZ;
				var mini = 0;
				minvX = 0;
				minvY = 0;
				minvZ = 0;
				if(d12 < 0) {
					var v16;
					var v1X2;
					var v1Y2;
					var v1Z2;
					var v24;
					var v2X2;
					var v2Y2;
					var v2Z2;
					var v17 = vec1;
					v1X2 = v17.x;
					v1Y2 = v17.y;
					v1Z2 = v17.z;
					var v18 = vec2;
					v2X2 = v18.x;
					v2Y2 = v18.y;
					v2Z2 = v18.z;
					var v122;
					var v12X2;
					var v12Y2;
					var v12Z2;
					v12X2 = v2X2 - v1X2;
					v12Y2 = v2Y2 - v1Y2;
					v12Z2 = v2Z2 - v1Z2;
					var d1 = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
					var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
					t1 = -t1 / d1;
					var b;
					if(t1 < 0) {
						var v19 = closest;
						v19.x = v1X2;
						v19.y = v1Y2;
						v19.z = v1Z2;
						b = 1;
					} else if(t1 > 1) {
						var v20 = closest;
						v20.x = v2X2;
						v20.y = v2Y2;
						v20.z = v2Z2;
						b = 2;
					} else {
						var p1;
						var pX1;
						var pY1;
						var pZ1;
						pX1 = v1X2 + v12X2 * t1;
						pY1 = v1Y2 + v12Y2 * t1;
						pZ1 = v1Z2 + v12Z2 * t1;
						var v25 = closest;
						v25.x = pX1;
						v25.y = pY1;
						v25.z = pZ1;
						b = 3;
					}
					var d2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini = b;
					mind = d2;
					var v26 = closest;
					minvX = v26.x;
					minvY = v26.y;
					minvZ = v26.z;
				}
				if(d23 < 0) {
					var v110;
					var v1X3;
					var v1Y3;
					var v1Z3;
					var v27;
					var v2X3;
					var v2Y3;
					var v2Z3;
					var v28 = vec2;
					v1X3 = v28.x;
					v1Y3 = v28.y;
					v1Z3 = v28.z;
					var v29 = vec3;
					v2X3 = v29.x;
					v2Y3 = v29.y;
					v2Z3 = v29.z;
					var v123;
					var v12X3;
					var v12Y3;
					var v12Z3;
					v12X3 = v2X3 - v1X3;
					v12Y3 = v2Y3 - v1Y3;
					v12Z3 = v2Z3 - v1Z3;
					var d3 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
					var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
					t2 = -t2 / d3;
					var b1;
					if(t2 < 0) {
						var v30 = closest;
						v30.x = v1X3;
						v30.y = v1Y3;
						v30.z = v1Z3;
						b1 = 1;
					} else if(t2 > 1) {
						var v32 = closest;
						v32.x = v2X3;
						v32.y = v2Y3;
						v32.z = v2Z3;
						b1 = 2;
					} else {
						var p2;
						var pX2;
						var pY2;
						var pZ2;
						pX2 = v1X3 + v12X3 * t2;
						pY2 = v1Y3 + v12Y3 * t2;
						pZ2 = v1Z3 + v12Z3 * t2;
						var v33 = closest;
						v33.x = pX2;
						v33.y = pY2;
						v33.z = pZ2;
						b1 = 3;
					}
					var d4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d4 < mind) {
						mini = b1 << 1;
						mind = d4;
						var v34 = closest;
						minvX = v34.x;
						minvY = v34.y;
						minvZ = v34.z;
					}
				}
				if(d31 < 0) {
					var v111;
					var v1X4;
					var v1Y4;
					var v1Z4;
					var v210;
					var v2X4;
					var v2Y4;
					var v2Z4;
					var v35 = vec1;
					v1X4 = v35.x;
					v1Y4 = v35.y;
					v1Z4 = v35.z;
					var v36 = vec3;
					v2X4 = v36.x;
					v2Y4 = v36.y;
					v2Z4 = v36.z;
					var v124;
					var v12X4;
					var v12Y4;
					var v12Z4;
					v12X4 = v2X4 - v1X4;
					v12Y4 = v2Y4 - v1Y4;
					v12Z4 = v2Z4 - v1Z4;
					var d5 = v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4;
					var t3 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
					t3 = -t3 / d5;
					var b2;
					if(t3 < 0) {
						var v37 = closest;
						v37.x = v1X4;
						v37.y = v1Y4;
						v37.z = v1Z4;
						b2 = 1;
					} else if(t3 > 1) {
						var v38 = closest;
						v38.x = v2X4;
						v38.y = v2Y4;
						v38.z = v2Z4;
						b2 = 2;
					} else {
						var p3;
						var pX3;
						var pY3;
						var pZ3;
						pX3 = v1X4 + v12X4 * t3;
						pY3 = v1Y4 + v12Y4 * t3;
						pZ3 = v1Z4 + v12Z4 * t3;
						var v39 = closest;
						v39.x = pX3;
						v39.y = pY3;
						v39.z = pZ3;
						b2 = 3;
					}
					var d6 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d6 < mind) {
						mini = b2 & 1 | (b2 & 2) << 1;
						mind = d6;
						var v40 = closest;
						minvX = v40.x;
						minvY = v40.y;
						minvZ = v40.z;
					}
				}
				if(mind > 0) {
					var v41 = closest;
					v41.x = minvX;
					v41.y = minvY;
					v41.z = minvZ;
					v3 = mini;
				} else {
					var l = nX * nX + nY * nY + nZ * nZ;
					if(l > 0) {
						l = 1 / Math.sqrt(l);
					}
					nX *= l;
					nY *= l;
					nZ *= l;
					var dn = v1X1 * nX + v1Y1 * nY + v1Z1 * nZ;
					var l2 = nX * nX + nY * nY + nZ * nZ;
					l2 = dn / l2;
					minvX = nX * l2;
					minvY = nY * l2;
					minvZ = nZ * l2;
					var v42 = closest;
					v42.x = minvX;
					v42.y = minvY;
					v42.z = minvZ;
					v3 = 7;
				}
				break;
			case 4:
				var vec11 = s[0];
				var vec21 = s[1];
				var vec31 = s[2];
				var vec4 = s[3];
				var v112;
				var v1X5;
				var v1Y5;
				var v1Z5;
				var v211;
				var v2X5;
				var v2Y5;
				var v2Z5;
				var v310;
				var v3X1;
				var v3Y1;
				var v3Z1;
				var v43;
				var v4X;
				var v4Y;
				var v4Z;
				var v125;
				var v12X5;
				var v12Y5;
				var v12Z5;
				var v131;
				var v13X;
				var v13Y;
				var v13Z;
				var v141;
				var v14X;
				var v14Y;
				var v14Z;
				var v231;
				var v23X1;
				var v23Y1;
				var v23Z1;
				var v241;
				var v24X;
				var v24Y;
				var v24Z;
				var v341;
				var v34X;
				var v34Y;
				var v34Z;
				var v44 = vec11;
				v1X5 = v44.x;
				v1Y5 = v44.y;
				v1Z5 = v44.z;
				var v45 = vec21;
				v2X5 = v45.x;
				v2Y5 = v45.y;
				v2Z5 = v45.z;
				var v46 = vec31;
				v3X1 = v46.x;
				v3Y1 = v46.y;
				v3Z1 = v46.z;
				var v47 = vec4;
				v4X = v47.x;
				v4Y = v47.y;
				v4Z = v47.z;
				v12X5 = v2X5 - v1X5;
				v12Y5 = v2Y5 - v1Y5;
				v12Z5 = v2Z5 - v1Z5;
				v13X = v3X1 - v1X5;
				v13Y = v3Y1 - v1Y5;
				v13Z = v3Z1 - v1Z5;
				v14X = v4X - v1X5;
				v14Y = v4Y - v1Y5;
				v14Z = v4Z - v1Z5;
				v23X1 = v3X1 - v2X5;
				v23Y1 = v3Y1 - v2Y5;
				v23Z1 = v3Z1 - v2Z5;
				v24X = v4X - v2X5;
				v24Y = v4Y - v2Y5;
				v24Z = v4Z - v2Z5;
				v34X = v4X - v3X1;
				v34Y = v4Y - v3Y1;
				v34Z = v4Z - v3Z1;
				var rev;
				var n123;
				var n123X;
				var n123Y;
				var n123Z;
				var n134;
				var n134X;
				var n134Y;
				var n134Z;
				var n142;
				var n142X;
				var n142Y;
				var n142Z;
				var n243;
				var n243X;
				var n243Y;
				var n243Z;
				var n1;
				var nX1;
				var nY1;
				var nZ1;
				n123X = v12Y5 * v13Z - v12Z5 * v13Y;
				n123Y = v12Z5 * v13X - v12X5 * v13Z;
				n123Z = v12X5 * v13Y - v12Y5 * v13X;
				n134X = v13Y * v14Z - v13Z * v14Y;
				n134Y = v13Z * v14X - v13X * v14Z;
				n134Z = v13X * v14Y - v13Y * v14X;
				n142X = v14Y * v12Z5 - v14Z * v12Y5;
				n142Y = v14Z * v12X5 - v14X * v12Z5;
				n142Z = v14X * v12Y5 - v14Y * v12X5;
				n243X = v24Y * v23Z1 - v24Z * v23Y1;
				n243Y = v24Z * v23X1 - v24X * v23Z1;
				n243Z = v24X * v23Y1 - v24Y * v23X1;
				var sign = v12X5 * n243X + v12Y5 * n243Y + v12Z5 * n243Z > 0 ? 1 : -1;
				var d123 = v1X5 * n123X + v1Y5 * n123Y + v1Z5 * n123Z;
				var d134 = v1X5 * n134X + v1Y5 * n134Y + v1Z5 * n134Z;
				var d142 = v1X5 * n142X + v1Y5 * n142Y + v1Z5 * n142Z;
				var d243 = v2X5 * n243X + v2Y5 * n243Y + v2Z5 * n243Z;
				var mind1 = -1;
				var minv1;
				var minvX1;
				var minvY1;
				var minvZ1;
				var mini1 = 0;
				minvX1 = 0;
				minvY1 = 0;
				minvZ1 = 0;
				if(d123 * sign < 0) {
					var v113;
					var v1X6;
					var v1Y6;
					var v1Z6;
					var v212;
					var v2X6;
					var v2Y6;
					var v2Z6;
					var v312;
					var v3X2;
					var v3Y2;
					var v3Z2;
					var v126;
					var v12X6;
					var v12Y6;
					var v12Z6;
					var v232;
					var v23X2;
					var v23Y2;
					var v23Z2;
					var v313;
					var v31X1;
					var v31Y1;
					var v31Z1;
					var v48 = vec11;
					v1X6 = v48.x;
					v1Y6 = v48.y;
					v1Z6 = v48.z;
					var v49 = vec21;
					v2X6 = v49.x;
					v2Y6 = v49.y;
					v2Z6 = v49.z;
					var v50 = vec31;
					v3X2 = v50.x;
					v3Y2 = v50.y;
					v3Z2 = v50.z;
					v12X6 = v2X6 - v1X6;
					v12Y6 = v2Y6 - v1Y6;
					v12Z6 = v2Z6 - v1Z6;
					v23X2 = v3X2 - v2X6;
					v23Y2 = v3Y2 - v2Y6;
					v23Z2 = v3Z2 - v2Z6;
					v31X1 = v1X6 - v3X2;
					v31Y1 = v1Y6 - v3Y2;
					v31Z1 = v1Z6 - v3Z2;
					var n2;
					var nX2;
					var nY2;
					var nZ2;
					nX2 = v12Y6 * v23Z2 - v12Z6 * v23Y2;
					nY2 = v12Z6 * v23X2 - v12X6 * v23Z2;
					nZ2 = v12X6 * v23Y2 - v12Y6 * v23X2;
					var n121;
					var n12X1;
					var n12Y1;
					var n12Z1;
					var n231;
					var n23X1;
					var n23Y1;
					var n23Z1;
					var n311;
					var n31X1;
					var n31Y1;
					var n31Z1;
					n12X1 = v12Y6 * nZ2 - v12Z6 * nY2;
					n12Y1 = v12Z6 * nX2 - v12X6 * nZ2;
					n12Z1 = v12X6 * nY2 - v12Y6 * nX2;
					n23X1 = v23Y2 * nZ2 - v23Z2 * nY2;
					n23Y1 = v23Z2 * nX2 - v23X2 * nZ2;
					n23Z1 = v23X2 * nY2 - v23Y2 * nX2;
					n31X1 = v31Y1 * nZ2 - v31Z1 * nY2;
					n31Y1 = v31Z1 * nX2 - v31X1 * nZ2;
					n31Z1 = v31X1 * nY2 - v31Y1 * nX2;
					var d121 = v1X6 * n12X1 + v1Y6 * n12Y1 + v1Z6 * n12Z1;
					var d231 = v2X6 * n23X1 + v2Y6 * n23Y1 + v2Z6 * n23Z1;
					var d311 = v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1;
					var mind2 = -1;
					var minv2;
					var minvX2;
					var minvY2;
					var minvZ2;
					var mini2 = 0;
					minvX2 = 0;
					minvY2 = 0;
					minvZ2 = 0;
					if(d121 < 0) {
						var v114;
						var v1X7;
						var v1Y7;
						var v1Z7;
						var v213;
						var v2X7;
						var v2Y7;
						var v2Z7;
						var v51 = vec11;
						v1X7 = v51.x;
						v1Y7 = v51.y;
						v1Z7 = v51.z;
						var v52 = vec21;
						v2X7 = v52.x;
						v2Y7 = v52.y;
						v2Z7 = v52.z;
						var v127;
						var v12X7;
						var v12Y7;
						var v12Z7;
						v12X7 = v2X7 - v1X7;
						v12Y7 = v2Y7 - v1Y7;
						v12Z7 = v2Z7 - v1Z7;
						var d7 = v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7;
						var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
						t4 = -t4 / d7;
						var b3;
						if(t4 < 0) {
							var v53 = closest;
							v53.x = v1X7;
							v53.y = v1Y7;
							v53.z = v1Z7;
							b3 = 1;
						} else if(t4 > 1) {
							var v54 = closest;
							v54.x = v2X7;
							v54.y = v2Y7;
							v54.z = v2Z7;
							b3 = 2;
						} else {
							var p4;
							var pX4;
							var pY4;
							var pZ4;
							pX4 = v1X7 + v12X7 * t4;
							pY4 = v1Y7 + v12Y7 * t4;
							pZ4 = v1Z7 + v12Z7 * t4;
							var v55 = closest;
							v55.x = pX4;
							v55.y = pY4;
							v55.z = pZ4;
							b3 = 3;
						}
						var d8 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini2 = b3;
						mind2 = d8;
						var v56 = closest;
						minvX2 = v56.x;
						minvY2 = v56.y;
						minvZ2 = v56.z;
					}
					if(d231 < 0) {
						var v115;
						var v1X8;
						var v1Y8;
						var v1Z8;
						var v214;
						var v2X8;
						var v2Y8;
						var v2Z8;
						var v57 = vec21;
						v1X8 = v57.x;
						v1Y8 = v57.y;
						v1Z8 = v57.z;
						var v58 = vec31;
						v2X8 = v58.x;
						v2Y8 = v58.y;
						v2Z8 = v58.z;
						var v128;
						var v12X8;
						var v12Y8;
						var v12Z8;
						v12X8 = v2X8 - v1X8;
						v12Y8 = v2Y8 - v1Y8;
						v12Z8 = v2Z8 - v1Z8;
						var d9 = v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8;
						var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
						t5 = -t5 / d9;
						var b4;
						if(t5 < 0) {
							var v59 = closest;
							v59.x = v1X8;
							v59.y = v1Y8;
							v59.z = v1Z8;
							b4 = 1;
						} else if(t5 > 1) {
							var v60 = closest;
							v60.x = v2X8;
							v60.y = v2Y8;
							v60.z = v2Z8;
							b4 = 2;
						} else {
							var p5;
							var pX5;
							var pY5;
							var pZ5;
							pX5 = v1X8 + v12X8 * t5;
							pY5 = v1Y8 + v12Y8 * t5;
							pZ5 = v1Z8 + v12Z8 * t5;
							var v61 = closest;
							v61.x = pX5;
							v61.y = pY5;
							v61.z = pZ5;
							b4 = 3;
						}
						var d10 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d10 < mind2) {
							mini2 = b4 << 1;
							mind2 = d10;
							var v62 = closest;
							minvX2 = v62.x;
							minvY2 = v62.y;
							minvZ2 = v62.z;
						}
					}
					if(d311 < 0) {
						var v116;
						var v1X9;
						var v1Y9;
						var v1Z9;
						var v215;
						var v2X9;
						var v2Y9;
						var v2Z9;
						var v63 = vec11;
						v1X9 = v63.x;
						v1Y9 = v63.y;
						v1Z9 = v63.z;
						var v64 = vec31;
						v2X9 = v64.x;
						v2Y9 = v64.y;
						v2Z9 = v64.z;
						var v129;
						var v12X9;
						var v12Y9;
						var v12Z9;
						v12X9 = v2X9 - v1X9;
						v12Y9 = v2Y9 - v1Y9;
						v12Z9 = v2Z9 - v1Z9;
						var d11 = v12X9 * v12X9 + v12Y9 * v12Y9 + v12Z9 * v12Z9;
						var t6 = v12X9 * v1X9 + v12Y9 * v1Y9 + v12Z9 * v1Z9;
						t6 = -t6 / d11;
						var b5;
						if(t6 < 0) {
							var v65 = closest;
							v65.x = v1X9;
							v65.y = v1Y9;
							v65.z = v1Z9;
							b5 = 1;
						} else if(t6 > 1) {
							var v66 = closest;
							v66.x = v2X9;
							v66.y = v2Y9;
							v66.z = v2Z9;
							b5 = 2;
						} else {
							var p6;
							var pX6;
							var pY6;
							var pZ6;
							pX6 = v1X9 + v12X9 * t6;
							pY6 = v1Y9 + v12Y9 * t6;
							pZ6 = v1Z9 + v12Z9 * t6;
							var v67 = closest;
							v67.x = pX6;
							v67.y = pY6;
							v67.z = pZ6;
							b5 = 3;
						}
						var d13 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d13 < mind2) {
							mini2 = b5 & 1 | (b5 & 2) << 1;
							mind2 = d13;
							var v68 = closest;
							minvX2 = v68.x;
							minvY2 = v68.y;
							minvZ2 = v68.z;
						}
					}
					var b6;
					if(mind2 > 0) {
						var v69 = closest;
						v69.x = minvX2;
						v69.y = minvY2;
						v69.z = minvZ2;
						b6 = mini2;
					} else {
						var l1 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						if(l1 > 0) {
							l1 = 1 / Math.sqrt(l1);
						}
						nX2 *= l1;
						nY2 *= l1;
						nZ2 *= l1;
						var dn1 = v1X6 * nX2 + v1Y6 * nY2 + v1Z6 * nZ2;
						var l21 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						l21 = dn1 / l21;
						minvX2 = nX2 * l21;
						minvY2 = nY2 * l21;
						minvZ2 = nZ2 * l21;
						var v70 = closest;
						v70.x = minvX2;
						v70.y = minvY2;
						v70.z = minvZ2;
						b6 = 7;
					}
					var d14 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini1 = b6;
					mind1 = d14;
					var v71 = closest;
					minvX1 = v71.x;
					minvY1 = v71.y;
					minvZ1 = v71.z;
				}
				if(d134 * sign < 0) {
					var v117;
					var v1X10;
					var v1Y10;
					var v1Z10;
					var v216;
					var v2X10;
					var v2Y10;
					var v2Z10;
					var v314;
					var v3X3;
					var v3Y3;
					var v3Z3;
					var v1210;
					var v12X10;
					var v12Y10;
					var v12Z10;
					var v233;
					var v23X3;
					var v23Y3;
					var v23Z3;
					var v315;
					var v31X2;
					var v31Y2;
					var v31Z2;
					var v72 = vec11;
					v1X10 = v72.x;
					v1Y10 = v72.y;
					v1Z10 = v72.z;
					var v73 = vec31;
					v2X10 = v73.x;
					v2Y10 = v73.y;
					v2Z10 = v73.z;
					var v74 = vec4;
					v3X3 = v74.x;
					v3Y3 = v74.y;
					v3Z3 = v74.z;
					v12X10 = v2X10 - v1X10;
					v12Y10 = v2Y10 - v1Y10;
					v12Z10 = v2Z10 - v1Z10;
					v23X3 = v3X3 - v2X10;
					v23Y3 = v3Y3 - v2Y10;
					v23Z3 = v3Z3 - v2Z10;
					v31X2 = v1X10 - v3X3;
					v31Y2 = v1Y10 - v3Y3;
					v31Z2 = v1Z10 - v3Z3;
					var n3;
					var nX3;
					var nY3;
					var nZ3;
					nX3 = v12Y10 * v23Z3 - v12Z10 * v23Y3;
					nY3 = v12Z10 * v23X3 - v12X10 * v23Z3;
					nZ3 = v12X10 * v23Y3 - v12Y10 * v23X3;
					var n122;
					var n12X2;
					var n12Y2;
					var n12Z2;
					var n232;
					var n23X2;
					var n23Y2;
					var n23Z2;
					var n312;
					var n31X2;
					var n31Y2;
					var n31Z2;
					n12X2 = v12Y10 * nZ3 - v12Z10 * nY3;
					n12Y2 = v12Z10 * nX3 - v12X10 * nZ3;
					n12Z2 = v12X10 * nY3 - v12Y10 * nX3;
					n23X2 = v23Y3 * nZ3 - v23Z3 * nY3;
					n23Y2 = v23Z3 * nX3 - v23X3 * nZ3;
					n23Z2 = v23X3 * nY3 - v23Y3 * nX3;
					n31X2 = v31Y2 * nZ3 - v31Z2 * nY3;
					n31Y2 = v31Z2 * nX3 - v31X2 * nZ3;
					n31Z2 = v31X2 * nY3 - v31Y2 * nX3;
					var d122 = v1X10 * n12X2 + v1Y10 * n12Y2 + v1Z10 * n12Z2;
					var d232 = v2X10 * n23X2 + v2Y10 * n23Y2 + v2Z10 * n23Z2;
					var d312 = v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2;
					var mind3 = -1;
					var minv3;
					var minvX3;
					var minvY3;
					var minvZ3;
					var mini3 = 0;
					minvX3 = 0;
					minvY3 = 0;
					minvZ3 = 0;
					if(d122 < 0) {
						var v118;
						var v1X11;
						var v1Y11;
						var v1Z11;
						var v217;
						var v2X11;
						var v2Y11;
						var v2Z11;
						var v75 = vec11;
						v1X11 = v75.x;
						v1Y11 = v75.y;
						v1Z11 = v75.z;
						var v76 = vec31;
						v2X11 = v76.x;
						v2Y11 = v76.y;
						v2Z11 = v76.z;
						var v1211;
						var v12X11;
						var v12Y11;
						var v12Z11;
						v12X11 = v2X11 - v1X11;
						v12Y11 = v2Y11 - v1Y11;
						v12Z11 = v2Z11 - v1Z11;
						var d15 = v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11;
						var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
						t7 = -t7 / d15;
						var b7;
						if(t7 < 0) {
							var v77 = closest;
							v77.x = v1X11;
							v77.y = v1Y11;
							v77.z = v1Z11;
							b7 = 1;
						} else if(t7 > 1) {
							var v78 = closest;
							v78.x = v2X11;
							v78.y = v2Y11;
							v78.z = v2Z11;
							b7 = 2;
						} else {
							var p7;
							var pX7;
							var pY7;
							var pZ7;
							pX7 = v1X11 + v12X11 * t7;
							pY7 = v1Y11 + v12Y11 * t7;
							pZ7 = v1Z11 + v12Z11 * t7;
							var v79 = closest;
							v79.x = pX7;
							v79.y = pY7;
							v79.z = pZ7;
							b7 = 3;
						}
						var d16 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini3 = b7;
						mind3 = d16;
						var v80 = closest;
						minvX3 = v80.x;
						minvY3 = v80.y;
						minvZ3 = v80.z;
					}
					if(d232 < 0) {
						var v119;
						var v1X12;
						var v1Y12;
						var v1Z12;
						var v218;
						var v2X12;
						var v2Y12;
						var v2Z12;
						var v81 = vec31;
						v1X12 = v81.x;
						v1Y12 = v81.y;
						v1Z12 = v81.z;
						var v82 = vec4;
						v2X12 = v82.x;
						v2Y12 = v82.y;
						v2Z12 = v82.z;
						var v1212;
						var v12X12;
						var v12Y12;
						var v12Z12;
						v12X12 = v2X12 - v1X12;
						v12Y12 = v2Y12 - v1Y12;
						v12Z12 = v2Z12 - v1Z12;
						var d17 = v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12;
						var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
						t8 = -t8 / d17;
						var b8;
						if(t8 < 0) {
							var v83 = closest;
							v83.x = v1X12;
							v83.y = v1Y12;
							v83.z = v1Z12;
							b8 = 1;
						} else if(t8 > 1) {
							var v84 = closest;
							v84.x = v2X12;
							v84.y = v2Y12;
							v84.z = v2Z12;
							b8 = 2;
						} else {
							var p8;
							var pX8;
							var pY8;
							var pZ8;
							pX8 = v1X12 + v12X12 * t8;
							pY8 = v1Y12 + v12Y12 * t8;
							pZ8 = v1Z12 + v12Z12 * t8;
							var v85 = closest;
							v85.x = pX8;
							v85.y = pY8;
							v85.z = pZ8;
							b8 = 3;
						}
						var d18 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d18 < mind3) {
							mini3 = b8 << 1;
							mind3 = d18;
							var v86 = closest;
							minvX3 = v86.x;
							minvY3 = v86.y;
							minvZ3 = v86.z;
						}
					}
					if(d312 < 0) {
						var v120;
						var v1X13;
						var v1Y13;
						var v1Z13;
						var v219;
						var v2X13;
						var v2Y13;
						var v2Z13;
						var v87 = vec11;
						v1X13 = v87.x;
						v1Y13 = v87.y;
						v1Z13 = v87.z;
						var v88 = vec4;
						v2X13 = v88.x;
						v2Y13 = v88.y;
						v2Z13 = v88.z;
						var v1213;
						var v12X13;
						var v12Y13;
						var v12Z13;
						v12X13 = v2X13 - v1X13;
						v12Y13 = v2Y13 - v1Y13;
						v12Z13 = v2Z13 - v1Z13;
						var d19 = v12X13 * v12X13 + v12Y13 * v12Y13 + v12Z13 * v12Z13;
						var t9 = v12X13 * v1X13 + v12Y13 * v1Y13 + v12Z13 * v1Z13;
						t9 = -t9 / d19;
						var b9;
						if(t9 < 0) {
							var v89 = closest;
							v89.x = v1X13;
							v89.y = v1Y13;
							v89.z = v1Z13;
							b9 = 1;
						} else if(t9 > 1) {
							var v90 = closest;
							v90.x = v2X13;
							v90.y = v2Y13;
							v90.z = v2Z13;
							b9 = 2;
						} else {
							var p9;
							var pX9;
							var pY9;
							var pZ9;
							pX9 = v1X13 + v12X13 * t9;
							pY9 = v1Y13 + v12Y13 * t9;
							pZ9 = v1Z13 + v12Z13 * t9;
							var v91 = closest;
							v91.x = pX9;
							v91.y = pY9;
							v91.z = pZ9;
							b9 = 3;
						}
						var d20 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d20 < mind3) {
							mini3 = b9 & 1 | (b9 & 2) << 1;
							mind3 = d20;
							var v92 = closest;
							minvX3 = v92.x;
							minvY3 = v92.y;
							minvZ3 = v92.z;
						}
					}
					var b10;
					if(mind3 > 0) {
						var v93 = closest;
						v93.x = minvX3;
						v93.y = minvY3;
						v93.z = minvZ3;
						b10 = mini3;
					} else {
						var l3 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						if(l3 > 0) {
							l3 = 1 / Math.sqrt(l3);
						}
						nX3 *= l3;
						nY3 *= l3;
						nZ3 *= l3;
						var dn2 = v1X10 * nX3 + v1Y10 * nY3 + v1Z10 * nZ3;
						var l22 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						l22 = dn2 / l22;
						minvX3 = nX3 * l22;
						minvY3 = nY3 * l22;
						minvZ3 = nZ3 * l22;
						var v94 = closest;
						v94.x = minvX3;
						v94.y = minvY3;
						v94.z = minvZ3;
						b10 = 7;
					}
					var d21 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d21 < mind1) {
						mini1 = b10 & 1 | (b10 & 6) << 1;
						mind1 = d21;
						var v95 = closest;
						minvX1 = v95.x;
						minvY1 = v95.y;
						minvZ1 = v95.z;
					}
				}
				if(d142 * sign < 0) {
					var v130;
					var v1X14;
					var v1Y14;
					var v1Z14;
					var v220;
					var v2X14;
					var v2Y14;
					var v2Z14;
					var v316;
					var v3X4;
					var v3Y4;
					var v3Z4;
					var v1214;
					var v12X14;
					var v12Y14;
					var v12Z14;
					var v234;
					var v23X4;
					var v23Y4;
					var v23Z4;
					var v317;
					var v31X3;
					var v31Y3;
					var v31Z3;
					var v96 = vec11;
					v1X14 = v96.x;
					v1Y14 = v96.y;
					v1Z14 = v96.z;
					var v97 = vec21;
					v2X14 = v97.x;
					v2Y14 = v97.y;
					v2Z14 = v97.z;
					var v98 = vec4;
					v3X4 = v98.x;
					v3Y4 = v98.y;
					v3Z4 = v98.z;
					v12X14 = v2X14 - v1X14;
					v12Y14 = v2Y14 - v1Y14;
					v12Z14 = v2Z14 - v1Z14;
					v23X4 = v3X4 - v2X14;
					v23Y4 = v3Y4 - v2Y14;
					v23Z4 = v3Z4 - v2Z14;
					v31X3 = v1X14 - v3X4;
					v31Y3 = v1Y14 - v3Y4;
					v31Z3 = v1Z14 - v3Z4;
					var n4;
					var nX4;
					var nY4;
					var nZ4;
					nX4 = v12Y14 * v23Z4 - v12Z14 * v23Y4;
					nY4 = v12Z14 * v23X4 - v12X14 * v23Z4;
					nZ4 = v12X14 * v23Y4 - v12Y14 * v23X4;
					var n124;
					var n12X3;
					var n12Y3;
					var n12Z3;
					var n233;
					var n23X3;
					var n23Y3;
					var n23Z3;
					var n313;
					var n31X3;
					var n31Y3;
					var n31Z3;
					n12X3 = v12Y14 * nZ4 - v12Z14 * nY4;
					n12Y3 = v12Z14 * nX4 - v12X14 * nZ4;
					n12Z3 = v12X14 * nY4 - v12Y14 * nX4;
					n23X3 = v23Y4 * nZ4 - v23Z4 * nY4;
					n23Y3 = v23Z4 * nX4 - v23X4 * nZ4;
					n23Z3 = v23X4 * nY4 - v23Y4 * nX4;
					n31X3 = v31Y3 * nZ4 - v31Z3 * nY4;
					n31Y3 = v31Z3 * nX4 - v31X3 * nZ4;
					n31Z3 = v31X3 * nY4 - v31Y3 * nX4;
					var d124 = v1X14 * n12X3 + v1Y14 * n12Y3 + v1Z14 * n12Z3;
					var d233 = v2X14 * n23X3 + v2Y14 * n23Y3 + v2Z14 * n23Z3;
					var d313 = v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3;
					var mind4 = -1;
					var minv4;
					var minvX4;
					var minvY4;
					var minvZ4;
					var mini4 = 0;
					minvX4 = 0;
					minvY4 = 0;
					minvZ4 = 0;
					if(d124 < 0) {
						var v132;
						var v1X15;
						var v1Y15;
						var v1Z15;
						var v221;
						var v2X15;
						var v2Y15;
						var v2Z15;
						var v99 = vec11;
						v1X15 = v99.x;
						v1Y15 = v99.y;
						v1Z15 = v99.z;
						var v100 = vec21;
						v2X15 = v100.x;
						v2Y15 = v100.y;
						v2Z15 = v100.z;
						var v1215;
						var v12X15;
						var v12Y15;
						var v12Z15;
						v12X15 = v2X15 - v1X15;
						v12Y15 = v2Y15 - v1Y15;
						v12Z15 = v2Z15 - v1Z15;
						var d22 = v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15;
						var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
						t10 = -t10 / d22;
						var b11;
						if(t10 < 0) {
							var v101 = closest;
							v101.x = v1X15;
							v101.y = v1Y15;
							v101.z = v1Z15;
							b11 = 1;
						} else if(t10 > 1) {
							var v102 = closest;
							v102.x = v2X15;
							v102.y = v2Y15;
							v102.z = v2Z15;
							b11 = 2;
						} else {
							var p10;
							var pX10;
							var pY10;
							var pZ10;
							pX10 = v1X15 + v12X15 * t10;
							pY10 = v1Y15 + v12Y15 * t10;
							pZ10 = v1Z15 + v12Z15 * t10;
							var v103 = closest;
							v103.x = pX10;
							v103.y = pY10;
							v103.z = pZ10;
							b11 = 3;
						}
						var d24 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini4 = b11;
						mind4 = d24;
						var v104 = closest;
						minvX4 = v104.x;
						minvY4 = v104.y;
						minvZ4 = v104.z;
					}
					if(d233 < 0) {
						var v133;
						var v1X16;
						var v1Y16;
						var v1Z16;
						var v222;
						var v2X16;
						var v2Y16;
						var v2Z16;
						var v105 = vec21;
						v1X16 = v105.x;
						v1Y16 = v105.y;
						v1Z16 = v105.z;
						var v106 = vec4;
						v2X16 = v106.x;
						v2Y16 = v106.y;
						v2Z16 = v106.z;
						var v1216;
						var v12X16;
						var v12Y16;
						var v12Z16;
						v12X16 = v2X16 - v1X16;
						v12Y16 = v2Y16 - v1Y16;
						v12Z16 = v2Z16 - v1Z16;
						var d25 = v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16;
						var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
						t11 = -t11 / d25;
						var b12;
						if(t11 < 0) {
							var v107 = closest;
							v107.x = v1X16;
							v107.y = v1Y16;
							v107.z = v1Z16;
							b12 = 1;
						} else if(t11 > 1) {
							var v108 = closest;
							v108.x = v2X16;
							v108.y = v2Y16;
							v108.z = v2Z16;
							b12 = 2;
						} else {
							var p11;
							var pX11;
							var pY11;
							var pZ11;
							pX11 = v1X16 + v12X16 * t11;
							pY11 = v1Y16 + v12Y16 * t11;
							pZ11 = v1Z16 + v12Z16 * t11;
							var v109 = closest;
							v109.x = pX11;
							v109.y = pY11;
							v109.z = pZ11;
							b12 = 3;
						}
						var d26 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d26 < mind4) {
							mini4 = b12 << 1;
							mind4 = d26;
							var v134 = closest;
							minvX4 = v134.x;
							minvY4 = v134.y;
							minvZ4 = v134.z;
						}
					}
					if(d313 < 0) {
						var v135;
						var v1X17;
						var v1Y17;
						var v1Z17;
						var v223;
						var v2X17;
						var v2Y17;
						var v2Z17;
						var v136 = vec11;
						v1X17 = v136.x;
						v1Y17 = v136.y;
						v1Z17 = v136.z;
						var v137 = vec4;
						v2X17 = v137.x;
						v2Y17 = v137.y;
						v2Z17 = v137.z;
						var v1217;
						var v12X17;
						var v12Y17;
						var v12Z17;
						v12X17 = v2X17 - v1X17;
						v12Y17 = v2Y17 - v1Y17;
						v12Z17 = v2Z17 - v1Z17;
						var d27 = v12X17 * v12X17 + v12Y17 * v12Y17 + v12Z17 * v12Z17;
						var t12 = v12X17 * v1X17 + v12Y17 * v1Y17 + v12Z17 * v1Z17;
						t12 = -t12 / d27;
						var b13;
						if(t12 < 0) {
							var v138 = closest;
							v138.x = v1X17;
							v138.y = v1Y17;
							v138.z = v1Z17;
							b13 = 1;
						} else if(t12 > 1) {
							var v139 = closest;
							v139.x = v2X17;
							v139.y = v2Y17;
							v139.z = v2Z17;
							b13 = 2;
						} else {
							var p12;
							var pX12;
							var pY12;
							var pZ12;
							pX12 = v1X17 + v12X17 * t12;
							pY12 = v1Y17 + v12Y17 * t12;
							pZ12 = v1Z17 + v12Z17 * t12;
							var v140 = closest;
							v140.x = pX12;
							v140.y = pY12;
							v140.z = pZ12;
							b13 = 3;
						}
						var d28 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d28 < mind4) {
							mini4 = b13 & 1 | (b13 & 2) << 1;
							mind4 = d28;
							var v142 = closest;
							minvX4 = v142.x;
							minvY4 = v142.y;
							minvZ4 = v142.z;
						}
					}
					var b14;
					if(mind4 > 0) {
						var v143 = closest;
						v143.x = minvX4;
						v143.y = minvY4;
						v143.z = minvZ4;
						b14 = mini4;
					} else {
						var l4 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						if(l4 > 0) {
							l4 = 1 / Math.sqrt(l4);
						}
						nX4 *= l4;
						nY4 *= l4;
						nZ4 *= l4;
						var dn3 = v1X14 * nX4 + v1Y14 * nY4 + v1Z14 * nZ4;
						var l23 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						l23 = dn3 / l23;
						minvX4 = nX4 * l23;
						minvY4 = nY4 * l23;
						minvZ4 = nZ4 * l23;
						var v144 = closest;
						v144.x = minvX4;
						v144.y = minvY4;
						v144.z = minvZ4;
						b14 = 7;
					}
					var d29 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d29 < mind1) {
						mini1 = b14 & 3 | (b14 & 4) << 1;
						mind1 = d29;
						var v145 = closest;
						minvX1 = v145.x;
						minvY1 = v145.y;
						minvZ1 = v145.z;
					}
				}
				if(d243 * sign < 0) {
					var v146;
					var v1X18;
					var v1Y18;
					var v1Z18;
					var v224;
					var v2X18;
					var v2Y18;
					var v2Z18;
					var v318;
					var v3X5;
					var v3Y5;
					var v3Z5;
					var v1218;
					var v12X18;
					var v12Y18;
					var v12Z18;
					var v235;
					var v23X5;
					var v23Y5;
					var v23Z5;
					var v319;
					var v31X4;
					var v31Y4;
					var v31Z4;
					var v147 = vec21;
					v1X18 = v147.x;
					v1Y18 = v147.y;
					v1Z18 = v147.z;
					var v148 = vec31;
					v2X18 = v148.x;
					v2Y18 = v148.y;
					v2Z18 = v148.z;
					var v149 = vec4;
					v3X5 = v149.x;
					v3Y5 = v149.y;
					v3Z5 = v149.z;
					v12X18 = v2X18 - v1X18;
					v12Y18 = v2Y18 - v1Y18;
					v12Z18 = v2Z18 - v1Z18;
					v23X5 = v3X5 - v2X18;
					v23Y5 = v3Y5 - v2Y18;
					v23Z5 = v3Z5 - v2Z18;
					v31X4 = v1X18 - v3X5;
					v31Y4 = v1Y18 - v3Y5;
					v31Z4 = v1Z18 - v3Z5;
					var n5;
					var nX5;
					var nY5;
					var nZ5;
					nX5 = v12Y18 * v23Z5 - v12Z18 * v23Y5;
					nY5 = v12Z18 * v23X5 - v12X18 * v23Z5;
					nZ5 = v12X18 * v23Y5 - v12Y18 * v23X5;
					var n125;
					var n12X4;
					var n12Y4;
					var n12Z4;
					var n234;
					var n23X4;
					var n23Y4;
					var n23Z4;
					var n314;
					var n31X4;
					var n31Y4;
					var n31Z4;
					n12X4 = v12Y18 * nZ5 - v12Z18 * nY5;
					n12Y4 = v12Z18 * nX5 - v12X18 * nZ5;
					n12Z4 = v12X18 * nY5 - v12Y18 * nX5;
					n23X4 = v23Y5 * nZ5 - v23Z5 * nY5;
					n23Y4 = v23Z5 * nX5 - v23X5 * nZ5;
					n23Z4 = v23X5 * nY5 - v23Y5 * nX5;
					n31X4 = v31Y4 * nZ5 - v31Z4 * nY5;
					n31Y4 = v31Z4 * nX5 - v31X4 * nZ5;
					n31Z4 = v31X4 * nY5 - v31Y4 * nX5;
					var d125 = v1X18 * n12X4 + v1Y18 * n12Y4 + v1Z18 * n12Z4;
					var d234 = v2X18 * n23X4 + v2Y18 * n23Y4 + v2Z18 * n23Z4;
					var d314 = v3X5 * n31X4 + v3Y5 * n31Y4 + v3Z5 * n31Z4;
					var mind5 = -1;
					var minv5;
					var minvX5;
					var minvY5;
					var minvZ5;
					var mini5 = 0;
					minvX5 = 0;
					minvY5 = 0;
					minvZ5 = 0;
					if(d125 < 0) {
						var v150;
						var v1X19;
						var v1Y19;
						var v1Z19;
						var v225;
						var v2X19;
						var v2Y19;
						var v2Z19;
						var v151 = vec21;
						v1X19 = v151.x;
						v1Y19 = v151.y;
						v1Z19 = v151.z;
						var v152 = vec31;
						v2X19 = v152.x;
						v2Y19 = v152.y;
						v2Z19 = v152.z;
						var v1219;
						var v12X19;
						var v12Y19;
						var v12Z19;
						v12X19 = v2X19 - v1X19;
						v12Y19 = v2Y19 - v1Y19;
						v12Z19 = v2Z19 - v1Z19;
						var d30 = v12X19 * v12X19 + v12Y19 * v12Y19 + v12Z19 * v12Z19;
						var t13 = v12X19 * v1X19 + v12Y19 * v1Y19 + v12Z19 * v1Z19;
						t13 = -t13 / d30;
						var b15;
						if(t13 < 0) {
							var v153 = closest;
							v153.x = v1X19;
							v153.y = v1Y19;
							v153.z = v1Z19;
							b15 = 1;
						} else if(t13 > 1) {
							var v154 = closest;
							v154.x = v2X19;
							v154.y = v2Y19;
							v154.z = v2Z19;
							b15 = 2;
						} else {
							var p13;
							var pX13;
							var pY13;
							var pZ13;
							pX13 = v1X19 + v12X19 * t13;
							pY13 = v1Y19 + v12Y19 * t13;
							pZ13 = v1Z19 + v12Z19 * t13;
							var v155 = closest;
							v155.x = pX13;
							v155.y = pY13;
							v155.z = pZ13;
							b15 = 3;
						}
						var d32 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini5 = b15;
						mind5 = d32;
						var v156 = closest;
						minvX5 = v156.x;
						minvY5 = v156.y;
						minvZ5 = v156.z;
					}
					if(d234 < 0) {
						var v157;
						var v1X20;
						var v1Y20;
						var v1Z20;
						var v226;
						var v2X20;
						var v2Y20;
						var v2Z20;
						var v158 = vec31;
						v1X20 = v158.x;
						v1Y20 = v158.y;
						v1Z20 = v158.z;
						var v159 = vec4;
						v2X20 = v159.x;
						v2Y20 = v159.y;
						v2Z20 = v159.z;
						var v1220;
						var v12X20;
						var v12Y20;
						var v12Z20;
						v12X20 = v2X20 - v1X20;
						v12Y20 = v2Y20 - v1Y20;
						v12Z20 = v2Z20 - v1Z20;
						var d33 = v12X20 * v12X20 + v12Y20 * v12Y20 + v12Z20 * v12Z20;
						var t14 = v12X20 * v1X20 + v12Y20 * v1Y20 + v12Z20 * v1Z20;
						t14 = -t14 / d33;
						var b16;
						if(t14 < 0) {
							var v160 = closest;
							v160.x = v1X20;
							v160.y = v1Y20;
							v160.z = v1Z20;
							b16 = 1;
						} else if(t14 > 1) {
							var v161 = closest;
							v161.x = v2X20;
							v161.y = v2Y20;
							v161.z = v2Z20;
							b16 = 2;
						} else {
							var p14;
							var pX14;
							var pY14;
							var pZ14;
							pX14 = v1X20 + v12X20 * t14;
							pY14 = v1Y20 + v12Y20 * t14;
							pZ14 = v1Z20 + v12Z20 * t14;
							var v162 = closest;
							v162.x = pX14;
							v162.y = pY14;
							v162.z = pZ14;
							b16 = 3;
						}
						var d34 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d34 < mind5) {
							mini5 = b16 << 1;
							mind5 = d34;
							var v163 = closest;
							minvX5 = v163.x;
							minvY5 = v163.y;
							minvZ5 = v163.z;
						}
					}
					if(d314 < 0) {
						var v164;
						var v1X21;
						var v1Y21;
						var v1Z21;
						var v227;
						var v2X21;
						var v2Y21;
						var v2Z21;
						var v165 = vec21;
						v1X21 = v165.x;
						v1Y21 = v165.y;
						v1Z21 = v165.z;
						var v166 = vec4;
						v2X21 = v166.x;
						v2Y21 = v166.y;
						v2Z21 = v166.z;
						var v1221;
						var v12X21;
						var v12Y21;
						var v12Z21;
						v12X21 = v2X21 - v1X21;
						v12Y21 = v2Y21 - v1Y21;
						v12Z21 = v2Z21 - v1Z21;
						var d35 = v12X21 * v12X21 + v12Y21 * v12Y21 + v12Z21 * v12Z21;
						var t15 = v12X21 * v1X21 + v12Y21 * v1Y21 + v12Z21 * v1Z21;
						t15 = -t15 / d35;
						var b17;
						if(t15 < 0) {
							var v167 = closest;
							v167.x = v1X21;
							v167.y = v1Y21;
							v167.z = v1Z21;
							b17 = 1;
						} else if(t15 > 1) {
							var v168 = closest;
							v168.x = v2X21;
							v168.y = v2Y21;
							v168.z = v2Z21;
							b17 = 2;
						} else {
							var p15;
							var pX15;
							var pY15;
							var pZ15;
							pX15 = v1X21 + v12X21 * t15;
							pY15 = v1Y21 + v12Y21 * t15;
							pZ15 = v1Z21 + v12Z21 * t15;
							var v169 = closest;
							v169.x = pX15;
							v169.y = pY15;
							v169.z = pZ15;
							b17 = 3;
						}
						var d36 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d36 < mind5) {
							mini5 = b17 & 1 | (b17 & 2) << 1;
							mind5 = d36;
							var v170 = closest;
							minvX5 = v170.x;
							minvY5 = v170.y;
							minvZ5 = v170.z;
						}
					}
					var b18;
					if(mind5 > 0) {
						var v171 = closest;
						v171.x = minvX5;
						v171.y = minvY5;
						v171.z = minvZ5;
						b18 = mini5;
					} else {
						var l5 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						if(l5 > 0) {
							l5 = 1 / Math.sqrt(l5);
						}
						nX5 *= l5;
						nY5 *= l5;
						nZ5 *= l5;
						var dn4 = v1X18 * nX5 + v1Y18 * nY5 + v1Z18 * nZ5;
						var l24 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						l24 = dn4 / l24;
						minvX5 = nX5 * l24;
						minvY5 = nY5 * l24;
						minvZ5 = nZ5 * l24;
						var v172 = closest;
						v172.x = minvX5;
						v172.y = minvY5;
						v172.z = minvZ5;
						b18 = 7;
					}
					var d37 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d37 < mind1) {
						mini1 = b18 << 1;
						mind1 = d37;
						var v173 = closest;
						minvX1 = v173.x;
						minvY1 = v173.y;
						minvZ1 = v173.z;
					}
				}
				if(mind1 > 0) {
					var v174 = closest;
					v174.x = minvX1;
					v174.y = minvY1;
					v174.z = minvZ1;
					v3 = mini1;
				} else {
					closest.zero();
					v3 = 15;
				}
				break;
			}
			if(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z < eps2) {
				if(!useEpa) {
					this.distance = 0;
					return 0;
				}
				var _g1 = this.simplexSize;
				switch(_g1) {
				case 1:
					this.pointToTetrahedron();
					break;
				case 2:
					this.lineToTetrahedron();
					break;
				case 3:
					this.triangleToTetrahedron();
					break;
				}
				if(this.simplexSize == 4) {
					var epaState = this.computeDepth(c1,c2,tf1,tf2,s,w1,w2);
					if(epaState != 0) {
						this.distance = 0;
						return epaState;
					}
					this.distance = -this.depth;
					return 0;
				}
				this.distance = 0;
				return 1;
			}
			this.shrinkSimplex(v3);
			dir.x = closest.x;
			dir.y = closest.y;
			dir.z = closest.z;
			var _this2 = dir;
			var tx1 = -_this2.x;
			var ty1 = -_this2.y;
			var tz1 = -_this2.z;
			_this2.x = tx1;
			_this2.y = ty1;
			_this2.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this3 = this.s[this.simplexSize];
			var v175 = this.w1[this.simplexSize];
			_this3.x = v175.x;
			_this3.y = v175.y;
			_this3.z = v175.z;
			var _this4 = _this3;
			var v176 = this.w2[this.simplexSize];
			var tx2 = _this4.x - v176.x;
			var ty2 = _this4.y - v176.y;
			var tz2 = _this4.z - v176.z;
			_this4.x = tx2;
			_this4.y = ty2;
			_this4.z = tz2;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < eps2) {
				throw new Error("!?");
			}
			var d110 = closest.x * dir.x + closest.y * dir.y + closest.z * dir.z;
			var _this5 = s[this.simplexSize];
			var d210 = _this5.x * dir.x + _this5.y * dir.y + _this5.z * dir.z;
			if(d210 - d110 < eps2) {
				this.interpolateClosestPoints();
				this.distance = Math.sqrt(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z);
				if(cache != null && cache._gjkCache != null) {
					this.saveCache(cache._gjkCache);
				}
				return 0;
			}
			this.simplexSize++;
			++count;
		}
		return 2;
	}
	,convexCastImpl: function(c1,c2,tf1,tf2,tl1,tl2,hit) {
		this.c1 = c1;
		this.c2 = c2;
		this.tf1 = tf1;
		this.tf2 = tf2;
		var s = this.s;
		var w1 = this.w1;
		var w2 = this.w2;
		var closest = this.closest;
		var dir = this.dir;
		var firstDir;
		var firstDirX;
		var firstDirY;
		var firstDirZ;
		firstDirX = tf2._positionX - tf1._positionX;
		firstDirY = tf2._positionY - tf1._positionY;
		firstDirZ = tf2._positionZ - tf1._positionZ;
		var v = dir;
		v.x = firstDirX;
		v.y = firstDirY;
		v.z = firstDirZ;
		if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-6) {
			dir.init(1,0,0);
		}
		this.simplexSize = 0;
		if(this.c1 != null) {
			this.computeWitnessPoint1(true);
		} else {
			var v1 = this.w1[this.simplexSize];
			v1.x = this.tf1._positionX;
			v1.y = this.tf1._positionY;
			v1.z = this.tf1._positionZ;
		}
		this.computeWitnessPoint2(true);
		var _this = this.s[this.simplexSize];
		var v2 = this.w1[this.simplexSize];
		_this.x = v2.x;
		_this.y = v2.y;
		_this.z = v2.z;
		var _this1 = _this;
		var v3 = this.w2[this.simplexSize];
		var tx = _this1.x - v3.x;
		var ty = _this1.y - v3.y;
		var tz = _this1.z - v3.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		this.simplexSize = 1;
		var count = 0;
		var max = 40;
		var lambda = 0.0;
		var rayX = this.rayX;
		var rayR = this.rayR;
		rayX.zero();
		rayR.x = tl2.x;
		rayR.y = tl2.y;
		rayR.z = tl2.z;
		var _this2 = rayR;
		var tx1 = _this2.x - tl1.x;
		var ty1 = _this2.y - tl1.y;
		var tz1 = _this2.z - tl1.z;
		_this2.x = tx1;
		_this2.y = ty1;
		_this2.z = tz1;
		var eps = 1e-4;
		var eps2 = eps * eps;
		while(count < max) {
			var v4 = 0;
			var _g = this.simplexSize;
			switch(_g) {
			case 1:
				var v5 = s[0];
				closest.x = v5.x;
				closest.y = v5.y;
				closest.z = v5.z;
				v4 = 1;
				break;
			case 2:
				var v11;
				var v1X;
				var v1Y;
				var v1Z;
				var v21;
				var v2X;
				var v2Y;
				var v2Z;
				var v6 = s[0];
				v1X = v6.x;
				v1Y = v6.y;
				v1Z = v6.z;
				var v7 = s[1];
				v2X = v7.x;
				v2Y = v7.y;
				v2Z = v7.z;
				var v12;
				var v12X;
				var v12Y;
				var v12Z;
				v12X = v2X - v1X;
				v12Y = v2Y - v1Y;
				v12Z = v2Z - v1Z;
				var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
				var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
				t = -t / d;
				if(t < 0) {
					var v8 = closest;
					v8.x = v1X;
					v8.y = v1Y;
					v8.z = v1Z;
					v4 = 1;
				} else if(t > 1) {
					var v9 = closest;
					v9.x = v2X;
					v9.y = v2Y;
					v9.z = v2Z;
					v4 = 2;
				} else {
					var p;
					var pX;
					var pY;
					var pZ;
					pX = v1X + v12X * t;
					pY = v1Y + v12Y * t;
					pZ = v1Z + v12Z * t;
					var v10 = closest;
					v10.x = pX;
					v10.y = pY;
					v10.z = pZ;
					v4 = 3;
				}
				break;
			case 3:
				var vec1 = s[0];
				var vec2 = s[1];
				var vec3 = s[2];
				var v13;
				var v1X1;
				var v1Y1;
				var v1Z1;
				var v22;
				var v2X1;
				var v2Y1;
				var v2Z1;
				var v31;
				var v3X;
				var v3Y;
				var v3Z;
				var v121;
				var v12X1;
				var v12Y1;
				var v12Z1;
				var v23;
				var v23X;
				var v23Y;
				var v23Z;
				var v311;
				var v31X;
				var v31Y;
				var v31Z;
				var v14 = vec1;
				v1X1 = v14.x;
				v1Y1 = v14.y;
				v1Z1 = v14.z;
				var v15 = vec2;
				v2X1 = v15.x;
				v2Y1 = v15.y;
				v2Z1 = v15.z;
				var v16 = vec3;
				v3X = v16.x;
				v3Y = v16.y;
				v3Z = v16.z;
				v12X1 = v2X1 - v1X1;
				v12Y1 = v2Y1 - v1Y1;
				v12Z1 = v2Z1 - v1Z1;
				v23X = v3X - v2X1;
				v23Y = v3Y - v2Y1;
				v23Z = v3Z - v2Z1;
				v31X = v1X1 - v3X;
				v31Y = v1Y1 - v3Y;
				v31Z = v1Z1 - v3Z;
				var n;
				var nX;
				var nY;
				var nZ;
				nX = v12Y1 * v23Z - v12Z1 * v23Y;
				nY = v12Z1 * v23X - v12X1 * v23Z;
				nZ = v12X1 * v23Y - v12Y1 * v23X;
				var n12;
				var n12X;
				var n12Y;
				var n12Z;
				var n23;
				var n23X;
				var n23Y;
				var n23Z;
				var n31;
				var n31X;
				var n31Y;
				var n31Z;
				n12X = v12Y1 * nZ - v12Z1 * nY;
				n12Y = v12Z1 * nX - v12X1 * nZ;
				n12Z = v12X1 * nY - v12Y1 * nX;
				n23X = v23Y * nZ - v23Z * nY;
				n23Y = v23Z * nX - v23X * nZ;
				n23Z = v23X * nY - v23Y * nX;
				n31X = v31Y * nZ - v31Z * nY;
				n31Y = v31Z * nX - v31X * nZ;
				n31Z = v31X * nY - v31Y * nX;
				var d12 = v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z;
				var d23 = v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z;
				var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
				var mind = -1;
				var minv;
				var minvX;
				var minvY;
				var minvZ;
				var mini = 0;
				minvX = 0;
				minvY = 0;
				minvZ = 0;
				if(d12 < 0) {
					var v17;
					var v1X2;
					var v1Y2;
					var v1Z2;
					var v24;
					var v2X2;
					var v2Y2;
					var v2Z2;
					var v18 = vec1;
					v1X2 = v18.x;
					v1Y2 = v18.y;
					v1Z2 = v18.z;
					var v19 = vec2;
					v2X2 = v19.x;
					v2Y2 = v19.y;
					v2Z2 = v19.z;
					var v122;
					var v12X2;
					var v12Y2;
					var v12Z2;
					v12X2 = v2X2 - v1X2;
					v12Y2 = v2Y2 - v1Y2;
					v12Z2 = v2Z2 - v1Z2;
					var d1 = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
					var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
					t1 = -t1 / d1;
					var b;
					if(t1 < 0) {
						var v20 = closest;
						v20.x = v1X2;
						v20.y = v1Y2;
						v20.z = v1Z2;
						b = 1;
					} else if(t1 > 1) {
						var v25 = closest;
						v25.x = v2X2;
						v25.y = v2Y2;
						v25.z = v2Z2;
						b = 2;
					} else {
						var p1;
						var pX1;
						var pY1;
						var pZ1;
						pX1 = v1X2 + v12X2 * t1;
						pY1 = v1Y2 + v12Y2 * t1;
						pZ1 = v1Z2 + v12Z2 * t1;
						var v26 = closest;
						v26.x = pX1;
						v26.y = pY1;
						v26.z = pZ1;
						b = 3;
					}
					var d2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini = b;
					mind = d2;
					var v27 = closest;
					minvX = v27.x;
					minvY = v27.y;
					minvZ = v27.z;
				}
				if(d23 < 0) {
					var v110;
					var v1X3;
					var v1Y3;
					var v1Z3;
					var v28;
					var v2X3;
					var v2Y3;
					var v2Z3;
					var v29 = vec2;
					v1X3 = v29.x;
					v1Y3 = v29.y;
					v1Z3 = v29.z;
					var v30 = vec3;
					v2X3 = v30.x;
					v2Y3 = v30.y;
					v2Z3 = v30.z;
					var v123;
					var v12X3;
					var v12Y3;
					var v12Z3;
					v12X3 = v2X3 - v1X3;
					v12Y3 = v2Y3 - v1Y3;
					v12Z3 = v2Z3 - v1Z3;
					var d3 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
					var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
					t2 = -t2 / d3;
					var b1;
					if(t2 < 0) {
						var v32 = closest;
						v32.x = v1X3;
						v32.y = v1Y3;
						v32.z = v1Z3;
						b1 = 1;
					} else if(t2 > 1) {
						var v33 = closest;
						v33.x = v2X3;
						v33.y = v2Y3;
						v33.z = v2Z3;
						b1 = 2;
					} else {
						var p2;
						var pX2;
						var pY2;
						var pZ2;
						pX2 = v1X3 + v12X3 * t2;
						pY2 = v1Y3 + v12Y3 * t2;
						pZ2 = v1Z3 + v12Z3 * t2;
						var v34 = closest;
						v34.x = pX2;
						v34.y = pY2;
						v34.z = pZ2;
						b1 = 3;
					}
					var d4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d4 < mind) {
						mini = b1 << 1;
						mind = d4;
						var v35 = closest;
						minvX = v35.x;
						minvY = v35.y;
						minvZ = v35.z;
					}
				}
				if(d31 < 0) {
					var v111;
					var v1X4;
					var v1Y4;
					var v1Z4;
					var v210;
					var v2X4;
					var v2Y4;
					var v2Z4;
					var v36 = vec1;
					v1X4 = v36.x;
					v1Y4 = v36.y;
					v1Z4 = v36.z;
					var v37 = vec3;
					v2X4 = v37.x;
					v2Y4 = v37.y;
					v2Z4 = v37.z;
					var v124;
					var v12X4;
					var v12Y4;
					var v12Z4;
					v12X4 = v2X4 - v1X4;
					v12Y4 = v2Y4 - v1Y4;
					v12Z4 = v2Z4 - v1Z4;
					var d5 = v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4;
					var t3 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
					t3 = -t3 / d5;
					var b2;
					if(t3 < 0) {
						var v38 = closest;
						v38.x = v1X4;
						v38.y = v1Y4;
						v38.z = v1Z4;
						b2 = 1;
					} else if(t3 > 1) {
						var v39 = closest;
						v39.x = v2X4;
						v39.y = v2Y4;
						v39.z = v2Z4;
						b2 = 2;
					} else {
						var p3;
						var pX3;
						var pY3;
						var pZ3;
						pX3 = v1X4 + v12X4 * t3;
						pY3 = v1Y4 + v12Y4 * t3;
						pZ3 = v1Z4 + v12Z4 * t3;
						var v40 = closest;
						v40.x = pX3;
						v40.y = pY3;
						v40.z = pZ3;
						b2 = 3;
					}
					var d6 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d6 < mind) {
						mini = b2 & 1 | (b2 & 2) << 1;
						mind = d6;
						var v41 = closest;
						minvX = v41.x;
						minvY = v41.y;
						minvZ = v41.z;
					}
				}
				if(mind > 0) {
					var v42 = closest;
					v42.x = minvX;
					v42.y = minvY;
					v42.z = minvZ;
					v4 = mini;
				} else {
					var l = nX * nX + nY * nY + nZ * nZ;
					if(l > 0) {
						l = 1 / Math.sqrt(l);
					}
					nX *= l;
					nY *= l;
					nZ *= l;
					var dn = v1X1 * nX + v1Y1 * nY + v1Z1 * nZ;
					var l2 = nX * nX + nY * nY + nZ * nZ;
					l2 = dn / l2;
					minvX = nX * l2;
					minvY = nY * l2;
					minvZ = nZ * l2;
					var v43 = closest;
					v43.x = minvX;
					v43.y = minvY;
					v43.z = minvZ;
					v4 = 7;
				}
				break;
			case 4:
				var vec11 = s[0];
				var vec21 = s[1];
				var vec31 = s[2];
				var vec4 = s[3];
				var v112;
				var v1X5;
				var v1Y5;
				var v1Z5;
				var v211;
				var v2X5;
				var v2Y5;
				var v2Z5;
				var v310;
				var v3X1;
				var v3Y1;
				var v3Z1;
				var v44;
				var v4X;
				var v4Y;
				var v4Z;
				var v125;
				var v12X5;
				var v12Y5;
				var v12Z5;
				var v131;
				var v13X;
				var v13Y;
				var v13Z;
				var v141;
				var v14X;
				var v14Y;
				var v14Z;
				var v231;
				var v23X1;
				var v23Y1;
				var v23Z1;
				var v241;
				var v24X;
				var v24Y;
				var v24Z;
				var v341;
				var v34X;
				var v34Y;
				var v34Z;
				var v45 = vec11;
				v1X5 = v45.x;
				v1Y5 = v45.y;
				v1Z5 = v45.z;
				var v46 = vec21;
				v2X5 = v46.x;
				v2Y5 = v46.y;
				v2Z5 = v46.z;
				var v47 = vec31;
				v3X1 = v47.x;
				v3Y1 = v47.y;
				v3Z1 = v47.z;
				var v48 = vec4;
				v4X = v48.x;
				v4Y = v48.y;
				v4Z = v48.z;
				v12X5 = v2X5 - v1X5;
				v12Y5 = v2Y5 - v1Y5;
				v12Z5 = v2Z5 - v1Z5;
				v13X = v3X1 - v1X5;
				v13Y = v3Y1 - v1Y5;
				v13Z = v3Z1 - v1Z5;
				v14X = v4X - v1X5;
				v14Y = v4Y - v1Y5;
				v14Z = v4Z - v1Z5;
				v23X1 = v3X1 - v2X5;
				v23Y1 = v3Y1 - v2Y5;
				v23Z1 = v3Z1 - v2Z5;
				v24X = v4X - v2X5;
				v24Y = v4Y - v2Y5;
				v24Z = v4Z - v2Z5;
				v34X = v4X - v3X1;
				v34Y = v4Y - v3Y1;
				v34Z = v4Z - v3Z1;
				var rev;
				var n123;
				var n123X;
				var n123Y;
				var n123Z;
				var n134;
				var n134X;
				var n134Y;
				var n134Z;
				var n142;
				var n142X;
				var n142Y;
				var n142Z;
				var n243;
				var n243X;
				var n243Y;
				var n243Z;
				var n1;
				var nX1;
				var nY1;
				var nZ1;
				n123X = v12Y5 * v13Z - v12Z5 * v13Y;
				n123Y = v12Z5 * v13X - v12X5 * v13Z;
				n123Z = v12X5 * v13Y - v12Y5 * v13X;
				n134X = v13Y * v14Z - v13Z * v14Y;
				n134Y = v13Z * v14X - v13X * v14Z;
				n134Z = v13X * v14Y - v13Y * v14X;
				n142X = v14Y * v12Z5 - v14Z * v12Y5;
				n142Y = v14Z * v12X5 - v14X * v12Z5;
				n142Z = v14X * v12Y5 - v14Y * v12X5;
				n243X = v24Y * v23Z1 - v24Z * v23Y1;
				n243Y = v24Z * v23X1 - v24X * v23Z1;
				n243Z = v24X * v23Y1 - v24Y * v23X1;
				var sign = v12X5 * n243X + v12Y5 * n243Y + v12Z5 * n243Z > 0 ? 1 : -1;
				var d123 = v1X5 * n123X + v1Y5 * n123Y + v1Z5 * n123Z;
				var d134 = v1X5 * n134X + v1Y5 * n134Y + v1Z5 * n134Z;
				var d142 = v1X5 * n142X + v1Y5 * n142Y + v1Z5 * n142Z;
				var d243 = v2X5 * n243X + v2Y5 * n243Y + v2Z5 * n243Z;
				var mind1 = -1;
				var minv1;
				var minvX1;
				var minvY1;
				var minvZ1;
				var mini1 = 0;
				minvX1 = 0;
				minvY1 = 0;
				minvZ1 = 0;
				if(d123 * sign < 0) {
					var v113;
					var v1X6;
					var v1Y6;
					var v1Z6;
					var v212;
					var v2X6;
					var v2Y6;
					var v2Z6;
					var v312;
					var v3X2;
					var v3Y2;
					var v3Z2;
					var v126;
					var v12X6;
					var v12Y6;
					var v12Z6;
					var v232;
					var v23X2;
					var v23Y2;
					var v23Z2;
					var v313;
					var v31X1;
					var v31Y1;
					var v31Z1;
					var v49 = vec11;
					v1X6 = v49.x;
					v1Y6 = v49.y;
					v1Z6 = v49.z;
					var v50 = vec21;
					v2X6 = v50.x;
					v2Y6 = v50.y;
					v2Z6 = v50.z;
					var v51 = vec31;
					v3X2 = v51.x;
					v3Y2 = v51.y;
					v3Z2 = v51.z;
					v12X6 = v2X6 - v1X6;
					v12Y6 = v2Y6 - v1Y6;
					v12Z6 = v2Z6 - v1Z6;
					v23X2 = v3X2 - v2X6;
					v23Y2 = v3Y2 - v2Y6;
					v23Z2 = v3Z2 - v2Z6;
					v31X1 = v1X6 - v3X2;
					v31Y1 = v1Y6 - v3Y2;
					v31Z1 = v1Z6 - v3Z2;
					var n2;
					var nX2;
					var nY2;
					var nZ2;
					nX2 = v12Y6 * v23Z2 - v12Z6 * v23Y2;
					nY2 = v12Z6 * v23X2 - v12X6 * v23Z2;
					nZ2 = v12X6 * v23Y2 - v12Y6 * v23X2;
					var n121;
					var n12X1;
					var n12Y1;
					var n12Z1;
					var n231;
					var n23X1;
					var n23Y1;
					var n23Z1;
					var n311;
					var n31X1;
					var n31Y1;
					var n31Z1;
					n12X1 = v12Y6 * nZ2 - v12Z6 * nY2;
					n12Y1 = v12Z6 * nX2 - v12X6 * nZ2;
					n12Z1 = v12X6 * nY2 - v12Y6 * nX2;
					n23X1 = v23Y2 * nZ2 - v23Z2 * nY2;
					n23Y1 = v23Z2 * nX2 - v23X2 * nZ2;
					n23Z1 = v23X2 * nY2 - v23Y2 * nX2;
					n31X1 = v31Y1 * nZ2 - v31Z1 * nY2;
					n31Y1 = v31Z1 * nX2 - v31X1 * nZ2;
					n31Z1 = v31X1 * nY2 - v31Y1 * nX2;
					var d121 = v1X6 * n12X1 + v1Y6 * n12Y1 + v1Z6 * n12Z1;
					var d231 = v2X6 * n23X1 + v2Y6 * n23Y1 + v2Z6 * n23Z1;
					var d311 = v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1;
					var mind2 = -1;
					var minv2;
					var minvX2;
					var minvY2;
					var minvZ2;
					var mini2 = 0;
					minvX2 = 0;
					minvY2 = 0;
					minvZ2 = 0;
					if(d121 < 0) {
						var v114;
						var v1X7;
						var v1Y7;
						var v1Z7;
						var v213;
						var v2X7;
						var v2Y7;
						var v2Z7;
						var v52 = vec11;
						v1X7 = v52.x;
						v1Y7 = v52.y;
						v1Z7 = v52.z;
						var v53 = vec21;
						v2X7 = v53.x;
						v2Y7 = v53.y;
						v2Z7 = v53.z;
						var v127;
						var v12X7;
						var v12Y7;
						var v12Z7;
						v12X7 = v2X7 - v1X7;
						v12Y7 = v2Y7 - v1Y7;
						v12Z7 = v2Z7 - v1Z7;
						var d7 = v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7;
						var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
						t4 = -t4 / d7;
						var b3;
						if(t4 < 0) {
							var v54 = closest;
							v54.x = v1X7;
							v54.y = v1Y7;
							v54.z = v1Z7;
							b3 = 1;
						} else if(t4 > 1) {
							var v55 = closest;
							v55.x = v2X7;
							v55.y = v2Y7;
							v55.z = v2Z7;
							b3 = 2;
						} else {
							var p4;
							var pX4;
							var pY4;
							var pZ4;
							pX4 = v1X7 + v12X7 * t4;
							pY4 = v1Y7 + v12Y7 * t4;
							pZ4 = v1Z7 + v12Z7 * t4;
							var v56 = closest;
							v56.x = pX4;
							v56.y = pY4;
							v56.z = pZ4;
							b3 = 3;
						}
						var d8 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini2 = b3;
						mind2 = d8;
						var v57 = closest;
						minvX2 = v57.x;
						minvY2 = v57.y;
						minvZ2 = v57.z;
					}
					if(d231 < 0) {
						var v115;
						var v1X8;
						var v1Y8;
						var v1Z8;
						var v214;
						var v2X8;
						var v2Y8;
						var v2Z8;
						var v58 = vec21;
						v1X8 = v58.x;
						v1Y8 = v58.y;
						v1Z8 = v58.z;
						var v59 = vec31;
						v2X8 = v59.x;
						v2Y8 = v59.y;
						v2Z8 = v59.z;
						var v128;
						var v12X8;
						var v12Y8;
						var v12Z8;
						v12X8 = v2X8 - v1X8;
						v12Y8 = v2Y8 - v1Y8;
						v12Z8 = v2Z8 - v1Z8;
						var d9 = v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8;
						var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
						t5 = -t5 / d9;
						var b4;
						if(t5 < 0) {
							var v60 = closest;
							v60.x = v1X8;
							v60.y = v1Y8;
							v60.z = v1Z8;
							b4 = 1;
						} else if(t5 > 1) {
							var v61 = closest;
							v61.x = v2X8;
							v61.y = v2Y8;
							v61.z = v2Z8;
							b4 = 2;
						} else {
							var p5;
							var pX5;
							var pY5;
							var pZ5;
							pX5 = v1X8 + v12X8 * t5;
							pY5 = v1Y8 + v12Y8 * t5;
							pZ5 = v1Z8 + v12Z8 * t5;
							var v62 = closest;
							v62.x = pX5;
							v62.y = pY5;
							v62.z = pZ5;
							b4 = 3;
						}
						var d10 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d10 < mind2) {
							mini2 = b4 << 1;
							mind2 = d10;
							var v63 = closest;
							minvX2 = v63.x;
							minvY2 = v63.y;
							minvZ2 = v63.z;
						}
					}
					if(d311 < 0) {
						var v116;
						var v1X9;
						var v1Y9;
						var v1Z9;
						var v215;
						var v2X9;
						var v2Y9;
						var v2Z9;
						var v64 = vec11;
						v1X9 = v64.x;
						v1Y9 = v64.y;
						v1Z9 = v64.z;
						var v65 = vec31;
						v2X9 = v65.x;
						v2Y9 = v65.y;
						v2Z9 = v65.z;
						var v129;
						var v12X9;
						var v12Y9;
						var v12Z9;
						v12X9 = v2X9 - v1X9;
						v12Y9 = v2Y9 - v1Y9;
						v12Z9 = v2Z9 - v1Z9;
						var d11 = v12X9 * v12X9 + v12Y9 * v12Y9 + v12Z9 * v12Z9;
						var t6 = v12X9 * v1X9 + v12Y9 * v1Y9 + v12Z9 * v1Z9;
						t6 = -t6 / d11;
						var b5;
						if(t6 < 0) {
							var v66 = closest;
							v66.x = v1X9;
							v66.y = v1Y9;
							v66.z = v1Z9;
							b5 = 1;
						} else if(t6 > 1) {
							var v67 = closest;
							v67.x = v2X9;
							v67.y = v2Y9;
							v67.z = v2Z9;
							b5 = 2;
						} else {
							var p6;
							var pX6;
							var pY6;
							var pZ6;
							pX6 = v1X9 + v12X9 * t6;
							pY6 = v1Y9 + v12Y9 * t6;
							pZ6 = v1Z9 + v12Z9 * t6;
							var v68 = closest;
							v68.x = pX6;
							v68.y = pY6;
							v68.z = pZ6;
							b5 = 3;
						}
						var d13 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d13 < mind2) {
							mini2 = b5 & 1 | (b5 & 2) << 1;
							mind2 = d13;
							var v69 = closest;
							minvX2 = v69.x;
							minvY2 = v69.y;
							minvZ2 = v69.z;
						}
					}
					var b6;
					if(mind2 > 0) {
						var v70 = closest;
						v70.x = minvX2;
						v70.y = minvY2;
						v70.z = minvZ2;
						b6 = mini2;
					} else {
						var l1 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						if(l1 > 0) {
							l1 = 1 / Math.sqrt(l1);
						}
						nX2 *= l1;
						nY2 *= l1;
						nZ2 *= l1;
						var dn1 = v1X6 * nX2 + v1Y6 * nY2 + v1Z6 * nZ2;
						var l21 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						l21 = dn1 / l21;
						minvX2 = nX2 * l21;
						minvY2 = nY2 * l21;
						minvZ2 = nZ2 * l21;
						var v71 = closest;
						v71.x = minvX2;
						v71.y = minvY2;
						v71.z = minvZ2;
						b6 = 7;
					}
					var d14 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini1 = b6;
					mind1 = d14;
					var v72 = closest;
					minvX1 = v72.x;
					minvY1 = v72.y;
					minvZ1 = v72.z;
				}
				if(d134 * sign < 0) {
					var v117;
					var v1X10;
					var v1Y10;
					var v1Z10;
					var v216;
					var v2X10;
					var v2Y10;
					var v2Z10;
					var v314;
					var v3X3;
					var v3Y3;
					var v3Z3;
					var v1210;
					var v12X10;
					var v12Y10;
					var v12Z10;
					var v233;
					var v23X3;
					var v23Y3;
					var v23Z3;
					var v315;
					var v31X2;
					var v31Y2;
					var v31Z2;
					var v73 = vec11;
					v1X10 = v73.x;
					v1Y10 = v73.y;
					v1Z10 = v73.z;
					var v74 = vec31;
					v2X10 = v74.x;
					v2Y10 = v74.y;
					v2Z10 = v74.z;
					var v75 = vec4;
					v3X3 = v75.x;
					v3Y3 = v75.y;
					v3Z3 = v75.z;
					v12X10 = v2X10 - v1X10;
					v12Y10 = v2Y10 - v1Y10;
					v12Z10 = v2Z10 - v1Z10;
					v23X3 = v3X3 - v2X10;
					v23Y3 = v3Y3 - v2Y10;
					v23Z3 = v3Z3 - v2Z10;
					v31X2 = v1X10 - v3X3;
					v31Y2 = v1Y10 - v3Y3;
					v31Z2 = v1Z10 - v3Z3;
					var n3;
					var nX3;
					var nY3;
					var nZ3;
					nX3 = v12Y10 * v23Z3 - v12Z10 * v23Y3;
					nY3 = v12Z10 * v23X3 - v12X10 * v23Z3;
					nZ3 = v12X10 * v23Y3 - v12Y10 * v23X3;
					var n122;
					var n12X2;
					var n12Y2;
					var n12Z2;
					var n232;
					var n23X2;
					var n23Y2;
					var n23Z2;
					var n312;
					var n31X2;
					var n31Y2;
					var n31Z2;
					n12X2 = v12Y10 * nZ3 - v12Z10 * nY3;
					n12Y2 = v12Z10 * nX3 - v12X10 * nZ3;
					n12Z2 = v12X10 * nY3 - v12Y10 * nX3;
					n23X2 = v23Y3 * nZ3 - v23Z3 * nY3;
					n23Y2 = v23Z3 * nX3 - v23X3 * nZ3;
					n23Z2 = v23X3 * nY3 - v23Y3 * nX3;
					n31X2 = v31Y2 * nZ3 - v31Z2 * nY3;
					n31Y2 = v31Z2 * nX3 - v31X2 * nZ3;
					n31Z2 = v31X2 * nY3 - v31Y2 * nX3;
					var d122 = v1X10 * n12X2 + v1Y10 * n12Y2 + v1Z10 * n12Z2;
					var d232 = v2X10 * n23X2 + v2Y10 * n23Y2 + v2Z10 * n23Z2;
					var d312 = v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2;
					var mind3 = -1;
					var minv3;
					var minvX3;
					var minvY3;
					var minvZ3;
					var mini3 = 0;
					minvX3 = 0;
					minvY3 = 0;
					minvZ3 = 0;
					if(d122 < 0) {
						var v118;
						var v1X11;
						var v1Y11;
						var v1Z11;
						var v217;
						var v2X11;
						var v2Y11;
						var v2Z11;
						var v76 = vec11;
						v1X11 = v76.x;
						v1Y11 = v76.y;
						v1Z11 = v76.z;
						var v77 = vec31;
						v2X11 = v77.x;
						v2Y11 = v77.y;
						v2Z11 = v77.z;
						var v1211;
						var v12X11;
						var v12Y11;
						var v12Z11;
						v12X11 = v2X11 - v1X11;
						v12Y11 = v2Y11 - v1Y11;
						v12Z11 = v2Z11 - v1Z11;
						var d15 = v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11;
						var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
						t7 = -t7 / d15;
						var b7;
						if(t7 < 0) {
							var v78 = closest;
							v78.x = v1X11;
							v78.y = v1Y11;
							v78.z = v1Z11;
							b7 = 1;
						} else if(t7 > 1) {
							var v79 = closest;
							v79.x = v2X11;
							v79.y = v2Y11;
							v79.z = v2Z11;
							b7 = 2;
						} else {
							var p7;
							var pX7;
							var pY7;
							var pZ7;
							pX7 = v1X11 + v12X11 * t7;
							pY7 = v1Y11 + v12Y11 * t7;
							pZ7 = v1Z11 + v12Z11 * t7;
							var v80 = closest;
							v80.x = pX7;
							v80.y = pY7;
							v80.z = pZ7;
							b7 = 3;
						}
						var d16 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini3 = b7;
						mind3 = d16;
						var v81 = closest;
						minvX3 = v81.x;
						minvY3 = v81.y;
						minvZ3 = v81.z;
					}
					if(d232 < 0) {
						var v119;
						var v1X12;
						var v1Y12;
						var v1Z12;
						var v218;
						var v2X12;
						var v2Y12;
						var v2Z12;
						var v82 = vec31;
						v1X12 = v82.x;
						v1Y12 = v82.y;
						v1Z12 = v82.z;
						var v83 = vec4;
						v2X12 = v83.x;
						v2Y12 = v83.y;
						v2Z12 = v83.z;
						var v1212;
						var v12X12;
						var v12Y12;
						var v12Z12;
						v12X12 = v2X12 - v1X12;
						v12Y12 = v2Y12 - v1Y12;
						v12Z12 = v2Z12 - v1Z12;
						var d17 = v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12;
						var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
						t8 = -t8 / d17;
						var b8;
						if(t8 < 0) {
							var v84 = closest;
							v84.x = v1X12;
							v84.y = v1Y12;
							v84.z = v1Z12;
							b8 = 1;
						} else if(t8 > 1) {
							var v85 = closest;
							v85.x = v2X12;
							v85.y = v2Y12;
							v85.z = v2Z12;
							b8 = 2;
						} else {
							var p8;
							var pX8;
							var pY8;
							var pZ8;
							pX8 = v1X12 + v12X12 * t8;
							pY8 = v1Y12 + v12Y12 * t8;
							pZ8 = v1Z12 + v12Z12 * t8;
							var v86 = closest;
							v86.x = pX8;
							v86.y = pY8;
							v86.z = pZ8;
							b8 = 3;
						}
						var d18 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d18 < mind3) {
							mini3 = b8 << 1;
							mind3 = d18;
							var v87 = closest;
							minvX3 = v87.x;
							minvY3 = v87.y;
							minvZ3 = v87.z;
						}
					}
					if(d312 < 0) {
						var v120;
						var v1X13;
						var v1Y13;
						var v1Z13;
						var v219;
						var v2X13;
						var v2Y13;
						var v2Z13;
						var v88 = vec11;
						v1X13 = v88.x;
						v1Y13 = v88.y;
						v1Z13 = v88.z;
						var v89 = vec4;
						v2X13 = v89.x;
						v2Y13 = v89.y;
						v2Z13 = v89.z;
						var v1213;
						var v12X13;
						var v12Y13;
						var v12Z13;
						v12X13 = v2X13 - v1X13;
						v12Y13 = v2Y13 - v1Y13;
						v12Z13 = v2Z13 - v1Z13;
						var d19 = v12X13 * v12X13 + v12Y13 * v12Y13 + v12Z13 * v12Z13;
						var t9 = v12X13 * v1X13 + v12Y13 * v1Y13 + v12Z13 * v1Z13;
						t9 = -t9 / d19;
						var b9;
						if(t9 < 0) {
							var v90 = closest;
							v90.x = v1X13;
							v90.y = v1Y13;
							v90.z = v1Z13;
							b9 = 1;
						} else if(t9 > 1) {
							var v91 = closest;
							v91.x = v2X13;
							v91.y = v2Y13;
							v91.z = v2Z13;
							b9 = 2;
						} else {
							var p9;
							var pX9;
							var pY9;
							var pZ9;
							pX9 = v1X13 + v12X13 * t9;
							pY9 = v1Y13 + v12Y13 * t9;
							pZ9 = v1Z13 + v12Z13 * t9;
							var v92 = closest;
							v92.x = pX9;
							v92.y = pY9;
							v92.z = pZ9;
							b9 = 3;
						}
						var d20 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d20 < mind3) {
							mini3 = b9 & 1 | (b9 & 2) << 1;
							mind3 = d20;
							var v93 = closest;
							minvX3 = v93.x;
							minvY3 = v93.y;
							minvZ3 = v93.z;
						}
					}
					var b10;
					if(mind3 > 0) {
						var v94 = closest;
						v94.x = minvX3;
						v94.y = minvY3;
						v94.z = minvZ3;
						b10 = mini3;
					} else {
						var l3 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						if(l3 > 0) {
							l3 = 1 / Math.sqrt(l3);
						}
						nX3 *= l3;
						nY3 *= l3;
						nZ3 *= l3;
						var dn2 = v1X10 * nX3 + v1Y10 * nY3 + v1Z10 * nZ3;
						var l22 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						l22 = dn2 / l22;
						minvX3 = nX3 * l22;
						minvY3 = nY3 * l22;
						minvZ3 = nZ3 * l22;
						var v95 = closest;
						v95.x = minvX3;
						v95.y = minvY3;
						v95.z = minvZ3;
						b10 = 7;
					}
					var d21 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d21 < mind1) {
						mini1 = b10 & 1 | (b10 & 6) << 1;
						mind1 = d21;
						var v96 = closest;
						minvX1 = v96.x;
						minvY1 = v96.y;
						minvZ1 = v96.z;
					}
				}
				if(d142 * sign < 0) {
					var v130;
					var v1X14;
					var v1Y14;
					var v1Z14;
					var v220;
					var v2X14;
					var v2Y14;
					var v2Z14;
					var v316;
					var v3X4;
					var v3Y4;
					var v3Z4;
					var v1214;
					var v12X14;
					var v12Y14;
					var v12Z14;
					var v234;
					var v23X4;
					var v23Y4;
					var v23Z4;
					var v317;
					var v31X3;
					var v31Y3;
					var v31Z3;
					var v97 = vec11;
					v1X14 = v97.x;
					v1Y14 = v97.y;
					v1Z14 = v97.z;
					var v98 = vec21;
					v2X14 = v98.x;
					v2Y14 = v98.y;
					v2Z14 = v98.z;
					var v99 = vec4;
					v3X4 = v99.x;
					v3Y4 = v99.y;
					v3Z4 = v99.z;
					v12X14 = v2X14 - v1X14;
					v12Y14 = v2Y14 - v1Y14;
					v12Z14 = v2Z14 - v1Z14;
					v23X4 = v3X4 - v2X14;
					v23Y4 = v3Y4 - v2Y14;
					v23Z4 = v3Z4 - v2Z14;
					v31X3 = v1X14 - v3X4;
					v31Y3 = v1Y14 - v3Y4;
					v31Z3 = v1Z14 - v3Z4;
					var n4;
					var nX4;
					var nY4;
					var nZ4;
					nX4 = v12Y14 * v23Z4 - v12Z14 * v23Y4;
					nY4 = v12Z14 * v23X4 - v12X14 * v23Z4;
					nZ4 = v12X14 * v23Y4 - v12Y14 * v23X4;
					var n124;
					var n12X3;
					var n12Y3;
					var n12Z3;
					var n233;
					var n23X3;
					var n23Y3;
					var n23Z3;
					var n313;
					var n31X3;
					var n31Y3;
					var n31Z3;
					n12X3 = v12Y14 * nZ4 - v12Z14 * nY4;
					n12Y3 = v12Z14 * nX4 - v12X14 * nZ4;
					n12Z3 = v12X14 * nY4 - v12Y14 * nX4;
					n23X3 = v23Y4 * nZ4 - v23Z4 * nY4;
					n23Y3 = v23Z4 * nX4 - v23X4 * nZ4;
					n23Z3 = v23X4 * nY4 - v23Y4 * nX4;
					n31X3 = v31Y3 * nZ4 - v31Z3 * nY4;
					n31Y3 = v31Z3 * nX4 - v31X3 * nZ4;
					n31Z3 = v31X3 * nY4 - v31Y3 * nX4;
					var d124 = v1X14 * n12X3 + v1Y14 * n12Y3 + v1Z14 * n12Z3;
					var d233 = v2X14 * n23X3 + v2Y14 * n23Y3 + v2Z14 * n23Z3;
					var d313 = v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3;
					var mind4 = -1;
					var minv4;
					var minvX4;
					var minvY4;
					var minvZ4;
					var mini4 = 0;
					minvX4 = 0;
					minvY4 = 0;
					minvZ4 = 0;
					if(d124 < 0) {
						var v132;
						var v1X15;
						var v1Y15;
						var v1Z15;
						var v221;
						var v2X15;
						var v2Y15;
						var v2Z15;
						var v100 = vec11;
						v1X15 = v100.x;
						v1Y15 = v100.y;
						v1Z15 = v100.z;
						var v101 = vec21;
						v2X15 = v101.x;
						v2Y15 = v101.y;
						v2Z15 = v101.z;
						var v1215;
						var v12X15;
						var v12Y15;
						var v12Z15;
						v12X15 = v2X15 - v1X15;
						v12Y15 = v2Y15 - v1Y15;
						v12Z15 = v2Z15 - v1Z15;
						var d22 = v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15;
						var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
						t10 = -t10 / d22;
						var b11;
						if(t10 < 0) {
							var v102 = closest;
							v102.x = v1X15;
							v102.y = v1Y15;
							v102.z = v1Z15;
							b11 = 1;
						} else if(t10 > 1) {
							var v103 = closest;
							v103.x = v2X15;
							v103.y = v2Y15;
							v103.z = v2Z15;
							b11 = 2;
						} else {
							var p10;
							var pX10;
							var pY10;
							var pZ10;
							pX10 = v1X15 + v12X15 * t10;
							pY10 = v1Y15 + v12Y15 * t10;
							pZ10 = v1Z15 + v12Z15 * t10;
							var v104 = closest;
							v104.x = pX10;
							v104.y = pY10;
							v104.z = pZ10;
							b11 = 3;
						}
						var d24 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini4 = b11;
						mind4 = d24;
						var v105 = closest;
						minvX4 = v105.x;
						minvY4 = v105.y;
						minvZ4 = v105.z;
					}
					if(d233 < 0) {
						var v133;
						var v1X16;
						var v1Y16;
						var v1Z16;
						var v222;
						var v2X16;
						var v2Y16;
						var v2Z16;
						var v106 = vec21;
						v1X16 = v106.x;
						v1Y16 = v106.y;
						v1Z16 = v106.z;
						var v107 = vec4;
						v2X16 = v107.x;
						v2Y16 = v107.y;
						v2Z16 = v107.z;
						var v1216;
						var v12X16;
						var v12Y16;
						var v12Z16;
						v12X16 = v2X16 - v1X16;
						v12Y16 = v2Y16 - v1Y16;
						v12Z16 = v2Z16 - v1Z16;
						var d25 = v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16;
						var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
						t11 = -t11 / d25;
						var b12;
						if(t11 < 0) {
							var v108 = closest;
							v108.x = v1X16;
							v108.y = v1Y16;
							v108.z = v1Z16;
							b12 = 1;
						} else if(t11 > 1) {
							var v109 = closest;
							v109.x = v2X16;
							v109.y = v2Y16;
							v109.z = v2Z16;
							b12 = 2;
						} else {
							var p11;
							var pX11;
							var pY11;
							var pZ11;
							pX11 = v1X16 + v12X16 * t11;
							pY11 = v1Y16 + v12Y16 * t11;
							pZ11 = v1Z16 + v12Z16 * t11;
							var v134 = closest;
							v134.x = pX11;
							v134.y = pY11;
							v134.z = pZ11;
							b12 = 3;
						}
						var d26 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d26 < mind4) {
							mini4 = b12 << 1;
							mind4 = d26;
							var v135 = closest;
							minvX4 = v135.x;
							minvY4 = v135.y;
							minvZ4 = v135.z;
						}
					}
					if(d313 < 0) {
						var v136;
						var v1X17;
						var v1Y17;
						var v1Z17;
						var v223;
						var v2X17;
						var v2Y17;
						var v2Z17;
						var v137 = vec11;
						v1X17 = v137.x;
						v1Y17 = v137.y;
						v1Z17 = v137.z;
						var v138 = vec4;
						v2X17 = v138.x;
						v2Y17 = v138.y;
						v2Z17 = v138.z;
						var v1217;
						var v12X17;
						var v12Y17;
						var v12Z17;
						v12X17 = v2X17 - v1X17;
						v12Y17 = v2Y17 - v1Y17;
						v12Z17 = v2Z17 - v1Z17;
						var d27 = v12X17 * v12X17 + v12Y17 * v12Y17 + v12Z17 * v12Z17;
						var t12 = v12X17 * v1X17 + v12Y17 * v1Y17 + v12Z17 * v1Z17;
						t12 = -t12 / d27;
						var b13;
						if(t12 < 0) {
							var v139 = closest;
							v139.x = v1X17;
							v139.y = v1Y17;
							v139.z = v1Z17;
							b13 = 1;
						} else if(t12 > 1) {
							var v140 = closest;
							v140.x = v2X17;
							v140.y = v2Y17;
							v140.z = v2Z17;
							b13 = 2;
						} else {
							var p12;
							var pX12;
							var pY12;
							var pZ12;
							pX12 = v1X17 + v12X17 * t12;
							pY12 = v1Y17 + v12Y17 * t12;
							pZ12 = v1Z17 + v12Z17 * t12;
							var v142 = closest;
							v142.x = pX12;
							v142.y = pY12;
							v142.z = pZ12;
							b13 = 3;
						}
						var d28 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d28 < mind4) {
							mini4 = b13 & 1 | (b13 & 2) << 1;
							mind4 = d28;
							var v143 = closest;
							minvX4 = v143.x;
							minvY4 = v143.y;
							minvZ4 = v143.z;
						}
					}
					var b14;
					if(mind4 > 0) {
						var v144 = closest;
						v144.x = minvX4;
						v144.y = minvY4;
						v144.z = minvZ4;
						b14 = mini4;
					} else {
						var l4 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						if(l4 > 0) {
							l4 = 1 / Math.sqrt(l4);
						}
						nX4 *= l4;
						nY4 *= l4;
						nZ4 *= l4;
						var dn3 = v1X14 * nX4 + v1Y14 * nY4 + v1Z14 * nZ4;
						var l23 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						l23 = dn3 / l23;
						minvX4 = nX4 * l23;
						minvY4 = nY4 * l23;
						minvZ4 = nZ4 * l23;
						var v145 = closest;
						v145.x = minvX4;
						v145.y = minvY4;
						v145.z = minvZ4;
						b14 = 7;
					}
					var d29 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d29 < mind1) {
						mini1 = b14 & 3 | (b14 & 4) << 1;
						mind1 = d29;
						var v146 = closest;
						minvX1 = v146.x;
						minvY1 = v146.y;
						minvZ1 = v146.z;
					}
				}
				if(d243 * sign < 0) {
					var v147;
					var v1X18;
					var v1Y18;
					var v1Z18;
					var v224;
					var v2X18;
					var v2Y18;
					var v2Z18;
					var v318;
					var v3X5;
					var v3Y5;
					var v3Z5;
					var v1218;
					var v12X18;
					var v12Y18;
					var v12Z18;
					var v235;
					var v23X5;
					var v23Y5;
					var v23Z5;
					var v319;
					var v31X4;
					var v31Y4;
					var v31Z4;
					var v148 = vec21;
					v1X18 = v148.x;
					v1Y18 = v148.y;
					v1Z18 = v148.z;
					var v149 = vec31;
					v2X18 = v149.x;
					v2Y18 = v149.y;
					v2Z18 = v149.z;
					var v150 = vec4;
					v3X5 = v150.x;
					v3Y5 = v150.y;
					v3Z5 = v150.z;
					v12X18 = v2X18 - v1X18;
					v12Y18 = v2Y18 - v1Y18;
					v12Z18 = v2Z18 - v1Z18;
					v23X5 = v3X5 - v2X18;
					v23Y5 = v3Y5 - v2Y18;
					v23Z5 = v3Z5 - v2Z18;
					v31X4 = v1X18 - v3X5;
					v31Y4 = v1Y18 - v3Y5;
					v31Z4 = v1Z18 - v3Z5;
					var n5;
					var nX5;
					var nY5;
					var nZ5;
					nX5 = v12Y18 * v23Z5 - v12Z18 * v23Y5;
					nY5 = v12Z18 * v23X5 - v12X18 * v23Z5;
					nZ5 = v12X18 * v23Y5 - v12Y18 * v23X5;
					var n125;
					var n12X4;
					var n12Y4;
					var n12Z4;
					var n234;
					var n23X4;
					var n23Y4;
					var n23Z4;
					var n314;
					var n31X4;
					var n31Y4;
					var n31Z4;
					n12X4 = v12Y18 * nZ5 - v12Z18 * nY5;
					n12Y4 = v12Z18 * nX5 - v12X18 * nZ5;
					n12Z4 = v12X18 * nY5 - v12Y18 * nX5;
					n23X4 = v23Y5 * nZ5 - v23Z5 * nY5;
					n23Y4 = v23Z5 * nX5 - v23X5 * nZ5;
					n23Z4 = v23X5 * nY5 - v23Y5 * nX5;
					n31X4 = v31Y4 * nZ5 - v31Z4 * nY5;
					n31Y4 = v31Z4 * nX5 - v31X4 * nZ5;
					n31Z4 = v31X4 * nY5 - v31Y4 * nX5;
					var d125 = v1X18 * n12X4 + v1Y18 * n12Y4 + v1Z18 * n12Z4;
					var d234 = v2X18 * n23X4 + v2Y18 * n23Y4 + v2Z18 * n23Z4;
					var d314 = v3X5 * n31X4 + v3Y5 * n31Y4 + v3Z5 * n31Z4;
					var mind5 = -1;
					var minv5;
					var minvX5;
					var minvY5;
					var minvZ5;
					var mini5 = 0;
					minvX5 = 0;
					minvY5 = 0;
					minvZ5 = 0;
					if(d125 < 0) {
						var v151;
						var v1X19;
						var v1Y19;
						var v1Z19;
						var v225;
						var v2X19;
						var v2Y19;
						var v2Z19;
						var v152 = vec21;
						v1X19 = v152.x;
						v1Y19 = v152.y;
						v1Z19 = v152.z;
						var v153 = vec31;
						v2X19 = v153.x;
						v2Y19 = v153.y;
						v2Z19 = v153.z;
						var v1219;
						var v12X19;
						var v12Y19;
						var v12Z19;
						v12X19 = v2X19 - v1X19;
						v12Y19 = v2Y19 - v1Y19;
						v12Z19 = v2Z19 - v1Z19;
						var d30 = v12X19 * v12X19 + v12Y19 * v12Y19 + v12Z19 * v12Z19;
						var t13 = v12X19 * v1X19 + v12Y19 * v1Y19 + v12Z19 * v1Z19;
						t13 = -t13 / d30;
						var b15;
						if(t13 < 0) {
							var v154 = closest;
							v154.x = v1X19;
							v154.y = v1Y19;
							v154.z = v1Z19;
							b15 = 1;
						} else if(t13 > 1) {
							var v155 = closest;
							v155.x = v2X19;
							v155.y = v2Y19;
							v155.z = v2Z19;
							b15 = 2;
						} else {
							var p13;
							var pX13;
							var pY13;
							var pZ13;
							pX13 = v1X19 + v12X19 * t13;
							pY13 = v1Y19 + v12Y19 * t13;
							pZ13 = v1Z19 + v12Z19 * t13;
							var v156 = closest;
							v156.x = pX13;
							v156.y = pY13;
							v156.z = pZ13;
							b15 = 3;
						}
						var d32 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini5 = b15;
						mind5 = d32;
						var v157 = closest;
						minvX5 = v157.x;
						minvY5 = v157.y;
						minvZ5 = v157.z;
					}
					if(d234 < 0) {
						var v158;
						var v1X20;
						var v1Y20;
						var v1Z20;
						var v226;
						var v2X20;
						var v2Y20;
						var v2Z20;
						var v159 = vec31;
						v1X20 = v159.x;
						v1Y20 = v159.y;
						v1Z20 = v159.z;
						var v160 = vec4;
						v2X20 = v160.x;
						v2Y20 = v160.y;
						v2Z20 = v160.z;
						var v1220;
						var v12X20;
						var v12Y20;
						var v12Z20;
						v12X20 = v2X20 - v1X20;
						v12Y20 = v2Y20 - v1Y20;
						v12Z20 = v2Z20 - v1Z20;
						var d33 = v12X20 * v12X20 + v12Y20 * v12Y20 + v12Z20 * v12Z20;
						var t14 = v12X20 * v1X20 + v12Y20 * v1Y20 + v12Z20 * v1Z20;
						t14 = -t14 / d33;
						var b16;
						if(t14 < 0) {
							var v161 = closest;
							v161.x = v1X20;
							v161.y = v1Y20;
							v161.z = v1Z20;
							b16 = 1;
						} else if(t14 > 1) {
							var v162 = closest;
							v162.x = v2X20;
							v162.y = v2Y20;
							v162.z = v2Z20;
							b16 = 2;
						} else {
							var p14;
							var pX14;
							var pY14;
							var pZ14;
							pX14 = v1X20 + v12X20 * t14;
							pY14 = v1Y20 + v12Y20 * t14;
							pZ14 = v1Z20 + v12Z20 * t14;
							var v163 = closest;
							v163.x = pX14;
							v163.y = pY14;
							v163.z = pZ14;
							b16 = 3;
						}
						var d34 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d34 < mind5) {
							mini5 = b16 << 1;
							mind5 = d34;
							var v164 = closest;
							minvX5 = v164.x;
							minvY5 = v164.y;
							minvZ5 = v164.z;
						}
					}
					if(d314 < 0) {
						var v165;
						var v1X21;
						var v1Y21;
						var v1Z21;
						var v227;
						var v2X21;
						var v2Y21;
						var v2Z21;
						var v166 = vec21;
						v1X21 = v166.x;
						v1Y21 = v166.y;
						v1Z21 = v166.z;
						var v167 = vec4;
						v2X21 = v167.x;
						v2Y21 = v167.y;
						v2Z21 = v167.z;
						var v1221;
						var v12X21;
						var v12Y21;
						var v12Z21;
						v12X21 = v2X21 - v1X21;
						v12Y21 = v2Y21 - v1Y21;
						v12Z21 = v2Z21 - v1Z21;
						var d35 = v12X21 * v12X21 + v12Y21 * v12Y21 + v12Z21 * v12Z21;
						var t15 = v12X21 * v1X21 + v12Y21 * v1Y21 + v12Z21 * v1Z21;
						t15 = -t15 / d35;
						var b17;
						if(t15 < 0) {
							var v168 = closest;
							v168.x = v1X21;
							v168.y = v1Y21;
							v168.z = v1Z21;
							b17 = 1;
						} else if(t15 > 1) {
							var v169 = closest;
							v169.x = v2X21;
							v169.y = v2Y21;
							v169.z = v2Z21;
							b17 = 2;
						} else {
							var p15;
							var pX15;
							var pY15;
							var pZ15;
							pX15 = v1X21 + v12X21 * t15;
							pY15 = v1Y21 + v12Y21 * t15;
							pZ15 = v1Z21 + v12Z21 * t15;
							var v170 = closest;
							v170.x = pX15;
							v170.y = pY15;
							v170.z = pZ15;
							b17 = 3;
						}
						var d36 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d36 < mind5) {
							mini5 = b17 & 1 | (b17 & 2) << 1;
							mind5 = d36;
							var v171 = closest;
							minvX5 = v171.x;
							minvY5 = v171.y;
							minvZ5 = v171.z;
						}
					}
					var b18;
					if(mind5 > 0) {
						var v172 = closest;
						v172.x = minvX5;
						v172.y = minvY5;
						v172.z = minvZ5;
						b18 = mini5;
					} else {
						var l5 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						if(l5 > 0) {
							l5 = 1 / Math.sqrt(l5);
						}
						nX5 *= l5;
						nY5 *= l5;
						nZ5 *= l5;
						var dn4 = v1X18 * nX5 + v1Y18 * nY5 + v1Z18 * nZ5;
						var l24 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						l24 = dn4 / l24;
						minvX5 = nX5 * l24;
						minvY5 = nY5 * l24;
						minvZ5 = nZ5 * l24;
						var v173 = closest;
						v173.x = minvX5;
						v173.y = minvY5;
						v173.z = minvZ5;
						b18 = 7;
					}
					var d37 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d37 < mind1) {
						mini1 = b18 << 1;
						mind1 = d37;
						var v174 = closest;
						minvX1 = v174.x;
						minvY1 = v174.y;
						minvZ1 = v174.z;
					}
				}
				if(mind1 > 0) {
					var v175 = closest;
					v175.x = minvX1;
					v175.y = minvY1;
					v175.z = minvZ1;
					v4 = mini1;
				} else {
					closest.zero();
					v4 = 15;
				}
				break;
			}
			this.shrinkSimplex(v4);
			if(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z < eps2) {
				if(lambda == 0 || this.simplexSize == 4) {
					hit.fraction = lambda;
					return false;
				}
				this.interpolateClosestPoints();
				hit.fraction = lambda;
				var _this3 = hit.normal;
				_this3.x = dir.x;
				_this3.y = dir.y;
				_this3.z = dir.z;
				var _this4 = _this3;
				var invLen = Math.sqrt(_this4.x * _this4.x + _this4.y * _this4.y + _this4.z * _this4.z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				var tx2 = _this4.x * invLen;
				var ty2 = _this4.y * invLen;
				var tz2 = _this4.z * invLen;
				_this4.x = tx2;
				_this4.y = ty2;
				_this4.z = tz2;
				var _this5 = hit.position;
				var v176 = this.closestPoint1;
				_this5.x = v176.x;
				_this5.y = v176.y;
				_this5.z = v176.z;
				var _this6 = _this5;
				var tx3 = _this6.x + tl1.x * lambda;
				var ty3 = _this6.y + tl1.y * lambda;
				var tz3 = _this6.z + tl1.z * lambda;
				_this6.x = tx3;
				_this6.y = ty3;
				_this6.z = tz3;
				return true;
			}
			dir.x = closest.x;
			dir.y = closest.y;
			dir.z = closest.z;
			var _this7 = dir;
			var tx4 = -_this7.x;
			var ty4 = -_this7.y;
			var tz4 = -_this7.z;
			_this7.x = tx4;
			_this7.y = ty4;
			_this7.z = tz4;
			if(this.c1 != null) {
				this.computeWitnessPoint1(true);
			} else {
				var v177 = this.w1[this.simplexSize];
				v177.x = this.tf1._positionX;
				v177.y = this.tf1._positionY;
				v177.z = this.tf1._positionZ;
			}
			this.computeWitnessPoint2(true);
			var _this8 = this.s[this.simplexSize];
			var v178 = this.w1[this.simplexSize];
			_this8.x = v178.x;
			_this8.y = v178.y;
			_this8.z = v178.z;
			var _this9 = _this8;
			var v179 = this.w2[this.simplexSize];
			var tx5 = _this9.x - v179.x;
			var ty5 = _this9.y - v179.y;
			var tz5 = _this9.z - v179.z;
			_this9.x = tx5;
			_this9.y = ty5;
			_this9.z = tz5;
			var _this10 = s[this.simplexSize];
			var tx6 = _this10.x - rayX.x;
			var ty6 = _this10.y - rayX.y;
			var tz6 = _this10.z - rayX.z;
			_this10.x = tx6;
			_this10.y = ty6;
			_this10.z = tz6;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < eps2) {
				throw new Error("!?");
			}
			var p16 = s[this.simplexSize];
			var n6 = dir;
			var pn = p16.x * n6.x + p16.y * n6.y + p16.z * n6.z;
			if(pn < 0) {
				if(rayR.x * n6.x + rayR.y * n6.y + rayR.z * n6.z >= 0) {
					return false;
				}
				var dLambda = pn / (rayR.x * n6.x + rayR.y * n6.y + rayR.z * n6.z);
				lambda += dLambda;
				if(lambda >= 1) {
					return false;
				}
				var tx7 = rayX.x + rayR.x * dLambda;
				var ty7 = rayX.y + rayR.y * dLambda;
				var tz7 = rayX.z + rayR.z * dLambda;
				rayX.x = tx7;
				rayX.y = ty7;
				rayX.z = tz7;
				var _g2 = 0;
				var _g1 = this.simplexSize + 1;
				while(_g2 < _g1) {
					var i = _g2++;
					var _this11 = s[i];
					var s1 = -dLambda;
					var tx8 = _this11.x + rayR.x * s1;
					var ty8 = _this11.y + rayR.y * s1;
					var tz8 = _this11.z + rayR.z * s1;
					_this11.x = tx8;
					_this11.y = ty8;
					_this11.z = tz8;
				}
			}
			var duplicate = false;
			var _g21 = 0;
			var _g11 = this.simplexSize;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var dx = s[i1].x - s[this.simplexSize].x;
				var dy = s[i1].y - s[this.simplexSize].y;
				var dz = s[i1].z - s[this.simplexSize].z;
				if(dx * dx + dy * dy + dz * dz < eps2) {
					duplicate = true;
					break;
				}
			}
			if(!duplicate) {
				this.simplexSize++;
			}
			++count;
		}
		return false;
	}
	,interpolateClosestPoints: function() {
		var _g = this.simplexSize;
		switch(_g) {
		case 1:
			var _this = this.closestPoint1;
			var v = this.w1[0];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this1 = this.closestPoint2;
			var v1 = this.w2[0];
			_this1.x = v1.x;
			_this1.y = v1.y;
			_this1.z = v1.z;
			break;
		case 2:
			var c;
			var cX;
			var cY;
			var cZ;
			var v2 = this.closest;
			cX = v2.x;
			cY = v2.y;
			cZ = v2.z;
			var s0;
			var s0X;
			var s0Y;
			var s0Z;
			var w10;
			var w10X;
			var w10Y;
			var w10Z;
			var w20;
			var w20X;
			var w20Y;
			var w20Z;
			var s1;
			var s1X;
			var s1Y;
			var s1Z;
			var w11;
			var w11X;
			var w11Y;
			var w11Z;
			var w21;
			var w21X;
			var w21Y;
			var w21Z;
			var s2;
			var s2X;
			var s2Y;
			var s2Z;
			var w12;
			var w12X;
			var w12Y;
			var w12Z;
			var w22;
			var w22X;
			var w22Y;
			var w22Z;
			var v3 = this.s[0];
			s0X = v3.x;
			s0Y = v3.y;
			s0Z = v3.z;
			var v4 = this.w1[0];
			w10X = v4.x;
			w10Y = v4.y;
			w10Z = v4.z;
			var v5 = this.w2[0];
			w20X = v5.x;
			w20Y = v5.y;
			w20Z = v5.z;
			var v6 = this.s[1];
			s1X = v6.x;
			s1Y = v6.y;
			s1Z = v6.z;
			var v7 = this.w1[1];
			w11X = v7.x;
			w11Y = v7.y;
			w11Z = v7.z;
			var v8 = this.w2[1];
			w21X = v8.x;
			w21Y = v8.y;
			w21Z = v8.z;
			var v9 = this.s[2];
			s2X = v9.x;
			s2Y = v9.y;
			s2Z = v9.z;
			var v10 = this.w1[2];
			w12X = v10.x;
			w12Y = v10.y;
			w12Z = v10.z;
			var v11 = this.w2[2];
			w22X = v11.x;
			w22Y = v11.y;
			w22Z = v11.z;
			var s01;
			var s01X;
			var s01Y;
			var s01Z;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			var invDet = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			var s0c;
			var s0cX;
			var s0cY;
			var s0cZ;
			s0cX = cX - s0X;
			s0cY = cY - s0Y;
			s0cZ = cZ - s0Z;
			var t = (s0cX * s01X + s0cY * s01Y + s0cZ * s01Z) * invDet;
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			var cp1;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2;
			var cp2X;
			var cp2Y;
			var cp2Z;
			diffX = w11X - w10X;
			diffY = w11Y - w10Y;
			diffZ = w11Z - w10Z;
			cp1X = w10X + diffX * t;
			cp1Y = w10Y + diffY * t;
			cp1Z = w10Z + diffZ * t;
			diffX = w21X - w20X;
			diffY = w21Y - w20Y;
			diffZ = w21Z - w20Z;
			cp2X = w20X + diffX * t;
			cp2Y = w20Y + diffY * t;
			cp2Z = w20Z + diffZ * t;
			var v12 = this.closestPoint1;
			v12.x = cp1X;
			v12.y = cp1Y;
			v12.z = cp1Z;
			var v13 = this.closestPoint2;
			v13.x = cp2X;
			v13.y = cp2Y;
			v13.z = cp2Z;
			break;
		case 3:
			var c1;
			var cX1;
			var cY1;
			var cZ1;
			var v14 = this.closest;
			cX1 = v14.x;
			cY1 = v14.y;
			cZ1 = v14.z;
			var s02;
			var s0X1;
			var s0Y1;
			var s0Z1;
			var w101;
			var w10X1;
			var w10Y1;
			var w10Z1;
			var w201;
			var w20X1;
			var w20Y1;
			var w20Z1;
			var s11;
			var s1X1;
			var s1Y1;
			var s1Z1;
			var w111;
			var w11X1;
			var w11Y1;
			var w11Z1;
			var w211;
			var w21X1;
			var w21Y1;
			var w21Z1;
			var s21;
			var s2X1;
			var s2Y1;
			var s2Z1;
			var w121;
			var w12X1;
			var w12Y1;
			var w12Z1;
			var w221;
			var w22X1;
			var w22Y1;
			var w22Z1;
			var v15 = this.s[0];
			s0X1 = v15.x;
			s0Y1 = v15.y;
			s0Z1 = v15.z;
			var v16 = this.w1[0];
			w10X1 = v16.x;
			w10Y1 = v16.y;
			w10Z1 = v16.z;
			var v17 = this.w2[0];
			w20X1 = v17.x;
			w20Y1 = v17.y;
			w20Z1 = v17.z;
			var v18 = this.s[1];
			s1X1 = v18.x;
			s1Y1 = v18.y;
			s1Z1 = v18.z;
			var v19 = this.w1[1];
			w11X1 = v19.x;
			w11Y1 = v19.y;
			w11Z1 = v19.z;
			var v20 = this.w2[1];
			w21X1 = v20.x;
			w21Y1 = v20.y;
			w21Z1 = v20.z;
			var v21 = this.s[2];
			s2X1 = v21.x;
			s2Y1 = v21.y;
			s2Z1 = v21.z;
			var v22 = this.w1[2];
			w12X1 = v22.x;
			w12Y1 = v22.y;
			w12Z1 = v22.z;
			var v23 = this.w2[2];
			w22X1 = v23.x;
			w22Y1 = v23.y;
			w22Z1 = v23.z;
			var s011;
			var s01X1;
			var s01Y1;
			var s01Z1;
			var s021;
			var s02X;
			var s02Y;
			var s02Z;
			var s0c1;
			var s0cX1;
			var s0cY1;
			var s0cZ1;
			s01X1 = s1X1 - s0X1;
			s01Y1 = s1Y1 - s0Y1;
			s01Z1 = s1Z1 - s0Z1;
			s02X = s2X1 - s0X1;
			s02Y = s2Y1 - s0Y1;
			s02Z = s2Z1 - s0Z1;
			s0cX1 = cX1 - s0X1;
			s0cY1 = cY1 - s0Y1;
			s0cZ1 = cZ1 - s0Z1;
			var d11 = s01X1 * s01X1 + s01Y1 * s01Y1 + s01Z1 * s01Z1;
			var d12 = s01X1 * s02X + s01Y1 * s02Y + s01Z1 * s02Z;
			var d22 = s02X * s02X + s02Y * s02Y + s02Z * s02Z;
			var d1c = s01X1 * s0cX1 + s01Y1 * s0cY1 + s01Z1 * s0cZ1;
			var d2c = s02X * s0cX1 + s02Y * s0cY1 + s02Z * s0cZ1;
			var invDet1 = d11 * d22 - d12 * d12;
			if(invDet1 != 0) {
				invDet1 = 1 / invDet1;
			}
			var s = (d1c * d22 - d2c * d12) * invDet1;
			var t1 = (-d1c * d12 + d2c * d11) * invDet1;
			var diff1;
			var diffX1;
			var diffY1;
			var diffZ1;
			var cp11;
			var cp1X1;
			var cp1Y1;
			var cp1Z1;
			var cp21;
			var cp2X1;
			var cp2Y1;
			var cp2Z1;
			diffX1 = w11X1 - w10X1;
			diffY1 = w11Y1 - w10Y1;
			diffZ1 = w11Z1 - w10Z1;
			cp1X1 = w10X1 + diffX1 * s;
			cp1Y1 = w10Y1 + diffY1 * s;
			cp1Z1 = w10Z1 + diffZ1 * s;
			diffX1 = w12X1 - w10X1;
			diffY1 = w12Y1 - w10Y1;
			diffZ1 = w12Z1 - w10Z1;
			cp1X1 += diffX1 * t1;
			cp1Y1 += diffY1 * t1;
			cp1Z1 += diffZ1 * t1;
			diffX1 = w21X1 - w20X1;
			diffY1 = w21Y1 - w20Y1;
			diffZ1 = w21Z1 - w20Z1;
			cp2X1 = w20X1 + diffX1 * s;
			cp2Y1 = w20Y1 + diffY1 * s;
			cp2Z1 = w20Z1 + diffZ1 * s;
			diffX1 = w22X1 - w20X1;
			diffY1 = w22Y1 - w20Y1;
			diffZ1 = w22Z1 - w20Z1;
			cp2X1 += diffX1 * t1;
			cp2Y1 += diffY1 * t1;
			cp2Z1 += diffZ1 * t1;
			var v24 = this.closestPoint1;
			v24.x = cp1X1;
			v24.y = cp1Y1;
			v24.z = cp1Z1;
			var v25 = this.closestPoint2;
			v25.x = cp2X1;
			v25.y = cp2Y1;
			v25.z = cp2Z1;
			break;
		default:
			throw new Error("!?");
		}
	}
	,loadCache: function(gjkCache) {
		var _this = this.dir;
		var v = gjkCache.prevClosestDir;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
	}
	,saveCache: function(gjkCache) {
		var _this = gjkCache.prevClosestDir;
		var v = this.closest;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = _this;
		var tx = -_this1.x;
		var ty = -_this1.y;
		var tz = -_this1.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
	}
	,shrinkSimplex: function(vertexBits) {
		this.simplexSize = vertexBits;
		this.simplexSize = (this.simplexSize & 5) + (this.simplexSize >> 1 & 5);
		this.simplexSize = (this.simplexSize & 3) + (this.simplexSize >> 2 & 3);
		switch(vertexBits) {
		case 2:
			var _this = this.s[0];
			var v = this.s[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this1 = this.w1[0];
			var v1 = this.w1[1];
			_this1.x = v1.x;
			_this1.y = v1.y;
			_this1.z = v1.z;
			var _this2 = this.w2[0];
			var v2 = this.w2[1];
			_this2.x = v2.x;
			_this2.y = v2.y;
			_this2.z = v2.z;
			break;
		case 4:
			var _this3 = this.s[0];
			var v3 = this.s[2];
			_this3.x = v3.x;
			_this3.y = v3.y;
			_this3.z = v3.z;
			var _this4 = this.w1[0];
			var v4 = this.w1[2];
			_this4.x = v4.x;
			_this4.y = v4.y;
			_this4.z = v4.z;
			var _this5 = this.w2[0];
			var v5 = this.w2[2];
			_this5.x = v5.x;
			_this5.y = v5.y;
			_this5.z = v5.z;
			break;
		case 5:
			var _this6 = this.s[1];
			var v6 = this.s[2];
			_this6.x = v6.x;
			_this6.y = v6.y;
			_this6.z = v6.z;
			var _this7 = this.w1[1];
			var v7 = this.w1[2];
			_this7.x = v7.x;
			_this7.y = v7.y;
			_this7.z = v7.z;
			var _this8 = this.w2[1];
			var v8 = this.w2[2];
			_this8.x = v8.x;
			_this8.y = v8.y;
			_this8.z = v8.z;
			break;
		case 6:
			var _this9 = this.s[0];
			var v9 = this.s[2];
			_this9.x = v9.x;
			_this9.y = v9.y;
			_this9.z = v9.z;
			var _this10 = this.w1[0];
			var v10 = this.w1[2];
			_this10.x = v10.x;
			_this10.y = v10.y;
			_this10.z = v10.z;
			var _this11 = this.w2[0];
			var v11 = this.w2[2];
			_this11.x = v11.x;
			_this11.y = v11.y;
			_this11.z = v11.z;
			break;
		case 8:
			var _this12 = this.s[0];
			var v12 = this.s[3];
			_this12.x = v12.x;
			_this12.y = v12.y;
			_this12.z = v12.z;
			var _this13 = this.w1[0];
			var v13 = this.w1[3];
			_this13.x = v13.x;
			_this13.y = v13.y;
			_this13.z = v13.z;
			var _this14 = this.w2[0];
			var v14 = this.w2[3];
			_this14.x = v14.x;
			_this14.y = v14.y;
			_this14.z = v14.z;
			break;
		case 9:
			var _this15 = this.s[1];
			var v15 = this.s[3];
			_this15.x = v15.x;
			_this15.y = v15.y;
			_this15.z = v15.z;
			var _this16 = this.w1[1];
			var v16 = this.w1[3];
			_this16.x = v16.x;
			_this16.y = v16.y;
			_this16.z = v16.z;
			var _this17 = this.w2[1];
			var v17 = this.w2[3];
			_this17.x = v17.x;
			_this17.y = v17.y;
			_this17.z = v17.z;
			break;
		case 10:
			var _this18 = this.s[0];
			var v18 = this.s[3];
			_this18.x = v18.x;
			_this18.y = v18.y;
			_this18.z = v18.z;
			var _this19 = this.w1[0];
			var v19 = this.w1[3];
			_this19.x = v19.x;
			_this19.y = v19.y;
			_this19.z = v19.z;
			var _this20 = this.w2[0];
			var v20 = this.w2[3];
			_this20.x = v20.x;
			_this20.y = v20.y;
			_this20.z = v20.z;
			break;
		case 11:
			var _this21 = this.s[2];
			var v21 = this.s[3];
			_this21.x = v21.x;
			_this21.y = v21.y;
			_this21.z = v21.z;
			var _this22 = this.w1[2];
			var v22 = this.w1[3];
			_this22.x = v22.x;
			_this22.y = v22.y;
			_this22.z = v22.z;
			var _this23 = this.w2[2];
			var v23 = this.w2[3];
			_this23.x = v23.x;
			_this23.y = v23.y;
			_this23.z = v23.z;
			break;
		case 12:
			var _this24 = this.s[0];
			var v24 = this.s[2];
			_this24.x = v24.x;
			_this24.y = v24.y;
			_this24.z = v24.z;
			var _this25 = this.w1[0];
			var v25 = this.w1[2];
			_this25.x = v25.x;
			_this25.y = v25.y;
			_this25.z = v25.z;
			var _this26 = this.w2[0];
			var v26 = this.w2[2];
			_this26.x = v26.x;
			_this26.y = v26.y;
			_this26.z = v26.z;
			var _this27 = this.s[1];
			var v27 = this.s[3];
			_this27.x = v27.x;
			_this27.y = v27.y;
			_this27.z = v27.z;
			var _this28 = this.w1[1];
			var v28 = this.w1[3];
			_this28.x = v28.x;
			_this28.y = v28.y;
			_this28.z = v28.z;
			var _this29 = this.w2[1];
			var v29 = this.w2[3];
			_this29.x = v29.x;
			_this29.y = v29.y;
			_this29.z = v29.z;
			break;
		case 13:
			var _this30 = this.s[1];
			var v30 = this.s[3];
			_this30.x = v30.x;
			_this30.y = v30.y;
			_this30.z = v30.z;
			var _this31 = this.w1[1];
			var v31 = this.w1[3];
			_this31.x = v31.x;
			_this31.y = v31.y;
			_this31.z = v31.z;
			var _this32 = this.w2[1];
			var v32 = this.w2[3];
			_this32.x = v32.x;
			_this32.y = v32.y;
			_this32.z = v32.z;
			break;
		case 14:
			var _this33 = this.s[0];
			var v33 = this.s[3];
			_this33.x = v33.x;
			_this33.y = v33.y;
			_this33.z = v33.z;
			var _this34 = this.w1[0];
			var v34 = this.w1[3];
			_this34.x = v34.x;
			_this34.y = v34.y;
			_this34.z = v34.z;
			var _this35 = this.w2[0];
			var v35 = this.w2[3];
			_this35.x = v35.x;
			_this35.y = v35.y;
			_this35.z = v35.z;
			break;
		}
	}
	,computeWitnessPoint1: function(addMargin) {
		var tmp;
		var tmpX;
		var tmpY;
		var tmpZ;
		var idir;
		var idirX;
		var idirY;
		var idirZ;
		var v = this.dir;
		idirX = v.x;
		idirY = v.y;
		idirZ = v.z;
		var ldir1;
		var ldir1X;
		var ldir1Y;
		var ldir1Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf1._rotation00 * idirX + this.tf1._rotation10 * idirY + this.tf1._rotation20 * idirZ;
		__tmp__Y = this.tf1._rotation01 * idirX + this.tf1._rotation11 * idirY + this.tf1._rotation21 * idirZ;
		__tmp__Z = this.tf1._rotation02 * idirX + this.tf1._rotation12 * idirY + this.tf1._rotation22 * idirZ;
		ldir1X = __tmp__X;
		ldir1Y = __tmp__Y;
		ldir1Z = __tmp__Z;
		var iw1;
		var iw1X;
		var iw1Y;
		var iw1Z;
		var v1 = this.dir;
		v1.x = ldir1X;
		v1.y = ldir1Y;
		v1.z = ldir1Z;
		this.c1.computeLocalSupportingVertex(this.dir,this.w1[this.simplexSize]);
		if(addMargin) {
			var _this = this.dir;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = this.w1[this.simplexSize];
			var v2 = this.dir;
			var s = this.c1._gjkMargin;
			var tx1 = _this1.x + v2.x * s;
			var ty1 = _this1.y + v2.y * s;
			var tz1 = _this1.z + v2.z * s;
			_this1.x = tx1;
			_this1.y = ty1;
			_this1.z = tz1;
		}
		var v3 = this.w1[this.simplexSize];
		tmpX = v3.x;
		tmpY = v3.y;
		tmpZ = v3.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = this.tf1._rotation00 * tmpX + this.tf1._rotation01 * tmpY + this.tf1._rotation02 * tmpZ;
		__tmp__Y1 = this.tf1._rotation10 * tmpX + this.tf1._rotation11 * tmpY + this.tf1._rotation12 * tmpZ;
		__tmp__Z1 = this.tf1._rotation20 * tmpX + this.tf1._rotation21 * tmpY + this.tf1._rotation22 * tmpZ;
		iw1X = __tmp__X1;
		iw1Y = __tmp__Y1;
		iw1Z = __tmp__Z1;
		iw1X += this.tf1._positionX;
		iw1Y += this.tf1._positionY;
		iw1Z += this.tf1._positionZ;
		var v4 = this.w1[this.simplexSize];
		v4.x = iw1X;
		v4.y = iw1Y;
		v4.z = iw1Z;
		var v5 = this.dir;
		v5.x = idirX;
		v5.y = idirY;
		v5.z = idirZ;
	}
	,computeWitnessPoint2: function(addMargin) {
		var tmp;
		var tmpX;
		var tmpY;
		var tmpZ;
		var idir;
		var idirX;
		var idirY;
		var idirZ;
		var v = this.dir;
		idirX = v.x;
		idirY = v.y;
		idirZ = v.z;
		var ldir2;
		var ldir2X;
		var ldir2Y;
		var ldir2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf2._rotation00 * idirX + this.tf2._rotation10 * idirY + this.tf2._rotation20 * idirZ;
		__tmp__Y = this.tf2._rotation01 * idirX + this.tf2._rotation11 * idirY + this.tf2._rotation21 * idirZ;
		__tmp__Z = this.tf2._rotation02 * idirX + this.tf2._rotation12 * idirY + this.tf2._rotation22 * idirZ;
		ldir2X = __tmp__X;
		ldir2Y = __tmp__Y;
		ldir2Z = __tmp__Z;
		ldir2X = -ldir2X;
		ldir2Y = -ldir2Y;
		ldir2Z = -ldir2Z;
		var iw2;
		var iw2X;
		var iw2Y;
		var iw2Z;
		var v1 = this.dir;
		v1.x = ldir2X;
		v1.y = ldir2Y;
		v1.z = ldir2Z;
		this.c2.computeLocalSupportingVertex(this.dir,this.w2[this.simplexSize]);
		if(addMargin) {
			var _this = this.dir;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = this.w2[this.simplexSize];
			var v2 = this.dir;
			var s = this.c2._gjkMargin;
			var tx1 = _this1.x + v2.x * s;
			var ty1 = _this1.y + v2.y * s;
			var tz1 = _this1.z + v2.z * s;
			_this1.x = tx1;
			_this1.y = ty1;
			_this1.z = tz1;
		}
		var v3 = this.w2[this.simplexSize];
		tmpX = v3.x;
		tmpY = v3.y;
		tmpZ = v3.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = this.tf2._rotation00 * tmpX + this.tf2._rotation01 * tmpY + this.tf2._rotation02 * tmpZ;
		__tmp__Y1 = this.tf2._rotation10 * tmpX + this.tf2._rotation11 * tmpY + this.tf2._rotation12 * tmpZ;
		__tmp__Z1 = this.tf2._rotation20 * tmpX + this.tf2._rotation21 * tmpY + this.tf2._rotation22 * tmpZ;
		iw2X = __tmp__X1;
		iw2Y = __tmp__Y1;
		iw2Z = __tmp__Z1;
		iw2X += this.tf2._positionX;
		iw2Y += this.tf2._positionY;
		iw2Z += this.tf2._positionZ;
		var v4 = this.w2[this.simplexSize];
		v4.x = iw2X;
		v4.y = iw2Y;
		v4.z = iw2Z;
		var v5 = this.dir;
		v5.x = idirX;
		v5.y = idirY;
		v5.z = idirZ;
	}
	,pointToTetrahedron: function() {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _this = this.dir;
			var v = this.baseDirs[i];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this1 = this.s[this.simplexSize];
			var v1 = this.w1[this.simplexSize];
			_this1.x = v1.x;
			_this1.y = v1.y;
			_this1.z = v1.z;
			var _this2 = _this1;
			var v2 = this.w2[this.simplexSize];
			var tx = _this2.x - v2.x;
			var ty = _this2.y - v2.y;
			var tz = _this2.z - v2.z;
			_this2.x = tx;
			_this2.y = ty;
			_this2.z = tz;
			this.simplexSize++;
			this.lineToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
			var _this3 = this.dir;
			var tx1 = -_this3.x;
			var ty1 = -_this3.y;
			var tz1 = -_this3.z;
			_this3.x = tx1;
			_this3.y = ty1;
			_this3.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this4 = this.s[this.simplexSize];
			var v3 = this.w1[this.simplexSize];
			_this4.x = v3.x;
			_this4.y = v3.y;
			_this4.z = v3.z;
			var _this5 = _this4;
			var v4 = this.w2[this.simplexSize];
			var tx2 = _this5.x - v4.x;
			var ty2 = _this5.y - v4.y;
			var tz2 = _this5.z - v4.z;
			_this5.x = tx2;
			_this5.y = ty2;
			_this5.z = tz2;
			this.simplexSize++;
			this.lineToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
		}
	}
	,lineToTetrahedron: function() {
		var oldDir;
		var oldDirX;
		var oldDirY;
		var oldDirZ;
		var v = this.dir;
		oldDirX = v.x;
		oldDirY = v.y;
		oldDirZ = v.z;
		var s0;
		var s0X;
		var s0Y;
		var s0Z;
		var s1;
		var s1X;
		var s1Y;
		var s1Z;
		var lineDir;
		var lineDirX;
		var lineDirY;
		var lineDirZ;
		var v1 = this.s[0];
		s0X = v1.x;
		s0Y = v1.y;
		s0Z = v1.z;
		var v2 = this.s[1];
		s1X = v2.x;
		s1Y = v2.y;
		s1Z = v2.z;
		lineDirX = s0X - s1X;
		lineDirY = s0Y - s1Y;
		lineDirZ = s0Z - s1Z;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var baseDir;
			var baseDirX;
			var baseDirY;
			var baseDirZ;
			var v3 = this.baseDirs[i];
			baseDirX = v3.x;
			baseDirY = v3.y;
			baseDirZ = v3.z;
			var newDir;
			var newDirX;
			var newDirY;
			var newDirZ;
			newDirX = lineDirY * baseDirZ - lineDirZ * baseDirY;
			newDirY = lineDirZ * baseDirX - lineDirX * baseDirZ;
			newDirZ = lineDirX * baseDirY - lineDirY * baseDirX;
			var v4 = this.dir;
			v4.x = newDirX;
			v4.y = newDirY;
			v4.z = newDirZ;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v5 = this.w1[this.simplexSize];
			_this.x = v5.x;
			_this.y = v5.y;
			_this.z = v5.z;
			var _this1 = _this;
			var v6 = this.w2[this.simplexSize];
			var tx = _this1.x - v6.x;
			var ty = _this1.y - v6.y;
			var tz = _this1.z - v6.z;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			this.simplexSize++;
			this.triangleToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
			var _this2 = this.dir;
			var tx1 = -_this2.x;
			var ty1 = -_this2.y;
			var tz1 = -_this2.z;
			_this2.x = tx1;
			_this2.y = ty1;
			_this2.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this3 = this.s[this.simplexSize];
			var v7 = this.w1[this.simplexSize];
			_this3.x = v7.x;
			_this3.y = v7.y;
			_this3.z = v7.z;
			var _this4 = _this3;
			var v8 = this.w2[this.simplexSize];
			var tx2 = _this4.x - v8.x;
			var ty2 = _this4.y - v8.y;
			var tz2 = _this4.z - v8.z;
			_this4.x = tx2;
			_this4.y = ty2;
			_this4.z = tz2;
			this.simplexSize++;
			this.triangleToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
		}
		var v9 = this.dir;
		v9.x = oldDirX;
		v9.y = oldDirY;
		v9.z = oldDirZ;
	}
	,triangleToTetrahedron: function() {
		var oldDir;
		var oldDirX;
		var oldDirY;
		var oldDirZ;
		var v = this.dir;
		oldDirX = v.x;
		oldDirY = v.y;
		oldDirZ = v.z;
		while(true) {
			var s0;
			var s0X;
			var s0Y;
			var s0Z;
			var s1;
			var s1X;
			var s1Y;
			var s1Z;
			var s2;
			var s2X;
			var s2Y;
			var s2Z;
			var s01;
			var s01X;
			var s01Y;
			var s01Z;
			var s02;
			var s02X;
			var s02Y;
			var s02Z;
			var v1 = this.s[0];
			s0X = v1.x;
			s0Y = v1.y;
			s0Z = v1.z;
			var v2 = this.s[1];
			s1X = v2.x;
			s1Y = v2.y;
			s1Z = v2.z;
			var v3 = this.s[2];
			s2X = v3.x;
			s2Y = v3.y;
			s2Z = v3.z;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			s02X = s2X - s0X;
			s02Y = s2Y - s0Y;
			s02Z = s2Z - s0Z;
			var n;
			var nX;
			var nY;
			var nZ;
			nX = s01Y * s02Z - s01Z * s02Y;
			nY = s01Z * s02X - s01X * s02Z;
			nZ = s01X * s02Y - s01Y * s02X;
			var v4 = this.dir;
			v4.x = nX;
			v4.y = nY;
			v4.z = nZ;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v5 = this.w1[this.simplexSize];
			_this.x = v5.x;
			_this.y = v5.y;
			_this.z = v5.z;
			var _this1 = _this;
			var v6 = this.w2[this.simplexSize];
			var tx = _this1.x - v6.x;
			var ty = _this1.y - v6.y;
			var tz = _this1.z - v6.z;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			this.simplexSize++;
			if(this.isValidTetrahedron()) {
				break;
			}
			this.simplexSize--;
			var _this2 = this.dir;
			var tx1 = -_this2.x;
			var ty1 = -_this2.y;
			var tz1 = -_this2.z;
			_this2.x = tx1;
			_this2.y = ty1;
			_this2.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this3 = this.s[this.simplexSize];
			var v7 = this.w1[this.simplexSize];
			_this3.x = v7.x;
			_this3.y = v7.y;
			_this3.z = v7.z;
			var _this4 = _this3;
			var v8 = this.w2[this.simplexSize];
			var tx2 = _this4.x - v8.x;
			var ty2 = _this4.y - v8.y;
			var tz2 = _this4.z - v8.z;
			_this4.x = tx2;
			_this4.y = ty2;
			_this4.z = tz2;
			this.simplexSize++;
			if(this.isValidTetrahedron()) {
				break;
			}
			this.simplexSize--;
			if(!false) {
				break;
			}
		}
		var v9 = this.dir;
		v9.x = oldDirX;
		v9.y = oldDirY;
		v9.z = oldDirZ;
	}
	,isValidTetrahedron: function() {
		var e00 = this.s[1].x - this.s[0].x;
		var e01 = this.s[1].y - this.s[0].y;
		var e02 = this.s[1].z - this.s[0].z;
		var e10 = this.s[2].x - this.s[0].x;
		var e11 = this.s[2].y - this.s[0].y;
		var e12 = this.s[2].z - this.s[0].z;
		var e20 = this.s[3].x - this.s[0].x;
		var e21 = this.s[3].y - this.s[0].y;
		var e22 = this.s[3].z - this.s[0].z;
		var det = e00 * (e11 * e22 - e12 * e21) - e01 * (e10 * e22 - e12 * e20) + e02 * (e10 * e21 - e11 * e20);
		if(!(det > 1e-12)) {
			return det < -1e-12;
		} else {
			return true;
		}
	}
	,computeDepth: function(convex1,convex2,tf1,tf2,initialPolyhedron,initialPolyhedron1,initialPolyhedron2) {
		var _this = this.polyhedron;
		while(_this._numTriangles > 0) {
			var t = _this._triangleList;
			_this._numTriangles--;
			var prev = t._prev;
			var next = t._next;
			if(prev != null) {
				prev._next = next;
			}
			if(next != null) {
				next._prev = prev;
			}
			if(t == _this._triangleList) {
				_this._triangleList = _this._triangleList._next;
			}
			if(t == _this._triangleListLast) {
				_this._triangleListLast = _this._triangleListLast._prev;
			}
			t._next = null;
			t._prev = null;
			t.removeReferences();
			t._next = _this._trianglePool;
			_this._trianglePool = t;
		}
		while(_this._numVertices > 0) {
			var v = _this._vertices[--_this._numVertices];
			v.removeReferences();
			v._next = _this._vertexPool;
			_this._vertexPool = v;
		}
		var tmp = this.polyhedron;
		var _this1 = this.polyhedron;
		var first = _this1._vertexPool;
		if(first != null) {
			_this1._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp1 = first.init(initialPolyhedron[0],initialPolyhedron1[0],initialPolyhedron2[0]);
		var _this2 = this.polyhedron;
		var first1 = _this2._vertexPool;
		if(first1 != null) {
			_this2._vertexPool = first1._next;
			first1._next = null;
		} else {
			first1 = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp2 = first1.init(initialPolyhedron[1],initialPolyhedron1[1],initialPolyhedron2[1]);
		var _this3 = this.polyhedron;
		var first2 = _this3._vertexPool;
		if(first2 != null) {
			_this3._vertexPool = first2._next;
			first2._next = null;
		} else {
			first2 = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp3 = first2.init(initialPolyhedron[2],initialPolyhedron1[2],initialPolyhedron2[2]);
		var _this4 = this.polyhedron;
		var first3 = _this4._vertexPool;
		if(first3 != null) {
			_this4._vertexPool = first3._next;
			first3._next = null;
		} else {
			first3 = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		if(!tmp._init(tmp1,tmp2,tmp3,first3.init(initialPolyhedron[3],initialPolyhedron1[3],initialPolyhedron2[3]))) {
			return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_INIT;
		}
		this.simplexSize = 0;
		var supportingVertex = this.s[0];
		var witness1 = this.w1[0];
		var witness2 = this.w2[0];
		var count = 0;
		var maxIterations = 40;
		while(count < maxIterations) {
			var f = this.polyhedron._triangleList;
			var mind = 1e65536;
			var minf = null;
			while(f != null) {
				var n = f._next;
				if(f._distanceSq < mind) {
					mind = f._distanceSq;
					minf = f;
				}
				f = n;
			}
			var face = minf;
			var _this5 = this.dir;
			var v1 = face._normal;
			_this5.x = v1.x;
			_this5.y = v1.y;
			_this5.z = v1.z;
			var _this6 = _this5;
			var invLen = Math.sqrt(_this6.x * _this6.x + _this6.y * _this6.y + _this6.z * _this6.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this6.x * invLen;
			var ty = _this6.y * invLen;
			var tz = _this6.z * invLen;
			_this6.x = tx;
			_this6.y = ty;
			_this6.z = tz;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this7 = this.s[this.simplexSize];
			var v2 = this.w1[this.simplexSize];
			_this7.x = v2.x;
			_this7.y = v2.y;
			_this7.z = v2.z;
			var _this8 = _this7;
			var v3 = this.w2[this.simplexSize];
			var tx1 = _this8.x - v3.x;
			var ty1 = _this8.y - v3.y;
			var tz1 = _this8.z - v3.z;
			_this8.x = tx1;
			_this8.y = ty1;
			_this8.z = tz1;
			var v0 = face._vertices[0];
			var v11 = face._vertices[1];
			var v21 = face._vertices[2];
			var _this9 = v0.v;
			var v4 = this.dir;
			var dot1 = _this9.x * v4.x + _this9.y * v4.y + _this9.z * v4.z;
			var v5 = this.dir;
			var dot2 = supportingVertex.x * v5.x + supportingVertex.y * v5.y + supportingVertex.z * v5.z;
			if(dot2 - dot1 < 1e-6 || count == maxIterations - 1) {
				var _this10 = this.closest;
				var v6 = this.dir;
				_this10.x = v6.x;
				_this10.y = v6.y;
				_this10.z = v6.z;
				var _this11 = _this10;
				var _this12 = this.dir;
				var v7 = v0.v;
				var _this13 = this.dir;
				var s = (_this12.x * v7.x + _this12.y * v7.y + _this12.z * v7.z) / (_this13.x * _this13.x + _this13.y * _this13.y + _this13.z * _this13.z);
				var tx2 = _this11.x * s;
				var ty2 = _this11.y * s;
				var tz2 = _this11.z * s;
				_this11.x = tx2;
				_this11.y = ty2;
				_this11.z = tz2;
				var c;
				var cX;
				var cY;
				var cZ;
				var v8 = this.closest;
				cX = v8.x;
				cY = v8.y;
				cZ = v8.z;
				var s0;
				var s0X;
				var s0Y;
				var s0Z;
				var w10;
				var w10X;
				var w10Y;
				var w10Z;
				var w20;
				var w20X;
				var w20Y;
				var w20Z;
				var s1;
				var s1X;
				var s1Y;
				var s1Z;
				var w11;
				var w11X;
				var w11Y;
				var w11Z;
				var w21;
				var w21X;
				var w21Y;
				var w21Z;
				var s2;
				var s2X;
				var s2Y;
				var s2Z;
				var w12;
				var w12X;
				var w12Y;
				var w12Z;
				var w22;
				var w22X;
				var w22Y;
				var w22Z;
				var v9 = v0.v;
				s0X = v9.x;
				s0Y = v9.y;
				s0Z = v9.z;
				var v10 = v0.w1;
				w10X = v10.x;
				w10Y = v10.y;
				w10Z = v10.z;
				var v12 = v0.w2;
				w20X = v12.x;
				w20Y = v12.y;
				w20Z = v12.z;
				var v13 = v11.v;
				s1X = v13.x;
				s1Y = v13.y;
				s1Z = v13.z;
				var v14 = v11.w1;
				w11X = v14.x;
				w11Y = v14.y;
				w11Z = v14.z;
				var v15 = v11.w2;
				w21X = v15.x;
				w21Y = v15.y;
				w21Z = v15.z;
				var v16 = v21.v;
				s2X = v16.x;
				s2Y = v16.y;
				s2Z = v16.z;
				var v17 = v21.w1;
				w12X = v17.x;
				w12Y = v17.y;
				w12Z = v17.z;
				var v18 = v21.w2;
				w22X = v18.x;
				w22Y = v18.y;
				w22Z = v18.z;
				var s01;
				var s01X;
				var s01Y;
				var s01Z;
				var s02;
				var s02X;
				var s02Y;
				var s02Z;
				var s0c;
				var s0cX;
				var s0cY;
				var s0cZ;
				s01X = s1X - s0X;
				s01Y = s1Y - s0Y;
				s01Z = s1Z - s0Z;
				s02X = s2X - s0X;
				s02Y = s2Y - s0Y;
				s02Z = s2Z - s0Z;
				s0cX = cX - s0X;
				s0cY = cY - s0Y;
				s0cZ = cZ - s0Z;
				var d11 = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
				var d12 = s01X * s02X + s01Y * s02Y + s01Z * s02Z;
				var d22 = s02X * s02X + s02Y * s02Y + s02Z * s02Z;
				var d1c = s01X * s0cX + s01Y * s0cY + s01Z * s0cZ;
				var d2c = s02X * s0cX + s02Y * s0cY + s02Z * s0cZ;
				var invDet = d11 * d22 - d12 * d12;
				if(invDet != 0) {
					invDet = 1 / invDet;
				}
				var s3 = (d1c * d22 - d2c * d12) * invDet;
				var t1 = (-d1c * d12 + d2c * d11) * invDet;
				var diff;
				var diffX;
				var diffY;
				var diffZ;
				var cp1;
				var cp1X;
				var cp1Y;
				var cp1Z;
				var cp2;
				var cp2X;
				var cp2Y;
				var cp2Z;
				diffX = w11X - w10X;
				diffY = w11Y - w10Y;
				diffZ = w11Z - w10Z;
				cp1X = w10X + diffX * s3;
				cp1Y = w10Y + diffY * s3;
				cp1Z = w10Z + diffZ * s3;
				diffX = w12X - w10X;
				diffY = w12Y - w10Y;
				diffZ = w12Z - w10Z;
				cp1X += diffX * t1;
				cp1Y += diffY * t1;
				cp1Z += diffZ * t1;
				diffX = w21X - w20X;
				diffY = w21Y - w20Y;
				diffZ = w21Z - w20Z;
				cp2X = w20X + diffX * s3;
				cp2Y = w20Y + diffY * s3;
				cp2Z = w20Z + diffZ * s3;
				diffX = w22X - w20X;
				diffY = w22Y - w20Y;
				diffZ = w22Z - w20Z;
				cp2X += diffX * t1;
				cp2Y += diffY * t1;
				cp2Z += diffZ * t1;
				var v19 = this.closestPoint1;
				v19.x = cp1X;
				v19.y = cp1Y;
				v19.z = cp1Z;
				var v20 = this.closestPoint2;
				v20.x = cp2X;
				v20.y = cp2Y;
				v20.z = cp2Z;
				var _this14 = this.closest;
				this.depth = Math.sqrt(_this14.x * _this14.x + _this14.y * _this14.y + _this14.z * _this14.z);
				return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED;
			}
			var _this15 = this.polyhedron;
			var first4 = _this15._vertexPool;
			if(first4 != null) {
				_this15._vertexPool = first4._next;
				first4._next = null;
			} else {
				first4 = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
			}
			var epaVertex = first4.init(supportingVertex,witness1,witness2);
			if(!this.polyhedron._addVertex(epaVertex,face)) {
				return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_ADD_VERTEX;
			}
			++count;
		}
		return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_DID_NOT_CONVERGE;
	}
	,computeClosestPoints: function(c1,c2,tf1,tf2,cache) {
		return this.computeClosestPointsImpl(c1,c2,tf1,tf2,cache,true);
	}
	,computeDistance: function(c1,c2,tf1,tf2,cache) {
		return this.computeClosestPointsImpl(c1,c2,tf1,tf2,cache,false);
	}
	,convexCast: function(c1,c2,tf1,tf2,tl1,tl2,hit) {
		return this.convexCastImpl(c1,c2,tf1,tf2,tl1,tl2,hit);
	}
	,rayCast: function(c,tf,begin,end,hit) {
		var tf1 = this.tempTransform;
		var tf2 = tf;
		var v = begin;
		tf1._positionX = v.x;
		tf1._positionY = v.y;
		tf1._positionZ = v.z;
		var tl1 = this.tl1;
		var tl2 = this.tl2;
		tl1.x = end.x;
		tl1.y = end.y;
		tl1.z = end.z;
		var _this = tl1;
		var tx = _this.x - begin.x;
		var ty = _this.y - begin.y;
		var tz = _this.z - begin.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		tl2.zero();
		return this.convexCastImpl(null,c,tf1,tf2,tl1,tl2,hit);
	}
};
var oimo_collision_narrowphase_detector_gjkepa_GjkEpaLog = function() { };
oimo_collision_narrowphase_detector_gjkepa_GjkEpaLog.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState = function() { };
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.__name__ = true;
var oimo_collision_narrowphase_detector_gjkepa_SimplexUtil = function() { };
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.__name__ = true;
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin2 = function(vec1,vec2,out) {
	var v1;
	var v1X;
	var v1Y;
	var v1Z;
	var v2;
	var v2X;
	var v2Y;
	var v2Z;
	var v = vec1;
	v1X = v.x;
	v1Y = v.y;
	v1Z = v.z;
	var v3 = vec2;
	v2X = v3.x;
	v2Y = v3.y;
	v2Z = v3.z;
	var v12;
	var v12X;
	var v12Y;
	var v12Z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
	var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
	t = -t / d;
	if(t < 0) {
		var v4 = out;
		v4.x = v1X;
		v4.y = v1Y;
		v4.z = v1Z;
		return 1;
	}
	if(t > 1) {
		var v5 = out;
		v5.x = v2X;
		v5.y = v2Y;
		v5.z = v2Z;
		return 2;
	}
	var p;
	var pX;
	var pY;
	var pZ;
	pX = v1X + v12X * t;
	pY = v1Y + v12Y * t;
	pZ = v1Z + v12Z * t;
	var v6 = out;
	v6.x = pX;
	v6.y = pY;
	v6.z = pZ;
	return 3;
};
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin3 = function(vec1,vec2,vec3,out) {
	var v1;
	var v1X;
	var v1Y;
	var v1Z;
	var v2;
	var v2X;
	var v2Y;
	var v2Z;
	var v3;
	var v3X;
	var v3Y;
	var v3Z;
	var v12;
	var v12X;
	var v12Y;
	var v12Z;
	var v23;
	var v23X;
	var v23Y;
	var v23Z;
	var v31;
	var v31X;
	var v31Y;
	var v31Z;
	var v = vec1;
	v1X = v.x;
	v1Y = v.y;
	v1Z = v.z;
	var v4 = vec2;
	v2X = v4.x;
	v2Y = v4.y;
	v2Z = v4.z;
	var v5 = vec3;
	v3X = v5.x;
	v3Y = v5.y;
	v3Z = v5.z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	v23X = v3X - v2X;
	v23Y = v3Y - v2Y;
	v23Z = v3Z - v2Z;
	v31X = v1X - v3X;
	v31Y = v1Y - v3Y;
	v31Z = v1Z - v3Z;
	var n;
	var nX;
	var nY;
	var nZ;
	nX = v12Y * v23Z - v12Z * v23Y;
	nY = v12Z * v23X - v12X * v23Z;
	nZ = v12X * v23Y - v12Y * v23X;
	var n12;
	var n12X;
	var n12Y;
	var n12Z;
	var n23;
	var n23X;
	var n23Y;
	var n23Z;
	var n31;
	var n31X;
	var n31Y;
	var n31Z;
	n12X = v12Y * nZ - v12Z * nY;
	n12Y = v12Z * nX - v12X * nZ;
	n12Z = v12X * nY - v12Y * nX;
	n23X = v23Y * nZ - v23Z * nY;
	n23Y = v23Z * nX - v23X * nZ;
	n23Z = v23X * nY - v23Y * nX;
	n31X = v31Y * nZ - v31Z * nY;
	n31Y = v31Z * nX - v31X * nZ;
	n31Z = v31X * nY - v31Y * nX;
	var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
	var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
	var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
	var mind = -1;
	var minv;
	var minvX;
	var minvY;
	var minvZ;
	var mini = 0;
	minvX = 0;
	minvY = 0;
	minvZ = 0;
	if(d12 < 0) {
		var v11;
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v21;
		var v2X1;
		var v2Y1;
		var v2Z1;
		var v6 = vec1;
		v1X1 = v6.x;
		v1Y1 = v6.y;
		v1Z1 = v6.z;
		var v7 = vec2;
		v2X1 = v7.x;
		v2Y1 = v7.y;
		v2Z1 = v7.z;
		var v121;
		var v12X1;
		var v12Y1;
		var v12Z1;
		v12X1 = v2X1 - v1X1;
		v12Y1 = v2Y1 - v1Y1;
		v12Z1 = v2Z1 - v1Z1;
		var d = v12X1 * v12X1 + v12Y1 * v12Y1 + v12Z1 * v12Z1;
		var t = v12X1 * v1X1 + v12Y1 * v1Y1 + v12Z1 * v1Z1;
		t = -t / d;
		var b;
		if(t < 0) {
			var v8 = out;
			v8.x = v1X1;
			v8.y = v1Y1;
			v8.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			var v9 = out;
			v9.x = v2X1;
			v9.y = v2Y1;
			v9.z = v2Z1;
			b = 2;
		} else {
			var p;
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X1 * t;
			pY = v1Y1 + v12Y1 * t;
			pZ = v1Z1 + v12Z1 * t;
			var v10 = out;
			v10.x = pX;
			v10.y = pY;
			v10.z = pZ;
			b = 3;
		}
		var d1 = out.x * out.x + out.y * out.y + out.z * out.z;
		mini = b;
		mind = d1;
		var v13 = out;
		minvX = v13.x;
		minvY = v13.y;
		minvZ = v13.z;
	}
	if(d23 < 0) {
		var v14;
		var v1X2;
		var v1Y2;
		var v1Z2;
		var v22;
		var v2X2;
		var v2Y2;
		var v2Z2;
		var v15 = vec2;
		v1X2 = v15.x;
		v1Y2 = v15.y;
		v1Z2 = v15.z;
		var v16 = vec3;
		v2X2 = v16.x;
		v2Y2 = v16.y;
		v2Z2 = v16.z;
		var v122;
		var v12X2;
		var v12Y2;
		var v12Z2;
		v12X2 = v2X2 - v1X2;
		v12Y2 = v2Y2 - v1Y2;
		v12Z2 = v2Z2 - v1Z2;
		var d2 = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
		var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
		t1 = -t1 / d2;
		var b1;
		if(t1 < 0) {
			var v17 = out;
			v17.x = v1X2;
			v17.y = v1Y2;
			v17.z = v1Z2;
			b1 = 1;
		} else if(t1 > 1) {
			var v18 = out;
			v18.x = v2X2;
			v18.y = v2Y2;
			v18.z = v2Z2;
			b1 = 2;
		} else {
			var p1;
			var pX1;
			var pY1;
			var pZ1;
			pX1 = v1X2 + v12X2 * t1;
			pY1 = v1Y2 + v12Y2 * t1;
			pZ1 = v1Z2 + v12Z2 * t1;
			var v19 = out;
			v19.x = pX1;
			v19.y = pY1;
			v19.z = pZ1;
			b1 = 3;
		}
		var d3 = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d3 < mind) {
			mini = b1 << 1;
			mind = d3;
			var v20 = out;
			minvX = v20.x;
			minvY = v20.y;
			minvZ = v20.z;
		}
	}
	if(d31 < 0) {
		var v110;
		var v1X3;
		var v1Y3;
		var v1Z3;
		var v24;
		var v2X3;
		var v2Y3;
		var v2Z3;
		var v25 = vec1;
		v1X3 = v25.x;
		v1Y3 = v25.y;
		v1Z3 = v25.z;
		var v26 = vec3;
		v2X3 = v26.x;
		v2Y3 = v26.y;
		v2Z3 = v26.z;
		var v123;
		var v12X3;
		var v12Y3;
		var v12Z3;
		v12X3 = v2X3 - v1X3;
		v12Y3 = v2Y3 - v1Y3;
		v12Z3 = v2Z3 - v1Z3;
		var d4 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
		var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
		t2 = -t2 / d4;
		var b2;
		if(t2 < 0) {
			var v27 = out;
			v27.x = v1X3;
			v27.y = v1Y3;
			v27.z = v1Z3;
			b2 = 1;
		} else if(t2 > 1) {
			var v28 = out;
			v28.x = v2X3;
			v28.y = v2Y3;
			v28.z = v2Z3;
			b2 = 2;
		} else {
			var p2;
			var pX2;
			var pY2;
			var pZ2;
			pX2 = v1X3 + v12X3 * t2;
			pY2 = v1Y3 + v12Y3 * t2;
			pZ2 = v1Z3 + v12Z3 * t2;
			var v29 = out;
			v29.x = pX2;
			v29.y = pY2;
			v29.z = pZ2;
			b2 = 3;
		}
		var d5 = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d5 < mind) {
			mini = b2 & 1 | (b2 & 2) << 1;
			mind = d5;
			var v30 = out;
			minvX = v30.x;
			minvY = v30.y;
			minvZ = v30.z;
		}
	}
	if(mind > 0) {
		var v32 = out;
		v32.x = minvX;
		v32.y = minvY;
		v32.z = minvZ;
		return mini;
	}
	var l = nX * nX + nY * nY + nZ * nZ;
	if(l > 0) {
		l = 1 / Math.sqrt(l);
	}
	nX *= l;
	nY *= l;
	nZ *= l;
	var dn = v1X * nX + v1Y * nY + v1Z * nZ;
	var l2 = nX * nX + nY * nY + nZ * nZ;
	l2 = dn / l2;
	minvX = nX * l2;
	minvY = nY * l2;
	minvZ = nZ * l2;
	var v33 = out;
	v33.x = minvX;
	v33.y = minvY;
	v33.z = minvZ;
	return 7;
};
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin4 = function(vec1,vec2,vec3,vec4,out) {
	var v1;
	var v1X;
	var v1Y;
	var v1Z;
	var v2;
	var v2X;
	var v2Y;
	var v2Z;
	var v3;
	var v3X;
	var v3Y;
	var v3Z;
	var v4;
	var v4X;
	var v4Y;
	var v4Z;
	var v12;
	var v12X;
	var v12Y;
	var v12Z;
	var v13;
	var v13X;
	var v13Y;
	var v13Z;
	var v14;
	var v14X;
	var v14Y;
	var v14Z;
	var v23;
	var v23X;
	var v23Y;
	var v23Z;
	var v24;
	var v24X;
	var v24Y;
	var v24Z;
	var v34;
	var v34X;
	var v34Y;
	var v34Z;
	var v = vec1;
	v1X = v.x;
	v1Y = v.y;
	v1Z = v.z;
	var v5 = vec2;
	v2X = v5.x;
	v2Y = v5.y;
	v2Z = v5.z;
	var v6 = vec3;
	v3X = v6.x;
	v3Y = v6.y;
	v3Z = v6.z;
	var v7 = vec4;
	v4X = v7.x;
	v4Y = v7.y;
	v4Z = v7.z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	v13X = v3X - v1X;
	v13Y = v3Y - v1Y;
	v13Z = v3Z - v1Z;
	v14X = v4X - v1X;
	v14Y = v4Y - v1Y;
	v14Z = v4Z - v1Z;
	v23X = v3X - v2X;
	v23Y = v3Y - v2Y;
	v23Z = v3Z - v2Z;
	v24X = v4X - v2X;
	v24Y = v4Y - v2Y;
	v24Z = v4Z - v2Z;
	v34X = v4X - v3X;
	v34Y = v4Y - v3Y;
	v34Z = v4Z - v3Z;
	var rev;
	var n123;
	var n123X;
	var n123Y;
	var n123Z;
	var n134;
	var n134X;
	var n134Y;
	var n134Z;
	var n142;
	var n142X;
	var n142Y;
	var n142Z;
	var n243;
	var n243X;
	var n243Y;
	var n243Z;
	var n;
	var nX;
	var nY;
	var nZ;
	n123X = v12Y * v13Z - v12Z * v13Y;
	n123Y = v12Z * v13X - v12X * v13Z;
	n123Z = v12X * v13Y - v12Y * v13X;
	n134X = v13Y * v14Z - v13Z * v14Y;
	n134Y = v13Z * v14X - v13X * v14Z;
	n134Z = v13X * v14Y - v13Y * v14X;
	n142X = v14Y * v12Z - v14Z * v12Y;
	n142Y = v14Z * v12X - v14X * v12Z;
	n142Z = v14X * v12Y - v14Y * v12X;
	n243X = v24Y * v23Z - v24Z * v23Y;
	n243Y = v24Z * v23X - v24X * v23Z;
	n243Z = v24X * v23Y - v24Y * v23X;
	var sign = v12X * n243X + v12Y * n243Y + v12Z * n243Z > 0 ? 1 : -1;
	var d123 = v1X * n123X + v1Y * n123Y + v1Z * n123Z;
	var d134 = v1X * n134X + v1Y * n134Y + v1Z * n134Z;
	var d142 = v1X * n142X + v1Y * n142Y + v1Z * n142Z;
	var d243 = v2X * n243X + v2Y * n243Y + v2Z * n243Z;
	var mind = -1;
	var minv;
	var minvX;
	var minvY;
	var minvZ;
	var mini = 0;
	minvX = 0;
	minvY = 0;
	minvZ = 0;
	if(d123 * sign < 0) {
		var v11;
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v21;
		var v2X1;
		var v2Y1;
		var v2Z1;
		var v31;
		var v3X1;
		var v3Y1;
		var v3Z1;
		var v121;
		var v12X1;
		var v12Y1;
		var v12Z1;
		var v231;
		var v23X1;
		var v23Y1;
		var v23Z1;
		var v311;
		var v31X;
		var v31Y;
		var v31Z;
		var v8 = vec1;
		v1X1 = v8.x;
		v1Y1 = v8.y;
		v1Z1 = v8.z;
		var v9 = vec2;
		v2X1 = v9.x;
		v2Y1 = v9.y;
		v2Z1 = v9.z;
		var v10 = vec3;
		v3X1 = v10.x;
		v3Y1 = v10.y;
		v3Z1 = v10.z;
		v12X1 = v2X1 - v1X1;
		v12Y1 = v2Y1 - v1Y1;
		v12Z1 = v2Z1 - v1Z1;
		v23X1 = v3X1 - v2X1;
		v23Y1 = v3Y1 - v2Y1;
		v23Z1 = v3Z1 - v2Z1;
		v31X = v1X1 - v3X1;
		v31Y = v1Y1 - v3Y1;
		v31Z = v1Z1 - v3Z1;
		var n1;
		var nX1;
		var nY1;
		var nZ1;
		nX1 = v12Y1 * v23Z1 - v12Z1 * v23Y1;
		nY1 = v12Z1 * v23X1 - v12X1 * v23Z1;
		nZ1 = v12X1 * v23Y1 - v12Y1 * v23X1;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y1 * nZ1 - v12Z1 * nY1;
		n12Y = v12Z1 * nX1 - v12X1 * nZ1;
		n12Z = v12X1 * nY1 - v12Y1 * nX1;
		n23X = v23Y1 * nZ1 - v23Z1 * nY1;
		n23Y = v23Z1 * nX1 - v23X1 * nZ1;
		n23Z = v23X1 * nY1 - v23Y1 * nX1;
		n31X = v31Y * nZ1 - v31Z * nY1;
		n31Y = v31Z * nX1 - v31X * nZ1;
		n31Z = v31X * nY1 - v31Y * nX1;
		var d12 = v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z;
		var d23 = v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z;
		var d31 = v3X1 * n31X + v3Y1 * n31Y + v3Z1 * n31Z;
		var mind1 = -1;
		var minv1;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(d12 < 0) {
			var v15;
			var v1X2;
			var v1Y2;
			var v1Z2;
			var v22;
			var v2X2;
			var v2Y2;
			var v2Z2;
			var v16 = vec1;
			v1X2 = v16.x;
			v1Y2 = v16.y;
			v1Z2 = v16.z;
			var v17 = vec2;
			v2X2 = v17.x;
			v2Y2 = v17.y;
			v2Z2 = v17.z;
			var v122;
			var v12X2;
			var v12Y2;
			var v12Z2;
			v12X2 = v2X2 - v1X2;
			v12Y2 = v2Y2 - v1Y2;
			v12Z2 = v2Z2 - v1Z2;
			var d = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
			var t = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
			t = -t / d;
			var b;
			if(t < 0) {
				var v18 = out;
				v18.x = v1X2;
				v18.y = v1Y2;
				v18.z = v1Z2;
				b = 1;
			} else if(t > 1) {
				var v19 = out;
				v19.x = v2X2;
				v19.y = v2Y2;
				v19.z = v2Z2;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X2 + v12X2 * t;
				pY = v1Y2 + v12Y2 * t;
				pZ = v1Z2 + v12Z2 * t;
				var v20 = out;
				v20.x = pX;
				v20.y = pY;
				v20.z = pZ;
				b = 3;
			}
			var d1 = out.x * out.x + out.y * out.y + out.z * out.z;
			mini1 = b;
			mind1 = d1;
			var v25 = out;
			minvX1 = v25.x;
			minvY1 = v25.y;
			minvZ1 = v25.z;
		}
		if(d23 < 0) {
			var v110;
			var v1X3;
			var v1Y3;
			var v1Z3;
			var v26;
			var v2X3;
			var v2Y3;
			var v2Z3;
			var v27 = vec2;
			v1X3 = v27.x;
			v1Y3 = v27.y;
			v1Z3 = v27.z;
			var v28 = vec3;
			v2X3 = v28.x;
			v2Y3 = v28.y;
			v2Z3 = v28.z;
			var v123;
			var v12X3;
			var v12Y3;
			var v12Z3;
			v12X3 = v2X3 - v1X3;
			v12Y3 = v2Y3 - v1Y3;
			v12Z3 = v2Z3 - v1Z3;
			var d2 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
			var t1 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
			t1 = -t1 / d2;
			var b1;
			if(t1 < 0) {
				var v29 = out;
				v29.x = v1X3;
				v29.y = v1Y3;
				v29.z = v1Z3;
				b1 = 1;
			} else if(t1 > 1) {
				var v30 = out;
				v30.x = v2X3;
				v30.y = v2Y3;
				v30.z = v2Z3;
				b1 = 2;
			} else {
				var p1;
				var pX1;
				var pY1;
				var pZ1;
				pX1 = v1X3 + v12X3 * t1;
				pY1 = v1Y3 + v12Y3 * t1;
				pZ1 = v1Z3 + v12Z3 * t1;
				var v32 = out;
				v32.x = pX1;
				v32.y = pY1;
				v32.z = pZ1;
				b1 = 3;
			}
			var d3 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d3 < mind1) {
				mini1 = b1 << 1;
				mind1 = d3;
				var v33 = out;
				minvX1 = v33.x;
				minvY1 = v33.y;
				minvZ1 = v33.z;
			}
		}
		if(d31 < 0) {
			var v111;
			var v1X4;
			var v1Y4;
			var v1Z4;
			var v210;
			var v2X4;
			var v2Y4;
			var v2Z4;
			var v35 = vec1;
			v1X4 = v35.x;
			v1Y4 = v35.y;
			v1Z4 = v35.z;
			var v36 = vec3;
			v2X4 = v36.x;
			v2Y4 = v36.y;
			v2Z4 = v36.z;
			var v124;
			var v12X4;
			var v12Y4;
			var v12Z4;
			v12X4 = v2X4 - v1X4;
			v12Y4 = v2Y4 - v1Y4;
			v12Z4 = v2Z4 - v1Z4;
			var d4 = v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4;
			var t2 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
			t2 = -t2 / d4;
			var b2;
			if(t2 < 0) {
				var v37 = out;
				v37.x = v1X4;
				v37.y = v1Y4;
				v37.z = v1Z4;
				b2 = 1;
			} else if(t2 > 1) {
				var v38 = out;
				v38.x = v2X4;
				v38.y = v2Y4;
				v38.z = v2Z4;
				b2 = 2;
			} else {
				var p2;
				var pX2;
				var pY2;
				var pZ2;
				pX2 = v1X4 + v12X4 * t2;
				pY2 = v1Y4 + v12Y4 * t2;
				pZ2 = v1Z4 + v12Z4 * t2;
				var v39 = out;
				v39.x = pX2;
				v39.y = pY2;
				v39.z = pZ2;
				b2 = 3;
			}
			var d5 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d5 < mind1) {
				mini1 = b2 & 1 | (b2 & 2) << 1;
				mind1 = d5;
				var v40 = out;
				minvX1 = v40.x;
				minvY1 = v40.y;
				minvZ1 = v40.z;
			}
		}
		var b3;
		if(mind1 > 0) {
			var v41 = out;
			v41.x = minvX1;
			v41.y = minvY1;
			v41.z = minvZ1;
			b3 = mini1;
		} else {
			var l = nX1 * nX1 + nY1 * nY1 + nZ1 * nZ1;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX1 *= l;
			nY1 *= l;
			nZ1 *= l;
			var dn = v1X1 * nX1 + v1Y1 * nY1 + v1Z1 * nZ1;
			var l2 = nX1 * nX1 + nY1 * nY1 + nZ1 * nZ1;
			l2 = dn / l2;
			minvX1 = nX1 * l2;
			minvY1 = nY1 * l2;
			minvZ1 = nZ1 * l2;
			var v42 = out;
			v42.x = minvX1;
			v42.y = minvY1;
			v42.z = minvZ1;
			b3 = 7;
		}
		var d6 = out.x * out.x + out.y * out.y + out.z * out.z;
		mini = b3;
		mind = d6;
		var v43 = out;
		minvX = v43.x;
		minvY = v43.y;
		minvZ = v43.z;
	}
	if(d134 * sign < 0) {
		var v112;
		var v1X5;
		var v1Y5;
		var v1Z5;
		var v211;
		var v2X5;
		var v2Y5;
		var v2Z5;
		var v310;
		var v3X2;
		var v3Y2;
		var v3Z2;
		var v125;
		var v12X5;
		var v12Y5;
		var v12Z5;
		var v232;
		var v23X2;
		var v23Y2;
		var v23Z2;
		var v312;
		var v31X1;
		var v31Y1;
		var v31Z1;
		var v44 = vec1;
		v1X5 = v44.x;
		v1Y5 = v44.y;
		v1Z5 = v44.z;
		var v45 = vec3;
		v2X5 = v45.x;
		v2Y5 = v45.y;
		v2Z5 = v45.z;
		var v46 = vec4;
		v3X2 = v46.x;
		v3Y2 = v46.y;
		v3Z2 = v46.z;
		v12X5 = v2X5 - v1X5;
		v12Y5 = v2Y5 - v1Y5;
		v12Z5 = v2Z5 - v1Z5;
		v23X2 = v3X2 - v2X5;
		v23Y2 = v3Y2 - v2Y5;
		v23Z2 = v3Z2 - v2Z5;
		v31X1 = v1X5 - v3X2;
		v31Y1 = v1Y5 - v3Y2;
		v31Z1 = v1Z5 - v3Z2;
		var n2;
		var nX2;
		var nY2;
		var nZ2;
		nX2 = v12Y5 * v23Z2 - v12Z5 * v23Y2;
		nY2 = v12Z5 * v23X2 - v12X5 * v23Z2;
		nZ2 = v12X5 * v23Y2 - v12Y5 * v23X2;
		var n121;
		var n12X1;
		var n12Y1;
		var n12Z1;
		var n231;
		var n23X1;
		var n23Y1;
		var n23Z1;
		var n311;
		var n31X1;
		var n31Y1;
		var n31Z1;
		n12X1 = v12Y5 * nZ2 - v12Z5 * nY2;
		n12Y1 = v12Z5 * nX2 - v12X5 * nZ2;
		n12Z1 = v12X5 * nY2 - v12Y5 * nX2;
		n23X1 = v23Y2 * nZ2 - v23Z2 * nY2;
		n23Y1 = v23Z2 * nX2 - v23X2 * nZ2;
		n23Z1 = v23X2 * nY2 - v23Y2 * nX2;
		n31X1 = v31Y1 * nZ2 - v31Z1 * nY2;
		n31Y1 = v31Z1 * nX2 - v31X1 * nZ2;
		n31Z1 = v31X1 * nY2 - v31Y1 * nX2;
		var d121 = v1X5 * n12X1 + v1Y5 * n12Y1 + v1Z5 * n12Z1;
		var d231 = v2X5 * n23X1 + v2Y5 * n23Y1 + v2Z5 * n23Z1;
		var d311 = v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1;
		var mind2 = -1;
		var minv2;
		var minvX2;
		var minvY2;
		var minvZ2;
		var mini2 = 0;
		minvX2 = 0;
		minvY2 = 0;
		minvZ2 = 0;
		if(d121 < 0) {
			var v113;
			var v1X6;
			var v1Y6;
			var v1Z6;
			var v212;
			var v2X6;
			var v2Y6;
			var v2Z6;
			var v47 = vec1;
			v1X6 = v47.x;
			v1Y6 = v47.y;
			v1Z6 = v47.z;
			var v48 = vec3;
			v2X6 = v48.x;
			v2Y6 = v48.y;
			v2Z6 = v48.z;
			var v126;
			var v12X6;
			var v12Y6;
			var v12Z6;
			v12X6 = v2X6 - v1X6;
			v12Y6 = v2Y6 - v1Y6;
			v12Z6 = v2Z6 - v1Z6;
			var d7 = v12X6 * v12X6 + v12Y6 * v12Y6 + v12Z6 * v12Z6;
			var t3 = v12X6 * v1X6 + v12Y6 * v1Y6 + v12Z6 * v1Z6;
			t3 = -t3 / d7;
			var b4;
			if(t3 < 0) {
				var v49 = out;
				v49.x = v1X6;
				v49.y = v1Y6;
				v49.z = v1Z6;
				b4 = 1;
			} else if(t3 > 1) {
				var v50 = out;
				v50.x = v2X6;
				v50.y = v2Y6;
				v50.z = v2Z6;
				b4 = 2;
			} else {
				var p3;
				var pX3;
				var pY3;
				var pZ3;
				pX3 = v1X6 + v12X6 * t3;
				pY3 = v1Y6 + v12Y6 * t3;
				pZ3 = v1Z6 + v12Z6 * t3;
				var v51 = out;
				v51.x = pX3;
				v51.y = pY3;
				v51.z = pZ3;
				b4 = 3;
			}
			var d8 = out.x * out.x + out.y * out.y + out.z * out.z;
			mini2 = b4;
			mind2 = d8;
			var v52 = out;
			minvX2 = v52.x;
			minvY2 = v52.y;
			minvZ2 = v52.z;
		}
		if(d231 < 0) {
			var v114;
			var v1X7;
			var v1Y7;
			var v1Z7;
			var v213;
			var v2X7;
			var v2Y7;
			var v2Z7;
			var v53 = vec3;
			v1X7 = v53.x;
			v1Y7 = v53.y;
			v1Z7 = v53.z;
			var v54 = vec4;
			v2X7 = v54.x;
			v2Y7 = v54.y;
			v2Z7 = v54.z;
			var v127;
			var v12X7;
			var v12Y7;
			var v12Z7;
			v12X7 = v2X7 - v1X7;
			v12Y7 = v2Y7 - v1Y7;
			v12Z7 = v2Z7 - v1Z7;
			var d9 = v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7;
			var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
			t4 = -t4 / d9;
			var b5;
			if(t4 < 0) {
				var v55 = out;
				v55.x = v1X7;
				v55.y = v1Y7;
				v55.z = v1Z7;
				b5 = 1;
			} else if(t4 > 1) {
				var v56 = out;
				v56.x = v2X7;
				v56.y = v2Y7;
				v56.z = v2Z7;
				b5 = 2;
			} else {
				var p4;
				var pX4;
				var pY4;
				var pZ4;
				pX4 = v1X7 + v12X7 * t4;
				pY4 = v1Y7 + v12Y7 * t4;
				pZ4 = v1Z7 + v12Z7 * t4;
				var v57 = out;
				v57.x = pX4;
				v57.y = pY4;
				v57.z = pZ4;
				b5 = 3;
			}
			var d10 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind2 < 0 || d10 < mind2) {
				mini2 = b5 << 1;
				mind2 = d10;
				var v58 = out;
				minvX2 = v58.x;
				minvY2 = v58.y;
				minvZ2 = v58.z;
			}
		}
		if(d311 < 0) {
			var v115;
			var v1X8;
			var v1Y8;
			var v1Z8;
			var v214;
			var v2X8;
			var v2Y8;
			var v2Z8;
			var v59 = vec1;
			v1X8 = v59.x;
			v1Y8 = v59.y;
			v1Z8 = v59.z;
			var v60 = vec4;
			v2X8 = v60.x;
			v2Y8 = v60.y;
			v2Z8 = v60.z;
			var v128;
			var v12X8;
			var v12Y8;
			var v12Z8;
			v12X8 = v2X8 - v1X8;
			v12Y8 = v2Y8 - v1Y8;
			v12Z8 = v2Z8 - v1Z8;
			var d11 = v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8;
			var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
			t5 = -t5 / d11;
			var b6;
			if(t5 < 0) {
				var v61 = out;
				v61.x = v1X8;
				v61.y = v1Y8;
				v61.z = v1Z8;
				b6 = 1;
			} else if(t5 > 1) {
				var v62 = out;
				v62.x = v2X8;
				v62.y = v2Y8;
				v62.z = v2Z8;
				b6 = 2;
			} else {
				var p5;
				var pX5;
				var pY5;
				var pZ5;
				pX5 = v1X8 + v12X8 * t5;
				pY5 = v1Y8 + v12Y8 * t5;
				pZ5 = v1Z8 + v12Z8 * t5;
				var v63 = out;
				v63.x = pX5;
				v63.y = pY5;
				v63.z = pZ5;
				b6 = 3;
			}
			var d13 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind2 < 0 || d13 < mind2) {
				mini2 = b6 & 1 | (b6 & 2) << 1;
				mind2 = d13;
				var v64 = out;
				minvX2 = v64.x;
				minvY2 = v64.y;
				minvZ2 = v64.z;
			}
		}
		var b7;
		if(mind2 > 0) {
			var v65 = out;
			v65.x = minvX2;
			v65.y = minvY2;
			v65.z = minvZ2;
			b7 = mini2;
		} else {
			var l1 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
			if(l1 > 0) {
				l1 = 1 / Math.sqrt(l1);
			}
			nX2 *= l1;
			nY2 *= l1;
			nZ2 *= l1;
			var dn1 = v1X5 * nX2 + v1Y5 * nY2 + v1Z5 * nZ2;
			var l21 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
			l21 = dn1 / l21;
			minvX2 = nX2 * l21;
			minvY2 = nY2 * l21;
			minvZ2 = nZ2 * l21;
			var v66 = out;
			v66.x = minvX2;
			v66.y = minvY2;
			v66.z = minvZ2;
			b7 = 7;
		}
		var d14 = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d14 < mind) {
			mini = b7 & 1 | (b7 & 6) << 1;
			mind = d14;
			var v67 = out;
			minvX = v67.x;
			minvY = v67.y;
			minvZ = v67.z;
		}
	}
	if(d142 * sign < 0) {
		var v116;
		var v1X9;
		var v1Y9;
		var v1Z9;
		var v215;
		var v2X9;
		var v2Y9;
		var v2Z9;
		var v313;
		var v3X3;
		var v3Y3;
		var v3Z3;
		var v129;
		var v12X9;
		var v12Y9;
		var v12Z9;
		var v233;
		var v23X3;
		var v23Y3;
		var v23Z3;
		var v314;
		var v31X2;
		var v31Y2;
		var v31Z2;
		var v68 = vec1;
		v1X9 = v68.x;
		v1Y9 = v68.y;
		v1Z9 = v68.z;
		var v69 = vec2;
		v2X9 = v69.x;
		v2Y9 = v69.y;
		v2Z9 = v69.z;
		var v70 = vec4;
		v3X3 = v70.x;
		v3Y3 = v70.y;
		v3Z3 = v70.z;
		v12X9 = v2X9 - v1X9;
		v12Y9 = v2Y9 - v1Y9;
		v12Z9 = v2Z9 - v1Z9;
		v23X3 = v3X3 - v2X9;
		v23Y3 = v3Y3 - v2Y9;
		v23Z3 = v3Z3 - v2Z9;
		v31X2 = v1X9 - v3X3;
		v31Y2 = v1Y9 - v3Y3;
		v31Z2 = v1Z9 - v3Z3;
		var n3;
		var nX3;
		var nY3;
		var nZ3;
		nX3 = v12Y9 * v23Z3 - v12Z9 * v23Y3;
		nY3 = v12Z9 * v23X3 - v12X9 * v23Z3;
		nZ3 = v12X9 * v23Y3 - v12Y9 * v23X3;
		var n122;
		var n12X2;
		var n12Y2;
		var n12Z2;
		var n232;
		var n23X2;
		var n23Y2;
		var n23Z2;
		var n312;
		var n31X2;
		var n31Y2;
		var n31Z2;
		n12X2 = v12Y9 * nZ3 - v12Z9 * nY3;
		n12Y2 = v12Z9 * nX3 - v12X9 * nZ3;
		n12Z2 = v12X9 * nY3 - v12Y9 * nX3;
		n23X2 = v23Y3 * nZ3 - v23Z3 * nY3;
		n23Y2 = v23Z3 * nX3 - v23X3 * nZ3;
		n23Z2 = v23X3 * nY3 - v23Y3 * nX3;
		n31X2 = v31Y2 * nZ3 - v31Z2 * nY3;
		n31Y2 = v31Z2 * nX3 - v31X2 * nZ3;
		n31Z2 = v31X2 * nY3 - v31Y2 * nX3;
		var d122 = v1X9 * n12X2 + v1Y9 * n12Y2 + v1Z9 * n12Z2;
		var d232 = v2X9 * n23X2 + v2Y9 * n23Y2 + v2Z9 * n23Z2;
		var d312 = v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2;
		var mind3 = -1;
		var minv3;
		var minvX3;
		var minvY3;
		var minvZ3;
		var mini3 = 0;
		minvX3 = 0;
		minvY3 = 0;
		minvZ3 = 0;
		if(d122 < 0) {
			var v117;
			var v1X10;
			var v1Y10;
			var v1Z10;
			var v216;
			var v2X10;
			var v2Y10;
			var v2Z10;
			var v71 = vec1;
			v1X10 = v71.x;
			v1Y10 = v71.y;
			v1Z10 = v71.z;
			var v72 = vec2;
			v2X10 = v72.x;
			v2Y10 = v72.y;
			v2Z10 = v72.z;
			var v1210;
			var v12X10;
			var v12Y10;
			var v12Z10;
			v12X10 = v2X10 - v1X10;
			v12Y10 = v2Y10 - v1Y10;
			v12Z10 = v2Z10 - v1Z10;
			var d15 = v12X10 * v12X10 + v12Y10 * v12Y10 + v12Z10 * v12Z10;
			var t6 = v12X10 * v1X10 + v12Y10 * v1Y10 + v12Z10 * v1Z10;
			t6 = -t6 / d15;
			var b8;
			if(t6 < 0) {
				var v73 = out;
				v73.x = v1X10;
				v73.y = v1Y10;
				v73.z = v1Z10;
				b8 = 1;
			} else if(t6 > 1) {
				var v74 = out;
				v74.x = v2X10;
				v74.y = v2Y10;
				v74.z = v2Z10;
				b8 = 2;
			} else {
				var p6;
				var pX6;
				var pY6;
				var pZ6;
				pX6 = v1X10 + v12X10 * t6;
				pY6 = v1Y10 + v12Y10 * t6;
				pZ6 = v1Z10 + v12Z10 * t6;
				var v75 = out;
				v75.x = pX6;
				v75.y = pY6;
				v75.z = pZ6;
				b8 = 3;
			}
			var d16 = out.x * out.x + out.y * out.y + out.z * out.z;
			mini3 = b8;
			mind3 = d16;
			var v76 = out;
			minvX3 = v76.x;
			minvY3 = v76.y;
			minvZ3 = v76.z;
		}
		if(d232 < 0) {
			var v118;
			var v1X11;
			var v1Y11;
			var v1Z11;
			var v217;
			var v2X11;
			var v2Y11;
			var v2Z11;
			var v77 = vec2;
			v1X11 = v77.x;
			v1Y11 = v77.y;
			v1Z11 = v77.z;
			var v78 = vec4;
			v2X11 = v78.x;
			v2Y11 = v78.y;
			v2Z11 = v78.z;
			var v1211;
			var v12X11;
			var v12Y11;
			var v12Z11;
			v12X11 = v2X11 - v1X11;
			v12Y11 = v2Y11 - v1Y11;
			v12Z11 = v2Z11 - v1Z11;
			var d17 = v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11;
			var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
			t7 = -t7 / d17;
			var b9;
			if(t7 < 0) {
				var v79 = out;
				v79.x = v1X11;
				v79.y = v1Y11;
				v79.z = v1Z11;
				b9 = 1;
			} else if(t7 > 1) {
				var v80 = out;
				v80.x = v2X11;
				v80.y = v2Y11;
				v80.z = v2Z11;
				b9 = 2;
			} else {
				var p7;
				var pX7;
				var pY7;
				var pZ7;
				pX7 = v1X11 + v12X11 * t7;
				pY7 = v1Y11 + v12Y11 * t7;
				pZ7 = v1Z11 + v12Z11 * t7;
				var v81 = out;
				v81.x = pX7;
				v81.y = pY7;
				v81.z = pZ7;
				b9 = 3;
			}
			var d18 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind3 < 0 || d18 < mind3) {
				mini3 = b9 << 1;
				mind3 = d18;
				var v82 = out;
				minvX3 = v82.x;
				minvY3 = v82.y;
				minvZ3 = v82.z;
			}
		}
		if(d312 < 0) {
			var v119;
			var v1X12;
			var v1Y12;
			var v1Z12;
			var v218;
			var v2X12;
			var v2Y12;
			var v2Z12;
			var v83 = vec1;
			v1X12 = v83.x;
			v1Y12 = v83.y;
			v1Z12 = v83.z;
			var v84 = vec4;
			v2X12 = v84.x;
			v2Y12 = v84.y;
			v2Z12 = v84.z;
			var v1212;
			var v12X12;
			var v12Y12;
			var v12Z12;
			v12X12 = v2X12 - v1X12;
			v12Y12 = v2Y12 - v1Y12;
			v12Z12 = v2Z12 - v1Z12;
			var d19 = v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12;
			var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
			t8 = -t8 / d19;
			var b10;
			if(t8 < 0) {
				var v85 = out;
				v85.x = v1X12;
				v85.y = v1Y12;
				v85.z = v1Z12;
				b10 = 1;
			} else if(t8 > 1) {
				var v86 = out;
				v86.x = v2X12;
				v86.y = v2Y12;
				v86.z = v2Z12;
				b10 = 2;
			} else {
				var p8;
				var pX8;
				var pY8;
				var pZ8;
				pX8 = v1X12 + v12X12 * t8;
				pY8 = v1Y12 + v12Y12 * t8;
				pZ8 = v1Z12 + v12Z12 * t8;
				var v87 = out;
				v87.x = pX8;
				v87.y = pY8;
				v87.z = pZ8;
				b10 = 3;
			}
			var d20 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind3 < 0 || d20 < mind3) {
				mini3 = b10 & 1 | (b10 & 2) << 1;
				mind3 = d20;
				var v88 = out;
				minvX3 = v88.x;
				minvY3 = v88.y;
				minvZ3 = v88.z;
			}
		}
		var b11;
		if(mind3 > 0) {
			var v89 = out;
			v89.x = minvX3;
			v89.y = minvY3;
			v89.z = minvZ3;
			b11 = mini3;
		} else {
			var l3 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
			if(l3 > 0) {
				l3 = 1 / Math.sqrt(l3);
			}
			nX3 *= l3;
			nY3 *= l3;
			nZ3 *= l3;
			var dn2 = v1X9 * nX3 + v1Y9 * nY3 + v1Z9 * nZ3;
			var l22 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
			l22 = dn2 / l22;
			minvX3 = nX3 * l22;
			minvY3 = nY3 * l22;
			minvZ3 = nZ3 * l22;
			var v90 = out;
			v90.x = minvX3;
			v90.y = minvY3;
			v90.z = minvZ3;
			b11 = 7;
		}
		var d21 = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d21 < mind) {
			mini = b11 & 3 | (b11 & 4) << 1;
			mind = d21;
			var v91 = out;
			minvX = v91.x;
			minvY = v91.y;
			minvZ = v91.z;
		}
	}
	if(d243 * sign < 0) {
		var v120;
		var v1X13;
		var v1Y13;
		var v1Z13;
		var v219;
		var v2X13;
		var v2Y13;
		var v2Z13;
		var v315;
		var v3X4;
		var v3Y4;
		var v3Z4;
		var v1213;
		var v12X13;
		var v12Y13;
		var v12Z13;
		var v234;
		var v23X4;
		var v23Y4;
		var v23Z4;
		var v316;
		var v31X3;
		var v31Y3;
		var v31Z3;
		var v92 = vec2;
		v1X13 = v92.x;
		v1Y13 = v92.y;
		v1Z13 = v92.z;
		var v93 = vec3;
		v2X13 = v93.x;
		v2Y13 = v93.y;
		v2Z13 = v93.z;
		var v94 = vec4;
		v3X4 = v94.x;
		v3Y4 = v94.y;
		v3Z4 = v94.z;
		v12X13 = v2X13 - v1X13;
		v12Y13 = v2Y13 - v1Y13;
		v12Z13 = v2Z13 - v1Z13;
		v23X4 = v3X4 - v2X13;
		v23Y4 = v3Y4 - v2Y13;
		v23Z4 = v3Z4 - v2Z13;
		v31X3 = v1X13 - v3X4;
		v31Y3 = v1Y13 - v3Y4;
		v31Z3 = v1Z13 - v3Z4;
		var n4;
		var nX4;
		var nY4;
		var nZ4;
		nX4 = v12Y13 * v23Z4 - v12Z13 * v23Y4;
		nY4 = v12Z13 * v23X4 - v12X13 * v23Z4;
		nZ4 = v12X13 * v23Y4 - v12Y13 * v23X4;
		var n124;
		var n12X3;
		var n12Y3;
		var n12Z3;
		var n233;
		var n23X3;
		var n23Y3;
		var n23Z3;
		var n313;
		var n31X3;
		var n31Y3;
		var n31Z3;
		n12X3 = v12Y13 * nZ4 - v12Z13 * nY4;
		n12Y3 = v12Z13 * nX4 - v12X13 * nZ4;
		n12Z3 = v12X13 * nY4 - v12Y13 * nX4;
		n23X3 = v23Y4 * nZ4 - v23Z4 * nY4;
		n23Y3 = v23Z4 * nX4 - v23X4 * nZ4;
		n23Z3 = v23X4 * nY4 - v23Y4 * nX4;
		n31X3 = v31Y3 * nZ4 - v31Z3 * nY4;
		n31Y3 = v31Z3 * nX4 - v31X3 * nZ4;
		n31Z3 = v31X3 * nY4 - v31Y3 * nX4;
		var d124 = v1X13 * n12X3 + v1Y13 * n12Y3 + v1Z13 * n12Z3;
		var d233 = v2X13 * n23X3 + v2Y13 * n23Y3 + v2Z13 * n23Z3;
		var d313 = v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3;
		var mind4 = -1;
		var minv4;
		var minvX4;
		var minvY4;
		var minvZ4;
		var mini4 = 0;
		minvX4 = 0;
		minvY4 = 0;
		minvZ4 = 0;
		if(d124 < 0) {
			var v130;
			var v1X14;
			var v1Y14;
			var v1Z14;
			var v220;
			var v2X14;
			var v2Y14;
			var v2Z14;
			var v95 = vec2;
			v1X14 = v95.x;
			v1Y14 = v95.y;
			v1Z14 = v95.z;
			var v96 = vec3;
			v2X14 = v96.x;
			v2Y14 = v96.y;
			v2Z14 = v96.z;
			var v1214;
			var v12X14;
			var v12Y14;
			var v12Z14;
			v12X14 = v2X14 - v1X14;
			v12Y14 = v2Y14 - v1Y14;
			v12Z14 = v2Z14 - v1Z14;
			var d22 = v12X14 * v12X14 + v12Y14 * v12Y14 + v12Z14 * v12Z14;
			var t9 = v12X14 * v1X14 + v12Y14 * v1Y14 + v12Z14 * v1Z14;
			t9 = -t9 / d22;
			var b12;
			if(t9 < 0) {
				var v97 = out;
				v97.x = v1X14;
				v97.y = v1Y14;
				v97.z = v1Z14;
				b12 = 1;
			} else if(t9 > 1) {
				var v98 = out;
				v98.x = v2X14;
				v98.y = v2Y14;
				v98.z = v2Z14;
				b12 = 2;
			} else {
				var p9;
				var pX9;
				var pY9;
				var pZ9;
				pX9 = v1X14 + v12X14 * t9;
				pY9 = v1Y14 + v12Y14 * t9;
				pZ9 = v1Z14 + v12Z14 * t9;
				var v99 = out;
				v99.x = pX9;
				v99.y = pY9;
				v99.z = pZ9;
				b12 = 3;
			}
			var d24 = out.x * out.x + out.y * out.y + out.z * out.z;
			mini4 = b12;
			mind4 = d24;
			var v100 = out;
			minvX4 = v100.x;
			minvY4 = v100.y;
			minvZ4 = v100.z;
		}
		if(d233 < 0) {
			var v131;
			var v1X15;
			var v1Y15;
			var v1Z15;
			var v221;
			var v2X15;
			var v2Y15;
			var v2Z15;
			var v101 = vec3;
			v1X15 = v101.x;
			v1Y15 = v101.y;
			v1Z15 = v101.z;
			var v102 = vec4;
			v2X15 = v102.x;
			v2Y15 = v102.y;
			v2Z15 = v102.z;
			var v1215;
			var v12X15;
			var v12Y15;
			var v12Z15;
			v12X15 = v2X15 - v1X15;
			v12Y15 = v2Y15 - v1Y15;
			v12Z15 = v2Z15 - v1Z15;
			var d25 = v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15;
			var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
			t10 = -t10 / d25;
			var b13;
			if(t10 < 0) {
				var v103 = out;
				v103.x = v1X15;
				v103.y = v1Y15;
				v103.z = v1Z15;
				b13 = 1;
			} else if(t10 > 1) {
				var v104 = out;
				v104.x = v2X15;
				v104.y = v2Y15;
				v104.z = v2Z15;
				b13 = 2;
			} else {
				var p10;
				var pX10;
				var pY10;
				var pZ10;
				pX10 = v1X15 + v12X15 * t10;
				pY10 = v1Y15 + v12Y15 * t10;
				pZ10 = v1Z15 + v12Z15 * t10;
				var v105 = out;
				v105.x = pX10;
				v105.y = pY10;
				v105.z = pZ10;
				b13 = 3;
			}
			var d26 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind4 < 0 || d26 < mind4) {
				mini4 = b13 << 1;
				mind4 = d26;
				var v106 = out;
				minvX4 = v106.x;
				minvY4 = v106.y;
				minvZ4 = v106.z;
			}
		}
		if(d313 < 0) {
			var v132;
			var v1X16;
			var v1Y16;
			var v1Z16;
			var v222;
			var v2X16;
			var v2Y16;
			var v2Z16;
			var v107 = vec2;
			v1X16 = v107.x;
			v1Y16 = v107.y;
			v1Z16 = v107.z;
			var v108 = vec4;
			v2X16 = v108.x;
			v2Y16 = v108.y;
			v2Z16 = v108.z;
			var v1216;
			var v12X16;
			var v12Y16;
			var v12Z16;
			v12X16 = v2X16 - v1X16;
			v12Y16 = v2Y16 - v1Y16;
			v12Z16 = v2Z16 - v1Z16;
			var d27 = v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16;
			var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
			t11 = -t11 / d27;
			var b14;
			if(t11 < 0) {
				var v109 = out;
				v109.x = v1X16;
				v109.y = v1Y16;
				v109.z = v1Z16;
				b14 = 1;
			} else if(t11 > 1) {
				var v133 = out;
				v133.x = v2X16;
				v133.y = v2Y16;
				v133.z = v2Z16;
				b14 = 2;
			} else {
				var p11;
				var pX11;
				var pY11;
				var pZ11;
				pX11 = v1X16 + v12X16 * t11;
				pY11 = v1Y16 + v12Y16 * t11;
				pZ11 = v1Z16 + v12Z16 * t11;
				var v134 = out;
				v134.x = pX11;
				v134.y = pY11;
				v134.z = pZ11;
				b14 = 3;
			}
			var d28 = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind4 < 0 || d28 < mind4) {
				mini4 = b14 & 1 | (b14 & 2) << 1;
				mind4 = d28;
				var v135 = out;
				minvX4 = v135.x;
				minvY4 = v135.y;
				minvZ4 = v135.z;
			}
		}
		var b15;
		if(mind4 > 0) {
			var v136 = out;
			v136.x = minvX4;
			v136.y = minvY4;
			v136.z = minvZ4;
			b15 = mini4;
		} else {
			var l4 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
			if(l4 > 0) {
				l4 = 1 / Math.sqrt(l4);
			}
			nX4 *= l4;
			nY4 *= l4;
			nZ4 *= l4;
			var dn3 = v1X13 * nX4 + v1Y13 * nY4 + v1Z13 * nZ4;
			var l23 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
			l23 = dn3 / l23;
			minvX4 = nX4 * l23;
			minvY4 = nY4 * l23;
			minvZ4 = nZ4 * l23;
			var v137 = out;
			v137.x = minvX4;
			v137.y = minvY4;
			v137.z = minvZ4;
			b15 = 7;
		}
		var d29 = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d29 < mind) {
			mini = b15 << 1;
			mind = d29;
			var v138 = out;
			minvX = v138.x;
			minvY = v138.y;
			minvZ = v138.z;
		}
	}
	if(mind > 0) {
		var v139 = out;
		v139.x = minvX;
		v139.y = minvY;
		v139.z = minvZ;
		return mini;
	}
	out.zero();
	return 15;
};
var oimo_common_Mat3 = function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
	if(e22 == null) {
		e22 = 1;
	}
	if(e21 == null) {
		e21 = 0;
	}
	if(e20 == null) {
		e20 = 0;
	}
	if(e12 == null) {
		e12 = 0;
	}
	if(e11 == null) {
		e11 = 1;
	}
	if(e10 == null) {
		e10 = 0;
	}
	if(e02 == null) {
		e02 = 0;
	}
	if(e01 == null) {
		e01 = 0;
	}
	if(e00 == null) {
		e00 = 1;
	}
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	oimo_common_Mat3.numCreations++;
};
oimo_common_Mat3.__name__ = true;
oimo_common_Mat3.prototype = {
	init: function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		return this;
	}
	,identity: function() {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,add: function(m) {
		return new oimo_common_Mat3(this.e00 + m.e00,this.e01 + m.e01,this.e02 + m.e02,this.e10 + m.e10,this.e11 + m.e11,this.e12 + m.e12,this.e20 + m.e20,this.e21 + m.e21,this.e22 + m.e22);
	}
	,sub: function(m) {
		return new oimo_common_Mat3(this.e00 - m.e00,this.e01 - m.e01,this.e02 - m.e02,this.e10 - m.e10,this.e11 - m.e11,this.e12 - m.e12,this.e20 - m.e20,this.e21 - m.e21,this.e22 - m.e22);
	}
	,scale: function(s) {
		return new oimo_common_Mat3(this.e00 * s,this.e01 * s,this.e02 * s,this.e10 * s,this.e11 * s,this.e12 * s,this.e20 * s,this.e21 * s,this.e22 * s);
	}
	,mul: function(m) {
		return new oimo_common_Mat3(this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20,this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21,this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22,this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20,this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21,this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22,this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20,this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21,this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22);
	}
	,addEq: function(m) {
		var t00 = this.e00 + m.e00;
		var t01 = this.e01 + m.e01;
		var t02 = this.e02 + m.e02;
		var t10 = this.e10 + m.e10;
		var t11 = this.e11 + m.e11;
		var t12 = this.e12 + m.e12;
		var t20 = this.e20 + m.e20;
		var t21 = this.e21 + m.e21;
		var t22 = this.e22 + m.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,subEq: function(m) {
		var t00 = this.e00 - m.e00;
		var t01 = this.e01 - m.e01;
		var t02 = this.e02 - m.e02;
		var t10 = this.e10 - m.e10;
		var t11 = this.e11 - m.e11;
		var t12 = this.e12 - m.e12;
		var t20 = this.e20 - m.e20;
		var t21 = this.e21 - m.e21;
		var t22 = this.e22 - m.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,scaleEq: function(s) {
		var t00 = this.e00 * s;
		var t01 = this.e01 * s;
		var t02 = this.e02 * s;
		var t10 = this.e10 * s;
		var t11 = this.e11 * s;
		var t12 = this.e12 * s;
		var t20 = this.e20 * s;
		var t21 = this.e21 * s;
		var t22 = this.e22 * s;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,mulEq: function(m) {
		var t00 = this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20;
		var t01 = this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21;
		var t02 = this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22;
		var t10 = this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20;
		var t11 = this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21;
		var t12 = this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22;
		var t20 = this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20;
		var t21 = this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21;
		var t22 = this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,prependScale: function(sx,sy,sz) {
		return new oimo_common_Mat3(this.e00 * sx,this.e01 * sx,this.e02 * sx,this.e10 * sy,this.e11 * sy,this.e12 * sy,this.e20 * sz,this.e21 * sz,this.e22 * sz);
	}
	,appendScale: function(sx,sy,sz) {
		return new oimo_common_Mat3(this.e00 * sx,this.e01 * sy,this.e02 * sz,this.e10 * sx,this.e11 * sy,this.e12 * sz,this.e20 * sx,this.e21 * sy,this.e22 * sz);
	}
	,prependRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat3(r00 * this.e00 + r01 * this.e10 + r02 * this.e20,r00 * this.e01 + r01 * this.e11 + r02 * this.e21,r00 * this.e02 + r01 * this.e12 + r02 * this.e22,r10 * this.e00 + r11 * this.e10 + r12 * this.e20,r10 * this.e01 + r11 * this.e11 + r12 * this.e21,r10 * this.e02 + r11 * this.e12 + r12 * this.e22,r20 * this.e00 + r21 * this.e10 + r22 * this.e20,r20 * this.e01 + r21 * this.e11 + r22 * this.e21,r20 * this.e02 + r21 * this.e12 + r22 * this.e22);
	}
	,appendRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat3(this.e00 * r00 + this.e01 * r10 + this.e02 * r20,this.e00 * r01 + this.e01 * r11 + this.e02 * r21,this.e00 * r02 + this.e01 * r12 + this.e02 * r22,this.e10 * r00 + this.e11 * r10 + this.e12 * r20,this.e10 * r01 + this.e11 * r11 + this.e12 * r21,this.e10 * r02 + this.e11 * r12 + this.e12 * r22,this.e20 * r00 + this.e21 * r10 + this.e22 * r20,this.e20 * r01 + this.e21 * r11 + this.e22 * r21,this.e20 * r02 + this.e21 * r12 + this.e22 * r22);
	}
	,prependScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sx;
		var t02 = this.e02 * sx;
		var t10 = this.e10 * sy;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sy;
		var t20 = this.e20 * sz;
		var t21 = this.e21 * sz;
		var t22 = this.e22 * sz;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,appendScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sy;
		var t02 = this.e02 * sz;
		var t10 = this.e10 * sx;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sz;
		var t20 = this.e20 * sx;
		var t21 = this.e21 * sy;
		var t22 = this.e22 * sz;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,prependRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = r00 * this.e00 + r01 * this.e10 + r02 * this.e20;
		var t01 = r00 * this.e01 + r01 * this.e11 + r02 * this.e21;
		var t02 = r00 * this.e02 + r01 * this.e12 + r02 * this.e22;
		var t10 = r10 * this.e00 + r11 * this.e10 + r12 * this.e20;
		var t11 = r10 * this.e01 + r11 * this.e11 + r12 * this.e21;
		var t12 = r10 * this.e02 + r11 * this.e12 + r12 * this.e22;
		var t20 = r20 * this.e00 + r21 * this.e10 + r22 * this.e20;
		var t21 = r20 * this.e01 + r21 * this.e11 + r22 * this.e21;
		var t22 = r20 * this.e02 + r21 * this.e12 + r22 * this.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,appendRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = this.e00 * r00 + this.e01 * r10 + this.e02 * r20;
		var t01 = this.e00 * r01 + this.e01 * r11 + this.e02 * r21;
		var t02 = this.e00 * r02 + this.e01 * r12 + this.e02 * r22;
		var t10 = this.e10 * r00 + this.e11 * r10 + this.e12 * r20;
		var t11 = this.e10 * r01 + this.e11 * r11 + this.e12 * r21;
		var t12 = this.e10 * r02 + this.e11 * r12 + this.e12 * r22;
		var t20 = this.e20 * r00 + this.e21 * r10 + this.e22 * r20;
		var t21 = this.e20 * r01 + this.e21 * r11 + this.e22 * r21;
		var t22 = this.e20 * r02 + this.e21 * r12 + this.e22 * r22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,transpose: function() {
		return new oimo_common_Mat3(this.e00,this.e10,this.e20,this.e01,this.e11,this.e21,this.e02,this.e12,this.e22);
	}
	,transposeEq: function() {
		var t00 = this.e00;
		var t01 = this.e10;
		var t02 = this.e20;
		var t10 = this.e01;
		var t11 = this.e11;
		var t12 = this.e21;
		var t20 = this.e02;
		var t21 = this.e12;
		var t22 = this.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,determinant: function() {
		return this.e00 * (this.e11 * this.e22 - this.e12 * this.e21) - this.e01 * (this.e10 * this.e22 - this.e12 * this.e20) + this.e02 * (this.e10 * this.e21 - this.e11 * this.e20);
	}
	,trace: function() {
		return this.e00 + this.e11 + this.e22;
	}
	,inverse: function() {
		var d00 = this.e11 * this.e22 - this.e12 * this.e21;
		var d01 = this.e10 * this.e22 - this.e12 * this.e20;
		var d02 = this.e10 * this.e21 - this.e11 * this.e20;
		var d10 = this.e01 * this.e22 - this.e02 * this.e21;
		var d11 = this.e00 * this.e22 - this.e02 * this.e20;
		var d12 = this.e00 * this.e21 - this.e01 * this.e20;
		var d20 = this.e01 * this.e12 - this.e02 * this.e11;
		var d21 = this.e00 * this.e12 - this.e02 * this.e10;
		var d22 = this.e00 * this.e11 - this.e01 * this.e10;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		return new oimo_common_Mat3(d00 * invDet,-d10 * invDet,d20 * invDet,-d01 * invDet,d11 * invDet,-d21 * invDet,d02 * invDet,-d12 * invDet,d22 * invDet);
	}
	,inverseEq: function() {
		var d00 = this.e11 * this.e22 - this.e12 * this.e21;
		var d01 = this.e10 * this.e22 - this.e12 * this.e20;
		var d02 = this.e10 * this.e21 - this.e11 * this.e20;
		var d10 = this.e01 * this.e22 - this.e02 * this.e21;
		var d11 = this.e00 * this.e22 - this.e02 * this.e20;
		var d12 = this.e00 * this.e21 - this.e01 * this.e20;
		var d20 = this.e01 * this.e12 - this.e02 * this.e11;
		var d21 = this.e00 * this.e12 - this.e02 * this.e10;
		var d22 = this.e00 * this.e11 - this.e01 * this.e10;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		var t00 = d00 * invDet;
		var t01 = -d10 * invDet;
		var t02 = d20 * invDet;
		var t10 = -d01 * invDet;
		var t11 = d11 * invDet;
		var t12 = -d21 * invDet;
		var t20 = d02 * invDet;
		var t21 = -d12 * invDet;
		var t22 = d22 * invDet;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toArray: function(columnMajor) {
		if(columnMajor == null) {
			columnMajor = false;
		}
		if(columnMajor) {
			return [this.e00,this.e10,this.e20,this.e01,this.e11,this.e21,this.e02,this.e12,this.e22];
		} else {
			return [this.e00,this.e01,this.e02,this.e10,this.e11,this.e12,this.e20,this.e21,this.e22];
		}
	}
	,copyFrom: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		return this;
	}
	,clone: function() {
		return new oimo_common_Mat3(this.e00,this.e01,this.e02,this.e10,this.e11,this.e12,this.e20,this.e21,this.e22);
	}
	,fromQuat: function(q) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.e00 = 1 - yy - zz;
		this.e01 = xy - wz;
		this.e02 = xz + wy;
		this.e10 = xy + wz;
		this.e11 = 1 - xx - zz;
		this.e12 = yz - wx;
		this.e20 = xz - wy;
		this.e21 = yz + wx;
		this.e22 = 1 - xx - yy;
		return this;
	}
	,toQuat: function() {
		var _this = new oimo_common_Quat();
		var e00 = this.e00;
		var e11 = this.e11;
		var e22 = this.e22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			_this.w = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e21 - this.e12) * s;
			_this.y = (this.e02 - this.e20) * s;
			_this.z = (this.e10 - this.e01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				_this.x = 0.5 * s;
				s = 0.5 / s;
				_this.y = (this.e01 + this.e10) * s;
				_this.z = (this.e02 + this.e20) * s;
				_this.w = (this.e21 - this.e12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				_this.z = 0.5 * s;
				s = 0.5 / s;
				_this.x = (this.e02 + this.e20) * s;
				_this.y = (this.e12 + this.e21) * s;
				_this.w = (this.e10 - this.e01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			_this.y = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e01 + this.e10) * s;
			_this.z = (this.e12 + this.e21) * s;
			_this.w = (this.e02 - this.e20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			_this.z = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e02 + this.e20) * s;
			_this.y = (this.e12 + this.e21) * s;
			_this.w = (this.e10 - this.e01) * s;
		}
		return _this;
	}
	,fromEulerXyz: function(eulerAngles) {
		var sx = Math.sin(eulerAngles.x);
		var sy = Math.sin(eulerAngles.y);
		var sz = Math.sin(eulerAngles.z);
		var cx = Math.cos(eulerAngles.x);
		var cy = Math.cos(eulerAngles.y);
		var cz = Math.cos(eulerAngles.z);
		var t00 = cy * cz;
		var t01 = -cy * sz;
		var t02 = sy;
		var t10 = cx * sz + cz * sx * sy;
		var t11 = cx * cz - sx * sy * sz;
		var t12 = -cy * sx;
		var t20 = sx * sz - cx * cz * sy;
		var t21 = cz * sx + cx * sy * sz;
		var t22 = cx * cy;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toEulerXyz: function() {
		var sy = this.e02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(this.e21,this.e11);
			return new oimo_common_Vec3(xSubZ * 0.5,-1.570796326794895,-xSubZ * 0.5);
		}
		if(sy >= 1) {
			var xAddZ = Math.atan2(this.e21,this.e11);
			return new oimo_common_Vec3(xAddZ * 0.5,1.570796326794895,xAddZ * 0.5);
		}
		var y = Math.asin(sy);
		var x = Math.atan2(-this.e12,this.e22);
		var z = Math.atan2(-this.e01,this.e00);
		return new oimo_common_Vec3(x,y,z);
	}
	,getRow: function(index) {
		if(index == 0) {
			return new oimo_common_Vec3(this.e00,this.e01,this.e02);
		} else if(index == 1) {
			return new oimo_common_Vec3(this.e10,this.e11,this.e12);
		} else if(index == 2) {
			return new oimo_common_Vec3(this.e20,this.e21,this.e22);
		} else {
			return null;
		}
	}
	,getCol: function(index) {
		if(index == 0) {
			return new oimo_common_Vec3(this.e00,this.e10,this.e20);
		} else if(index == 1) {
			return new oimo_common_Vec3(this.e01,this.e11,this.e21);
		} else if(index == 2) {
			return new oimo_common_Vec3(this.e02,this.e12,this.e22);
		} else {
			return null;
		}
	}
	,getRowTo: function(index,dst) {
		if(index == 0) {
			dst.init(this.e00,this.e01,this.e02);
		} else if(index == 1) {
			dst.init(this.e10,this.e11,this.e12);
		} else if(index == 2) {
			dst.init(this.e20,this.e21,this.e22);
		} else {
			dst.zero();
		}
	}
	,getColTo: function(index,dst) {
		if(index == 0) {
			dst.init(this.e00,this.e10,this.e20);
		} else if(index == 1) {
			dst.init(this.e01,this.e11,this.e21);
		} else if(index == 2) {
			dst.init(this.e02,this.e12,this.e22);
		} else {
			dst.zero();
		}
	}
	,fromRows: function(row0,row1,row2) {
		var t00 = row0.x;
		var t01 = row0.y;
		var t02 = row0.z;
		var t10 = row1.x;
		var t11 = row1.y;
		var t12 = row1.z;
		var t20 = row2.x;
		var t21 = row2.y;
		var t22 = row2.z;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,fromCols: function(col0,col1,col2) {
		var t00 = col0.x;
		var t01 = col1.x;
		var t02 = col2.x;
		var t10 = col0.y;
		var t11 = col1.y;
		var t12 = col2.y;
		var t20 = col0.z;
		var t21 = col1.z;
		var t22 = col2.z;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toString: function() {
		return "Mat3[" + (this.e00 > 0 ? (this.e00 * 10000000 + 0.5 | 0) / 10000000 : (this.e00 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e01 > 0 ? (this.e01 * 10000000 + 0.5 | 0) / 10000000 : (this.e01 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e02 > 0 ? (this.e02 * 10000000 + 0.5 | 0) / 10000000 : (this.e02 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "     " + (this.e10 > 0 ? (this.e10 * 10000000 + 0.5 | 0) / 10000000 : (this.e10 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e11 > 0 ? (this.e11 * 10000000 + 0.5 | 0) / 10000000 : (this.e11 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e12 > 0 ? (this.e12 * 10000000 + 0.5 | 0) / 10000000 : (this.e12 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "     " + (this.e20 > 0 ? (this.e20 * 10000000 + 0.5 | 0) / 10000000 : (this.e20 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e21 > 0 ? (this.e21 * 10000000 + 0.5 | 0) / 10000000 : (this.e21 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e22 > 0 ? (this.e22 * 10000000 + 0.5 | 0) / 10000000 : (this.e22 * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
};
var oimo_common_Mat4 = function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
	if(e33 == null) {
		e33 = 1;
	}
	if(e32 == null) {
		e32 = 0;
	}
	if(e31 == null) {
		e31 = 0;
	}
	if(e30 == null) {
		e30 = 0;
	}
	if(e23 == null) {
		e23 = 0;
	}
	if(e22 == null) {
		e22 = 1;
	}
	if(e21 == null) {
		e21 = 0;
	}
	if(e20 == null) {
		e20 = 0;
	}
	if(e13 == null) {
		e13 = 0;
	}
	if(e12 == null) {
		e12 = 0;
	}
	if(e11 == null) {
		e11 = 1;
	}
	if(e10 == null) {
		e10 = 0;
	}
	if(e03 == null) {
		e03 = 0;
	}
	if(e02 == null) {
		e02 = 0;
	}
	if(e01 == null) {
		e01 = 0;
	}
	if(e00 == null) {
		e00 = 1;
	}
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e03 = e03;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e30 = e30;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;
	oimo_common_Mat4.numCreations++;
};
oimo_common_Mat4.__name__ = true;
oimo_common_Mat4.prototype = {
	init: function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e03 = e03;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = e13;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = e23;
		this.e30 = e30;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = e33;
		return this;
	}
	,identity: function() {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t03 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t13 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		var t23 = 0;
		var t30 = 0;
		var t31 = 0;
		var t32 = 0;
		var t33 = 1;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,add: function(m) {
		return new oimo_common_Mat4(this.e00 + m.e00,this.e01 + m.e01,this.e02 + m.e02,this.e03 + m.e03,this.e10 + m.e10,this.e11 + m.e11,this.e12 + m.e12,this.e13 + m.e13,this.e20 + m.e20,this.e21 + m.e21,this.e22 + m.e22,this.e23 + m.e23,this.e30 + m.e30,this.e31 + m.e31,this.e32 + m.e32,this.e33 + m.e33);
	}
	,sub: function(m) {
		return new oimo_common_Mat4(this.e00 - m.e00,this.e01 - m.e01,this.e02 - m.e02,this.e03 - m.e03,this.e10 - m.e10,this.e11 - m.e11,this.e12 - m.e12,this.e13 - m.e13,this.e20 - m.e20,this.e21 - m.e21,this.e22 - m.e22,this.e23 - m.e23,this.e30 - m.e30,this.e31 - m.e31,this.e32 - m.e32,this.e33 - m.e33);
	}
	,scale: function(s) {
		return new oimo_common_Mat4(this.e00 * s,this.e01 * s,this.e02 * s,this.e03 * s,this.e10 * s,this.e11 * s,this.e12 * s,this.e13 * s,this.e20 * s,this.e21 * s,this.e22 * s,this.e23 * s,this.e30 * s,this.e31 * s,this.e32 * s,this.e33 * s);
	}
	,mul: function(m) {
		return new oimo_common_Mat4(this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20 + this.e03 * m.e30,this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21 + this.e03 * m.e31,this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22 + this.e03 * m.e32,this.e00 * m.e03 + this.e01 * m.e13 + this.e02 * m.e23 + this.e03 * m.e33,this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20 + this.e13 * m.e30,this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21 + this.e13 * m.e31,this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22 + this.e13 * m.e32,this.e10 * m.e03 + this.e11 * m.e13 + this.e12 * m.e23 + this.e13 * m.e33,this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20 + this.e23 * m.e30,this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21 + this.e23 * m.e31,this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22 + this.e23 * m.e32,this.e20 * m.e03 + this.e21 * m.e13 + this.e22 * m.e23 + this.e23 * m.e33,this.e30 * m.e00 + this.e31 * m.e10 + this.e32 * m.e20 + this.e33 * m.e30,this.e30 * m.e01 + this.e31 * m.e11 + this.e32 * m.e21 + this.e33 * m.e31,this.e30 * m.e02 + this.e31 * m.e12 + this.e32 * m.e22 + this.e33 * m.e32,this.e30 * m.e03 + this.e31 * m.e13 + this.e32 * m.e23 + this.e33 * m.e33);
	}
	,addEq: function(m) {
		var t00 = this.e00 + m.e00;
		var t01 = this.e01 + m.e01;
		var t02 = this.e02 + m.e02;
		var t03 = this.e03 + m.e03;
		var t10 = this.e10 + m.e10;
		var t11 = this.e11 + m.e11;
		var t12 = this.e12 + m.e12;
		var t13 = this.e13 + m.e13;
		var t20 = this.e20 + m.e20;
		var t21 = this.e21 + m.e21;
		var t22 = this.e22 + m.e22;
		var t23 = this.e23 + m.e23;
		var t30 = this.e30 + m.e30;
		var t31 = this.e31 + m.e31;
		var t32 = this.e32 + m.e32;
		var t33 = this.e33 + m.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,subEq: function(m) {
		var t00 = this.e00 - m.e00;
		var t01 = this.e01 - m.e01;
		var t02 = this.e02 - m.e02;
		var t03 = this.e03 - m.e03;
		var t10 = this.e10 - m.e10;
		var t11 = this.e11 - m.e11;
		var t12 = this.e12 - m.e12;
		var t13 = this.e13 - m.e13;
		var t20 = this.e20 - m.e20;
		var t21 = this.e21 - m.e21;
		var t22 = this.e22 - m.e22;
		var t23 = this.e23 - m.e23;
		var t30 = this.e30 - m.e30;
		var t31 = this.e31 - m.e31;
		var t32 = this.e32 - m.e32;
		var t33 = this.e33 - m.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,scaleEq: function(s) {
		var t00 = this.e00 * s;
		var t01 = this.e01 * s;
		var t02 = this.e02 * s;
		var t03 = this.e03 * s;
		var t10 = this.e10 * s;
		var t11 = this.e11 * s;
		var t12 = this.e12 * s;
		var t13 = this.e13 * s;
		var t20 = this.e20 * s;
		var t21 = this.e21 * s;
		var t22 = this.e22 * s;
		var t23 = this.e23 * s;
		var t30 = this.e30 * s;
		var t31 = this.e31 * s;
		var t32 = this.e32 * s;
		var t33 = this.e33 * s;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,mulEq: function(m) {
		var t00 = this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20 + this.e03 * m.e30;
		var t01 = this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21 + this.e03 * m.e31;
		var t02 = this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22 + this.e03 * m.e32;
		var t03 = this.e00 * m.e03 + this.e01 * m.e13 + this.e02 * m.e23 + this.e03 * m.e33;
		var t10 = this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20 + this.e13 * m.e30;
		var t11 = this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21 + this.e13 * m.e31;
		var t12 = this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22 + this.e13 * m.e32;
		var t13 = this.e10 * m.e03 + this.e11 * m.e13 + this.e12 * m.e23 + this.e13 * m.e33;
		var t20 = this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20 + this.e23 * m.e30;
		var t21 = this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21 + this.e23 * m.e31;
		var t22 = this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22 + this.e23 * m.e32;
		var t23 = this.e20 * m.e03 + this.e21 * m.e13 + this.e22 * m.e23 + this.e23 * m.e33;
		var t30 = this.e30 * m.e00 + this.e31 * m.e10 + this.e32 * m.e20 + this.e33 * m.e30;
		var t31 = this.e30 * m.e01 + this.e31 * m.e11 + this.e32 * m.e21 + this.e33 * m.e31;
		var t32 = this.e30 * m.e02 + this.e31 * m.e12 + this.e32 * m.e22 + this.e33 * m.e32;
		var t33 = this.e30 * m.e03 + this.e31 * m.e13 + this.e32 * m.e23 + this.e33 * m.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,prependScale: function(sx,sy,sz) {
		return new oimo_common_Mat4(this.e00 * sx,this.e01 * sx,this.e02 * sx,this.e03 * sx,this.e10 * sy,this.e11 * sy,this.e12 * sy,this.e13 * sy,this.e20 * sz,this.e21 * sz,this.e22 * sz,this.e23 * sz,this.e30,this.e31,this.e32,this.e33);
	}
	,appendScale: function(sx,sy,sz) {
		return new oimo_common_Mat4(this.e00 * sx,this.e01 * sy,this.e02 * sz,this.e03,this.e10 * sx,this.e11 * sy,this.e12 * sz,this.e13,this.e20 * sx,this.e21 * sy,this.e22 * sz,this.e23,this.e30 * sx,this.e31 * sy,this.e32 * sz,this.e33);
	}
	,prependRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat4(r00 * this.e00 + r01 * this.e10 + r02 * this.e20,r00 * this.e01 + r01 * this.e11 + r02 * this.e21,r00 * this.e02 + r01 * this.e12 + r02 * this.e22,r00 * this.e03 + r01 * this.e13 + r02 * this.e23,r10 * this.e00 + r11 * this.e10 + r12 * this.e20,r10 * this.e01 + r11 * this.e11 + r12 * this.e21,r10 * this.e02 + r11 * this.e12 + r12 * this.e22,r10 * this.e03 + r11 * this.e13 + r12 * this.e23,r20 * this.e00 + r21 * this.e10 + r22 * this.e20,r20 * this.e01 + r21 * this.e11 + r22 * this.e21,r20 * this.e02 + r21 * this.e12 + r22 * this.e22,r20 * this.e03 + r21 * this.e13 + r22 * this.e23,this.e30,this.e31,this.e32,this.e33);
	}
	,appendRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat4(this.e00 * r00 + this.e01 * r10 + this.e02 * r20,this.e00 * r01 + this.e01 * r11 + this.e02 * r21,this.e00 * r02 + this.e01 * r12 + this.e02 * r22,this.e03,this.e10 * r00 + this.e11 * r10 + this.e12 * r20,this.e10 * r01 + this.e11 * r11 + this.e12 * r21,this.e10 * r02 + this.e11 * r12 + this.e12 * r22,this.e13,this.e20 * r00 + this.e21 * r10 + this.e22 * r20,this.e20 * r01 + this.e21 * r11 + this.e22 * r21,this.e20 * r02 + this.e21 * r12 + this.e22 * r22,this.e23,this.e30 * r00 + this.e31 * r10 + this.e32 * r20,this.e30 * r01 + this.e31 * r11 + this.e32 * r21,this.e30 * r02 + this.e31 * r12 + this.e32 * r22,this.e33);
	}
	,prependTranslation: function(tx,ty,tz) {
		return new oimo_common_Mat4(this.e00 + tx * this.e30,this.e01 + tx * this.e31,this.e02 + tx * this.e32,this.e03 + tx * this.e33,this.e10 + ty * this.e30,this.e11 + ty * this.e31,this.e12 + ty * this.e32,this.e13 + ty * this.e33,this.e20 + tz * this.e30,this.e21 + tz * this.e31,this.e22 + tz * this.e32,this.e23 + tz * this.e33,this.e30,this.e31,this.e32,this.e33);
	}
	,appendTranslation: function(tx,ty,tz) {
		return new oimo_common_Mat4(this.e00,this.e01,this.e02,this.e00 * tx + this.e01 * ty + this.e02 * tz + this.e03,this.e10,this.e11,this.e12,this.e10 * tx + this.e11 * ty + this.e12 * tz + this.e13,this.e20,this.e21,this.e22,this.e20 * tx + this.e21 * ty + this.e22 * tz + this.e23,this.e30,this.e31,this.e32,this.e30 * tx + this.e31 * ty + this.e32 * tz + this.e33);
	}
	,prependScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sx;
		var t02 = this.e02 * sx;
		var t03 = this.e03 * sx;
		var t10 = this.e10 * sy;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sy;
		var t13 = this.e13 * sy;
		var t20 = this.e20 * sz;
		var t21 = this.e21 * sz;
		var t22 = this.e22 * sz;
		var t23 = this.e23 * sz;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,appendScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sy;
		var t02 = this.e02 * sz;
		var t03 = this.e03;
		var t10 = this.e10 * sx;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sz;
		var t13 = this.e13;
		var t20 = this.e20 * sx;
		var t21 = this.e21 * sy;
		var t22 = this.e22 * sz;
		var t23 = this.e23;
		var t30 = this.e30 * sx;
		var t31 = this.e31 * sy;
		var t32 = this.e32 * sz;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,prependRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = r00 * this.e00 + r01 * this.e10 + r02 * this.e20;
		var t01 = r00 * this.e01 + r01 * this.e11 + r02 * this.e21;
		var t02 = r00 * this.e02 + r01 * this.e12 + r02 * this.e22;
		var t03 = r00 * this.e03 + r01 * this.e13 + r02 * this.e23;
		var t10 = r10 * this.e00 + r11 * this.e10 + r12 * this.e20;
		var t11 = r10 * this.e01 + r11 * this.e11 + r12 * this.e21;
		var t12 = r10 * this.e02 + r11 * this.e12 + r12 * this.e22;
		var t13 = r10 * this.e03 + r11 * this.e13 + r12 * this.e23;
		var t20 = r20 * this.e00 + r21 * this.e10 + r22 * this.e20;
		var t21 = r20 * this.e01 + r21 * this.e11 + r22 * this.e21;
		var t22 = r20 * this.e02 + r21 * this.e12 + r22 * this.e22;
		var t23 = r20 * this.e03 + r21 * this.e13 + r22 * this.e23;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,appendRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = this.e00 * r00 + this.e01 * r10 + this.e02 * r20;
		var t01 = this.e00 * r01 + this.e01 * r11 + this.e02 * r21;
		var t02 = this.e00 * r02 + this.e01 * r12 + this.e02 * r22;
		var t03 = this.e03;
		var t10 = this.e10 * r00 + this.e11 * r10 + this.e12 * r20;
		var t11 = this.e10 * r01 + this.e11 * r11 + this.e12 * r21;
		var t12 = this.e10 * r02 + this.e11 * r12 + this.e12 * r22;
		var t13 = this.e13;
		var t20 = this.e20 * r00 + this.e21 * r10 + this.e22 * r20;
		var t21 = this.e20 * r01 + this.e21 * r11 + this.e22 * r21;
		var t22 = this.e20 * r02 + this.e21 * r12 + this.e22 * r22;
		var t23 = this.e23;
		var t30 = this.e30 * r00 + this.e31 * r10 + this.e32 * r20;
		var t31 = this.e30 * r01 + this.e31 * r11 + this.e32 * r21;
		var t32 = this.e30 * r02 + this.e31 * r12 + this.e32 * r22;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,prependTranslationEq: function(tx,ty,tz) {
		var t00 = this.e00 + tx * this.e30;
		var t01 = this.e01 + tx * this.e31;
		var t02 = this.e02 + tx * this.e32;
		var t03 = this.e03 + tx * this.e33;
		var t10 = this.e10 + ty * this.e30;
		var t11 = this.e11 + ty * this.e31;
		var t12 = this.e12 + ty * this.e32;
		var t13 = this.e13 + ty * this.e33;
		var t20 = this.e20 + tz * this.e30;
		var t21 = this.e21 + tz * this.e31;
		var t22 = this.e22 + tz * this.e32;
		var t23 = this.e23 + tz * this.e33;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,appendTranslationEq: function(tx,ty,tz) {
		var t00 = this.e00;
		var t01 = this.e01;
		var t02 = this.e02;
		var t03 = this.e00 * tx + this.e01 * ty + this.e02 * tz + this.e03;
		var t10 = this.e10;
		var t11 = this.e11;
		var t12 = this.e12;
		var t13 = this.e10 * tx + this.e11 * ty + this.e12 * tz + this.e13;
		var t20 = this.e20;
		var t21 = this.e21;
		var t22 = this.e22;
		var t23 = this.e20 * tx + this.e21 * ty + this.e22 * tz + this.e23;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e30 * tx + this.e31 * ty + this.e32 * tz + this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,transpose: function() {
		return new oimo_common_Mat4(this.e00,this.e10,this.e20,this.e30,this.e01,this.e11,this.e21,this.e31,this.e02,this.e12,this.e22,this.e32,this.e03,this.e13,this.e23,this.e33);
	}
	,transposeEq: function() {
		var t00 = this.e00;
		var t01 = this.e10;
		var t02 = this.e20;
		var t03 = this.e30;
		var t10 = this.e01;
		var t11 = this.e11;
		var t12 = this.e21;
		var t13 = this.e31;
		var t20 = this.e02;
		var t21 = this.e12;
		var t22 = this.e22;
		var t23 = this.e32;
		var t30 = this.e03;
		var t31 = this.e13;
		var t32 = this.e23;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,determinant: function() {
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		return this.e00 * (this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12) - this.e01 * (this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02) + this.e02 * (this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01) - this.e03 * (this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01);
	}
	,trace: function() {
		return this.e00 + this.e11 + this.e22 + this.e33;
	}
	,inverse: function() {
		var d01_01 = this.e00 * this.e11 - this.e01 * this.e10;
		var d01_02 = this.e00 * this.e12 - this.e02 * this.e10;
		var d01_03 = this.e00 * this.e13 - this.e03 * this.e10;
		var d01_12 = this.e01 * this.e12 - this.e02 * this.e11;
		var d01_13 = this.e01 * this.e13 - this.e03 * this.e11;
		var d01_23 = this.e02 * this.e13 - this.e03 * this.e12;
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		var d00 = this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12;
		var d01 = this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02;
		var d02 = this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01;
		var d03 = this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01;
		var d10 = this.e01 * d23_23 - this.e02 * d23_13 + this.e03 * d23_12;
		var d11 = this.e00 * d23_23 - this.e02 * d23_03 + this.e03 * d23_02;
		var d12 = this.e00 * d23_13 - this.e01 * d23_03 + this.e03 * d23_01;
		var d13 = this.e00 * d23_12 - this.e01 * d23_02 + this.e02 * d23_01;
		var d20 = this.e31 * d01_23 - this.e32 * d01_13 + this.e33 * d01_12;
		var d21 = this.e30 * d01_23 - this.e32 * d01_03 + this.e33 * d01_02;
		var d22 = this.e30 * d01_13 - this.e31 * d01_03 + this.e33 * d01_01;
		var d23 = this.e30 * d01_12 - this.e31 * d01_02 + this.e32 * d01_01;
		var d30 = this.e21 * d01_23 - this.e22 * d01_13 + this.e23 * d01_12;
		var d31 = this.e20 * d01_23 - this.e22 * d01_03 + this.e23 * d01_02;
		var d32 = this.e20 * d01_13 - this.e21 * d01_03 + this.e23 * d01_01;
		var d33 = this.e20 * d01_12 - this.e21 * d01_02 + this.e22 * d01_01;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02 - this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		return new oimo_common_Mat4(d00 * invDet,-d10 * invDet,d20 * invDet,-d30 * invDet,-d01 * invDet,d11 * invDet,-d21 * invDet,d31 * invDet,d02 * invDet,-d12 * invDet,d22 * invDet,-d32 * invDet,-d03 * invDet,d13 * invDet,-d23 * invDet,d33 * invDet);
	}
	,inverseEq: function() {
		var d01_01 = this.e00 * this.e11 - this.e01 * this.e10;
		var d01_02 = this.e00 * this.e12 - this.e02 * this.e10;
		var d01_03 = this.e00 * this.e13 - this.e03 * this.e10;
		var d01_12 = this.e01 * this.e12 - this.e02 * this.e11;
		var d01_13 = this.e01 * this.e13 - this.e03 * this.e11;
		var d01_23 = this.e02 * this.e13 - this.e03 * this.e12;
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		var d00 = this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12;
		var d01 = this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02;
		var d02 = this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01;
		var d03 = this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01;
		var d10 = this.e01 * d23_23 - this.e02 * d23_13 + this.e03 * d23_12;
		var d11 = this.e00 * d23_23 - this.e02 * d23_03 + this.e03 * d23_02;
		var d12 = this.e00 * d23_13 - this.e01 * d23_03 + this.e03 * d23_01;
		var d13 = this.e00 * d23_12 - this.e01 * d23_02 + this.e02 * d23_01;
		var d20 = this.e31 * d01_23 - this.e32 * d01_13 + this.e33 * d01_12;
		var d21 = this.e30 * d01_23 - this.e32 * d01_03 + this.e33 * d01_02;
		var d22 = this.e30 * d01_13 - this.e31 * d01_03 + this.e33 * d01_01;
		var d23 = this.e30 * d01_12 - this.e31 * d01_02 + this.e32 * d01_01;
		var d30 = this.e21 * d01_23 - this.e22 * d01_13 + this.e23 * d01_12;
		var d31 = this.e20 * d01_23 - this.e22 * d01_03 + this.e23 * d01_02;
		var d32 = this.e20 * d01_13 - this.e21 * d01_03 + this.e23 * d01_01;
		var d33 = this.e20 * d01_12 - this.e21 * d01_02 + this.e22 * d01_01;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02 - this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		var t00 = d00 * invDet;
		var t01 = -d10 * invDet;
		var t02 = d20 * invDet;
		var t03 = -d30 * invDet;
		var t10 = -d01 * invDet;
		var t11 = d11 * invDet;
		var t12 = -d21 * invDet;
		var t13 = d31 * invDet;
		var t20 = d02 * invDet;
		var t21 = -d12 * invDet;
		var t22 = d22 * invDet;
		var t23 = -d32 * invDet;
		var t30 = -d03 * invDet;
		var t31 = d13 * invDet;
		var t32 = -d23 * invDet;
		var t33 = d33 * invDet;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,lookAt: function(eyeX,eyeY,eyeZ,atX,atY,atZ,upX,upY,upZ) {
		var zx = eyeX - atX;
		var zy = eyeY - atY;
		var zz = eyeZ - atZ;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = upY * zz - upZ * zy;
		var xy = upZ * zx - upX * zz;
		var xz = upX * zy - upY * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		this.e00 = xx;
		this.e01 = xy;
		this.e02 = xz;
		this.e03 = -(xx * eyeX + xy * eyeY + xz * eyeZ);
		this.e10 = yx;
		this.e11 = yy;
		this.e12 = yz;
		this.e13 = -(yx * eyeX + yy * eyeY + yz * eyeZ);
		this.e20 = zx;
		this.e21 = zy;
		this.e22 = zz;
		this.e23 = -(zx * eyeX + zy * eyeY + zz * eyeZ);
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,perspective: function(fovY,aspect,near,far) {
		var h = 1 / Math.tan(fovY * 0.5);
		var fnf = far / (near - far);
		this.e00 = h / aspect;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = h;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = fnf;
		this.e23 = near * fnf;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = -1;
		this.e33 = 0;
		return this;
	}
	,ortho: function(width,height,near,far) {
		var nf = 1 / (near - far);
		this.e00 = 2 / width;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = 2 / height;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = nf;
		this.e23 = near * nf;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,toArray: function(columnMajor) {
		if(columnMajor == null) {
			columnMajor = false;
		}
		if(columnMajor) {
			return [this.e00,this.e10,this.e20,this.e30,this.e01,this.e11,this.e21,this.e31,this.e02,this.e12,this.e22,this.e32,this.e03,this.e13,this.e23,this.e33];
		} else {
			return [this.e00,this.e01,this.e02,this.e03,this.e10,this.e11,this.e12,this.e13,this.e20,this.e21,this.e22,this.e23,this.e30,this.e31,this.e32,this.e33];
		}
	}
	,copyFrom: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e03 = m.e03;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e13 = m.e13;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		this.e23 = m.e23;
		this.e30 = m.e30;
		this.e31 = m.e31;
		this.e32 = m.e32;
		this.e33 = m.e33;
		return this;
	}
	,fromMat3: function(m) {
		var t00 = m.e00;
		var t01 = m.e01;
		var t02 = m.e02;
		var t03 = 0;
		var t10 = m.e10;
		var t11 = m.e11;
		var t12 = m.e12;
		var t13 = 0;
		var t20 = m.e20;
		var t21 = m.e21;
		var t22 = m.e22;
		var t23 = 0;
		var t30 = 0;
		var t31 = 0;
		var t32 = 0;
		var t33 = 1;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,fromTransform: function(transform) {
		var m = this;
		m.e00 = transform._rotation00;
		m.e01 = transform._rotation01;
		m.e02 = transform._rotation02;
		m.e10 = transform._rotation10;
		m.e11 = transform._rotation11;
		m.e12 = transform._rotation12;
		m.e20 = transform._rotation20;
		m.e21 = transform._rotation21;
		m.e22 = transform._rotation22;
		m.e03 = transform._positionX;
		m.e13 = transform._positionY;
		m.e23 = transform._positionZ;
		m.e30 = 0;
		m.e31 = 0;
		m.e32 = 0;
		m.e33 = 1;
		return this;
	}
	,clone: function() {
		return new oimo_common_Mat4(this.e00,this.e01,this.e02,this.e03,this.e10,this.e11,this.e12,this.e13,this.e20,this.e21,this.e22,this.e23,this.e30,this.e31,this.e32,this.e33);
	}
	,toString: function() {
		return "Mat4[" + (this.e00 > 0 ? (this.e00 * 10000000 + 0.5 | 0) / 10000000 : (this.e00 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e01 > 0 ? (this.e01 * 10000000 + 0.5 | 0) / 10000000 : (this.e01 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e02 > 0 ? (this.e02 * 10000000 + 0.5 | 0) / 10000000 : (this.e02 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e03 > 0 ? (this.e03 * 10000000 + 0.5 | 0) / 10000000 : (this.e03 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e10 > 0 ? (this.e10 * 10000000 + 0.5 | 0) / 10000000 : (this.e10 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e11 > 0 ? (this.e11 * 10000000 + 0.5 | 0) / 10000000 : (this.e11 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e12 > 0 ? (this.e12 * 10000000 + 0.5 | 0) / 10000000 : (this.e12 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e13 > 0 ? (this.e13 * 10000000 + 0.5 | 0) / 10000000 : (this.e13 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e20 > 0 ? (this.e20 * 10000000 + 0.5 | 0) / 10000000 : (this.e20 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e21 > 0 ? (this.e21 * 10000000 + 0.5 | 0) / 10000000 : (this.e21 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e22 > 0 ? (this.e22 * 10000000 + 0.5 | 0) / 10000000 : (this.e22 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e23 > 0 ? (this.e23 * 10000000 + 0.5 | 0) / 10000000 : (this.e23 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e30 > 0 ? (this.e30 * 10000000 + 0.5 | 0) / 10000000 : (this.e30 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e31 > 0 ? (this.e31 * 10000000 + 0.5 | 0) / 10000000 : (this.e31 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e32 > 0 ? (this.e32 * 10000000 + 0.5 | 0) / 10000000 : (this.e32 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e33 > 0 ? (this.e33 * 10000000 + 0.5 | 0) / 10000000 : (this.e33 * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
};
var oimo_common_MathUtil = function() { };
oimo_common_MathUtil.__name__ = true;
oimo_common_MathUtil.abs = function(x) {
	if(x > 0) {
		return x;
	} else {
		return -x;
	}
};
oimo_common_MathUtil.sin = function(x) {
	return Math.sin(x);
};
oimo_common_MathUtil.cos = function(x) {
	return Math.cos(x);
};
oimo_common_MathUtil.tan = function(x) {
	return Math.tan(x);
};
oimo_common_MathUtil.asin = function(x) {
	return Math.asin(x);
};
oimo_common_MathUtil.acos = function(x) {
	return Math.acos(x);
};
oimo_common_MathUtil.atan = function(x) {
	return Math.atan(x);
};
oimo_common_MathUtil.safeAsin = function(x) {
	if(x <= -1) {
		return -1.570796326794895;
	}
	if(x >= 1) {
		return 1.570796326794895;
	}
	return Math.asin(x);
};
oimo_common_MathUtil.safeAcos = function(x) {
	if(x <= -1) {
		return 3.14159265358979;
	}
	if(x >= 1) {
		return 0;
	}
	return Math.acos(x);
};
oimo_common_MathUtil.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
oimo_common_MathUtil.sqrt = function(x) {
	return Math.sqrt(x);
};
oimo_common_MathUtil.clamp = function(x,min,max) {
	if(x < min) {
		return min;
	} else if(x > max) {
		return max;
	} else {
		return x;
	}
};
oimo_common_MathUtil.rand = function() {
	return Math.random();
};
oimo_common_MathUtil.randIn = function(min,max) {
	return min + Math.random() * (max - min);
};
oimo_common_MathUtil.randVec3In = function(min,max) {
	return new oimo_common_Vec3(min + Math.random() * (max - min),min + Math.random() * (max - min),min + Math.random() * (max - min));
};
oimo_common_MathUtil.randVec3 = function() {
	return new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
};
var oimo_common_Pool = function() {
	var this1 = new Array(256);
	this.stackVec3 = this1;
	this.sizeVec3 = 0;
	var this2 = new Array(256);
	this.stackMat3 = this2;
	this.sizeMat3 = 0;
	var this3 = new Array(256);
	this.stackMat4 = this3;
	this.sizeMat4 = 0;
	var this4 = new Array(256);
	this.stackQuat = this4;
	this.sizeQuat = 0;
};
oimo_common_Pool.__name__ = true;
oimo_common_Pool.prototype = {
	vec3: function() {
		if(this.sizeVec3 == 0) {
			return new oimo_common_Vec3();
		} else {
			return this.stackVec3[--this.sizeVec3];
		}
	}
	,mat3: function() {
		if(this.sizeMat3 == 0) {
			return new oimo_common_Mat3();
		} else {
			return this.stackMat3[--this.sizeMat3];
		}
	}
	,mat4: function() {
		if(this.sizeMat4 == 0) {
			return new oimo_common_Mat4();
		} else {
			return this.stackMat4[--this.sizeMat4];
		}
	}
	,quat: function() {
		if(this.sizeQuat == 0) {
			return new oimo_common_Quat();
		} else {
			return this.stackQuat[--this.sizeQuat];
		}
	}
	,dispose: function(vec3,mat3,mat4,quat) {
		if(vec3 != null) {
			vec3.zero();
			if(this.sizeVec3 == this.stackVec3.length) {
				var newLength = this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g1 = 0;
				var _g = this.sizeVec3;
				while(_g1 < _g) {
					var i = _g1++;
					newArray[i] = this.stackVec3[i];
					this.stackVec3[i] = null;
				}
				this.stackVec3 = newArray;
			}
			this.stackVec3[this.sizeVec3++] = vec3;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(this.sizeMat3 == this.stackMat3.length) {
				var newLength1 = this.sizeMat3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g11 = 0;
				var _g2 = this.sizeMat3;
				while(_g11 < _g2) {
					var i1 = _g11++;
					newArray1[i1] = this.stackMat3[i1];
					this.stackMat3[i1] = null;
				}
				this.stackMat3 = newArray1;
			}
			this.stackMat3[this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t001 = 1;
			var t011 = 0;
			var t021 = 0;
			var t03 = 0;
			var t101 = 0;
			var t111 = 1;
			var t121 = 0;
			var t13 = 0;
			var t201 = 0;
			var t211 = 0;
			var t221 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t001;
			mat4.e01 = t011;
			mat4.e02 = t021;
			mat4.e03 = t03;
			mat4.e10 = t101;
			mat4.e11 = t111;
			mat4.e12 = t121;
			mat4.e13 = t13;
			mat4.e20 = t201;
			mat4.e21 = t211;
			mat4.e22 = t221;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(this.sizeMat4 == this.stackMat4.length) {
				var newLength2 = this.sizeMat4 << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g12 = 0;
				var _g3 = this.sizeMat4;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray2[i2] = this.stackMat4[i2];
					this.stackMat4[i2] = null;
				}
				this.stackMat4 = newArray2;
			}
			this.stackMat4[this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(this.sizeQuat == this.stackQuat.length) {
				var newLength3 = this.sizeQuat << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g13 = 0;
				var _g4 = this.sizeQuat;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray3[i3] = this.stackQuat[i3];
					this.stackQuat[i3] = null;
				}
				this.stackQuat = newArray3;
			}
			this.stackQuat[this.sizeQuat++] = quat;
		}
	}
	,disposeVec3: function(v) {
		v.zero();
		if(this.sizeVec3 == this.stackVec3.length) {
			var newLength = this.sizeVec3 << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g1 = 0;
			var _g = this.sizeVec3;
			while(_g1 < _g) {
				var i = _g1++;
				newArray[i] = this.stackVec3[i];
				this.stackVec3[i] = null;
			}
			this.stackVec3 = newArray;
		}
		this.stackVec3[this.sizeVec3++] = v;
	}
	,disposeMat3: function(m) {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		m.e00 = t00;
		m.e01 = t01;
		m.e02 = t02;
		m.e10 = t10;
		m.e11 = t11;
		m.e12 = t12;
		m.e20 = t20;
		m.e21 = t21;
		m.e22 = t22;
		if(this.sizeMat3 == this.stackMat3.length) {
			var newLength = this.sizeMat3 << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g1 = 0;
			var _g = this.sizeMat3;
			while(_g1 < _g) {
				var i = _g1++;
				newArray[i] = this.stackMat3[i];
				this.stackMat3[i] = null;
			}
			this.stackMat3 = newArray;
		}
		this.stackMat3[this.sizeMat3++] = m;
	}
	,disposeMat4: function(m) {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t03 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t13 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		var t23 = 0;
		var t30 = 0;
		var t31 = 0;
		var t32 = 0;
		var t33 = 1;
		m.e00 = t00;
		m.e01 = t01;
		m.e02 = t02;
		m.e03 = t03;
		m.e10 = t10;
		m.e11 = t11;
		m.e12 = t12;
		m.e13 = t13;
		m.e20 = t20;
		m.e21 = t21;
		m.e22 = t22;
		m.e23 = t23;
		m.e30 = t30;
		m.e31 = t31;
		m.e32 = t32;
		m.e33 = t33;
		if(this.sizeMat4 == this.stackMat4.length) {
			var newLength = this.sizeMat4 << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g1 = 0;
			var _g = this.sizeMat4;
			while(_g1 < _g) {
				var i = _g1++;
				newArray[i] = this.stackMat4[i];
				this.stackMat4[i] = null;
			}
			this.stackMat4 = newArray;
		}
		this.stackMat4[this.sizeMat4++] = m;
	}
	,disposeQuat: function(q) {
		var tx = 0;
		var ty = 0;
		var tz = 0;
		var tw = 1;
		q.x = tx;
		q.y = ty;
		q.z = tz;
		q.w = tw;
		if(this.sizeQuat == this.stackQuat.length) {
			var newLength = this.sizeQuat << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g1 = 0;
			var _g = this.sizeQuat;
			while(_g1 < _g) {
				var i = _g1++;
				newArray[i] = this.stackQuat[i];
				this.stackQuat[i] = null;
			}
			this.stackQuat = newArray;
		}
		this.stackQuat[this.sizeQuat++] = q;
	}
};
var oimo_common_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
	oimo_common_Quat.numCreations++;
};
oimo_common_Quat.__name__ = true;
oimo_common_Quat.prototype = {
	identity: function() {
		var tx = 0;
		var ty = 0;
		var tz = 0;
		var tw = 1;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,init: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(q) {
		return new oimo_common_Quat(this.x + q.x,this.y + q.y,this.z + q.z,this.w + q.w);
	}
	,sub: function(q) {
		return new oimo_common_Quat(this.x - q.x,this.y - q.y,this.z - q.z,this.w - q.w);
	}
	,scale: function(s) {
		return new oimo_common_Quat(this.x * s,this.y * s,this.z * s,this.w * s);
	}
	,addEq: function(q) {
		var tx = this.x + q.x;
		var ty = this.y + q.y;
		var tz = this.z + q.z;
		var tw = this.w + q.w;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,subEq: function(q) {
		var tx = this.x - q.x;
		var ty = this.y - q.y;
		var tz = this.z - q.z;
		var tw = this.w - q.w;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,scaleEq: function(s) {
		var tx = this.x * s;
		var ty = this.y * s;
		var tz = this.z * s;
		var tw = this.w * s;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,normalized: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		return new oimo_common_Quat(this.x * invLen,this.y * invLen,this.z * invLen,this.w * invLen);
	}
	,normalize: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		var tx = this.x * invLen;
		var ty = this.y * invLen;
		var tz = this.z * invLen;
		var tw = this.w * invLen;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,setArc: function(v1,v2) {
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var d = x1 * x2 + y1 * y2 + z1 * z2;
		this.w = Math.sqrt((1 + d) * 0.5);
		if(this.w == 0) {
			x2 = x1 * x1;
			y2 = y1 * y1;
			z2 = z1 * z1;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this.x = 0;
					this.y = z1 * d;
					this.z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this.z = 0;
					this.x = y1 * d;
					this.y = -x1 * d;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this.y = 0;
				this.z = x1 * d;
				this.x = -z1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this.z = 0;
				this.x = y1 * d;
				this.y = -x1 * d;
			}
			return this;
		}
		d = 0.5 / this.w;
		var cx = y1 * z2 - z1 * y2;
		var cy = z1 * x2 - x1 * z2;
		var cz = x1 * y2 - y1 * x2;
		this.x = cx * d;
		this.y = cy * d;
		this.z = cz * d;
		return this;
	}
	,slerp: function(q,t) {
		var qx;
		var qy;
		var qz;
		var qw;
		var d = this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
		if(d < 0) {
			d = -d;
			qx = -q.x;
			qy = -q.y;
			qz = -q.z;
			qw = -q.w;
		} else {
			qx = q.x;
			qy = q.y;
			qz = q.z;
			qw = q.w;
		}
		if(d > 0.999999) {
			var _this = new oimo_common_Quat(this.x + (qx - this.x) * t,this.y + (qy - this.y) * t,this.z + (qz - this.z) * t,this.w + (qw - this.w) * t);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z + _this.w * _this.w);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			var tw = _this.w * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			_this.w = tw;
			return _this;
		}
		var theta = t * Math.acos(d);
		qx -= this.x * d;
		qy -= this.y * d;
		qz -= this.z * d;
		qw -= this.w * d;
		var invLen1 = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
		qx *= invLen1;
		qy *= invLen1;
		qz *= invLen1;
		qw *= invLen1;
		var sin = Math.sin(theta);
		var cos = Math.cos(theta);
		return new oimo_common_Quat(this.x * cos + qx * sin,this.y * cos + qy * sin,this.z * cos + qz * sin,this.w * cos + qw * sin);
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
		return this;
	}
	,clone: function() {
		return new oimo_common_Quat(this.x,this.y,this.z,this.w);
	}
	,fromMat3: function(m) {
		var e00 = m.e00;
		var e11 = m.e11;
		var e22 = m.e22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			this.w = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e21 - m.e12) * s;
			this.y = (m.e02 - m.e20) * s;
			this.z = (m.e10 - m.e01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				this.x = 0.5 * s;
				s = 0.5 / s;
				this.y = (m.e01 + m.e10) * s;
				this.z = (m.e02 + m.e20) * s;
				this.w = (m.e21 - m.e12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				this.z = 0.5 * s;
				s = 0.5 / s;
				this.x = (m.e02 + m.e20) * s;
				this.y = (m.e12 + m.e21) * s;
				this.w = (m.e10 - m.e01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			this.y = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e01 + m.e10) * s;
			this.z = (m.e12 + m.e21) * s;
			this.w = (m.e02 - m.e20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			this.z = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e02 + m.e20) * s;
			this.y = (m.e12 + m.e21) * s;
			this.w = (m.e10 - m.e01) * s;
		}
		return this;
	}
	,toMat3: function() {
		var _this = new oimo_common_Mat3();
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this.e00 = 1 - yy - zz;
		_this.e01 = xy - wz;
		_this.e02 = xz + wy;
		_this.e10 = xy + wz;
		_this.e11 = 1 - xx - zz;
		_this.e12 = yz - wx;
		_this.e20 = xz - wy;
		_this.e21 = yz + wx;
		_this.e22 = 1 - xx - yy;
		return _this;
	}
	,toString: function() {
		return "Quat[" + (this.x > 0 ? (this.x * 10000000 + 0.5 | 0) / 10000000 : (this.x * 10000000 - 0.5 | 0) / 10000000) + " i,\n" + "    " + (this.y > 0 ? (this.y * 10000000 + 0.5 | 0) / 10000000 : (this.y * 10000000 - 0.5 | 0) / 10000000) + " j,\n" + "    " + (this.z > 0 ? (this.z * 10000000 + 0.5 | 0) / 10000000 : (this.z * 10000000 - 0.5 | 0) / 10000000) + " k,\n" + "    " + (this.w > 0 ? (this.w * 10000000 + 0.5 | 0) / 10000000 : (this.w * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
};
var oimo_dynamics_Contact = function() {
	this._next = null;
	this._prev = null;
	this._link1 = new oimo_dynamics_ContactLink();
	this._link2 = new oimo_dynamics_ContactLink();
	this._s1 = null;
	this._s2 = null;
	this._b1 = null;
	this._b2 = null;
	this._detector = null;
	this._cachedDetectorData = new oimo_collision_narrowphase_detector_CachedDetectorData();
	this._detectorResult = new oimo_collision_narrowphase_DetectorResult();
	this._latest = false;
	this._shouldBeSkipped = false;
	this._manifold = new oimo_dynamics_constraint_contact_Manifold();
	this._updater = new oimo_dynamics_constraint_contact_ManifoldUpdater(this._manifold);
	this._contactConstraint = new oimo_dynamics_constraint_contact_ContactConstraint(this._manifold);
	this._touching = false;
};
oimo_dynamics_Contact.__name__ = true;
oimo_dynamics_Contact.prototype = {
	_updateManifold: function() {
		if(this._detector == null) {
			return;
		}
		var ptouching = this._touching;
		var result = this._detectorResult;
		this._detector.detect(result,this._s1._geom,this._s2._geom,this._s1._transform,this._s2._transform,this._cachedDetectorData);
		var num = result.numPoints;
		this._touching = num > 0;
		if(this._touching) {
			this._manifold._buildBasis(result.normal);
			if(result.getMaxDepth() > oimo_common_Setting.contactUseAlternativePositionCorrectionAlgorithmDepthThreshold) {
				this._contactConstraint._positionCorrectionAlgorithm = oimo_common_Setting.alternativeContactPositionCorrectionAlgorithm;
			} else {
				this._contactConstraint._positionCorrectionAlgorithm = oimo_common_Setting.defaultContactPositionCorrectionAlgorithm;
			}
			if(result.incremental) {
				this._updater.incrementalUpdate(result,this._b1._transform,this._b2._transform);
			} else {
				this._updater.totalUpdate(result,this._b1._transform,this._b2._transform);
			}
		} else {
			this._manifold._clear();
		}
		if(this._touching && !ptouching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.beginContact(this);
			}
			if(cc2 != null) {
				cc2.beginContact(this);
			}
		}
		if(!this._touching && ptouching) {
			var cc11 = this._s1._contactCallback;
			var cc21 = this._s2._contactCallback;
			if(cc11 == cc21) {
				cc21 = null;
			}
			if(cc11 != null) {
				cc11.endContact(this);
			}
			if(cc21 != null) {
				cc21.endContact(this);
			}
		}
		if(this._touching) {
			var cc12 = this._s1._contactCallback;
			var cc22 = this._s2._contactCallback;
			if(cc12 == cc22) {
				cc22 = null;
			}
			if(cc12 != null) {
				cc12.preSolve(this);
			}
			if(cc22 != null) {
				cc22.preSolve(this);
			}
		}
	}
	,_postSolve: function() {
		var cc1 = this._s1._contactCallback;
		var cc2 = this._s2._contactCallback;
		if(cc1 == cc2) {
			cc2 = null;
		}
		if(cc1 != null) {
			cc1.postSolve(this);
		}
		if(cc2 != null) {
			cc2.postSolve(this);
		}
	}
	,getShape1: function() {
		return this._s1;
	}
	,getShape2: function() {
		return this._s2;
	}
	,isTouching: function() {
		return this._touching;
	}
	,getManifold: function() {
		return this._manifold;
	}
	,getContactConstraint: function() {
		return this._contactConstraint;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_dynamics_ContactLink = function() {
	this._prev = null;
	this._next = null;
	this._contact = null;
	this._other = null;
};
oimo_dynamics_ContactLink.__name__ = true;
oimo_dynamics_ContactLink.prototype = {
	getContact: function() {
		return this._contact;
	}
	,getOther: function() {
		return this._other;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_dynamics_ContactManager = function(broadPhase) {
	this._broadPhase = broadPhase;
	this._collisionMatrix = new oimo_collision_narrowphase_CollisionMatrix();
	this._numContacts = 0;
};
oimo_dynamics_ContactManager.__name__ = true;
oimo_dynamics_ContactManager.prototype = {
	createContacts: function() {
		var pp = this._broadPhase._proxyPairList;
		while(pp != null) {
			var n = pp._next;
			while(true) {
				var s1;
				var s2;
				if(pp._p1._id < pp._p2._id) {
					s1 = pp._p1.userData;
					s2 = pp._p2.userData;
				} else {
					s1 = pp._p2.userData;
					s2 = pp._p1.userData;
				}
				if(!this.shouldCollide(s1,s2)) {
					break;
				}
				var b1 = s1._rigidBody;
				var b2 = s2._rigidBody;
				var n1 = b1._numContactLinks;
				var n2 = b2._numContactLinks;
				var l;
				if(n1 < n2) {
					l = b1._contactLinkList;
				} else {
					l = b2._contactLinkList;
				}
				var id1 = s1._id;
				var id2 = s2._id;
				var found = false;
				while(l != null) {
					var n3 = l._next;
					var c = l._contact;
					if(c._s1._id == id1 && c._s2._id == id2) {
						c._latest = true;
						found = true;
						break;
					}
					l = n3;
				}
				if(!found) {
					var first = this._contactPool;
					if(first != null) {
						this._contactPool = first._next;
						first._next = null;
					} else {
						first = new oimo_dynamics_Contact();
					}
					var c1 = first;
					if(this._contactList == null) {
						this._contactList = c1;
						this._contactListLast = c1;
					} else {
						this._contactListLast._next = c1;
						c1._prev = this._contactListLast;
						this._contactListLast = c1;
					}
					c1._latest = true;
					var detector = this._collisionMatrix.detectors[s1._geom._type][s2._geom._type];
					c1._s1 = s1;
					c1._s2 = s2;
					c1._b1 = s1._rigidBody;
					c1._b2 = s2._rigidBody;
					c1._touching = false;
					if(c1._b1._contactLinkList == null) {
						c1._b1._contactLinkList = c1._link1;
						c1._b1._contactLinkListLast = c1._link1;
					} else {
						c1._b1._contactLinkListLast._next = c1._link1;
						c1._link1._prev = c1._b1._contactLinkListLast;
						c1._b1._contactLinkListLast = c1._link1;
					}
					if(c1._b2._contactLinkList == null) {
						c1._b2._contactLinkList = c1._link2;
						c1._b2._contactLinkListLast = c1._link2;
					} else {
						c1._b2._contactLinkListLast._next = c1._link2;
						c1._link2._prev = c1._b2._contactLinkListLast;
						c1._b2._contactLinkListLast = c1._link2;
					}
					c1._b1._numContactLinks++;
					c1._b2._numContactLinks++;
					c1._link1._other = c1._b2;
					c1._link2._other = c1._b1;
					c1._link1._contact = c1;
					c1._link2._contact = c1;
					c1._detector = detector;
					var _this = c1._contactConstraint;
					_this._s1 = s1;
					_this._s2 = s2;
					_this._b1 = _this._s1._rigidBody;
					_this._b2 = _this._s2._rigidBody;
					_this._tf1 = _this._b1._transform;
					_this._tf2 = _this._b2._transform;
					this._numContacts++;
				}
				if(!false) {
					break;
				}
			}
			pp = n;
		}
	}
	,destroyOutdatedContacts: function() {
		var incremental = this._broadPhase._incremental;
		var c = this._contactList;
		while(c != null) {
			var n = c._next;
			while(true) {
				if(c._latest) {
					c._latest = false;
					c._shouldBeSkipped = false;
					break;
				}
				if(!incremental) {
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == this._contactList) {
						this._contactList = this._contactList._next;
					}
					if(c == this._contactListLast) {
						this._contactListLast = this._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this = c._contactConstraint;
					_this._s1 = null;
					_this._s2 = null;
					_this._b1 = null;
					_this._b2 = null;
					_this._tf1 = null;
					_this._tf2 = null;
					c._next = this._contactPool;
					this._contactPool = c;
					this._numContacts--;
					break;
				}
				var s1 = c._s1;
				var s2 = c._s2;
				var r1 = s1._rigidBody;
				var r2 = s2._rigidBody;
				var active1 = !r1._sleeping && r1._type != 1;
				var active2 = !r2._sleeping && r2._type != 1;
				if(!active1 && !active2) {
					c._shouldBeSkipped = true;
					break;
				}
				var aabb1 = s1._aabb;
				var aabb2 = s2._aabb;
				var proxy1 = s1._proxy;
				var proxy2 = s2._proxy;
				if(!(proxy1._aabbMinX < proxy2._aabbMaxX && proxy1._aabbMaxX > proxy2._aabbMinX && proxy1._aabbMinY < proxy2._aabbMaxY && proxy1._aabbMaxY > proxy2._aabbMinY && proxy1._aabbMinZ < proxy2._aabbMaxZ && proxy1._aabbMaxZ > proxy2._aabbMinZ) || !this.shouldCollide(s1,s2)) {
					var prev3 = c._prev;
					var next3 = c._next;
					if(prev3 != null) {
						prev3._next = next3;
					}
					if(next3 != null) {
						next3._prev = prev3;
					}
					if(c == this._contactList) {
						this._contactList = this._contactList._next;
					}
					if(c == this._contactListLast) {
						this._contactListLast = this._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc11 = c._s1._contactCallback;
						var cc21 = c._s2._contactCallback;
						if(cc11 == cc21) {
							cc21 = null;
						}
						if(cc11 != null) {
							cc11.endContact(c);
						}
						if(cc21 != null) {
							cc21.endContact(c);
						}
					}
					var prev4 = c._link1._prev;
					var next4 = c._link1._next;
					if(prev4 != null) {
						prev4._next = next4;
					}
					if(next4 != null) {
						next4._prev = prev4;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev5 = c._link2._prev;
					var next5 = c._link2._next;
					if(prev5 != null) {
						prev5._next = next5;
					}
					if(next5 != null) {
						next5._prev = prev5;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this1 = c._contactConstraint;
					_this1._s1 = null;
					_this1._s2 = null;
					_this1._b1 = null;
					_this1._b2 = null;
					_this1._tf1 = null;
					_this1._tf2 = null;
					c._next = this._contactPool;
					this._contactPool = c;
					this._numContacts--;
					break;
				}
				var aabbOverlapping = aabb1._minX < aabb2._maxX && aabb1._maxX > aabb2._minX && aabb1._minY < aabb2._maxY && aabb1._maxY > aabb2._minY && aabb1._minZ < aabb2._maxZ && aabb1._maxZ > aabb2._minZ;
				c._shouldBeSkipped = !aabbOverlapping;
				if(!false) {
					break;
				}
			}
			c = n;
		}
	}
	,shouldCollide: function(s1,s2) {
		var r1 = s1._rigidBody;
		var r2 = s2._rigidBody;
		if(r1 == r2) {
			return false;
		}
		if(r1._type != 0 && r2._type != 0) {
			return false;
		}
		if((s1._collisionGroup & s2._collisionMask) == 0 || (s2._collisionGroup & s1._collisionMask) == 0) {
			return false;
		}
		var jl;
		var other;
		if(r1._numJointLinks < r2._numJointLinks) {
			jl = r1._jointLinkList;
			other = r2;
		} else {
			jl = r2._jointLinkList;
			other = r1;
		}
		while(jl != null) {
			var n = jl._next;
			if(jl._other == other && !jl._joint._allowCollision) {
				return false;
			}
			jl = n;
		}
		return true;
	}
	,_updateContacts: function() {
		this._broadPhase.collectPairs();
		this.createContacts();
		this.destroyOutdatedContacts();
	}
	,_postSolve: function() {
		var c = this._contactList;
		while(c != null) {
			var n = c._next;
			if(c._touching) {
				c._postSolve();
			}
			c = n;
		}
	}
	,getNumContacts: function() {
		return this._numContacts;
	}
	,getContactList: function() {
		return this._contactList;
	}
};
var oimo_dynamics_Island = function() {
	var this1 = new Array(oimo_common_Setting.islandInitialRigidBodyArraySize);
	this.rigidBodies = this1;
	var this2 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solvers = this2;
	var this3 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solversSi = this3;
	var this4 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solversNgs = this4;
	this.numRigidBodies = 0;
	this.numSolvers = 0;
	this.numSolversSi = 0;
	this.numSolversNgs = 0;
};
oimo_dynamics_Island.__name__ = true;
oimo_dynamics_Island.prototype = {
	_clear: function() {
		while(this.numRigidBodies > 0) this.rigidBodies[--this.numRigidBodies] = null;
		while(this.numSolvers > 0) this.solvers[--this.numSolvers] = null;
		while(this.numSolversSi > 0) this.solversSi[--this.numSolversSi] = null;
		while(this.numSolversNgs > 0) this.solversNgs[--this.numSolversNgs] = null;
	}
	,_addRigidBody: function(rigidBody) {
		if(this.numRigidBodies == this.rigidBodies.length) {
			var newLength = this.numRigidBodies << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g1 = 0;
			var _g = this.numRigidBodies;
			while(_g1 < _g) {
				var i = _g1++;
				newArray[i] = this.rigidBodies[i];
				this.rigidBodies[i] = null;
			}
			this.rigidBodies = newArray;
		}
		rigidBody._addedToIsland = true;
		this.rigidBodies[this.numRigidBodies++] = rigidBody;
	}
	,_addConstraintSolver: function(solver,positionCorrection) {
		if(this.numSolvers == this.solvers.length) {
			var newLength = this.numSolvers << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g1 = 0;
			var _g = this.numSolvers;
			while(_g1 < _g) {
				var i = _g1++;
				newArray[i] = this.solvers[i];
				this.solvers[i] = null;
			}
			this.solvers = newArray;
		}
		solver._addedToIsland = true;
		this.solvers[this.numSolvers++] = solver;
		if(positionCorrection == oimo_dynamics_constraint_PositionCorrectionAlgorithm.SPLIT_IMPULSE) {
			if(this.numSolversSi == this.solversSi.length) {
				var newLength1 = this.numSolversSi << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g11 = 0;
				var _g2 = this.numSolversSi;
				while(_g11 < _g2) {
					var i1 = _g11++;
					newArray1[i1] = this.solversSi[i1];
					this.solversSi[i1] = null;
				}
				this.solversSi = newArray1;
			}
			this.solversSi[this.numSolversSi++] = solver;
		}
		if(positionCorrection == oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS) {
			if(this.numSolversNgs == this.solversNgs.length) {
				var newLength2 = this.numSolversNgs << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g12 = 0;
				var _g3 = this.numSolversNgs;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray2[i2] = this.solversNgs[i2];
					this.solversNgs[i2] = null;
				}
				this.solversNgs = newArray2;
			}
			this.solversNgs[this.numSolversNgs++] = solver;
		}
	}
	,_stepSingleRigidBody: function(timeStep,rb) {
		var dt = timeStep.dt;
		var dst = rb._ptransform;
		var src = rb._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		rb._linearContactImpulseX = 0;
		rb._linearContactImpulseY = 0;
		rb._linearContactImpulseZ = 0;
		rb._angularContactImpulseX = 0;
		rb._angularContactImpulseY = 0;
		rb._angularContactImpulseZ = 0;
		if(rb._autoSleep && rb._velX * rb._velX + rb._velY * rb._velY + rb._velZ * rb._velZ < oimo_common_Setting.sleepingVelocityThreshold * oimo_common_Setting.sleepingVelocityThreshold && rb._angVelX * rb._angVelX + rb._angVelY * rb._angVelY + rb._angVelZ * rb._angVelZ < oimo_common_Setting.sleepingAngularVelocityThreshold * oimo_common_Setting.sleepingAngularVelocityThreshold) {
			rb._sleepTime += dt;
			if(rb._sleepTime > oimo_common_Setting.sleepingTimeThreshold) {
				rb._sleeping = true;
				rb._sleepTime = 0;
			}
		} else {
			rb._sleepTime = 0;
		}
		if(!rb._sleeping) {
			if(rb._type == 0) {
				var x = dt * rb._linearDamping;
				var x2 = x * x;
				var linScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var x1 = dt * rb._angularDamping;
				var x21 = x1 * x1;
				var angScale = 1 / (1 + x1 + x21 * (0.5 + x1 * 0.16666666666666666 + x21 * 0.041666666666666664));
				var linAcc;
				var linAccX;
				var linAccY;
				var linAccZ;
				var angAcc;
				var angAccX;
				var angAccY;
				var angAccZ;
				linAccX = this.gravityX * rb._gravityScale;
				linAccY = this.gravityY * rb._gravityScale;
				linAccZ = this.gravityZ * rb._gravityScale;
				linAccX += rb._forceX * rb._invMass;
				linAccY += rb._forceY * rb._invMass;
				linAccZ += rb._forceZ * rb._invMass;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = rb._invInertia00 * rb._torqueX + rb._invInertia01 * rb._torqueY + rb._invInertia02 * rb._torqueZ;
				__tmp__Y = rb._invInertia10 * rb._torqueX + rb._invInertia11 * rb._torqueY + rb._invInertia12 * rb._torqueZ;
				__tmp__Z = rb._invInertia20 * rb._torqueX + rb._invInertia21 * rb._torqueY + rb._invInertia22 * rb._torqueZ;
				angAccX = __tmp__X;
				angAccY = __tmp__Y;
				angAccZ = __tmp__Z;
				rb._velX += linAccX * dt;
				rb._velY += linAccY * dt;
				rb._velZ += linAccZ * dt;
				rb._velX *= linScale;
				rb._velY *= linScale;
				rb._velZ *= linScale;
				rb._angVelX += angAccX * dt;
				rb._angVelY += angAccY * dt;
				rb._angVelZ += angAccZ * dt;
				rb._angVelX *= angScale;
				rb._angVelY *= angScale;
				rb._angVelZ *= angScale;
			}
			rb._integrate(dt);
			var s = rb._shapeList;
			while(s != null) {
				var n = s._next;
				var dst1 = s._ptransform;
				var src1 = s._localTransform;
				var src2 = rb._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst1._rotation00 = __tmp__00;
				dst1._rotation01 = __tmp__01;
				dst1._rotation02 = __tmp__02;
				dst1._rotation10 = __tmp__10;
				dst1._rotation11 = __tmp__11;
				dst1._rotation12 = __tmp__12;
				dst1._rotation20 = __tmp__20;
				dst1._rotation21 = __tmp__21;
				dst1._rotation22 = __tmp__22;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y1 = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z1 = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src2._positionX;
				dst1._positionY += src2._positionY;
				dst1._positionZ += src2._positionZ;
				var dst2 = s._transform;
				var src11 = s._localTransform;
				var src21 = rb._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst2._rotation00 = __tmp__001;
				dst2._rotation01 = __tmp__011;
				dst2._rotation02 = __tmp__021;
				dst2._rotation10 = __tmp__101;
				dst2._rotation11 = __tmp__111;
				dst2._rotation12 = __tmp__121;
				dst2._rotation20 = __tmp__201;
				dst2._rotation21 = __tmp__211;
				dst2._rotation22 = __tmp__221;
				var __tmp__X2;
				var __tmp__Y2;
				var __tmp__Z2;
				__tmp__X2 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y2 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z2 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst2._positionX = __tmp__X2;
				dst2._positionY = __tmp__Y2;
				dst2._positionZ = __tmp__Z2;
				dst2._positionX += src21._positionX;
				dst2._positionY += src21._positionY;
				dst2._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,_step: function(timeStep,numVelocityIterations,numPositionIterations) {
		var dt = timeStep.dt;
		var sleepIsland = true;
		var _g1 = 0;
		var _g = this.numRigidBodies;
		while(_g1 < _g) {
			var i = _g1++;
			var rb = this.rigidBodies[i];
			var dst = rb._ptransform;
			var src = rb._transform;
			dst._positionX = src._positionX;
			dst._positionY = src._positionY;
			dst._positionZ = src._positionZ;
			dst._rotation00 = src._rotation00;
			dst._rotation01 = src._rotation01;
			dst._rotation02 = src._rotation02;
			dst._rotation10 = src._rotation10;
			dst._rotation11 = src._rotation11;
			dst._rotation12 = src._rotation12;
			dst._rotation20 = src._rotation20;
			dst._rotation21 = src._rotation21;
			dst._rotation22 = src._rotation22;
			rb._linearContactImpulseX = 0;
			rb._linearContactImpulseY = 0;
			rb._linearContactImpulseZ = 0;
			rb._angularContactImpulseX = 0;
			rb._angularContactImpulseY = 0;
			rb._angularContactImpulseZ = 0;
			rb._sleeping = false;
			if(rb._autoSleep && rb._velX * rb._velX + rb._velY * rb._velY + rb._velZ * rb._velZ < oimo_common_Setting.sleepingVelocityThreshold * oimo_common_Setting.sleepingVelocityThreshold && rb._angVelX * rb._angVelX + rb._angVelY * rb._angVelY + rb._angVelZ * rb._angVelZ < oimo_common_Setting.sleepingAngularVelocityThreshold * oimo_common_Setting.sleepingAngularVelocityThreshold) {
				rb._sleepTime += dt;
			} else {
				rb._sleepTime = 0;
			}
			if(rb._sleepTime < oimo_common_Setting.sleepingTimeThreshold) {
				sleepIsland = false;
			}
			if(rb._type == 0) {
				var x = dt * rb._linearDamping;
				var x2 = x * x;
				var linScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var x1 = dt * rb._angularDamping;
				var x21 = x1 * x1;
				var angScale = 1 / (1 + x1 + x21 * (0.5 + x1 * 0.16666666666666666 + x21 * 0.041666666666666664));
				var linAcc;
				var linAccX;
				var linAccY;
				var linAccZ;
				var angAcc;
				var angAccX;
				var angAccY;
				var angAccZ;
				linAccX = this.gravityX * rb._gravityScale;
				linAccY = this.gravityY * rb._gravityScale;
				linAccZ = this.gravityZ * rb._gravityScale;
				linAccX += rb._forceX * rb._invMass;
				linAccY += rb._forceY * rb._invMass;
				linAccZ += rb._forceZ * rb._invMass;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = rb._invInertia00 * rb._torqueX + rb._invInertia01 * rb._torqueY + rb._invInertia02 * rb._torqueZ;
				__tmp__Y = rb._invInertia10 * rb._torqueX + rb._invInertia11 * rb._torqueY + rb._invInertia12 * rb._torqueZ;
				__tmp__Z = rb._invInertia20 * rb._torqueX + rb._invInertia21 * rb._torqueY + rb._invInertia22 * rb._torqueZ;
				angAccX = __tmp__X;
				angAccY = __tmp__Y;
				angAccZ = __tmp__Z;
				rb._velX += linAccX * dt;
				rb._velY += linAccY * dt;
				rb._velZ += linAccZ * dt;
				rb._velX *= linScale;
				rb._velY *= linScale;
				rb._velZ *= linScale;
				rb._angVelX += angAccX * dt;
				rb._angVelY += angAccY * dt;
				rb._angVelZ += angAccZ * dt;
				rb._angVelX *= angScale;
				rb._angVelY *= angScale;
				rb._angVelZ *= angScale;
			}
		}
		if(sleepIsland) {
			var _g11 = 0;
			var _g2 = this.numRigidBodies;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var rb1 = this.rigidBodies[i1];
				rb1._sleeping = true;
				rb1._sleepTime = 0;
			}
			return;
		}
		var _g12 = 0;
		var _g3 = this.numSolvers;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var s = this.solvers[i2];
			s.preSolveVelocity(timeStep);
		}
		var _g13 = 0;
		var _g4 = this.numSolvers;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var s1 = this.solvers[i3];
			s1.warmStart(timeStep);
		}
		var _g14 = 0;
		var _g5 = numVelocityIterations;
		while(_g14 < _g5) {
			var t = _g14++;
			var _g31 = 0;
			var _g21 = this.numSolvers;
			while(_g31 < _g21) {
				var i4 = _g31++;
				var s2 = this.solvers[i4];
				s2.solveVelocity();
			}
		}
		var _g15 = 0;
		var _g6 = this.numSolvers;
		while(_g15 < _g6) {
			var i5 = _g15++;
			var s3 = this.solvers[i5];
			s3.postSolveVelocity(timeStep);
		}
		var _g16 = 0;
		var _g7 = this.numRigidBodies;
		while(_g16 < _g7) {
			var i6 = _g16++;
			var rb2 = this.rigidBodies[i6];
			rb2._integrate(dt);
		}
		var _g17 = 0;
		var _g8 = this.numSolversSi;
		while(_g17 < _g8) {
			var i7 = _g17++;
			var s4 = this.solversSi[i7];
			s4.preSolvePosition(timeStep);
		}
		var _g18 = 0;
		var _g9 = numPositionIterations;
		while(_g18 < _g9) {
			var t1 = _g18++;
			var _g32 = 0;
			var _g22 = this.numSolversSi;
			while(_g32 < _g22) {
				var i8 = _g32++;
				var s5 = this.solversSi[i8];
				s5.solvePositionSplitImpulse();
			}
		}
		var _g19 = 0;
		var _g10 = this.numRigidBodies;
		while(_g19 < _g10) {
			var i9 = _g19++;
			var rb3 = this.rigidBodies[i9];
			rb3._integratePseudoVelocity();
		}
		var _g110 = 0;
		var _g20 = this.numSolversNgs;
		while(_g110 < _g20) {
			var i10 = _g110++;
			var s6 = this.solversNgs[i10];
			s6.preSolvePosition(timeStep);
		}
		var _g111 = 0;
		var _g23 = numPositionIterations;
		while(_g111 < _g23) {
			var t2 = _g111++;
			var _g33 = 0;
			var _g24 = this.numSolversNgs;
			while(_g33 < _g24) {
				var i11 = _g33++;
				var s7 = this.solversNgs[i11];
				s7.solvePositionNgs(timeStep);
			}
		}
		var _g112 = 0;
		var _g25 = this.numSolvers;
		while(_g112 < _g25) {
			var i12 = _g112++;
			var s8 = this.solvers[i12];
			s8.postSolve();
		}
		var _g113 = 0;
		var _g26 = this.numRigidBodies;
		while(_g113 < _g26) {
			var i13 = _g113++;
			var rb4 = this.rigidBodies[i13];
			var s9 = rb4._shapeList;
			while(s9 != null) {
				var n = s9._next;
				var dst1 = s9._ptransform;
				var src1 = s9._localTransform;
				var src2 = rb4._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst1._rotation00 = __tmp__00;
				dst1._rotation01 = __tmp__01;
				dst1._rotation02 = __tmp__02;
				dst1._rotation10 = __tmp__10;
				dst1._rotation11 = __tmp__11;
				dst1._rotation12 = __tmp__12;
				dst1._rotation20 = __tmp__20;
				dst1._rotation21 = __tmp__21;
				dst1._rotation22 = __tmp__22;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y1 = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z1 = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src2._positionX;
				dst1._positionY += src2._positionY;
				dst1._positionZ += src2._positionZ;
				var dst2 = s9._transform;
				var src11 = s9._localTransform;
				var src21 = rb4._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst2._rotation00 = __tmp__001;
				dst2._rotation01 = __tmp__011;
				dst2._rotation02 = __tmp__021;
				dst2._rotation10 = __tmp__101;
				dst2._rotation11 = __tmp__111;
				dst2._rotation12 = __tmp__121;
				dst2._rotation20 = __tmp__201;
				dst2._rotation21 = __tmp__211;
				dst2._rotation22 = __tmp__221;
				var __tmp__X2;
				var __tmp__Y2;
				var __tmp__Z2;
				__tmp__X2 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y2 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z2 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst2._positionX = __tmp__X2;
				dst2._positionY = __tmp__Y2;
				dst2._positionZ = __tmp__Z2;
				dst2._positionX += src21._positionX;
				dst2._positionY += src21._positionY;
				dst2._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s9._geom._computeAabb(s9._aabb,s9._ptransform);
				minX = s9._aabb._minX;
				minY = s9._aabb._minY;
				minZ = s9._aabb._minZ;
				maxX = s9._aabb._maxX;
				maxY = s9._aabb._maxY;
				maxZ = s9._aabb._maxZ;
				s9._geom._computeAabb(s9._aabb,s9._transform);
				s9._aabb._minX = minX < s9._aabb._minX ? minX : s9._aabb._minX;
				s9._aabb._minY = minY < s9._aabb._minY ? minY : s9._aabb._minY;
				s9._aabb._minZ = minZ < s9._aabb._minZ ? minZ : s9._aabb._minZ;
				s9._aabb._maxX = maxX > s9._aabb._maxX ? maxX : s9._aabb._maxX;
				s9._aabb._maxY = maxY > s9._aabb._maxY ? maxY : s9._aabb._maxY;
				s9._aabb._maxZ = maxZ > s9._aabb._maxZ ? maxZ : s9._aabb._maxZ;
				if(s9._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s9._transform._positionX - s9._ptransform._positionX;
					dY = s9._transform._positionY - s9._ptransform._positionY;
					dZ = s9._transform._positionZ - s9._ptransform._positionZ;
					var v = s9.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s9._rigidBody._world._broadPhase.moveProxy(s9._proxy,s9._aabb,s9.displacement);
				}
				s9 = n;
			}
		}
	}
};
var oimo_dynamics_TimeStep = function() {
	this.dt = 0;
	this.invDt = 0;
	this.dtRatio = 1;
};
oimo_dynamics_TimeStep.__name__ = true;
var oimo_dynamics_World = function(broadPhaseType,gravity) {
	if(broadPhaseType == null) {
		broadPhaseType = 2;
	}
	switch(broadPhaseType) {
	case 1:
		this._broadPhase = new oimo_collision_broadphase_bruteforce_BruteForceBroadPhase();
		break;
	case 2:
		this._broadPhase = new oimo_collision_broadphase_bvh_BvhBroadPhase();
		break;
	}
	this._contactManager = new oimo_dynamics_ContactManager(this._broadPhase);
	if(gravity == null) {
		gravity = new oimo_common_Vec3(0,-9.80665,0);
	}
	this._gravity = new oimo_common_Vec3(gravity.x,gravity.y,gravity.z);
	this._rigidBodyList = null;
	this._rigidBodyListLast = null;
	this._jointList = null;
	this._jointListLast = null;
	this._numRigidBodies = 0;
	this._numShapes = 0;
	this._numJoints = 0;
	this._numIslands = 0;
	this._numVelocityIterations = 10;
	this._numPositionIterations = 5;
	this._rayCastWrapper = new oimo_dynamics__$World_RayCastWrapper();
	this._convexCastWrapper = new oimo_dynamics__$World_ConvexCastWrapper();
	this._aabbTestWrapper = new oimo_dynamics__$World_AabbTestWrapper();
	this._island = new oimo_dynamics_Island();
	var this1 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this._solversInIslands = this1;
	var this2 = new Array(oimo_common_Setting.islandInitialRigidBodyArraySize);
	this._rigidBodyStack = this2;
	this._timeStep = new oimo_dynamics_TimeStep();
	this._pool = new oimo_common_Pool();
	this._shapeIdCount = 0;
};
oimo_dynamics_World.__name__ = true;
oimo_dynamics_World.prototype = {
	_updateContacts: function() {
		var st = new Date().getTime() / 1000;
		this._contactManager._updateContacts();
		var en = new Date().getTime() / 1000;
		oimo_dynamics_common_Performance.broadPhaseCollisionTime = (en - st) * 1000;
		var st1 = new Date().getTime() / 1000;
		var c = this._contactManager._contactList;
		while(c != null) {
			var n = c._next;
			if(!c._shouldBeSkipped) {
				c._updateManifold();
			}
			c = n;
		}
		var en1 = new Date().getTime() / 1000;
		oimo_dynamics_common_Performance.narrowPhaseCollisionTime = (en1 - st1) * 1000;
	}
	,_solveIslands: function() {
		var st = new Date().getTime() / 1000;
		if(oimo_common_Setting.disableSleeping) {
			var b = this._rigidBodyList;
			while(b != null) {
				var n = b._next;
				b._sleeping = false;
				b._sleepTime = 0;
				b = n;
			}
		}
		if(this._rigidBodyStack.length < this._numRigidBodies) {
			var newStackSize = this._rigidBodyStack.length << 1;
			while(newStackSize < this._numRigidBodies) newStackSize <<= 1;
			var this1 = new Array(newStackSize);
			this._rigidBodyStack = this1;
		}
		this._numIslands = 0;
		var _this = this._island;
		var v = this._gravity;
		_this.gravityX = v.x;
		_this.gravityY = v.y;
		_this.gravityZ = v.z;
		var b1 = this._rigidBodyList;
		this._numSolversInIslands = 0;
		while(b1 != null) {
			var n1 = b1._next;
			while(!(b1._addedToIsland || b1._sleeping || b1._type == 1)) {
				if(b1._numContactLinks == 0 && b1._numJointLinks == 0) {
					this._island._stepSingleRigidBody(this._timeStep,b1);
					this._numIslands++;
					break;
				}
				this.buildIsland(b1);
				this._island._step(this._timeStep,this._numVelocityIterations,this._numPositionIterations);
				this._island._clear();
				this._numIslands++;
				if(!false) {
					break;
				}
			}
			b1 = n1;
		}
		this._contactManager._postSolve();
		b1 = this._rigidBodyList;
		while(b1 != null) {
			var n2 = b1._next;
			b1._addedToIsland = false;
			b1 = n2;
		}
		b1 = this._rigidBodyList;
		while(b1 != null) {
			var n3 = b1._next;
			b1._forceX = 0;
			b1._forceY = 0;
			b1._forceZ = 0;
			b1._torqueX = 0;
			b1._torqueY = 0;
			b1._torqueZ = 0;
			b1 = n3;
		}
		while(this._numSolversInIslands > 0) {
			this._solversInIslands[--this._numSolversInIslands]._addedToIsland = false;
			this._solversInIslands[this._numSolversInIslands] = null;
		}
		var en = new Date().getTime() / 1000;
		oimo_dynamics_common_Performance.dynamicsTime = (en - st) * 1000;
	}
	,buildIsland: function(base) {
		var stackCount = 1;
		this._island._addRigidBody(base);
		this._rigidBodyStack[0] = base;
		while(stackCount > 0) {
			var rb = this._rigidBodyStack[--stackCount];
			this._rigidBodyStack[stackCount] = null;
			if(rb._type == 1) {
				continue;
			}
			var cl = rb._contactLinkList;
			while(cl != null) {
				var n = cl._next;
				var cc = cl._contact._contactConstraint;
				var ccs = cl._contact._contactConstraint._solver;
				if(cc.isTouching() && !ccs._addedToIsland) {
					if(this._solversInIslands.length == this._numSolversInIslands) {
						var newLength = this._numSolversInIslands << 1;
						var this1 = new Array(newLength);
						var newArray = this1;
						var _g1 = 0;
						var _g = this._numSolversInIslands;
						while(_g1 < _g) {
							var i = _g1++;
							newArray[i] = this._solversInIslands[i];
							this._solversInIslands[i] = null;
						}
						this._solversInIslands = newArray;
					}
					this._solversInIslands[this._numSolversInIslands++] = ccs;
					this._island._addConstraintSolver(ccs,cc._positionCorrectionAlgorithm);
					var other = cl._other;
					if(!other._addedToIsland) {
						this._island._addRigidBody(other);
						this._rigidBodyStack[stackCount++] = other;
					}
				}
				cl = n;
			}
			var jl = rb._jointLinkList;
			while(jl != null) {
				var n1 = jl._next;
				var j = jl._joint;
				var js1 = j._solver;
				if(!js1._addedToIsland) {
					if(this._solversInIslands.length == this._numSolversInIslands) {
						var newLength1 = this._numSolversInIslands << 1;
						var this2 = new Array(newLength1);
						var newArray1 = this2;
						var _g11 = 0;
						var _g2 = this._numSolversInIslands;
						while(_g11 < _g2) {
							var i1 = _g11++;
							newArray1[i1] = this._solversInIslands[i1];
							this._solversInIslands[i1] = null;
						}
						this._solversInIslands = newArray1;
					}
					this._solversInIslands[this._numSolversInIslands++] = js1;
					this._island._addConstraintSolver(js1,j._positionCorrectionAlgorithm);
					var other1 = jl._other;
					if(!other1._addedToIsland) {
						this._island._addRigidBody(other1);
						this._rigidBodyStack[stackCount++] = other1;
					}
				}
				jl = n1;
			}
		}
	}
	,_drawBvh: function(d,tree) {
		if(d.drawBvh) {
			this._drawBvhNode(d,tree._root,0,d.style.bvhNodeColor);
		}
	}
	,_drawBvhNode: function(d,node,level,color) {
		if(node == null) {
			return;
		}
		if(level >= d.drawBvhMinLevel && level <= d.drawBvhMaxLevel) {
			var _this = this._pool;
			var min = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			var _this1 = this._pool;
			var max = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
			var v = min;
			v.x = node._aabbMinX;
			v.y = node._aabbMinY;
			v.z = node._aabbMinZ;
			var v1 = max;
			v1.x = node._aabbMaxX;
			v1.y = node._aabbMaxY;
			v1.z = node._aabbMaxZ;
			d.aabb(min,max,color);
			var _this2 = this._pool;
			if(min != null) {
				min.zero();
				if(_this2.sizeVec3 == _this2.stackVec3.length) {
					var newLength = _this2.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this2.sizeVec3;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this2.stackVec3[i];
						_this2.stackVec3[i] = null;
					}
					_this2.stackVec3 = newArray;
				}
				_this2.stackVec3[_this2.sizeVec3++] = min;
			}
			var _this3 = this._pool;
			if(max != null) {
				max.zero();
				if(_this3.sizeVec3 == _this3.stackVec3.length) {
					var newLength1 = _this3.sizeVec3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g11 = 0;
					var _g2 = _this3.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray1[i1] = _this3.stackVec3[i1];
						_this3.stackVec3[i1] = null;
					}
					_this3.stackVec3 = newArray1;
				}
				_this3.stackVec3[_this3.sizeVec3++] = max;
			}
		}
		this._drawBvhNode(d,node._children[0],level + 1,color);
		this._drawBvhNode(d,node._children[1],level + 1,color);
	}
	,_drawRigidBodies: function(d) {
		var style = d.style;
		var r = this._rigidBodyList;
		while(r != null) {
			var n = r._next;
			if(d.drawBases) {
				var style1 = d.style;
				d.basis(r._transform,style1.basisLength,style1.basisColorX,style1.basisColorY,style1.basisColorZ);
			}
			var shapeColor = null;
			var isDynamic = r._type == 0;
			if(!isDynamic) {
				shapeColor = r._type == 2 ? style.kinematicShapeColor : style.staticShapeColor;
			}
			var s = r._shapeList;
			while(s != null) {
				var n1 = s._next;
				if(isDynamic) {
					if((s._id & 1) == 0) {
						shapeColor = r._sleeping ? style.sleepingShapeColor1 : r._sleepTime > oimo_common_Setting.sleepingTimeThreshold ? style.sleepyShapeColor1 : style.shapeColor1;
					} else {
						shapeColor = r._sleeping ? style.sleepingShapeColor2 : r._sleepTime > oimo_common_Setting.sleepingTimeThreshold ? style.sleepyShapeColor2 : style.shapeColor2;
					}
				}
				if(d.drawShapes) {
					var geom = s._geom;
					var tf = s._transform;
					var _g = geom._type;
					switch(_g) {
					case 0:
						d.sphere(tf,geom._radius,shapeColor);
						break;
					case 1:
						var g = geom;
						var _this = this._pool;
						var hx = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
						var v = hx;
						v.x = g._halfExtentsX;
						v.y = g._halfExtentsY;
						v.z = g._halfExtentsZ;
						d.box(tf,hx,shapeColor);
						var _this1 = this._pool;
						if(hx != null) {
							hx.zero();
							if(_this1.sizeVec3 == _this1.stackVec3.length) {
								var newLength = _this1.sizeVec3 << 1;
								var this1 = new Array(newLength);
								var newArray = this1;
								var _g1 = 0;
								var _g2 = _this1.sizeVec3;
								while(_g1 < _g2) {
									var i = _g1++;
									newArray[i] = _this1.stackVec3[i];
									_this1.stackVec3[i] = null;
								}
								_this1.stackVec3 = newArray;
							}
							_this1.stackVec3[_this1.sizeVec3++] = hx;
						}
						break;
					case 2:
						var g1 = geom;
						d.cylinder(tf,g1._radius,g1._halfHeight,shapeColor);
						break;
					case 3:
						var g2 = geom;
						d.cone(tf,g2._radius,g2._halfHeight,shapeColor);
						break;
					case 4:
						var g3 = geom;
						d.capsule(tf,g3._radius,g3._halfHeight,shapeColor);
						break;
					case 5:
						var g4 = geom;
						var n2 = g4._numVertices;
						var _this2 = this._pool;
						var v1 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
						var _this3 = this._pool;
						var v2 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
						var _this4 = this._pool;
						var v3 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
						var _this5 = this._pool;
						var v12 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
						var _this6 = this._pool;
						var v13 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
						var _this7 = this._pool;
						var normal = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
						var _this8 = this._pool;
						var m = _this8.sizeMat3 == 0 ? new oimo_common_Mat3() : _this8.stackMat3[--_this8.sizeMat3];
						var _this9 = this._pool;
						var o = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
						var m1 = m;
						m1.e00 = tf._rotation00;
						m1.e01 = tf._rotation01;
						m1.e02 = tf._rotation02;
						m1.e10 = tf._rotation10;
						m1.e11 = tf._rotation11;
						m1.e12 = tf._rotation12;
						m1.e20 = tf._rotation20;
						m1.e21 = tf._rotation21;
						m1.e22 = tf._rotation22;
						var v4 = o;
						v4.x = tf._positionX;
						v4.y = tf._positionY;
						v4.z = tf._positionZ;
						var _g11 = 0;
						var _g3 = n2;
						while(_g11 < _g3) {
							var i1 = _g11++;
							var _this10 = g4._tmpVertices[i1];
							var v5 = g4._vertices[i1];
							_this10.x = v5.x;
							_this10.y = v5.y;
							_this10.z = v5.z;
							var _this11 = _this10;
							var tx = _this11.x * m.e00 + _this11.y * m.e01 + _this11.z * m.e02;
							var ty = _this11.x * m.e10 + _this11.y * m.e11 + _this11.z * m.e12;
							var tz = _this11.x * m.e20 + _this11.y * m.e21 + _this11.z * m.e22;
							_this11.x = tx;
							_this11.y = ty;
							_this11.z = tz;
							var _this12 = _this11;
							var tx1 = _this12.x + o.x;
							var ty1 = _this12.y + o.y;
							var tz1 = _this12.z + o.z;
							_this12.x = tx1;
							_this12.y = ty1;
							_this12.z = tz1;
						}
						if(n2 > 30) {
							var _g12 = 0;
							var _g4 = n2;
							while(_g12 < _g4) {
								var i2 = _g12++;
								var v6 = g4._tmpVertices[i2];
								v1.x = v6.x;
								v1.y = v6.y;
								v1.z = v6.z;
								var v7 = g4._tmpVertices[(i2 + 1) % n2];
								v2.x = v7.x;
								v2.y = v7.y;
								v2.z = v7.z;
								d.line(v1,v2,shapeColor);
							}
						} else if(this._debugDraw.wireframe || n2 > 10) {
							var _g13 = 0;
							var _g5 = n2;
							while(_g13 < _g5) {
								var i3 = _g13++;
								var v8 = g4._tmpVertices[i3];
								v1.x = v8.x;
								v1.y = v8.y;
								v1.z = v8.z;
								var _g31 = 0;
								var _g21 = i3;
								while(_g31 < _g21) {
									var j = _g31++;
									var v9 = g4._tmpVertices[j];
									v2.x = v9.x;
									v2.y = v9.y;
									v2.z = v9.z;
									d.line(v1,v2,shapeColor);
								}
							}
						} else {
							var _g14 = 0;
							var _g6 = n2;
							while(_g14 < _g6) {
								var i4 = _g14++;
								var v10 = g4._tmpVertices[i4];
								v1.x = v10.x;
								v1.y = v10.y;
								v1.z = v10.z;
								var _g32 = 0;
								var _g22 = i4;
								while(_g32 < _g22) {
									var j1 = _g32++;
									var v11 = g4._tmpVertices[j1];
									v2.x = v11.x;
									v2.y = v11.y;
									v2.z = v11.z;
									var _g51 = 0;
									var _g41 = j1;
									while(_g51 < _g41) {
										var k = _g51++;
										var v14 = g4._tmpVertices[k];
										v3.x = v14.x;
										v3.y = v14.y;
										v3.z = v14.z;
										v12.x = v2.x;
										v12.y = v2.y;
										v12.z = v2.z;
										var _this13 = v12;
										var tx2 = _this13.x - v1.x;
										var ty2 = _this13.y - v1.y;
										var tz2 = _this13.z - v1.z;
										_this13.x = tx2;
										_this13.y = ty2;
										_this13.z = tz2;
										v13.x = v3.x;
										v13.y = v3.y;
										v13.z = v3.z;
										var _this14 = v13;
										var tx3 = _this14.x - v1.x;
										var ty3 = _this14.y - v1.y;
										var tz3 = _this14.z - v1.z;
										_this14.x = tx3;
										_this14.y = ty3;
										_this14.z = tz3;
										normal.x = v12.x;
										normal.y = v12.y;
										normal.z = v12.z;
										var _this15 = normal;
										var tx4 = _this15.y * v13.z - _this15.z * v13.y;
										var ty4 = _this15.z * v13.x - _this15.x * v13.z;
										var tz4 = _this15.x * v13.y - _this15.y * v13.x;
										_this15.x = tx4;
										_this15.y = ty4;
										_this15.z = tz4;
										var _this16 = _this15;
										var invLen = Math.sqrt(_this16.x * _this16.x + _this16.y * _this16.y + _this16.z * _this16.z);
										if(invLen > 0) {
											invLen = 1 / invLen;
										}
										var tx5 = _this16.x * invLen;
										var ty5 = _this16.y * invLen;
										var tz5 = _this16.z * invLen;
										_this16.x = tx5;
										_this16.y = ty5;
										_this16.z = tz5;
										d.triangle(v1,v2,v3,normal,normal,normal,shapeColor);
										var tx6 = -normal.x;
										var ty6 = -normal.y;
										var tz6 = -normal.z;
										normal.x = tx6;
										normal.y = ty6;
										normal.z = tz6;
										d.triangle(v1,v3,v2,normal,normal,normal,shapeColor);
									}
								}
							}
						}
						var _this17 = this._pool;
						if(v1 != null) {
							v1.zero();
							if(_this17.sizeVec3 == _this17.stackVec3.length) {
								var newLength1 = _this17.sizeVec3 << 1;
								var this2 = new Array(newLength1);
								var newArray1 = this2;
								var _g15 = 0;
								var _g7 = _this17.sizeVec3;
								while(_g15 < _g7) {
									var i5 = _g15++;
									newArray1[i5] = _this17.stackVec3[i5];
									_this17.stackVec3[i5] = null;
								}
								_this17.stackVec3 = newArray1;
							}
							_this17.stackVec3[_this17.sizeVec3++] = v1;
						}
						var _this18 = this._pool;
						if(v2 != null) {
							v2.zero();
							if(_this18.sizeVec3 == _this18.stackVec3.length) {
								var newLength2 = _this18.sizeVec3 << 1;
								var this3 = new Array(newLength2);
								var newArray2 = this3;
								var _g16 = 0;
								var _g8 = _this18.sizeVec3;
								while(_g16 < _g8) {
									var i6 = _g16++;
									newArray2[i6] = _this18.stackVec3[i6];
									_this18.stackVec3[i6] = null;
								}
								_this18.stackVec3 = newArray2;
							}
							_this18.stackVec3[_this18.sizeVec3++] = v2;
						}
						var _this19 = this._pool;
						if(v3 != null) {
							v3.zero();
							if(_this19.sizeVec3 == _this19.stackVec3.length) {
								var newLength3 = _this19.sizeVec3 << 1;
								var this4 = new Array(newLength3);
								var newArray3 = this4;
								var _g17 = 0;
								var _g9 = _this19.sizeVec3;
								while(_g17 < _g9) {
									var i7 = _g17++;
									newArray3[i7] = _this19.stackVec3[i7];
									_this19.stackVec3[i7] = null;
								}
								_this19.stackVec3 = newArray3;
							}
							_this19.stackVec3[_this19.sizeVec3++] = v3;
						}
						var _this20 = this._pool;
						if(v12 != null) {
							v12.zero();
							if(_this20.sizeVec3 == _this20.stackVec3.length) {
								var newLength4 = _this20.sizeVec3 << 1;
								var this5 = new Array(newLength4);
								var newArray4 = this5;
								var _g18 = 0;
								var _g10 = _this20.sizeVec3;
								while(_g18 < _g10) {
									var i8 = _g18++;
									newArray4[i8] = _this20.stackVec3[i8];
									_this20.stackVec3[i8] = null;
								}
								_this20.stackVec3 = newArray4;
							}
							_this20.stackVec3[_this20.sizeVec3++] = v12;
						}
						var _this21 = this._pool;
						if(v13 != null) {
							v13.zero();
							if(_this21.sizeVec3 == _this21.stackVec3.length) {
								var newLength5 = _this21.sizeVec3 << 1;
								var this6 = new Array(newLength5);
								var newArray5 = this6;
								var _g19 = 0;
								var _g20 = _this21.sizeVec3;
								while(_g19 < _g20) {
									var i9 = _g19++;
									newArray5[i9] = _this21.stackVec3[i9];
									_this21.stackVec3[i9] = null;
								}
								_this21.stackVec3 = newArray5;
							}
							_this21.stackVec3[_this21.sizeVec3++] = v13;
						}
						var _this22 = this._pool;
						if(normal != null) {
							normal.zero();
							if(_this22.sizeVec3 == _this22.stackVec3.length) {
								var newLength6 = _this22.sizeVec3 << 1;
								var this7 = new Array(newLength6);
								var newArray6 = this7;
								var _g110 = 0;
								var _g23 = _this22.sizeVec3;
								while(_g110 < _g23) {
									var i10 = _g110++;
									newArray6[i10] = _this22.stackVec3[i10];
									_this22.stackVec3[i10] = null;
								}
								_this22.stackVec3 = newArray6;
							}
							_this22.stackVec3[_this22.sizeVec3++] = normal;
						}
						var _this23 = this._pool;
						if(m != null) {
							var t00 = 1;
							var t01 = 0;
							var t02 = 0;
							var t10 = 0;
							var t11 = 1;
							var t12 = 0;
							var t20 = 0;
							var t21 = 0;
							var t22 = 1;
							m.e00 = t00;
							m.e01 = t01;
							m.e02 = t02;
							m.e10 = t10;
							m.e11 = t11;
							m.e12 = t12;
							m.e20 = t20;
							m.e21 = t21;
							m.e22 = t22;
							if(_this23.sizeMat3 == _this23.stackMat3.length) {
								var newLength7 = _this23.sizeMat3 << 1;
								var this8 = new Array(newLength7);
								var newArray7 = this8;
								var _g111 = 0;
								var _g24 = _this23.sizeMat3;
								while(_g111 < _g24) {
									var i11 = _g111++;
									newArray7[i11] = _this23.stackMat3[i11];
									_this23.stackMat3[i11] = null;
								}
								_this23.stackMat3 = newArray7;
							}
							_this23.stackMat3[_this23.sizeMat3++] = m;
						}
						var _this24 = this._pool;
						if(o != null) {
							o.zero();
							if(_this24.sizeVec3 == _this24.stackVec3.length) {
								var newLength8 = _this24.sizeVec3 << 1;
								var this9 = new Array(newLength8);
								var newArray8 = this9;
								var _g112 = 0;
								var _g25 = _this24.sizeVec3;
								while(_g112 < _g25) {
									var i12 = _g112++;
									newArray8[i12] = _this24.stackVec3[i12];
									_this24.stackVec3[i12] = null;
								}
								_this24.stackVec3 = newArray8;
							}
							_this24.stackVec3[_this24.sizeVec3++] = o;
						}
						break;
					}
				}
				if(d.drawAabbs) {
					var aabb = s._aabb;
					var color = style.aabbColor;
					var _this25 = this._pool;
					var min = _this25.sizeVec3 == 0 ? new oimo_common_Vec3() : _this25.stackVec3[--_this25.sizeVec3];
					var _this26 = this._pool;
					var max = _this26.sizeVec3 == 0 ? new oimo_common_Vec3() : _this26.stackVec3[--_this26.sizeVec3];
					var v15 = min;
					v15.x = aabb._minX;
					v15.y = aabb._minY;
					v15.z = aabb._minZ;
					var v16 = max;
					v16.x = aabb._maxX;
					v16.y = aabb._maxY;
					v16.z = aabb._maxZ;
					d.aabb(min,max,color);
					var _this27 = this._pool;
					if(min != null) {
						min.zero();
						if(_this27.sizeVec3 == _this27.stackVec3.length) {
							var newLength9 = _this27.sizeVec3 << 1;
							var this10 = new Array(newLength9);
							var newArray9 = this10;
							var _g113 = 0;
							var _g26 = _this27.sizeVec3;
							while(_g113 < _g26) {
								var i13 = _g113++;
								newArray9[i13] = _this27.stackVec3[i13];
								_this27.stackVec3[i13] = null;
							}
							_this27.stackVec3 = newArray9;
						}
						_this27.stackVec3[_this27.sizeVec3++] = min;
					}
					var _this28 = this._pool;
					if(max != null) {
						max.zero();
						if(_this28.sizeVec3 == _this28.stackVec3.length) {
							var newLength10 = _this28.sizeVec3 << 1;
							var this11 = new Array(newLength10);
							var newArray10 = this11;
							var _g114 = 0;
							var _g27 = _this28.sizeVec3;
							while(_g114 < _g27) {
								var i14 = _g114++;
								newArray10[i14] = _this28.stackVec3[i14];
								_this28.stackVec3[i14] = null;
							}
							_this28.stackVec3 = newArray10;
						}
						_this28.stackVec3[_this28.sizeVec3++] = max;
					}
				}
				s = n1;
			}
			r = n;
		}
	}
	,_drawConstraints: function(d) {
		var style = d.style;
		if(d.drawPairs || d.drawContacts) {
			var c = this._contactManager._contactList;
			while(c != null) {
				var n = c._next;
				if(d.drawPairs) {
					var color = style.pairColor;
					var _this = this._pool;
					var v1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
					var _this1 = this._pool;
					var v2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
					var v = v1;
					v.x = c._s1._transform._positionX;
					v.y = c._s1._transform._positionY;
					v.z = c._s1._transform._positionZ;
					var v3 = v2;
					v3.x = c._s2._transform._positionX;
					v3.y = c._s2._transform._positionY;
					v3.z = c._s2._transform._positionZ;
					d.line(v1,v2,color);
					var _this2 = this._pool;
					if(v1 != null) {
						v1.zero();
						if(_this2.sizeVec3 == _this2.stackVec3.length) {
							var newLength = _this2.sizeVec3 << 1;
							var this1 = new Array(newLength);
							var newArray = this1;
							var _g1 = 0;
							var _g = _this2.sizeVec3;
							while(_g1 < _g) {
								var i = _g1++;
								newArray[i] = _this2.stackVec3[i];
								_this2.stackVec3[i] = null;
							}
							_this2.stackVec3 = newArray;
						}
						_this2.stackVec3[_this2.sizeVec3++] = v1;
					}
					var _this3 = this._pool;
					if(v2 != null) {
						v2.zero();
						if(_this3.sizeVec3 == _this3.stackVec3.length) {
							var newLength1 = _this3.sizeVec3 << 1;
							var this2 = new Array(newLength1);
							var newArray1 = this2;
							var _g11 = 0;
							var _g2 = _this3.sizeVec3;
							while(_g11 < _g2) {
								var i1 = _g11++;
								newArray1[i1] = _this3.stackVec3[i1];
								_this3.stackVec3[i1] = null;
							}
							_this3.stackVec3 = newArray1;
						}
						_this3.stackVec3[_this3.sizeVec3++] = v2;
					}
				}
				if(d.drawContacts) {
					var cc = c._contactConstraint;
					var ps = c._contactConstraint._manifold._points;
					var _g12 = 0;
					var _g3 = c._contactConstraint._manifold._numPoints;
					while(_g12 < _g3) {
						var i2 = _g12++;
						var p = ps[i2];
						var style1 = d.style;
						var tf1 = cc._s1._transform;
						var tf2 = cc._s2._transform;
						var _this4 = this._pool;
						var pos1 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
						var _this5 = this._pool;
						var pos2 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
						var _this6 = this._pool;
						var normal = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
						var _this7 = this._pool;
						var tangent = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
						var _this8 = this._pool;
						var binormal = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
						var v4 = pos1;
						v4.x = p._pos1X;
						v4.y = p._pos1Y;
						v4.z = p._pos1Z;
						var v5 = pos2;
						v5.x = p._pos2X;
						v5.y = p._pos2Y;
						v5.z = p._pos2Z;
						var v6 = normal;
						v6.x = cc._manifold._normalX;
						v6.y = cc._manifold._normalY;
						v6.z = cc._manifold._normalZ;
						var v7 = tangent;
						v7.x = cc._manifold._tangentX;
						v7.y = cc._manifold._tangentY;
						v7.z = cc._manifold._tangentZ;
						var v8 = binormal;
						v8.x = cc._manifold._binormalX;
						v8.y = cc._manifold._binormalY;
						v8.z = cc._manifold._binormalZ;
						if(p._disabled) {
							d.point(pos1,style1.disabledContactColor);
							d.point(pos2,style1.disabledContactColor);
							d.line(pos1,pos2,style1.disabledContactColor);
						} else if(p._warmStarted) {
							var color1;
							var _g4 = p._id & 3;
							switch(_g4) {
							case 0:
								color1 = style1.contactColor;
								break;
							case 1:
								color1 = style1.contactColor2;
								break;
							case 2:
								color1 = style1.contactColor3;
								break;
							default:
								color1 = style1.contactColor4;
							}
							d.point(pos1,color1);
							d.point(pos2,color1);
							d.line(pos1,pos2,style1.contactColor);
						} else {
							d.point(pos1,style1.newContactColor);
							d.point(pos2,style1.newContactColor);
							d.line(pos1,pos2,style1.newContactColor);
						}
						pos2.x = pos1.x;
						pos2.y = pos1.y;
						pos2.z = pos1.z;
						var _this9 = pos2;
						var s = style1.contactNormalLength;
						var tx = _this9.x + normal.x * s;
						var ty = _this9.y + normal.y * s;
						var tz = _this9.z + normal.z * s;
						_this9.x = tx;
						_this9.y = ty;
						_this9.z = tz;
						d.line(pos1,pos2,style1.contactNormalColor);
						if(d.drawContactBases) {
							pos2.x = pos1.x;
							pos2.y = pos1.y;
							pos2.z = pos1.z;
							var _this10 = pos2;
							var s1 = style1.contactTangentLength;
							var tx1 = _this10.x + tangent.x * s1;
							var ty1 = _this10.y + tangent.y * s1;
							var tz1 = _this10.z + tangent.z * s1;
							_this10.x = tx1;
							_this10.y = ty1;
							_this10.z = tz1;
							d.line(pos1,pos2,style1.contactTangentColor);
							pos2.x = pos1.x;
							pos2.y = pos1.y;
							pos2.z = pos1.z;
							var _this11 = pos2;
							var s2 = style1.contactBinormalLength;
							var tx2 = _this11.x + binormal.x * s2;
							var ty2 = _this11.y + binormal.y * s2;
							var tz2 = _this11.z + binormal.z * s2;
							_this11.x = tx2;
							_this11.y = ty2;
							_this11.z = tz2;
							d.line(pos1,pos2,style1.contactBinormalColor);
						}
						var _this12 = this._pool;
						if(pos1 != null) {
							pos1.zero();
							if(_this12.sizeVec3 == _this12.stackVec3.length) {
								var newLength2 = _this12.sizeVec3 << 1;
								var this3 = new Array(newLength2);
								var newArray2 = this3;
								var _g13 = 0;
								var _g5 = _this12.sizeVec3;
								while(_g13 < _g5) {
									var i3 = _g13++;
									newArray2[i3] = _this12.stackVec3[i3];
									_this12.stackVec3[i3] = null;
								}
								_this12.stackVec3 = newArray2;
							}
							_this12.stackVec3[_this12.sizeVec3++] = pos1;
						}
						var _this13 = this._pool;
						if(pos2 != null) {
							pos2.zero();
							if(_this13.sizeVec3 == _this13.stackVec3.length) {
								var newLength3 = _this13.sizeVec3 << 1;
								var this4 = new Array(newLength3);
								var newArray3 = this4;
								var _g14 = 0;
								var _g6 = _this13.sizeVec3;
								while(_g14 < _g6) {
									var i4 = _g14++;
									newArray3[i4] = _this13.stackVec3[i4];
									_this13.stackVec3[i4] = null;
								}
								_this13.stackVec3 = newArray3;
							}
							_this13.stackVec3[_this13.sizeVec3++] = pos2;
						}
						var _this14 = this._pool;
						if(normal != null) {
							normal.zero();
							if(_this14.sizeVec3 == _this14.stackVec3.length) {
								var newLength4 = _this14.sizeVec3 << 1;
								var this5 = new Array(newLength4);
								var newArray4 = this5;
								var _g15 = 0;
								var _g7 = _this14.sizeVec3;
								while(_g15 < _g7) {
									var i5 = _g15++;
									newArray4[i5] = _this14.stackVec3[i5];
									_this14.stackVec3[i5] = null;
								}
								_this14.stackVec3 = newArray4;
							}
							_this14.stackVec3[_this14.sizeVec3++] = normal;
						}
						var _this15 = this._pool;
						if(tangent != null) {
							tangent.zero();
							if(_this15.sizeVec3 == _this15.stackVec3.length) {
								var newLength5 = _this15.sizeVec3 << 1;
								var this6 = new Array(newLength5);
								var newArray5 = this6;
								var _g16 = 0;
								var _g8 = _this15.sizeVec3;
								while(_g16 < _g8) {
									var i6 = _g16++;
									newArray5[i6] = _this15.stackVec3[i6];
									_this15.stackVec3[i6] = null;
								}
								_this15.stackVec3 = newArray5;
							}
							_this15.stackVec3[_this15.sizeVec3++] = tangent;
						}
						var _this16 = this._pool;
						if(binormal != null) {
							binormal.zero();
							if(_this16.sizeVec3 == _this16.stackVec3.length) {
								var newLength6 = _this16.sizeVec3 << 1;
								var this7 = new Array(newLength6);
								var newArray6 = this7;
								var _g17 = 0;
								var _g9 = _this16.sizeVec3;
								while(_g17 < _g9) {
									var i7 = _g17++;
									newArray6[i7] = _this16.stackVec3[i7];
									_this16.stackVec3[i7] = null;
								}
								_this16.stackVec3 = newArray6;
							}
							_this16.stackVec3[_this16.sizeVec3++] = binormal;
						}
					}
				}
				c = n;
			}
		}
		if(d.drawJoints) {
			var j = this._jointList;
			while(j != null) {
				var n1 = j._next;
				var _this17 = this._pool;
				var p1 = _this17.sizeVec3 == 0 ? new oimo_common_Vec3() : _this17.stackVec3[--_this17.sizeVec3];
				var _this18 = this._pool;
				var p2 = _this18.sizeVec3 == 0 ? new oimo_common_Vec3() : _this18.stackVec3[--_this18.sizeVec3];
				var v9 = p1;
				v9.x = j._b1._transform._positionX;
				v9.y = j._b1._transform._positionY;
				v9.z = j._b1._transform._positionZ;
				var v10 = p2;
				v10.x = j._b2._transform._positionX;
				v10.y = j._b2._transform._positionY;
				v10.z = j._b2._transform._positionZ;
				var _this19 = this._pool;
				var anchor1 = _this19.sizeVec3 == 0 ? new oimo_common_Vec3() : _this19.stackVec3[--_this19.sizeVec3];
				var _this20 = this._pool;
				var anchor2 = _this20.sizeVec3 == 0 ? new oimo_common_Vec3() : _this20.stackVec3[--_this20.sizeVec3];
				var _this21 = this._pool;
				var basisX1 = _this21.sizeVec3 == 0 ? new oimo_common_Vec3() : _this21.stackVec3[--_this21.sizeVec3];
				var _this22 = this._pool;
				var basisY1 = _this22.sizeVec3 == 0 ? new oimo_common_Vec3() : _this22.stackVec3[--_this22.sizeVec3];
				var _this23 = this._pool;
				var basisZ1 = _this23.sizeVec3 == 0 ? new oimo_common_Vec3() : _this23.stackVec3[--_this23.sizeVec3];
				var _this24 = this._pool;
				var basisX2 = _this24.sizeVec3 == 0 ? new oimo_common_Vec3() : _this24.stackVec3[--_this24.sizeVec3];
				var _this25 = this._pool;
				var basisY2 = _this25.sizeVec3 == 0 ? new oimo_common_Vec3() : _this25.stackVec3[--_this25.sizeVec3];
				var _this26 = this._pool;
				var basisZ2 = _this26.sizeVec3 == 0 ? new oimo_common_Vec3() : _this26.stackVec3[--_this26.sizeVec3];
				var v11 = anchor1;
				v11.x = j._anchor1X;
				v11.y = j._anchor1Y;
				v11.z = j._anchor1Z;
				var v12 = anchor2;
				v12.x = j._anchor2X;
				v12.y = j._anchor2Y;
				v12.z = j._anchor2Z;
				var v13 = basisX1;
				v13.x = j._basisX1X;
				v13.y = j._basisX1Y;
				v13.z = j._basisX1Z;
				var v14 = basisY1;
				v14.x = j._basisY1X;
				v14.y = j._basisY1Y;
				v14.z = j._basisY1Z;
				var v15 = basisZ1;
				v15.x = j._basisZ1X;
				v15.y = j._basisZ1Y;
				v15.z = j._basisZ1Z;
				var v16 = basisX2;
				v16.x = j._basisX2X;
				v16.y = j._basisX2Y;
				v16.z = j._basisX2Z;
				var v17 = basisY2;
				v17.x = j._basisY2X;
				v17.y = j._basisY2Y;
				v17.z = j._basisY2Z;
				var v18 = basisZ2;
				v18.x = j._basisZ2X;
				v18.y = j._basisZ2Y;
				v18.z = j._basisZ2Z;
				d.line(p1,anchor1,d.style.jointLineColor);
				d.line(p2,anchor2,d.style.jointLineColor);
				if(d.drawJointLimits) {
					var _g10 = j._type;
					switch(_g10) {
					case 0:
						break;
					case 1:
						var radius = d.style.jointRotationalConstraintRadius;
						var color2 = d.style.jointLineColor;
						var lm = j._lm;
						this._drawRotationalLimit(d,anchor1,basisY1,basisZ1,basisY2,radius,lm.lowerLimit,lm.upperLimit,color2);
						break;
					case 2:
						var j1 = j;
						var radius1 = d.style.jointRotationalConstraintRadius;
						var color3 = d.style.jointLineColor;
						var rlm = j1._rotLm;
						var tlm = j1._translLm;
						this._drawRotationalLimit(d,anchor2,basisY1,basisZ1,basisY2,radius1,rlm.lowerLimit,rlm.upperLimit,color3);
						this._drawTranslationalLimit(d,anchor1,basisX1,tlm.lowerLimit,tlm.upperLimit,color3);
						break;
					case 3:
						var radius2 = d.style.jointRotationalConstraintRadius;
						var color4 = d.style.jointLineColor;
						var lm1 = j._lm;
						this._drawTranslationalLimit(d,anchor1,basisX1,lm1.lowerLimit,lm1.upperLimit,color4);
						break;
					case 4:
						var j2 = j;
						var radius3 = d.style.jointRotationalConstraintRadius;
						var color5 = d.style.jointLineColor;
						var lm11 = j2._lm1;
						var lm2 = j2._lm2;
						this._drawRotationalLimit(d,anchor1,basisY1,basisZ1,basisY1,radius3,j2._angleX - lm11.upperLimit,j2._angleX - lm11.lowerLimit,color5);
						this._drawRotationalLimit(d,anchor2,basisX2,basisY2,basisX2,radius3,lm2.lowerLimit - j2._angleZ,lm2.upperLimit - j2._angleZ,color5);
						break;
					case 5:
						var j3 = j;
						var radius4 = d.style.jointRotationalConstraintRadius;
						var color6 = d.style.jointLineColor;
						var lm3 = j3._twistLm;
						this._drawRotationalLimit(d,anchor2,basisY2,basisZ2,basisY2,radius4,lm3.lowerLimit - j3._twistAngle,lm3.upperLimit - j3._twistAngle,color6);
						this._drawEllipseOnSphere(d,anchor1,basisX1,basisY1,basisZ1,j3._maxSwingAngle1,j3._maxSwingAngle2,radius4,color6);
						var _this27 = this._pool;
						var _this28 = _this27.sizeVec3 == 0 ? new oimo_common_Vec3() : _this27.stackVec3[--_this27.sizeVec3];
						_this28.x = anchor2.x;
						_this28.y = anchor2.y;
						_this28.z = anchor2.z;
						var _this29 = _this28;
						var tx3 = _this29.x + basisX2.x * radius4;
						var ty3 = _this29.y + basisX2.y * radius4;
						var tz3 = _this29.z + basisX2.z * radius4;
						_this29.x = tx3;
						_this29.y = ty3;
						_this29.z = tz3;
						var to = _this29;
						d.line(anchor2,to,color6);
						var _this30 = this._pool;
						if(to != null) {
							to.zero();
							if(_this30.sizeVec3 == _this30.stackVec3.length) {
								var newLength7 = _this30.sizeVec3 << 1;
								var this8 = new Array(newLength7);
								var newArray7 = this8;
								var _g18 = 0;
								var _g19 = _this30.sizeVec3;
								while(_g18 < _g19) {
									var i8 = _g18++;
									newArray7[i8] = _this30.stackVec3[i8];
									_this30.stackVec3[i8] = null;
								}
								_this30.stackVec3 = newArray7;
							}
							_this30.stackVec3[_this30.sizeVec3++] = to;
						}
						break;
					case 6:
						var j4 = j;
						var radius5 = d.style.jointRotationalConstraintRadius;
						var color7 = d.style.jointLineColor;
						var txlm = j4._translLms[0];
						var tylm = j4._translLms[1];
						var tzlm = j4._translLms[2];
						var rxlm = j4._rotLms[0];
						var rylm = j4._rotLms[1];
						var rzlm = j4._rotLms[2];
						this._drawTranslationalLimit3D(d,anchor1,basisX1,basisY1,basisZ1,txlm,tylm,tzlm,color7);
						var _this31 = this._pool;
						var rotYAxis = _this31.sizeVec3 == 0 ? new oimo_common_Vec3() : _this31.stackVec3[--_this31.sizeVec3];
						var v19 = rotYAxis;
						v19.x = j4._axisYX;
						v19.y = j4._axisYY;
						v19.z = j4._axisYZ;
						var _this32 = this._pool;
						var _this33 = _this32.sizeVec3 == 0 ? new oimo_common_Vec3() : _this32.stackVec3[--_this32.sizeVec3];
						_this33.x = basisX1.x;
						_this33.y = basisX1.y;
						_this33.z = basisX1.z;
						var rotYBasisX = _this33;
						var _this34 = this._pool;
						var _this35 = _this34.sizeVec3 == 0 ? new oimo_common_Vec3() : _this34.stackVec3[--_this34.sizeVec3];
						_this35.x = basisX1.x;
						_this35.y = basisX1.y;
						_this35.z = basisX1.z;
						var _this36 = _this35;
						var tx4 = _this36.y * rotYAxis.z - _this36.z * rotYAxis.y;
						var ty4 = _this36.z * rotYAxis.x - _this36.x * rotYAxis.z;
						var tz4 = _this36.x * rotYAxis.y - _this36.y * rotYAxis.x;
						_this36.x = tx4;
						_this36.y = ty4;
						_this36.z = tz4;
						var rotYBasisY = _this36;
						this._drawRotationalLimit(d,anchor2,basisY1,basisZ1,basisY1,radius5,j4._angleX - rxlm.upperLimit,j4._angleX - rxlm.lowerLimit,color7);
						this._drawRotationalLimit(d,anchor2,rotYBasisX,rotYBasisY,rotYBasisX,radius5,rylm.lowerLimit - j4._angleY,rylm.upperLimit - j4._angleY,color7);
						this._drawRotationalLimit(d,anchor2,basisX2,basisY2,basisX2,radius5,rzlm.lowerLimit - j4._angleZ,rzlm.upperLimit - j4._angleZ,color7);
						break;
					}
				}
				d.line(anchor1,anchor2,d.style.jointErrorColor);
				var _this37 = this._pool;
				if(p1 != null) {
					p1.zero();
					if(_this37.sizeVec3 == _this37.stackVec3.length) {
						var newLength8 = _this37.sizeVec3 << 1;
						var this9 = new Array(newLength8);
						var newArray8 = this9;
						var _g110 = 0;
						var _g20 = _this37.sizeVec3;
						while(_g110 < _g20) {
							var i9 = _g110++;
							newArray8[i9] = _this37.stackVec3[i9];
							_this37.stackVec3[i9] = null;
						}
						_this37.stackVec3 = newArray8;
					}
					_this37.stackVec3[_this37.sizeVec3++] = p1;
				}
				var _this38 = this._pool;
				if(p2 != null) {
					p2.zero();
					if(_this38.sizeVec3 == _this38.stackVec3.length) {
						var newLength9 = _this38.sizeVec3 << 1;
						var this10 = new Array(newLength9);
						var newArray9 = this10;
						var _g111 = 0;
						var _g21 = _this38.sizeVec3;
						while(_g111 < _g21) {
							var i10 = _g111++;
							newArray9[i10] = _this38.stackVec3[i10];
							_this38.stackVec3[i10] = null;
						}
						_this38.stackVec3 = newArray9;
					}
					_this38.stackVec3[_this38.sizeVec3++] = p2;
				}
				var _this39 = this._pool;
				if(anchor1 != null) {
					anchor1.zero();
					if(_this39.sizeVec3 == _this39.stackVec3.length) {
						var newLength10 = _this39.sizeVec3 << 1;
						var this11 = new Array(newLength10);
						var newArray10 = this11;
						var _g112 = 0;
						var _g22 = _this39.sizeVec3;
						while(_g112 < _g22) {
							var i11 = _g112++;
							newArray10[i11] = _this39.stackVec3[i11];
							_this39.stackVec3[i11] = null;
						}
						_this39.stackVec3 = newArray10;
					}
					_this39.stackVec3[_this39.sizeVec3++] = anchor1;
				}
				var _this40 = this._pool;
				if(anchor2 != null) {
					anchor2.zero();
					if(_this40.sizeVec3 == _this40.stackVec3.length) {
						var newLength11 = _this40.sizeVec3 << 1;
						var this12 = new Array(newLength11);
						var newArray11 = this12;
						var _g113 = 0;
						var _g23 = _this40.sizeVec3;
						while(_g113 < _g23) {
							var i12 = _g113++;
							newArray11[i12] = _this40.stackVec3[i12];
							_this40.stackVec3[i12] = null;
						}
						_this40.stackVec3 = newArray11;
					}
					_this40.stackVec3[_this40.sizeVec3++] = anchor2;
				}
				var _this41 = this._pool;
				if(basisX1 != null) {
					basisX1.zero();
					if(_this41.sizeVec3 == _this41.stackVec3.length) {
						var newLength12 = _this41.sizeVec3 << 1;
						var this13 = new Array(newLength12);
						var newArray12 = this13;
						var _g114 = 0;
						var _g24 = _this41.sizeVec3;
						while(_g114 < _g24) {
							var i13 = _g114++;
							newArray12[i13] = _this41.stackVec3[i13];
							_this41.stackVec3[i13] = null;
						}
						_this41.stackVec3 = newArray12;
					}
					_this41.stackVec3[_this41.sizeVec3++] = basisX1;
				}
				var _this42 = this._pool;
				if(basisY1 != null) {
					basisY1.zero();
					if(_this42.sizeVec3 == _this42.stackVec3.length) {
						var newLength13 = _this42.sizeVec3 << 1;
						var this14 = new Array(newLength13);
						var newArray13 = this14;
						var _g115 = 0;
						var _g25 = _this42.sizeVec3;
						while(_g115 < _g25) {
							var i14 = _g115++;
							newArray13[i14] = _this42.stackVec3[i14];
							_this42.stackVec3[i14] = null;
						}
						_this42.stackVec3 = newArray13;
					}
					_this42.stackVec3[_this42.sizeVec3++] = basisY1;
				}
				var _this43 = this._pool;
				if(basisZ1 != null) {
					basisZ1.zero();
					if(_this43.sizeVec3 == _this43.stackVec3.length) {
						var newLength14 = _this43.sizeVec3 << 1;
						var this15 = new Array(newLength14);
						var newArray14 = this15;
						var _g116 = 0;
						var _g26 = _this43.sizeVec3;
						while(_g116 < _g26) {
							var i15 = _g116++;
							newArray14[i15] = _this43.stackVec3[i15];
							_this43.stackVec3[i15] = null;
						}
						_this43.stackVec3 = newArray14;
					}
					_this43.stackVec3[_this43.sizeVec3++] = basisZ1;
				}
				var _this44 = this._pool;
				if(basisX2 != null) {
					basisX2.zero();
					if(_this44.sizeVec3 == _this44.stackVec3.length) {
						var newLength15 = _this44.sizeVec3 << 1;
						var this16 = new Array(newLength15);
						var newArray15 = this16;
						var _g117 = 0;
						var _g27 = _this44.sizeVec3;
						while(_g117 < _g27) {
							var i16 = _g117++;
							newArray15[i16] = _this44.stackVec3[i16];
							_this44.stackVec3[i16] = null;
						}
						_this44.stackVec3 = newArray15;
					}
					_this44.stackVec3[_this44.sizeVec3++] = basisX2;
				}
				var _this45 = this._pool;
				if(basisY2 != null) {
					basisY2.zero();
					if(_this45.sizeVec3 == _this45.stackVec3.length) {
						var newLength16 = _this45.sizeVec3 << 1;
						var this17 = new Array(newLength16);
						var newArray16 = this17;
						var _g118 = 0;
						var _g28 = _this45.sizeVec3;
						while(_g118 < _g28) {
							var i17 = _g118++;
							newArray16[i17] = _this45.stackVec3[i17];
							_this45.stackVec3[i17] = null;
						}
						_this45.stackVec3 = newArray16;
					}
					_this45.stackVec3[_this45.sizeVec3++] = basisY2;
				}
				var _this46 = this._pool;
				if(basisZ2 != null) {
					basisZ2.zero();
					if(_this46.sizeVec3 == _this46.stackVec3.length) {
						var newLength17 = _this46.sizeVec3 << 1;
						var this18 = new Array(newLength17);
						var newArray17 = this18;
						var _g119 = 0;
						var _g29 = _this46.sizeVec3;
						while(_g119 < _g29) {
							var i18 = _g119++;
							newArray17[i18] = _this46.stackVec3[i18];
							_this46.stackVec3[i18] = null;
						}
						_this46.stackVec3 = newArray17;
					}
					_this46.stackVec3[_this46.sizeVec3++] = basisZ2;
				}
				j = n1;
			}
		}
	}
	,_drawRotationalLimit: function(d,center,ex,ey,needle,radius,min,max,color) {
		if(min != max) {
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this2 = _this1;
			var tx = _this2.x + needle.x * radius;
			var ty = _this2.y + needle.y * radius;
			var tz = _this2.z + needle.z * radius;
			_this2.x = tx;
			_this2.y = ty;
			_this2.z = tz;
			var to = _this2;
			d.line(center,to,color);
			var _this3 = this._pool;
			if(to != null) {
				to.zero();
				if(_this3.sizeVec3 == _this3.stackVec3.length) {
					var newLength = _this3.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this3.sizeVec3;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this3.stackVec3[i];
						_this3.stackVec3[i] = null;
					}
					_this3.stackVec3 = newArray;
				}
				_this3.stackVec3[_this3.sizeVec3++] = to;
			}
			if(min > max) {
				d.ellipse(center,ex,ey,radius,radius,color);
			} else {
				d.arc(center,ex,ey,radius,radius,min,max,true,color);
			}
		}
	}
	,_drawTranslationalLimit: function(d,center,ex,min,max,color) {
		if(min < max) {
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this2 = _this1;
			var tx = _this2.x + ex.x * min;
			var ty = _this2.y + ex.y * min;
			var tz = _this2.z + ex.z * min;
			_this2.x = tx;
			_this2.y = ty;
			_this2.z = tz;
			var lower = _this2;
			var _this3 = this._pool;
			var _this4 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
			_this4.x = center.x;
			_this4.y = center.y;
			_this4.z = center.z;
			var _this5 = _this4;
			var tx1 = _this5.x + ex.x * max;
			var ty1 = _this5.y + ex.y * max;
			var tz1 = _this5.z + ex.z * max;
			_this5.x = tx1;
			_this5.y = ty1;
			_this5.z = tz1;
			var upper = _this5;
			d.line(lower,upper,color);
			var _this6 = this._pool;
			if(lower != null) {
				lower.zero();
				if(_this6.sizeVec3 == _this6.stackVec3.length) {
					var newLength = _this6.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g1 = 0;
					var _g = _this6.sizeVec3;
					while(_g1 < _g) {
						var i = _g1++;
						newArray[i] = _this6.stackVec3[i];
						_this6.stackVec3[i] = null;
					}
					_this6.stackVec3 = newArray;
				}
				_this6.stackVec3[_this6.sizeVec3++] = lower;
			}
			var _this7 = this._pool;
			if(upper != null) {
				upper.zero();
				if(_this7.sizeVec3 == _this7.stackVec3.length) {
					var newLength1 = _this7.sizeVec3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g11 = 0;
					var _g2 = _this7.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray1[i1] = _this7.stackVec3[i1];
						_this7.stackVec3[i1] = null;
					}
					_this7.stackVec3 = newArray1;
				}
				_this7.stackVec3[_this7.sizeVec3++] = upper;
			}
		}
	}
	,_drawTranslationalLimit3D: function(d,center,ex,ey,ez,xlm,ylm,zlm,color) {
		var minx = xlm.lowerLimit;
		var maxx = xlm.upperLimit;
		var miny = ylm.lowerLimit;
		var maxy = ylm.upperLimit;
		var minz = zlm.lowerLimit;
		var maxz = zlm.upperLimit;
		var _this = this._pool;
		var lower = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this._pool;
		var upper = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
		var _this2 = this._pool;
		var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
		_this3.x = center.x;
		_this3.y = center.y;
		_this3.z = center.z;
		var _this4 = _this3;
		var tx = _this4.x + ex.x * minx;
		var ty = _this4.y + ex.y * minx;
		var tz = _this4.z + ex.z * minx;
		_this4.x = tx;
		_this4.y = ty;
		_this4.z = tz;
		var _this5 = _this4;
		var tx1 = _this5.x + ey.x * miny;
		var ty1 = _this5.y + ey.y * miny;
		var tz1 = _this5.z + ey.z * miny;
		_this5.x = tx1;
		_this5.y = ty1;
		_this5.z = tz1;
		var _this6 = _this5;
		var tx2 = _this6.x + ez.x * minz;
		var ty2 = _this6.y + ez.y * minz;
		var tz2 = _this6.z + ez.z * minz;
		_this6.x = tx2;
		_this6.y = ty2;
		_this6.z = tz2;
		var xyz = _this6;
		var _this7 = this._pool;
		var _this8 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
		_this8.x = center.x;
		_this8.y = center.y;
		_this8.z = center.z;
		var _this9 = _this8;
		var tx3 = _this9.x + ex.x * minx;
		var ty3 = _this9.y + ex.y * minx;
		var tz3 = _this9.z + ex.z * minx;
		_this9.x = tx3;
		_this9.y = ty3;
		_this9.z = tz3;
		var _this10 = _this9;
		var tx4 = _this10.x + ey.x * miny;
		var ty4 = _this10.y + ey.y * miny;
		var tz4 = _this10.z + ey.z * miny;
		_this10.x = tx4;
		_this10.y = ty4;
		_this10.z = tz4;
		var _this11 = _this10;
		var tx5 = _this11.x + ez.x * maxz;
		var ty5 = _this11.y + ez.y * maxz;
		var tz5 = _this11.z + ez.z * maxz;
		_this11.x = tx5;
		_this11.y = ty5;
		_this11.z = tz5;
		var xyZ = _this11;
		var _this12 = this._pool;
		var _this13 = _this12.sizeVec3 == 0 ? new oimo_common_Vec3() : _this12.stackVec3[--_this12.sizeVec3];
		_this13.x = center.x;
		_this13.y = center.y;
		_this13.z = center.z;
		var _this14 = _this13;
		var tx6 = _this14.x + ex.x * minx;
		var ty6 = _this14.y + ex.y * minx;
		var tz6 = _this14.z + ex.z * minx;
		_this14.x = tx6;
		_this14.y = ty6;
		_this14.z = tz6;
		var _this15 = _this14;
		var tx7 = _this15.x + ey.x * maxy;
		var ty7 = _this15.y + ey.y * maxy;
		var tz7 = _this15.z + ey.z * maxy;
		_this15.x = tx7;
		_this15.y = ty7;
		_this15.z = tz7;
		var _this16 = _this15;
		var tx8 = _this16.x + ez.x * minz;
		var ty8 = _this16.y + ez.y * minz;
		var tz8 = _this16.z + ez.z * minz;
		_this16.x = tx8;
		_this16.y = ty8;
		_this16.z = tz8;
		var xYz = _this16;
		var _this17 = this._pool;
		var _this18 = _this17.sizeVec3 == 0 ? new oimo_common_Vec3() : _this17.stackVec3[--_this17.sizeVec3];
		_this18.x = center.x;
		_this18.y = center.y;
		_this18.z = center.z;
		var _this19 = _this18;
		var tx9 = _this19.x + ex.x * minx;
		var ty9 = _this19.y + ex.y * minx;
		var tz9 = _this19.z + ex.z * minx;
		_this19.x = tx9;
		_this19.y = ty9;
		_this19.z = tz9;
		var _this20 = _this19;
		var tx10 = _this20.x + ey.x * maxy;
		var ty10 = _this20.y + ey.y * maxy;
		var tz10 = _this20.z + ey.z * maxy;
		_this20.x = tx10;
		_this20.y = ty10;
		_this20.z = tz10;
		var _this21 = _this20;
		var tx11 = _this21.x + ez.x * maxz;
		var ty11 = _this21.y + ez.y * maxz;
		var tz11 = _this21.z + ez.z * maxz;
		_this21.x = tx11;
		_this21.y = ty11;
		_this21.z = tz11;
		var xYZ = _this21;
		var _this22 = this._pool;
		var _this23 = _this22.sizeVec3 == 0 ? new oimo_common_Vec3() : _this22.stackVec3[--_this22.sizeVec3];
		_this23.x = center.x;
		_this23.y = center.y;
		_this23.z = center.z;
		var _this24 = _this23;
		var tx12 = _this24.x + ex.x * maxx;
		var ty12 = _this24.y + ex.y * maxx;
		var tz12 = _this24.z + ex.z * maxx;
		_this24.x = tx12;
		_this24.y = ty12;
		_this24.z = tz12;
		var _this25 = _this24;
		var tx13 = _this25.x + ey.x * miny;
		var ty13 = _this25.y + ey.y * miny;
		var tz13 = _this25.z + ey.z * miny;
		_this25.x = tx13;
		_this25.y = ty13;
		_this25.z = tz13;
		var _this26 = _this25;
		var tx14 = _this26.x + ez.x * minz;
		var ty14 = _this26.y + ez.y * minz;
		var tz14 = _this26.z + ez.z * minz;
		_this26.x = tx14;
		_this26.y = ty14;
		_this26.z = tz14;
		var Xyz = _this26;
		var _this27 = this._pool;
		var _this28 = _this27.sizeVec3 == 0 ? new oimo_common_Vec3() : _this27.stackVec3[--_this27.sizeVec3];
		_this28.x = center.x;
		_this28.y = center.y;
		_this28.z = center.z;
		var _this29 = _this28;
		var tx15 = _this29.x + ex.x * maxx;
		var ty15 = _this29.y + ex.y * maxx;
		var tz15 = _this29.z + ex.z * maxx;
		_this29.x = tx15;
		_this29.y = ty15;
		_this29.z = tz15;
		var _this30 = _this29;
		var tx16 = _this30.x + ey.x * miny;
		var ty16 = _this30.y + ey.y * miny;
		var tz16 = _this30.z + ey.z * miny;
		_this30.x = tx16;
		_this30.y = ty16;
		_this30.z = tz16;
		var _this31 = _this30;
		var tx17 = _this31.x + ez.x * maxz;
		var ty17 = _this31.y + ez.y * maxz;
		var tz17 = _this31.z + ez.z * maxz;
		_this31.x = tx17;
		_this31.y = ty17;
		_this31.z = tz17;
		var XyZ = _this31;
		var _this32 = this._pool;
		var _this33 = _this32.sizeVec3 == 0 ? new oimo_common_Vec3() : _this32.stackVec3[--_this32.sizeVec3];
		_this33.x = center.x;
		_this33.y = center.y;
		_this33.z = center.z;
		var _this34 = _this33;
		var tx18 = _this34.x + ex.x * maxx;
		var ty18 = _this34.y + ex.y * maxx;
		var tz18 = _this34.z + ex.z * maxx;
		_this34.x = tx18;
		_this34.y = ty18;
		_this34.z = tz18;
		var _this35 = _this34;
		var tx19 = _this35.x + ey.x * maxy;
		var ty19 = _this35.y + ey.y * maxy;
		var tz19 = _this35.z + ey.z * maxy;
		_this35.x = tx19;
		_this35.y = ty19;
		_this35.z = tz19;
		var _this36 = _this35;
		var tx20 = _this36.x + ez.x * minz;
		var ty20 = _this36.y + ez.y * minz;
		var tz20 = _this36.z + ez.z * minz;
		_this36.x = tx20;
		_this36.y = ty20;
		_this36.z = tz20;
		var XYz = _this36;
		var _this37 = this._pool;
		var _this38 = _this37.sizeVec3 == 0 ? new oimo_common_Vec3() : _this37.stackVec3[--_this37.sizeVec3];
		_this38.x = center.x;
		_this38.y = center.y;
		_this38.z = center.z;
		var _this39 = _this38;
		var tx21 = _this39.x + ex.x * maxx;
		var ty21 = _this39.y + ex.y * maxx;
		var tz21 = _this39.z + ex.z * maxx;
		_this39.x = tx21;
		_this39.y = ty21;
		_this39.z = tz21;
		var _this40 = _this39;
		var tx22 = _this40.x + ey.x * maxy;
		var ty22 = _this40.y + ey.y * maxy;
		var tz22 = _this40.z + ey.z * maxy;
		_this40.x = tx22;
		_this40.y = ty22;
		_this40.z = tz22;
		var _this41 = _this40;
		var tx23 = _this41.x + ez.x * maxz;
		var ty23 = _this41.y + ez.y * maxz;
		var tz23 = _this41.z + ez.z * maxz;
		_this41.x = tx23;
		_this41.y = ty23;
		_this41.z = tz23;
		var XYZ = _this41;
		d.line(xyz,Xyz,color);
		d.line(xYz,XYz,color);
		d.line(xyZ,XyZ,color);
		d.line(xYZ,XYZ,color);
		d.line(xyz,xYz,color);
		d.line(Xyz,XYz,color);
		d.line(xyZ,xYZ,color);
		d.line(XyZ,XYZ,color);
		d.line(xyz,xyZ,color);
		d.line(Xyz,XyZ,color);
		d.line(xYz,xYZ,color);
		d.line(XYz,XYZ,color);
		var _this42 = this._pool;
		if(xyz != null) {
			xyz.zero();
			if(_this42.sizeVec3 == _this42.stackVec3.length) {
				var newLength = _this42.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g1 = 0;
				var _g = _this42.sizeVec3;
				while(_g1 < _g) {
					var i = _g1++;
					newArray[i] = _this42.stackVec3[i];
					_this42.stackVec3[i] = null;
				}
				_this42.stackVec3 = newArray;
			}
			_this42.stackVec3[_this42.sizeVec3++] = xyz;
		}
		var _this43 = this._pool;
		if(xyZ != null) {
			xyZ.zero();
			if(_this43.sizeVec3 == _this43.stackVec3.length) {
				var newLength1 = _this43.sizeVec3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g11 = 0;
				var _g2 = _this43.sizeVec3;
				while(_g11 < _g2) {
					var i1 = _g11++;
					newArray1[i1] = _this43.stackVec3[i1];
					_this43.stackVec3[i1] = null;
				}
				_this43.stackVec3 = newArray1;
			}
			_this43.stackVec3[_this43.sizeVec3++] = xyZ;
		}
		var _this44 = this._pool;
		if(xYz != null) {
			xYz.zero();
			if(_this44.sizeVec3 == _this44.stackVec3.length) {
				var newLength2 = _this44.sizeVec3 << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g12 = 0;
				var _g3 = _this44.sizeVec3;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray2[i2] = _this44.stackVec3[i2];
					_this44.stackVec3[i2] = null;
				}
				_this44.stackVec3 = newArray2;
			}
			_this44.stackVec3[_this44.sizeVec3++] = xYz;
		}
		var _this45 = this._pool;
		if(xYZ != null) {
			xYZ.zero();
			if(_this45.sizeVec3 == _this45.stackVec3.length) {
				var newLength3 = _this45.sizeVec3 << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g13 = 0;
				var _g4 = _this45.sizeVec3;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray3[i3] = _this45.stackVec3[i3];
					_this45.stackVec3[i3] = null;
				}
				_this45.stackVec3 = newArray3;
			}
			_this45.stackVec3[_this45.sizeVec3++] = xYZ;
		}
		var _this46 = this._pool;
		if(Xyz != null) {
			Xyz.zero();
			if(_this46.sizeVec3 == _this46.stackVec3.length) {
				var newLength4 = _this46.sizeVec3 << 1;
				var this5 = new Array(newLength4);
				var newArray4 = this5;
				var _g14 = 0;
				var _g5 = _this46.sizeVec3;
				while(_g14 < _g5) {
					var i4 = _g14++;
					newArray4[i4] = _this46.stackVec3[i4];
					_this46.stackVec3[i4] = null;
				}
				_this46.stackVec3 = newArray4;
			}
			_this46.stackVec3[_this46.sizeVec3++] = Xyz;
		}
		var _this47 = this._pool;
		if(XyZ != null) {
			XyZ.zero();
			if(_this47.sizeVec3 == _this47.stackVec3.length) {
				var newLength5 = _this47.sizeVec3 << 1;
				var this6 = new Array(newLength5);
				var newArray5 = this6;
				var _g15 = 0;
				var _g6 = _this47.sizeVec3;
				while(_g15 < _g6) {
					var i5 = _g15++;
					newArray5[i5] = _this47.stackVec3[i5];
					_this47.stackVec3[i5] = null;
				}
				_this47.stackVec3 = newArray5;
			}
			_this47.stackVec3[_this47.sizeVec3++] = XyZ;
		}
		var _this48 = this._pool;
		if(XYz != null) {
			XYz.zero();
			if(_this48.sizeVec3 == _this48.stackVec3.length) {
				var newLength6 = _this48.sizeVec3 << 1;
				var this7 = new Array(newLength6);
				var newArray6 = this7;
				var _g16 = 0;
				var _g7 = _this48.sizeVec3;
				while(_g16 < _g7) {
					var i6 = _g16++;
					newArray6[i6] = _this48.stackVec3[i6];
					_this48.stackVec3[i6] = null;
				}
				_this48.stackVec3 = newArray6;
			}
			_this48.stackVec3[_this48.sizeVec3++] = XYz;
		}
		var _this49 = this._pool;
		if(XYZ != null) {
			XYZ.zero();
			if(_this49.sizeVec3 == _this49.stackVec3.length) {
				var newLength7 = _this49.sizeVec3 << 1;
				var this8 = new Array(newLength7);
				var newArray7 = this8;
				var _g17 = 0;
				var _g8 = _this49.sizeVec3;
				while(_g17 < _g8) {
					var i7 = _g17++;
					newArray7[i7] = _this49.stackVec3[i7];
					_this49.stackVec3[i7] = null;
				}
				_this49.stackVec3 = newArray7;
			}
			_this49.stackVec3[_this49.sizeVec3++] = XYZ;
		}
	}
	,_drawEllipseOnSphere: function(d,center,normal,x,y,radiansX,radiansY,radius,color) {
		var n = 16;
		var theta = 0;
		var dTheta = 6.28318530717958 / n;
		var _this = this._pool;
		var rotVec = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this1 = this._pool;
		var rotQ = _this1.sizeQuat == 0 ? new oimo_common_Quat() : _this1.stackQuat[--_this1.sizeQuat];
		var _this2 = this._pool;
		var rotM = _this2.sizeMat3 == 0 ? new oimo_common_Mat3() : _this2.stackMat3[--_this2.sizeMat3];
		var _this3 = this._pool;
		var prevV = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
		var _g1 = 0;
		var _g = n + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var rx = Math.cos(theta) * radiansX;
			var ry = Math.sin(theta) * radiansY;
			var halfRotAng = Math.sqrt(rx * rx + ry * ry);
			var rotSin = Math.sin(halfRotAng * 0.5);
			var rotCos = Math.cos(halfRotAng * 0.5);
			var _this4 = rotVec.zero();
			var tx = _this4.x + x.x * rx;
			var ty = _this4.y + x.y * rx;
			var tz = _this4.z + x.z * rx;
			_this4.x = tx;
			_this4.y = ty;
			_this4.z = tz;
			var _this5 = _this4;
			var tx1 = _this5.x + y.x * ry;
			var ty1 = _this5.y + y.y * ry;
			var tz1 = _this5.z + y.z * ry;
			_this5.x = tx1;
			_this5.y = ty1;
			_this5.z = tz1;
			var s = 1 / halfRotAng * rotSin;
			var tx2 = rotVec.x * s;
			var ty2 = rotVec.y * s;
			var tz2 = rotVec.z * s;
			rotVec.x = tx2;
			rotVec.y = ty2;
			rotVec.z = tz2;
			rotQ.x = rotVec.x;
			rotQ.y = rotVec.y;
			rotQ.z = rotVec.z;
			rotQ.w = rotCos;
			var x1 = rotQ.x;
			var y1 = rotQ.y;
			var z = rotQ.z;
			var w = rotQ.w;
			var x2 = 2 * x1;
			var y2 = 2 * y1;
			var z2 = 2 * z;
			var xx = x1 * x2;
			var yy = y1 * y2;
			var zz = z * z2;
			var xy = x1 * y2;
			var yz = y1 * z2;
			var xz = x1 * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			rotM.e00 = 1 - yy - zz;
			rotM.e01 = xy - wz;
			rotM.e02 = xz + wy;
			rotM.e10 = xy + wz;
			rotM.e11 = 1 - xx - zz;
			rotM.e12 = yz - wx;
			rotM.e20 = xz - wy;
			rotM.e21 = yz + wx;
			rotM.e22 = 1 - xx - yy;
			var _this6 = this._pool;
			var _this7 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
			var tx3 = _this7.x + normal.x * radius;
			var ty3 = _this7.y + normal.y * radius;
			var tz3 = _this7.z + normal.z * radius;
			_this7.x = tx3;
			_this7.y = ty3;
			_this7.z = tz3;
			var v = _this7;
			var tx4 = v.x * rotM.e00 + v.y * rotM.e01 + v.z * rotM.e02;
			var ty4 = v.x * rotM.e10 + v.y * rotM.e11 + v.z * rotM.e12;
			var tz4 = v.x * rotM.e20 + v.y * rotM.e21 + v.z * rotM.e22;
			v.x = tx4;
			v.y = ty4;
			v.z = tz4;
			var _this8 = v;
			var tx5 = _this8.x + center.x;
			var ty5 = _this8.y + center.y;
			var tz5 = _this8.z + center.z;
			_this8.x = tx5;
			_this8.y = ty5;
			_this8.z = tz5;
			if(i >= 1) {
				d.line(prevV,v,color);
			}
			var _this9 = this._pool;
			if(prevV != null) {
				prevV.zero();
				if(_this9.sizeVec3 == _this9.stackVec3.length) {
					var newLength = _this9.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g11 = 0;
					var _g2 = _this9.sizeVec3;
					while(_g11 < _g2) {
						var i1 = _g11++;
						newArray[i1] = _this9.stackVec3[i1];
						_this9.stackVec3[i1] = null;
					}
					_this9.stackVec3 = newArray;
				}
				_this9.stackVec3[_this9.sizeVec3++] = prevV;
			}
			prevV = v;
			theta += dTheta;
		}
		var _this10 = this._pool;
		if(rotVec != null) {
			rotVec.zero();
			if(_this10.sizeVec3 == _this10.stackVec3.length) {
				var newLength1 = _this10.sizeVec3 << 1;
				var this2 = new Array(newLength1);
				var newArray1 = this2;
				var _g12 = 0;
				var _g3 = _this10.sizeVec3;
				while(_g12 < _g3) {
					var i2 = _g12++;
					newArray1[i2] = _this10.stackVec3[i2];
					_this10.stackVec3[i2] = null;
				}
				_this10.stackVec3 = newArray1;
			}
			_this10.stackVec3[_this10.sizeVec3++] = rotVec;
		}
		var _this11 = this._pool;
		if(rotQ != null) {
			var tx6 = 0;
			var ty6 = 0;
			var tz6 = 0;
			var tw = 1;
			rotQ.x = tx6;
			rotQ.y = ty6;
			rotQ.z = tz6;
			rotQ.w = tw;
			if(_this11.sizeQuat == _this11.stackQuat.length) {
				var newLength2 = _this11.sizeQuat << 1;
				var this3 = new Array(newLength2);
				var newArray2 = this3;
				var _g13 = 0;
				var _g4 = _this11.sizeQuat;
				while(_g13 < _g4) {
					var i3 = _g13++;
					newArray2[i3] = _this11.stackQuat[i3];
					_this11.stackQuat[i3] = null;
				}
				_this11.stackQuat = newArray2;
			}
			_this11.stackQuat[_this11.sizeQuat++] = rotQ;
		}
		var _this12 = this._pool;
		if(rotM != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			rotM.e00 = t00;
			rotM.e01 = t01;
			rotM.e02 = t02;
			rotM.e10 = t10;
			rotM.e11 = t11;
			rotM.e12 = t12;
			rotM.e20 = t20;
			rotM.e21 = t21;
			rotM.e22 = t22;
			if(_this12.sizeMat3 == _this12.stackMat3.length) {
				var newLength3 = _this12.sizeMat3 << 1;
				var this4 = new Array(newLength3);
				var newArray3 = this4;
				var _g14 = 0;
				var _g5 = _this12.sizeMat3;
				while(_g14 < _g5) {
					var i4 = _g14++;
					newArray3[i4] = _this12.stackMat3[i4];
					_this12.stackMat3[i4] = null;
				}
				_this12.stackMat3 = newArray3;
			}
			_this12.stackMat3[_this12.sizeMat3++] = rotM;
		}
		var _this13 = this._pool;
		if(prevV != null) {
			prevV.zero();
			if(_this13.sizeVec3 == _this13.stackVec3.length) {
				var newLength4 = _this13.sizeVec3 << 1;
				var this5 = new Array(newLength4);
				var newArray4 = this5;
				var _g15 = 0;
				var _g6 = _this13.sizeVec3;
				while(_g15 < _g6) {
					var i5 = _g15++;
					newArray4[i5] = _this13.stackVec3[i5];
					_this13.stackVec3[i5] = null;
				}
				_this13.stackVec3 = newArray4;
			}
			_this13.stackVec3[_this13.sizeVec3++] = prevV;
		}
	}
	,step: function(timeStep) {
		if(this._timeStep.dt > 0) {
			this._timeStep.dtRatio = timeStep / this._timeStep.dt;
		}
		this._timeStep.dt = timeStep;
		this._timeStep.invDt = 1 / timeStep;
		var st = new Date().getTime() / 1000;
		this._updateContacts();
		this._solveIslands();
		var en = new Date().getTime() / 1000;
		oimo_dynamics_common_Performance.totalTime = (en - st) * 1000;
	}
	,addRigidBody: function(rigidBody) {
		if(rigidBody._world != null) {
			throw new Error("A rigid body cannot belong to multiple worlds.");
		}
		if(this._rigidBodyList == null) {
			this._rigidBodyList = rigidBody;
			this._rigidBodyListLast = rigidBody;
		} else {
			this._rigidBodyListLast._next = rigidBody;
			rigidBody._prev = this._rigidBodyListLast;
			this._rigidBodyListLast = rigidBody;
		}
		rigidBody._world = this;
		var s = rigidBody._shapeList;
		while(s != null) {
			var n = s._next;
			s._proxy = this._broadPhase.createProxy(s,s._aabb);
			s._id = this._shapeIdCount++;
			this._numShapes++;
			s = n;
		}
		this._numRigidBodies++;
	}
	,removeRigidBody: function(rigidBody) {
		if(rigidBody._world != this) {
			throw new Error("The rigid body doesn't belong to the world.");
		}
		var prev = rigidBody._prev;
		var next = rigidBody._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(rigidBody == this._rigidBodyList) {
			this._rigidBodyList = this._rigidBodyList._next;
		}
		if(rigidBody == this._rigidBodyListLast) {
			this._rigidBodyListLast = this._rigidBodyListLast._prev;
		}
		rigidBody._next = null;
		rigidBody._prev = null;
		rigidBody._world = null;
		var s = rigidBody._shapeList;
		while(s != null) {
			var n = s._next;
			this._broadPhase.destroyProxy(s._proxy);
			s._proxy = null;
			s._id = -1;
			var cl = s._rigidBody._contactLinkList;
			while(cl != null) {
				var n1 = cl._next;
				var c = cl._contact;
				if(c._s1 == s || c._s2 == s) {
					var _this = cl._other;
					_this._sleeping = false;
					_this._sleepTime = 0;
					var _this1 = this._contactManager;
					var prev1 = c._prev;
					var next1 = c._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c == _this1._contactList) {
						_this1._contactList = _this1._contactList._next;
					}
					if(c == _this1._contactListLast) {
						_this1._contactListLast = _this1._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev2 = c._link1._prev;
					var next2 = c._link1._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev3 = c._link2._prev;
					var next3 = c._link2._next;
					if(prev3 != null) {
						prev3._next = next3;
					}
					if(next3 != null) {
						next3._prev = prev3;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this2 = c._contactConstraint;
					_this2._s1 = null;
					_this2._s2 = null;
					_this2._b1 = null;
					_this2._b2 = null;
					_this2._tf1 = null;
					_this2._tf2 = null;
					c._next = _this1._contactPool;
					_this1._contactPool = c;
					_this1._numContacts--;
				}
				cl = n1;
			}
			this._numShapes--;
			s = n;
		}
		this._numRigidBodies--;
	}
	,addJoint: function(joint) {
		if(joint._world != null) {
			throw new Error("A joint cannot belong to multiple worlds.");
		}
		if(this._jointList == null) {
			this._jointList = joint;
			this._jointListLast = joint;
		} else {
			this._jointListLast._next = joint;
			joint._prev = this._jointListLast;
			this._jointListLast = joint;
		}
		joint._world = this;
		joint._link1._other = joint._b2;
		joint._link2._other = joint._b1;
		if(joint._b1._jointLinkList == null) {
			joint._b1._jointLinkList = joint._link1;
			joint._b1._jointLinkListLast = joint._link1;
		} else {
			joint._b1._jointLinkListLast._next = joint._link1;
			joint._link1._prev = joint._b1._jointLinkListLast;
			joint._b1._jointLinkListLast = joint._link1;
		}
		if(joint._b2._jointLinkList == null) {
			joint._b2._jointLinkList = joint._link2;
			joint._b2._jointLinkListLast = joint._link2;
		} else {
			joint._b2._jointLinkListLast._next = joint._link2;
			joint._link2._prev = joint._b2._jointLinkListLast;
			joint._b2._jointLinkListLast = joint._link2;
		}
		joint._b1._numJointLinks++;
		joint._b2._numJointLinks++;
		var _this = joint._b1;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this1 = joint._b2;
		_this1._sleeping = false;
		_this1._sleepTime = 0;
		joint._syncAnchors();
		this._numJoints++;
	}
	,removeJoint: function(joint) {
		if(joint._world != this) {
			throw new Error("The joint doesn't belong to the world.");
		}
		var prev = joint._prev;
		var next = joint._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint == this._jointList) {
			this._jointList = this._jointList._next;
		}
		if(joint == this._jointListLast) {
			this._jointListLast = this._jointListLast._prev;
		}
		joint._next = null;
		joint._prev = null;
		joint._world = null;
		var prev1 = joint._link1._prev;
		var next1 = joint._link1._next;
		if(prev1 != null) {
			prev1._next = next1;
		}
		if(next1 != null) {
			next1._prev = prev1;
		}
		if(joint._link1 == joint._b1._jointLinkList) {
			joint._b1._jointLinkList = joint._b1._jointLinkList._next;
		}
		if(joint._link1 == joint._b1._jointLinkListLast) {
			joint._b1._jointLinkListLast = joint._b1._jointLinkListLast._prev;
		}
		joint._link1._next = null;
		joint._link1._prev = null;
		var prev2 = joint._link2._prev;
		var next2 = joint._link2._next;
		if(prev2 != null) {
			prev2._next = next2;
		}
		if(next2 != null) {
			next2._prev = prev2;
		}
		if(joint._link2 == joint._b2._jointLinkList) {
			joint._b2._jointLinkList = joint._b2._jointLinkList._next;
		}
		if(joint._link2 == joint._b2._jointLinkListLast) {
			joint._b2._jointLinkListLast = joint._b2._jointLinkListLast._prev;
		}
		joint._link2._next = null;
		joint._link2._prev = null;
		joint._link1._other = null;
		joint._link2._other = null;
		joint._b1._numJointLinks--;
		joint._b2._numJointLinks--;
		var _this = joint._b1;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this1 = joint._b2;
		_this1._sleeping = false;
		_this1._sleepTime = 0;
		this._numJoints--;
	}
	,setDebugDraw: function(debugDraw) {
		this._debugDraw = debugDraw;
	}
	,getDebugDraw: function() {
		return this._debugDraw;
	}
	,debugDraw: function() {
		if(this._debugDraw != null) {
			if(this._broadPhase._type == 2) {
				var bvhBroadPhase = this._broadPhase;
				this._drawBvh(this._debugDraw,bvhBroadPhase._tree);
			}
			this._drawRigidBodies(this._debugDraw);
			this._drawConstraints(this._debugDraw);
		}
	}
	,rayCast: function(begin,end,callback) {
		var _this = this._rayCastWrapper.begin;
		_this.x = begin.x;
		_this.y = begin.y;
		_this.z = begin.z;
		var _this1 = this._rayCastWrapper.end;
		_this1.x = end.x;
		_this1.y = end.y;
		_this1.z = end.z;
		this._rayCastWrapper.callback = callback;
		this._broadPhase.rayCast(begin,end,this._rayCastWrapper);
	}
	,convexCast: function(convex,begin,translation,callback) {
		this._convexCastWrapper.convex = convex;
		var _this = this._convexCastWrapper.begin;
		_this._positionX = begin._positionX;
		_this._positionY = begin._positionY;
		_this._positionZ = begin._positionZ;
		_this._rotation00 = begin._rotation00;
		_this._rotation01 = begin._rotation01;
		_this._rotation02 = begin._rotation02;
		_this._rotation10 = begin._rotation10;
		_this._rotation11 = begin._rotation11;
		_this._rotation12 = begin._rotation12;
		_this._rotation20 = begin._rotation20;
		_this._rotation21 = begin._rotation21;
		_this._rotation22 = begin._rotation22;
		var _this1 = this._convexCastWrapper.translation;
		_this1.x = translation.x;
		_this1.y = translation.y;
		_this1.z = translation.z;
		this._convexCastWrapper.callback = callback;
		this._broadPhase.convexCast(convex,begin,translation,this._convexCastWrapper);
	}
	,aabbTest: function(aabb,callback) {
		this._aabbTestWrapper._aabb.copyFrom(aabb);
		this._aabbTestWrapper._callback = callback;
		this._broadPhase.aabbTest(aabb,this._aabbTestWrapper);
	}
	,getRigidBodyList: function() {
		return this._rigidBodyList;
	}
	,getJointList: function() {
		return this._jointList;
	}
	,getBroadPhase: function() {
		return this._broadPhase;
	}
	,getContactManager: function() {
		return this._contactManager;
	}
	,getNumRigidBodies: function() {
		return this._numRigidBodies;
	}
	,getNumJoints: function() {
		return this._numJoints;
	}
	,getNumShapes: function() {
		return this._numShapes;
	}
	,getNumIslands: function() {
		return this._numIslands;
	}
	,getNumVelocityIterations: function() {
		return this._numVelocityIterations;
	}
	,setNumVelocityIterations: function(numVelocityIterations) {
		this._numVelocityIterations = numVelocityIterations;
	}
	,getNumPositionIterations: function() {
		return this._numPositionIterations;
	}
	,setNumPositionIterations: function(numPositionIterations) {
		this._numPositionIterations = numPositionIterations;
	}
	,getGravity: function() {
		return this._gravity;
	}
	,setGravity: function(gravity) {
		var _this = this._gravity;
		_this.x = gravity.x;
		_this.y = gravity.y;
		_this.z = gravity.z;
	}
};
var oimo_dynamics__$World_RayCastWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
	this.begin = new oimo_common_Vec3();
	this.end = new oimo_common_Vec3();
	this.callback = null;
};
oimo_dynamics__$World_RayCastWrapper.__name__ = true;
oimo_dynamics__$World_RayCastWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_RayCastWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		if(shape._geom.rayCast(this.begin,this.end,shape._transform,this.rayCastHit)) {
			this.callback.process(shape,this.rayCastHit);
		}
	}
});
var oimo_dynamics__$World_ConvexCastWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
	this.begin = new oimo_common_Transform();
	this.translation = new oimo_common_Vec3();
	this.zero = new oimo_common_Vec3();
	this.callback = null;
	this.convex = null;
};
oimo_dynamics__$World_ConvexCastWrapper.__name__ = true;
oimo_dynamics__$World_ConvexCastWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_ConvexCastWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		var type = shape._geom._type;
		if(type < 0 || type > 5) {
			return;
		}
		var geom = shape._geom;
		if(oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance.convexCast(this.convex,geom,this.begin,shape._transform,this.translation,this.zero,this.rayCastHit)) {
			this.callback.process(shape,this.rayCastHit);
		}
	}
});
var oimo_dynamics__$World_AabbTestWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this._aabb = new oimo_collision_geometry_Aabb();
	this._callback = null;
};
oimo_dynamics__$World_AabbTestWrapper.__name__ = true;
oimo_dynamics__$World_AabbTestWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_AabbTestWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		var shapeAabb = shape._aabb;
		if(shapeAabb._minX < this._aabb._maxX && shapeAabb._maxX > this._aabb._minX && shapeAabb._minY < this._aabb._maxY && shapeAabb._maxY > this._aabb._minY && shapeAabb._minZ < this._aabb._maxZ && shapeAabb._maxZ > this._aabb._minZ) {
			this._callback.process(shape);
		}
	}
});
var oimo_dynamics_callback_AabbTestCallback = function() {
};
oimo_dynamics_callback_AabbTestCallback.__name__ = true;
oimo_dynamics_callback_AabbTestCallback.prototype = {
	process: function(shape) {
	}
};
var oimo_dynamics_callback_RayCastCallback = function() {
};
oimo_dynamics_callback_RayCastCallback.__name__ = true;
oimo_dynamics_callback_RayCastCallback.prototype = {
	process: function(shape,hit) {
	}
};
var oimo_dynamics_common_DebugDrawStyle = function() {
	this.basisColorZ = new oimo_common_Vec3(0.0,0.0,1.0);
	this.basisColorY = new oimo_common_Vec3(0.0,1.0,0.0);
	this.basisColorX = new oimo_common_Vec3(1.0,0.0,0.0);
	this.basisLength = 0.5;
	this.jointRotationalConstraintRadius = 0.3;
	this.jointErrorColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.jointLineColor = new oimo_common_Vec3(0.8,0.8,0.8);
	this.contactBinormalLength = 0.5;
	this.contactTangentLength = 0.5;
	this.contactNormalLength = 0.5;
	this.contactBinormalColor = new oimo_common_Vec3(0.2,0.2,1.0);
	this.contactTangentColor = new oimo_common_Vec3(0.1,0.8,0.1);
	this.contactNormalColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.disabledContactColor = new oimo_common_Vec3(0.5,0.1,0.1);
	this.newContactColor = new oimo_common_Vec3(1.0,1.0,0.1);
	this.contactColor4 = new oimo_common_Vec3(0.8,0.1,1.0);
	this.contactColor3 = new oimo_common_Vec3(0.1,0.8,0.6);
	this.contactColor2 = new oimo_common_Vec3(1.0,0.6,0.1);
	this.contactColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.pairColor = new oimo_common_Vec3(1.0,1.0,0.1);
	this.bvhNodeColor = new oimo_common_Vec3(0.4,0.4,0.4);
	this.aabbColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.kinematicShapeColor = new oimo_common_Vec3(1.0,0.5,0.1);
	this.staticShapeColor = new oimo_common_Vec3(0.7,0.7,0.7);
	this.sleepingShapeColor2 = new oimo_common_Vec3(0.2,0.8,0.5);
	this.sleepingShapeColor1 = new oimo_common_Vec3(0.3,0.3,0.8);
	this.sleepyShapeColor2 = new oimo_common_Vec3(0.6,0.8,0.3);
	this.sleepyShapeColor1 = new oimo_common_Vec3(0.5,0.25,0.6);
	this.shapeColor2 = new oimo_common_Vec3(1.0,0.8,0.1);
	this.shapeColor1 = new oimo_common_Vec3(0.7,0.2,0.4);
};
oimo_dynamics_common_DebugDrawStyle.__name__ = true;
var oimo_dynamics_common_Performance = function() { };
oimo_dynamics_common_Performance.__name__ = true;
var oimo_dynamics_constraint_ConstraintSolver = function() {
	this._b1 = null;
	this._b2 = null;
	this._addedToIsland = false;
};
oimo_dynamics_constraint_ConstraintSolver.__name__ = true;
oimo_dynamics_constraint_ConstraintSolver.prototype = {
	preSolveVelocity: function(timeStep) {
	}
	,warmStart: function(timeStep) {
	}
	,solveVelocity: function() {
	}
	,postSolveVelocity: function(timeStep) {
	}
	,preSolvePosition: function(timeStep) {
	}
	,solvePositionSplitImpulse: function() {
	}
	,solvePositionNgs: function(timeStep) {
	}
	,postSolve: function() {
	}
};
var oimo_dynamics_constraint_PositionCorrectionAlgorithm = function() { };
oimo_dynamics_constraint_PositionCorrectionAlgorithm.__name__ = true;
var oimo_dynamics_constraint_contact_ContactConstraint = function(manifold) {
	this._solver = new oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver(this);
	this._manifold = manifold;
};
oimo_dynamics_constraint_contact_ContactConstraint.__name__ = true;
oimo_dynamics_constraint_contact_ContactConstraint.prototype = {
	_getVelocitySolverInfo: function(timeStep,info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		var tangent;
		var tangentX;
		var tangentY;
		var tangentZ;
		var binormal;
		var binormalX;
		var binormalY;
		var binormalZ;
		normalX = this._manifold._normalX;
		normalY = this._manifold._normalY;
		normalZ = this._manifold._normalZ;
		tangentX = this._manifold._tangentX;
		tangentY = this._manifold._tangentY;
		tangentZ = this._manifold._tangentZ;
		binormalX = this._manifold._binormalX;
		binormalY = this._manifold._binormalY;
		binormalZ = this._manifold._binormalZ;
		var friction = Math.sqrt(this._s1._friction * this._s2._friction);
		var restitution = Math.sqrt(this._s1._restitution * this._s2._restitution);
		var num = this._manifold._numPoints;
		info.numRows = 0;
		var posDiff;
		var posDiffX;
		var posDiffY;
		var posDiffZ;
		posDiffX = this._tf1._positionX - this._tf2._positionX;
		posDiffY = this._tf1._positionY - this._tf2._positionY;
		posDiffZ = this._tf1._positionZ - this._tf2._positionZ;
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this._manifold._points[i];
			if(p._depth < 0) {
				p._disabled = true;
				var _this = p._impulse;
				_this.impulseN = 0;
				_this.impulseT = 0;
				_this.impulseB = 0;
				_this.impulseP = 0;
				_this.impulseLX = 0;
				_this.impulseLY = 0;
				_this.impulseLZ = 0;
				continue;
			} else {
				p._disabled = false;
			}
			var row = info.rows[info.numRows++];
			row.friction = friction;
			row.cfm = 0;
			var j = row.jacobianN;
			j.lin1X = normalX;
			j.lin1Y = normalY;
			j.lin1Z = normalZ;
			j.lin2X = normalX;
			j.lin2Y = normalY;
			j.lin2Z = normalZ;
			j.ang1X = p._relPos1Y * normalZ - p._relPos1Z * normalY;
			j.ang1Y = p._relPos1Z * normalX - p._relPos1X * normalZ;
			j.ang1Z = p._relPos1X * normalY - p._relPos1Y * normalX;
			j.ang2X = p._relPos2Y * normalZ - p._relPos2Z * normalY;
			j.ang2Y = p._relPos2Z * normalX - p._relPos2X * normalZ;
			j.ang2Z = p._relPos2X * normalY - p._relPos2Y * normalX;
			j = row.jacobianT;
			j.lin1X = tangentX;
			j.lin1Y = tangentY;
			j.lin1Z = tangentZ;
			j.lin2X = tangentX;
			j.lin2Y = tangentY;
			j.lin2Z = tangentZ;
			j.ang1X = p._relPos1Y * tangentZ - p._relPos1Z * tangentY;
			j.ang1Y = p._relPos1Z * tangentX - p._relPos1X * tangentZ;
			j.ang1Z = p._relPos1X * tangentY - p._relPos1Y * tangentX;
			j.ang2X = p._relPos2Y * tangentZ - p._relPos2Z * tangentY;
			j.ang2Y = p._relPos2Z * tangentX - p._relPos2X * tangentZ;
			j.ang2Z = p._relPos2X * tangentY - p._relPos2Y * tangentX;
			j = row.jacobianB;
			j.lin1X = binormalX;
			j.lin1Y = binormalY;
			j.lin1Z = binormalZ;
			j.lin2X = binormalX;
			j.lin2Y = binormalY;
			j.lin2Z = binormalZ;
			j.ang1X = p._relPos1Y * binormalZ - p._relPos1Z * binormalY;
			j.ang1Y = p._relPos1Z * binormalX - p._relPos1X * binormalZ;
			j.ang1Z = p._relPos1X * binormalY - p._relPos1Y * binormalX;
			j.ang2X = p._relPos2Y * binormalZ - p._relPos2Z * binormalY;
			j.ang2Y = p._relPos2Z * binormalX - p._relPos2X * binormalZ;
			j.ang2Z = p._relPos2X * binormalY - p._relPos2Y * binormalX;
			j = row.jacobianN;
			var rvn = j.lin1X * this._b1._velX + j.lin1Y * this._b1._velY + j.lin1Z * this._b1._velZ + (j.ang1X * this._b1._angVelX + j.ang1Y * this._b1._angVelY + j.ang1Z * this._b1._angVelZ) - (j.lin2X * this._b2._velX + j.lin2Y * this._b2._velY + j.lin2Z * this._b2._velZ + (j.ang2X * this._b2._angVelX + j.ang2Y * this._b2._angVelY + j.ang2Z * this._b2._angVelZ));
			if(rvn < -oimo_common_Setting.contactEnableBounceThreshold && !p._warmStarted) {
				row.rhs = -rvn * restitution;
			} else {
				row.rhs = 0;
			}
			if(this._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE) {
				if(p._depth > oimo_common_Setting.linearSlop) {
					var minRhs = (p._depth - oimo_common_Setting.linearSlop) * oimo_common_Setting.velocityBaumgarte * timeStep.invDt;
					if(row.rhs < minRhs) {
						row.rhs = minRhs;
					}
				}
			}
			if(!p._warmStarted) {
				var _this1 = p._impulse;
				_this1.impulseN = 0;
				_this1.impulseT = 0;
				_this1.impulseB = 0;
				_this1.impulseP = 0;
				_this1.impulseLX = 0;
				_this1.impulseLY = 0;
				_this1.impulseLZ = 0;
			}
			row.impulse = p._impulse;
		}
	}
	,_getPositionSolverInfo: function(info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		normalX = this._manifold._normalX;
		normalY = this._manifold._normalY;
		normalZ = this._manifold._normalZ;
		var num = this._manifold._numPoints;
		info.numRows = 0;
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this._manifold._points[i];
			if(p._disabled) {
				continue;
			}
			var row = info.rows[info.numRows++];
			var j = row.jacobianN;
			j.lin1X = normalX;
			j.lin1Y = normalY;
			j.lin1Z = normalZ;
			j.lin2X = normalX;
			j.lin2Y = normalY;
			j.lin2Z = normalZ;
			j.ang1X = p._relPos1Y * normalZ - p._relPos1Z * normalY;
			j.ang1Y = p._relPos1Z * normalX - p._relPos1X * normalZ;
			j.ang1Z = p._relPos1X * normalY - p._relPos1Y * normalX;
			j.ang2X = p._relPos2Y * normalZ - p._relPos2Z * normalY;
			j.ang2Y = p._relPos2Z * normalX - p._relPos2X * normalZ;
			j.ang2Z = p._relPos2X * normalY - p._relPos2Y * normalX;
			row.rhs = p._depth - oimo_common_Setting.linearSlop;
			if(row.rhs < 0) {
				row.rhs = 0;
			}
			row.impulse = p._impulse;
		}
	}
	,_syncManifold: function() {
		this._manifold._updateDepthsAndPositions(this._tf1,this._tf2);
	}
	,getShape1: function() {
		return this._s1;
	}
	,getShape2: function() {
		return this._s2;
	}
	,getManifold: function() {
		return this._manifold;
	}
	,isTouching: function() {
		var _g1 = 0;
		var _g = this._manifold._numPoints;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._manifold._points[i]._depth >= 0) {
				return true;
			}
		}
		return false;
	}
};
var oimo_dynamics_constraint_contact_ContactImpulse = function() {
	this.impulseN = 0;
	this.impulseT = 0;
	this.impulseB = 0;
	this.impulseP = 0;
	this.impulseLX = 0;
	this.impulseLY = 0;
	this.impulseLZ = 0;
};
oimo_dynamics_constraint_contact_ContactImpulse.__name__ = true;
oimo_dynamics_constraint_contact_ContactImpulse.prototype = {
	copyFrom: function(imp) {
		this.impulseN = imp.impulseN;
		this.impulseT = imp.impulseT;
		this.impulseB = imp.impulseB;
		this.impulseLX = imp.impulseLX;
		this.impulseLY = imp.impulseLY;
		this.impulseLZ = imp.impulseLZ;
	}
};
var oimo_dynamics_constraint_contact_Manifold = function() {
	this._normalX = 0;
	this._normalY = 0;
	this._normalZ = 0;
	this._tangentX = 0;
	this._tangentY = 0;
	this._tangentZ = 0;
	this._binormalX = 0;
	this._binormalY = 0;
	this._binormalZ = 0;
	this._numPoints = 0;
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this._points = this1;
	var _g1 = 0;
	var _g = oimo_common_Setting.maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this._points[i] = new oimo_dynamics_constraint_contact_ManifoldPoint();
	}
};
oimo_dynamics_constraint_contact_Manifold.__name__ = true;
oimo_dynamics_constraint_contact_Manifold.prototype = {
	_clear: function() {
		var _g1 = 0;
		var _g = this._numPoints;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this._points[i];
			_this._localPos1X = 0;
			_this._localPos1Y = 0;
			_this._localPos1Z = 0;
			_this._localPos2X = 0;
			_this._localPos2Y = 0;
			_this._localPos2Z = 0;
			_this._relPos1X = 0;
			_this._relPos1Y = 0;
			_this._relPos1Z = 0;
			_this._relPos2X = 0;
			_this._relPos2Y = 0;
			_this._relPos2Z = 0;
			_this._pos1X = 0;
			_this._pos1Y = 0;
			_this._pos1Z = 0;
			_this._pos2X = 0;
			_this._pos2Y = 0;
			_this._pos2Z = 0;
			_this._depth = 0;
			var _this1 = _this._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			_this._warmStarted = false;
			_this._disabled = false;
			_this._id = -1;
		}
		this._numPoints = 0;
	}
	,_buildBasis: function(normal) {
		var v = normal;
		this._normalX = v.x;
		this._normalY = v.y;
		this._normalZ = v.z;
		var nx = normal.x;
		var ny = normal.y;
		var nz = normal.z;
		var nx2 = nx * nx;
		var ny2 = ny * ny;
		var nz2 = nz * nz;
		var tx;
		var ty;
		var tz;
		var bx;
		var by;
		var bz;
		if(nx2 < ny2) {
			if(nx2 < nz2) {
				var invL = 1 / Math.sqrt(ny2 + nz2);
				tx = 0;
				ty = -nz * invL;
				tz = ny * invL;
				bx = ny * tz - nz * ty;
				by = -nx * tz;
				bz = nx * ty;
			} else {
				var invL1 = 1 / Math.sqrt(nx2 + ny2);
				tx = -ny * invL1;
				ty = nx * invL1;
				tz = 0;
				bx = -nz * ty;
				by = nz * tx;
				bz = nx * ty - ny * tx;
			}
		} else if(ny2 < nz2) {
			var invL2 = 1 / Math.sqrt(nx2 + nz2);
			tx = nz * invL2;
			ty = 0;
			tz = -nx * invL2;
			bx = ny * tz;
			by = nz * tx - nx * tz;
			bz = -ny * tx;
		} else {
			var invL3 = 1 / Math.sqrt(nx2 + ny2);
			tx = -ny * invL3;
			ty = nx * invL3;
			tz = 0;
			bx = -nz * ty;
			by = nz * tx;
			bz = nx * ty - ny * tx;
		}
		this._tangentX = tx;
		this._tangentY = ty;
		this._tangentZ = tz;
		this._binormalX = bx;
		this._binormalY = by;
		this._binormalZ = bz;
	}
	,_updateDepthsAndPositions: function(tf1,tf2) {
		var _g1 = 0;
		var _g = this._numPoints;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this._points[i];
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._localPos1X + tf1._rotation01 * p._localPos1Y + tf1._rotation02 * p._localPos1Z;
			__tmp__Y = tf1._rotation10 * p._localPos1X + tf1._rotation11 * p._localPos1Y + tf1._rotation12 * p._localPos1Z;
			__tmp__Z = tf1._rotation20 * p._localPos1X + tf1._rotation21 * p._localPos1Y + tf1._rotation22 * p._localPos1Z;
			p._relPos1X = __tmp__X;
			p._relPos1Y = __tmp__Y;
			p._relPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._localPos2X + tf2._rotation01 * p._localPos2Y + tf2._rotation02 * p._localPos2Z;
			__tmp__Y1 = tf2._rotation10 * p._localPos2X + tf2._rotation11 * p._localPos2Y + tf2._rotation12 * p._localPos2Z;
			__tmp__Z1 = tf2._rotation20 * p._localPos2X + tf2._rotation21 * p._localPos2Y + tf2._rotation22 * p._localPos2Z;
			p._relPos2X = __tmp__X1;
			p._relPos2Y = __tmp__Y1;
			p._relPos2Z = __tmp__Z1;
			p._pos1X = p._relPos1X + tf1._positionX;
			p._pos1Y = p._relPos1Y + tf1._positionY;
			p._pos1Z = p._relPos1Z + tf1._positionZ;
			p._pos2X = p._relPos2X + tf2._positionX;
			p._pos2Y = p._relPos2Y + tf2._positionY;
			p._pos2Z = p._relPos2Z + tf2._positionZ;
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			diffX = p._pos1X - p._pos2X;
			diffY = p._pos1Y - p._pos2Y;
			diffZ = p._pos1Z - p._pos2Z;
			var dotN = diffX * this._normalX + diffY * this._normalY + diffZ * this._normalZ;
			p._depth = -dotN;
		}
	}
	,getNormal: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._normalX;
		v1.y = this._normalY;
		v1.z = this._normalZ;
		return v;
	}
	,getNormalTo: function(normal) {
		var v = normal;
		v.x = this._normalX;
		v.y = this._normalY;
		v.z = this._normalZ;
	}
	,getTangent: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._tangentX;
		v1.y = this._tangentY;
		v1.z = this._tangentZ;
		return v;
	}
	,getTangentTo: function(tangent) {
		var v = tangent;
		v.x = this._tangentX;
		v.y = this._tangentY;
		v.z = this._tangentZ;
	}
	,getBinormal: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._binormalX;
		v1.y = this._binormalY;
		v1.z = this._binormalZ;
		return v;
	}
	,getBinormalTo: function(binormal) {
		var v = binormal;
		v.x = this._binormalX;
		v.y = this._binormalY;
		v.z = this._binormalZ;
	}
	,getPoints: function() {
		return this._points;
	}
	,getNumPoints: function() {
		return this._numPoints;
	}
};
var oimo_dynamics_constraint_contact_ManifoldPoint = function() {
	this._localPos1X = 0;
	this._localPos1Y = 0;
	this._localPos1Z = 0;
	this._localPos2X = 0;
	this._localPos2Y = 0;
	this._localPos2Z = 0;
	this._relPos1X = 0;
	this._relPos1Y = 0;
	this._relPos1Z = 0;
	this._relPos2X = 0;
	this._relPos2Y = 0;
	this._relPos2Z = 0;
	this._pos1X = 0;
	this._pos1Y = 0;
	this._pos1Z = 0;
	this._pos2X = 0;
	this._pos2Y = 0;
	this._pos2Z = 0;
	this._depth = 0;
	this._impulse = new oimo_dynamics_constraint_contact_ContactImpulse();
	this._warmStarted = false;
	this._disabled = false;
	this._id = -1;
};
oimo_dynamics_constraint_contact_ManifoldPoint.__name__ = true;
oimo_dynamics_constraint_contact_ManifoldPoint.prototype = {
	getPosition1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._pos1X;
		v1.y = this._pos1Y;
		v1.z = this._pos1Z;
		return v;
	}
	,getPosition1To: function(position) {
		var v = position;
		v.x = this._pos1X;
		v.y = this._pos1Y;
		v.z = this._pos1Z;
	}
	,getPosition2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._pos2X;
		v1.y = this._pos2Y;
		v1.z = this._pos2Z;
		return v;
	}
	,getPosition2To: function(position) {
		var v = position;
		v.x = this._pos2X;
		v.y = this._pos2Y;
		v.z = this._pos2Z;
	}
	,getDepth: function() {
		return this._depth;
	}
	,isWarmStarted: function() {
		return this._warmStarted;
	}
	,getNormalImpulse: function() {
		return this._impulse.impulseN;
	}
	,getTangentImpulse: function() {
		return this._impulse.impulseT;
	}
	,getBinormalImpulse: function() {
		return this._impulse.impulseB;
	}
	,isEnabled: function() {
		return !this._disabled;
	}
};
var oimo_dynamics_constraint_contact_ManifoldUpdater = function(manifold) {
	this._manifold = manifold;
	this.numOldPoints = 0;
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.oldPoints = this1;
	var _g1 = 0;
	var _g = oimo_common_Setting.maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this.oldPoints[i] = new oimo_dynamics_constraint_contact_ManifoldPoint();
	}
};
oimo_dynamics_constraint_contact_ManifoldUpdater.__name__ = true;
oimo_dynamics_constraint_contact_ManifoldUpdater.prototype = {
	removeOutdatedPoints: function() {
		var num = this._manifold._numPoints;
		var index = num;
		while(--index >= 0) {
			var p = this._manifold._points[index];
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			diffX = p._pos1X - p._pos2X;
			diffY = p._pos1Y - p._pos2Y;
			diffZ = p._pos1Z - p._pos2Z;
			var dotN = this._manifold._normalX * diffX + this._manifold._normalY * diffY + this._manifold._normalZ * diffZ;
			if(dotN > oimo_common_Setting.contactPersistenceThreshold) {
				this.removeManifoldPoint(index);
				continue;
			}
			diffX += this._manifold._normalX * -dotN;
			diffY += this._manifold._normalY * -dotN;
			diffZ += this._manifold._normalZ * -dotN;
			if(diffX * diffX + diffY * diffY + diffZ * diffZ > oimo_common_Setting.contactPersistenceThreshold * oimo_common_Setting.contactPersistenceThreshold) {
				this.removeManifoldPoint(index);
				continue;
			}
		}
	}
	,removeManifoldPoint: function(index) {
		var lastIndex = --this._manifold._numPoints;
		if(index != lastIndex) {
			var tmp = this._manifold._points[index];
			this._manifold._points[index] = this._manifold._points[lastIndex];
			this._manifold._points[lastIndex] = tmp;
		}
		var _this = this._manifold._points[lastIndex];
		_this._localPos1X = 0;
		_this._localPos1Y = 0;
		_this._localPos1Z = 0;
		_this._localPos2X = 0;
		_this._localPos2Y = 0;
		_this._localPos2Z = 0;
		_this._relPos1X = 0;
		_this._relPos1Y = 0;
		_this._relPos1Z = 0;
		_this._relPos2X = 0;
		_this._relPos2Y = 0;
		_this._relPos2Z = 0;
		_this._pos1X = 0;
		_this._pos1Y = 0;
		_this._pos1Z = 0;
		_this._pos2X = 0;
		_this._pos2Y = 0;
		_this._pos2Z = 0;
		_this._depth = 0;
		var _this1 = _this._impulse;
		_this1.impulseN = 0;
		_this1.impulseT = 0;
		_this1.impulseB = 0;
		_this1.impulseP = 0;
		_this1.impulseLX = 0;
		_this1.impulseLY = 0;
		_this1.impulseLZ = 0;
		_this._warmStarted = false;
		_this._disabled = false;
		_this._id = -1;
	}
	,addManifoldPoint: function(point,tf1,tf2) {
		var num = this._manifold._numPoints;
		if(num == oimo_common_Setting.maxManifoldPoints) {
			var targetIndex = this.computeTargetIndex(point,tf1,tf2);
			var _this = this._manifold._points[targetIndex];
			var v = point.position1;
			_this._pos1X = v.x;
			_this._pos1Y = v.y;
			_this._pos1Z = v.z;
			var v1 = point.position2;
			_this._pos2X = v1.x;
			_this._pos2Y = v1.y;
			_this._pos2Z = v1.z;
			_this._relPos1X = _this._pos1X - tf1._positionX;
			_this._relPos1Y = _this._pos1Y - tf1._positionY;
			_this._relPos1Z = _this._pos1Z - tf1._positionZ;
			_this._relPos2X = _this._pos2X - tf2._positionX;
			_this._relPos2Y = _this._pos2Y - tf2._positionY;
			_this._relPos2Z = _this._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * _this._relPos1X + tf1._rotation10 * _this._relPos1Y + tf1._rotation20 * _this._relPos1Z;
			__tmp__Y = tf1._rotation01 * _this._relPos1X + tf1._rotation11 * _this._relPos1Y + tf1._rotation21 * _this._relPos1Z;
			__tmp__Z = tf1._rotation02 * _this._relPos1X + tf1._rotation12 * _this._relPos1Y + tf1._rotation22 * _this._relPos1Z;
			_this._localPos1X = __tmp__X;
			_this._localPos1Y = __tmp__Y;
			_this._localPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * _this._relPos2X + tf2._rotation10 * _this._relPos2Y + tf2._rotation20 * _this._relPos2Z;
			__tmp__Y1 = tf2._rotation01 * _this._relPos2X + tf2._rotation11 * _this._relPos2Y + tf2._rotation21 * _this._relPos2Z;
			__tmp__Z1 = tf2._rotation02 * _this._relPos2X + tf2._rotation12 * _this._relPos2Y + tf2._rotation22 * _this._relPos2Z;
			_this._localPos2X = __tmp__X1;
			_this._localPos2Y = __tmp__Y1;
			_this._localPos2Z = __tmp__Z1;
			_this._depth = point.depth;
			var _this1 = _this._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			_this._id = point.id;
			_this._warmStarted = false;
			_this._disabled = false;
			return;
		}
		var _this2 = this._manifold._points[num];
		var v2 = point.position1;
		_this2._pos1X = v2.x;
		_this2._pos1Y = v2.y;
		_this2._pos1Z = v2.z;
		var v3 = point.position2;
		_this2._pos2X = v3.x;
		_this2._pos2Y = v3.y;
		_this2._pos2Z = v3.z;
		_this2._relPos1X = _this2._pos1X - tf1._positionX;
		_this2._relPos1Y = _this2._pos1Y - tf1._positionY;
		_this2._relPos1Z = _this2._pos1Z - tf1._positionZ;
		_this2._relPos2X = _this2._pos2X - tf2._positionX;
		_this2._relPos2Y = _this2._pos2Y - tf2._positionY;
		_this2._relPos2Z = _this2._pos2Z - tf2._positionZ;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = tf1._rotation00 * _this2._relPos1X + tf1._rotation10 * _this2._relPos1Y + tf1._rotation20 * _this2._relPos1Z;
		__tmp__Y2 = tf1._rotation01 * _this2._relPos1X + tf1._rotation11 * _this2._relPos1Y + tf1._rotation21 * _this2._relPos1Z;
		__tmp__Z2 = tf1._rotation02 * _this2._relPos1X + tf1._rotation12 * _this2._relPos1Y + tf1._rotation22 * _this2._relPos1Z;
		_this2._localPos1X = __tmp__X2;
		_this2._localPos1Y = __tmp__Y2;
		_this2._localPos1Z = __tmp__Z2;
		var __tmp__X3;
		var __tmp__Y3;
		var __tmp__Z3;
		__tmp__X3 = tf2._rotation00 * _this2._relPos2X + tf2._rotation10 * _this2._relPos2Y + tf2._rotation20 * _this2._relPos2Z;
		__tmp__Y3 = tf2._rotation01 * _this2._relPos2X + tf2._rotation11 * _this2._relPos2Y + tf2._rotation21 * _this2._relPos2Z;
		__tmp__Z3 = tf2._rotation02 * _this2._relPos2X + tf2._rotation12 * _this2._relPos2Y + tf2._rotation22 * _this2._relPos2Z;
		_this2._localPos2X = __tmp__X3;
		_this2._localPos2Y = __tmp__Y3;
		_this2._localPos2Z = __tmp__Z3;
		_this2._depth = point.depth;
		var _this3 = _this2._impulse;
		_this3.impulseN = 0;
		_this3.impulseT = 0;
		_this3.impulseB = 0;
		_this3.impulseP = 0;
		_this3.impulseLX = 0;
		_this3.impulseLY = 0;
		_this3.impulseLZ = 0;
		_this2._id = point.id;
		_this2._warmStarted = false;
		_this2._disabled = false;
		this._manifold._numPoints++;
	}
	,computeTargetIndex: function(newPoint,tf1,tf2) {
		var p1 = this._manifold._points[0];
		var p2 = this._manifold._points[1];
		var p3 = this._manifold._points[2];
		var p4 = this._manifold._points[3];
		var maxDepth = p1._depth;
		var maxDepthIndex = 0;
		if(p2._depth > maxDepth) {
			maxDepth = p2._depth;
			maxDepthIndex = 1;
		}
		if(p3._depth > maxDepth) {
			maxDepth = p3._depth;
			maxDepthIndex = 2;
		}
		if(p4._depth > maxDepth) {
			maxDepth = p4._depth;
			maxDepthIndex = 3;
		}
		var rp1;
		var rp1X;
		var rp1Y;
		var rp1Z;
		var v = newPoint.position1;
		rp1X = v.x;
		rp1Y = v.y;
		rp1Z = v.z;
		rp1X -= tf1._positionX;
		rp1Y -= tf1._positionY;
		rp1Z -= tf1._positionZ;
		var p1X = p2._relPos1X;
		var p1Y = p2._relPos1Y;
		var p1Z = p2._relPos1Z;
		var p2X = p3._relPos1X;
		var p2Y = p3._relPos1Y;
		var p2Z = p3._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v34;
		var v34X;
		var v34Y;
		var v34Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var v24;
		var v24X;
		var v24Y;
		var v24Z;
		var v14;
		var v14X;
		var v14Y;
		var v14Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a1 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a2 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a3 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a11 = a1 > a2 ? a1 > a3 ? a1 : a3 : a2 > a3 ? a2 : a3;
		var p1X1 = p1._relPos1X;
		var p1Y1 = p1._relPos1Y;
		var p1Z1 = p1._relPos1Z;
		var p2X1 = p3._relPos1X;
		var p2Y1 = p3._relPos1Y;
		var p2Z1 = p3._relPos1Z;
		var p3X1 = p4._relPos1X;
		var p3Y1 = p4._relPos1Y;
		var p3Z1 = p4._relPos1Z;
		var v121;
		var v12X1;
		var v12Y1;
		var v12Z1;
		var v341;
		var v34X1;
		var v34Y1;
		var v34Z1;
		var v131;
		var v13X1;
		var v13Y1;
		var v13Z1;
		var v241;
		var v24X1;
		var v24Y1;
		var v24Z1;
		var v141;
		var v14X1;
		var v14Y1;
		var v14Z1;
		var v231;
		var v23X1;
		var v23Y1;
		var v23Z1;
		v12X1 = p2X1 - p1X1;
		v12Y1 = p2Y1 - p1Y1;
		v12Z1 = p2Z1 - p1Z1;
		v34X1 = rp1X - p3X1;
		v34Y1 = rp1Y - p3Y1;
		v34Z1 = rp1Z - p3Z1;
		v13X1 = p3X1 - p1X1;
		v13Y1 = p3Y1 - p1Y1;
		v13Z1 = p3Z1 - p1Z1;
		v24X1 = rp1X - p2X1;
		v24Y1 = rp1Y - p2Y1;
		v24Z1 = rp1Z - p2Z1;
		v14X1 = rp1X - p1X1;
		v14Y1 = rp1Y - p1Y1;
		v14Z1 = rp1Z - p1Z1;
		v23X1 = p3X1 - p2X1;
		v23Y1 = p3Y1 - p2Y1;
		v23Z1 = p3Z1 - p2Z1;
		var cross11;
		var cross1X1;
		var cross1Y1;
		var cross1Z1;
		var cross21;
		var cross2X1;
		var cross2Y1;
		var cross2Z1;
		var cross31;
		var cross3X1;
		var cross3Y1;
		var cross3Z1;
		cross1X1 = v12Y1 * v34Z1 - v12Z1 * v34Y1;
		cross1Y1 = v12Z1 * v34X1 - v12X1 * v34Z1;
		cross1Z1 = v12X1 * v34Y1 - v12Y1 * v34X1;
		cross2X1 = v13Y1 * v24Z1 - v13Z1 * v24Y1;
		cross2Y1 = v13Z1 * v24X1 - v13X1 * v24Z1;
		cross2Z1 = v13X1 * v24Y1 - v13Y1 * v24X1;
		cross3X1 = v14Y1 * v23Z1 - v14Z1 * v23Y1;
		cross3Y1 = v14Z1 * v23X1 - v14X1 * v23Z1;
		cross3Z1 = v14X1 * v23Y1 - v14Y1 * v23X1;
		var a12 = cross1X1 * cross1X1 + cross1Y1 * cross1Y1 + cross1Z1 * cross1Z1;
		var a21 = cross2X1 * cross2X1 + cross2Y1 * cross2Y1 + cross2Z1 * cross2Z1;
		var a31 = cross3X1 * cross3X1 + cross3Y1 * cross3Y1 + cross3Z1 * cross3Z1;
		var a22 = a12 > a21 ? a12 > a31 ? a12 : a31 : a21 > a31 ? a21 : a31;
		var p1X2 = p1._relPos1X;
		var p1Y2 = p1._relPos1Y;
		var p1Z2 = p1._relPos1Z;
		var p2X2 = p2._relPos1X;
		var p2Y2 = p2._relPos1Y;
		var p2Z2 = p2._relPos1Z;
		var p3X2 = p4._relPos1X;
		var p3Y2 = p4._relPos1Y;
		var p3Z2 = p4._relPos1Z;
		var v122;
		var v12X2;
		var v12Y2;
		var v12Z2;
		var v342;
		var v34X2;
		var v34Y2;
		var v34Z2;
		var v132;
		var v13X2;
		var v13Y2;
		var v13Z2;
		var v242;
		var v24X2;
		var v24Y2;
		var v24Z2;
		var v142;
		var v14X2;
		var v14Y2;
		var v14Z2;
		var v232;
		var v23X2;
		var v23Y2;
		var v23Z2;
		v12X2 = p2X2 - p1X2;
		v12Y2 = p2Y2 - p1Y2;
		v12Z2 = p2Z2 - p1Z2;
		v34X2 = rp1X - p3X2;
		v34Y2 = rp1Y - p3Y2;
		v34Z2 = rp1Z - p3Z2;
		v13X2 = p3X2 - p1X2;
		v13Y2 = p3Y2 - p1Y2;
		v13Z2 = p3Z2 - p1Z2;
		v24X2 = rp1X - p2X2;
		v24Y2 = rp1Y - p2Y2;
		v24Z2 = rp1Z - p2Z2;
		v14X2 = rp1X - p1X2;
		v14Y2 = rp1Y - p1Y2;
		v14Z2 = rp1Z - p1Z2;
		v23X2 = p3X2 - p2X2;
		v23Y2 = p3Y2 - p2Y2;
		v23Z2 = p3Z2 - p2Z2;
		var cross12;
		var cross1X2;
		var cross1Y2;
		var cross1Z2;
		var cross22;
		var cross2X2;
		var cross2Y2;
		var cross2Z2;
		var cross32;
		var cross3X2;
		var cross3Y2;
		var cross3Z2;
		cross1X2 = v12Y2 * v34Z2 - v12Z2 * v34Y2;
		cross1Y2 = v12Z2 * v34X2 - v12X2 * v34Z2;
		cross1Z2 = v12X2 * v34Y2 - v12Y2 * v34X2;
		cross2X2 = v13Y2 * v24Z2 - v13Z2 * v24Y2;
		cross2Y2 = v13Z2 * v24X2 - v13X2 * v24Z2;
		cross2Z2 = v13X2 * v24Y2 - v13Y2 * v24X2;
		cross3X2 = v14Y2 * v23Z2 - v14Z2 * v23Y2;
		cross3Y2 = v14Z2 * v23X2 - v14X2 * v23Z2;
		cross3Z2 = v14X2 * v23Y2 - v14Y2 * v23X2;
		var a13 = cross1X2 * cross1X2 + cross1Y2 * cross1Y2 + cross1Z2 * cross1Z2;
		var a23 = cross2X2 * cross2X2 + cross2Y2 * cross2Y2 + cross2Z2 * cross2Z2;
		var a32 = cross3X2 * cross3X2 + cross3Y2 * cross3Y2 + cross3Z2 * cross3Z2;
		var a33 = a13 > a23 ? a13 > a32 ? a13 : a32 : a23 > a32 ? a23 : a32;
		var p1X3 = p1._relPos1X;
		var p1Y3 = p1._relPos1Y;
		var p1Z3 = p1._relPos1Z;
		var p2X3 = p2._relPos1X;
		var p2Y3 = p2._relPos1Y;
		var p2Z3 = p2._relPos1Z;
		var p3X3 = p3._relPos1X;
		var p3Y3 = p3._relPos1Y;
		var p3Z3 = p3._relPos1Z;
		var v123;
		var v12X3;
		var v12Y3;
		var v12Z3;
		var v343;
		var v34X3;
		var v34Y3;
		var v34Z3;
		var v133;
		var v13X3;
		var v13Y3;
		var v13Z3;
		var v243;
		var v24X3;
		var v24Y3;
		var v24Z3;
		var v143;
		var v14X3;
		var v14Y3;
		var v14Z3;
		var v233;
		var v23X3;
		var v23Y3;
		var v23Z3;
		v12X3 = p2X3 - p1X3;
		v12Y3 = p2Y3 - p1Y3;
		v12Z3 = p2Z3 - p1Z3;
		v34X3 = rp1X - p3X3;
		v34Y3 = rp1Y - p3Y3;
		v34Z3 = rp1Z - p3Z3;
		v13X3 = p3X3 - p1X3;
		v13Y3 = p3Y3 - p1Y3;
		v13Z3 = p3Z3 - p1Z3;
		v24X3 = rp1X - p2X3;
		v24Y3 = rp1Y - p2Y3;
		v24Z3 = rp1Z - p2Z3;
		v14X3 = rp1X - p1X3;
		v14Y3 = rp1Y - p1Y3;
		v14Z3 = rp1Z - p1Z3;
		v23X3 = p3X3 - p2X3;
		v23Y3 = p3Y3 - p2Y3;
		v23Z3 = p3Z3 - p2Z3;
		var cross13;
		var cross1X3;
		var cross1Y3;
		var cross1Z3;
		var cross23;
		var cross2X3;
		var cross2Y3;
		var cross2Z3;
		var cross33;
		var cross3X3;
		var cross3Y3;
		var cross3Z3;
		cross1X3 = v12Y3 * v34Z3 - v12Z3 * v34Y3;
		cross1Y3 = v12Z3 * v34X3 - v12X3 * v34Z3;
		cross1Z3 = v12X3 * v34Y3 - v12Y3 * v34X3;
		cross2X3 = v13Y3 * v24Z3 - v13Z3 * v24Y3;
		cross2Y3 = v13Z3 * v24X3 - v13X3 * v24Z3;
		cross2Z3 = v13X3 * v24Y3 - v13Y3 * v24X3;
		cross3X3 = v14Y3 * v23Z3 - v14Z3 * v23Y3;
		cross3Y3 = v14Z3 * v23X3 - v14X3 * v23Z3;
		cross3Z3 = v14X3 * v23Y3 - v14Y3 * v23X3;
		var a14 = cross1X3 * cross1X3 + cross1Y3 * cross1Y3 + cross1Z3 * cross1Z3;
		var a24 = cross2X3 * cross2X3 + cross2Y3 * cross2Y3 + cross2Z3 * cross2Z3;
		var a34 = cross3X3 * cross3X3 + cross3Y3 * cross3Y3 + cross3Z3 * cross3Z3;
		var a4 = a14 > a24 ? a14 > a34 ? a14 : a34 : a24 > a34 ? a24 : a34;
		var max = a11;
		var target = 0;
		if(a22 > max && maxDepthIndex != 1 || maxDepthIndex == 0) {
			max = a22;
			target = 1;
		}
		if(a33 > max && maxDepthIndex != 2) {
			max = a33;
			target = 2;
		}
		if(a4 > max && maxDepthIndex != 3) {
			max = a4;
			target = 3;
		}
		return target;
	}
	,computeRelativePositions: function(tf1,tf2) {
		var num = this._manifold._numPoints;
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this._manifold._points[i];
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._localPos1X + tf1._rotation01 * p._localPos1Y + tf1._rotation02 * p._localPos1Z;
			__tmp__Y = tf1._rotation10 * p._localPos1X + tf1._rotation11 * p._localPos1Y + tf1._rotation12 * p._localPos1Z;
			__tmp__Z = tf1._rotation20 * p._localPos1X + tf1._rotation21 * p._localPos1Y + tf1._rotation22 * p._localPos1Z;
			p._relPos1X = __tmp__X;
			p._relPos1Y = __tmp__Y;
			p._relPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._localPos2X + tf2._rotation01 * p._localPos2Y + tf2._rotation02 * p._localPos2Z;
			__tmp__Y1 = tf2._rotation10 * p._localPos2X + tf2._rotation11 * p._localPos2Y + tf2._rotation12 * p._localPos2Z;
			__tmp__Z1 = tf2._rotation20 * p._localPos2X + tf2._rotation21 * p._localPos2Y + tf2._rotation22 * p._localPos2Z;
			p._relPos2X = __tmp__X1;
			p._relPos2Y = __tmp__Y1;
			p._relPos2Z = __tmp__Z1;
			p._warmStarted = true;
		}
	}
	,findNearestContactPointIndex: function(target,tf1,tf2) {
		var nearestSq = oimo_common_Setting.contactPersistenceThreshold * oimo_common_Setting.contactPersistenceThreshold;
		var idx = -1;
		var _g1 = 0;
		var _g = this._manifold._numPoints;
		while(_g1 < _g) {
			var i = _g1++;
			var mp = this._manifold._points[i];
			var rp1;
			var rp1X;
			var rp1Y;
			var rp1Z;
			var rp2;
			var rp2X;
			var rp2Y;
			var rp2Z;
			var v = target.position1;
			rp1X = v.x;
			rp1Y = v.y;
			rp1Z = v.z;
			var v1 = target.position2;
			rp2X = v1.x;
			rp2Y = v1.y;
			rp2Z = v1.z;
			rp1X -= tf1._positionX;
			rp1Y -= tf1._positionY;
			rp1Z -= tf1._positionZ;
			rp2X -= tf2._positionX;
			rp2Y -= tf2._positionY;
			rp2Z -= tf2._positionZ;
			var diff1;
			var diff1X;
			var diff1Y;
			var diff1Z;
			var diff2;
			var diff2X;
			var diff2Y;
			var diff2Z;
			diff1X = mp._relPos1X - rp1X;
			diff1Y = mp._relPos1Y - rp1Y;
			diff1Z = mp._relPos1Z - rp1Z;
			diff2X = mp._relPos2X - rp2X;
			diff2Y = mp._relPos2Y - rp2Y;
			diff2Z = mp._relPos2Z - rp2Z;
			var sq1 = diff1X * diff1X + diff1Y * diff1Y + diff1Z * diff1Z;
			var sq2 = diff2X * diff2X + diff2Y * diff2Y + diff2Z * diff2Z;
			var d = sq1 < sq2 ? sq1 : sq2;
			if(d < nearestSq) {
				nearestSq = d;
				idx = i;
			}
		}
		return idx;
	}
	,totalUpdate: function(result,tf1,tf2) {
		this.numOldPoints = this._manifold._numPoints;
		var _g1 = 0;
		var _g = this.numOldPoints;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this.oldPoints[i];
			var cp = this._manifold._points[i];
			_this._localPos1X = cp._localPos1X;
			_this._localPos1Y = cp._localPos1Y;
			_this._localPos1Z = cp._localPos1Z;
			_this._localPos2X = cp._localPos2X;
			_this._localPos2Y = cp._localPos2Y;
			_this._localPos2Z = cp._localPos2Z;
			_this._relPos1X = cp._relPos1X;
			_this._relPos1Y = cp._relPos1Y;
			_this._relPos1Z = cp._relPos1Z;
			_this._relPos2X = cp._relPos2X;
			_this._relPos2Y = cp._relPos2Y;
			_this._relPos2Z = cp._relPos2Z;
			_this._pos1X = cp._pos1X;
			_this._pos1Y = cp._pos1Y;
			_this._pos1Z = cp._pos1Z;
			_this._pos2X = cp._pos2X;
			_this._pos2Y = cp._pos2Y;
			_this._pos2Z = cp._pos2Z;
			_this._depth = cp._depth;
			_this._impulse.copyFrom(cp._impulse);
			_this._id = cp._id;
			_this._warmStarted = cp._warmStarted;
			_this._disabled = false;
		}
		var num = result.numPoints;
		this._manifold._numPoints = num;
		var _g11 = 0;
		var _g2 = num;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = this._manifold._points[i1];
			var ref = result.points[i1];
			var v = ref.position1;
			p._pos1X = v.x;
			p._pos1Y = v.y;
			p._pos1Z = v.z;
			var v1 = ref.position2;
			p._pos2X = v1.x;
			p._pos2Y = v1.y;
			p._pos2Z = v1.z;
			p._relPos1X = p._pos1X - tf1._positionX;
			p._relPos1Y = p._pos1Y - tf1._positionY;
			p._relPos1Z = p._pos1Z - tf1._positionZ;
			p._relPos2X = p._pos2X - tf2._positionX;
			p._relPos2Y = p._pos2Y - tf2._positionY;
			p._relPos2Z = p._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._relPos1X + tf1._rotation10 * p._relPos1Y + tf1._rotation20 * p._relPos1Z;
			__tmp__Y = tf1._rotation01 * p._relPos1X + tf1._rotation11 * p._relPos1Y + tf1._rotation21 * p._relPos1Z;
			__tmp__Z = tf1._rotation02 * p._relPos1X + tf1._rotation12 * p._relPos1Y + tf1._rotation22 * p._relPos1Z;
			p._localPos1X = __tmp__X;
			p._localPos1Y = __tmp__Y;
			p._localPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._relPos2X + tf2._rotation10 * p._relPos2Y + tf2._rotation20 * p._relPos2Z;
			__tmp__Y1 = tf2._rotation01 * p._relPos2X + tf2._rotation11 * p._relPos2Y + tf2._rotation21 * p._relPos2Z;
			__tmp__Z1 = tf2._rotation02 * p._relPos2X + tf2._rotation12 * p._relPos2Y + tf2._rotation22 * p._relPos2Z;
			p._localPos2X = __tmp__X1;
			p._localPos2Y = __tmp__Y1;
			p._localPos2Z = __tmp__Z1;
			p._depth = ref.depth;
			var _this1 = p._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			p._id = ref.id;
			p._warmStarted = false;
			p._disabled = false;
			var _g12 = 0;
			var _g3 = this.numOldPoints;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var ocp = this.oldPoints[i2];
				if(p._id == ocp._id) {
					p._impulse.copyFrom(ocp._impulse);
					p._warmStarted = true;
					break;
				}
			}
		}
	}
	,incrementalUpdate: function(result,tf1,tf2) {
		this._manifold._updateDepthsAndPositions(tf1,tf2);
		var _g1 = 0;
		var _g = this._manifold._numPoints;
		while(_g1 < _g) {
			var i = _g1++;
			this._manifold._points[i]._warmStarted = true;
		}
		var newPoint = result.points[0];
		var index = this.findNearestContactPointIndex(newPoint,tf1,tf2);
		if(index == -1) {
			this.addManifoldPoint(newPoint,tf1,tf2);
		} else {
			var cp = this._manifold._points[index];
			var v = newPoint.position1;
			cp._pos1X = v.x;
			cp._pos1Y = v.y;
			cp._pos1Z = v.z;
			var v1 = newPoint.position2;
			cp._pos2X = v1.x;
			cp._pos2Y = v1.y;
			cp._pos2Z = v1.z;
			cp._relPos1X = cp._pos1X - tf1._positionX;
			cp._relPos1Y = cp._pos1Y - tf1._positionY;
			cp._relPos1Z = cp._pos1Z - tf1._positionZ;
			cp._relPos2X = cp._pos2X - tf2._positionX;
			cp._relPos2Y = cp._pos2Y - tf2._positionY;
			cp._relPos2Z = cp._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * cp._relPos1X + tf1._rotation10 * cp._relPos1Y + tf1._rotation20 * cp._relPos1Z;
			__tmp__Y = tf1._rotation01 * cp._relPos1X + tf1._rotation11 * cp._relPos1Y + tf1._rotation21 * cp._relPos1Z;
			__tmp__Z = tf1._rotation02 * cp._relPos1X + tf1._rotation12 * cp._relPos1Y + tf1._rotation22 * cp._relPos1Z;
			cp._localPos1X = __tmp__X;
			cp._localPos1Y = __tmp__Y;
			cp._localPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * cp._relPos2X + tf2._rotation10 * cp._relPos2Y + tf2._rotation20 * cp._relPos2Z;
			__tmp__Y1 = tf2._rotation01 * cp._relPos2X + tf2._rotation11 * cp._relPos2Y + tf2._rotation21 * cp._relPos2Z;
			__tmp__Z1 = tf2._rotation02 * cp._relPos2X + tf2._rotation12 * cp._relPos2Y + tf2._rotation22 * cp._relPos2Z;
			cp._localPos2X = __tmp__X1;
			cp._localPos2Y = __tmp__Y1;
			cp._localPos2Z = __tmp__Z1;
			cp._depth = newPoint.depth;
		}
		this.removeOutdatedPoints();
	}
};
var oimo_dynamics_constraint_info_JacobianRow = function() {
	this.lin1X = 0;
	this.lin1Y = 0;
	this.lin1Z = 0;
	this.lin2X = 0;
	this.lin2Y = 0;
	this.lin2Z = 0;
	this.ang1X = 0;
	this.ang1Y = 0;
	this.ang1Z = 0;
	this.ang2X = 0;
	this.ang2Y = 0;
	this.ang2Z = 0;
	this.flag = 0;
};
oimo_dynamics_constraint_info_JacobianRow.__name__ = true;
oimo_dynamics_constraint_info_JacobianRow.prototype = {
	updateSparsity: function() {
		this.flag = 0;
		if(!(this.lin1X == 0 && this.lin1Y == 0 && this.lin1Z == 0) || !(this.lin2X == 0 && this.lin2Y == 0 && this.lin2Z == 0)) {
			this.flag |= 1;
		}
		if(!(this.ang1X == 0 && this.ang1Y == 0 && this.ang1Z == 0) || !(this.ang2X == 0 && this.ang2Y == 0 && this.ang2Z == 0)) {
			this.flag |= 2;
		}
	}
};
var oimo_dynamics_constraint_info_contact_ContactSolverInfo = function() {
	this.b1 = null;
	this.b2 = null;
	this.numRows = 0;
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.rows = this1;
	var _g1 = 0;
	var _g = this.rows.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.rows[i] = new oimo_dynamics_constraint_info_contact_ContactSolverInfoRow();
	}
};
oimo_dynamics_constraint_info_contact_ContactSolverInfo.__name__ = true;
var oimo_dynamics_constraint_info_contact_ContactSolverInfoRow = function() {
	this.jacobianN = new oimo_dynamics_constraint_info_JacobianRow();
	this.jacobianT = new oimo_dynamics_constraint_info_JacobianRow();
	this.jacobianB = new oimo_dynamics_constraint_info_JacobianRow();
	this.rhs = 0;
	this.cfm = 0;
	this.friction = 0;
	this.impulse = null;
};
oimo_dynamics_constraint_info_contact_ContactSolverInfoRow.__name__ = true;
var oimo_dynamics_constraint_info_joint_JointSolverInfo = function() {
	this.b1 = null;
	this.b2 = null;
	this.numRows = 0;
	var this1 = new Array(oimo_common_Setting.maxJacobianRows);
	this.rows = this1;
	var _g1 = 0;
	var _g = this.rows.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.rows[i] = new oimo_dynamics_constraint_info_joint_JointSolverInfoRow();
	}
};
oimo_dynamics_constraint_info_joint_JointSolverInfo.__name__ = true;
var oimo_dynamics_constraint_info_joint_JointSolverInfoRow = function() {
	this.jacobian = new oimo_dynamics_constraint_info_JacobianRow();
	this.rhs = 0;
	this.cfm = 0;
	this.minImpulse = 0;
	this.maxImpulse = 0;
	this.motorSpeed = 0;
	this.motorMaxImpulse = 0;
	this.impulse = null;
};
oimo_dynamics_constraint_info_joint_JointSolverInfoRow.__name__ = true;
var oimo_dynamics_constraint_joint_BasisTracker = function(joint) {
	this.joint = joint;
	this.xX = 0;
	this.xY = 0;
	this.xZ = 0;
	this.yX = 0;
	this.yY = 0;
	this.yZ = 0;
	this.zX = 0;
	this.zY = 0;
	this.zZ = 0;
};
oimo_dynamics_constraint_joint_BasisTracker.__name__ = true;
var oimo_dynamics_constraint_joint_Joint = function(config,type) {
	this._link1 = new oimo_dynamics_constraint_joint_JointLink(this);
	this._link2 = new oimo_dynamics_constraint_joint_JointLink(this);
	this._positionCorrectionAlgorithm = oimo_common_Setting.defaultJointPositionCorrectionAlgorithm;
	this._type = type;
	this._world = null;
	this._b1 = config.rigidBody1;
	this._b2 = config.rigidBody2;
	this._allowCollision = config.allowCollision;
	this._breakForce = config.breakForce;
	this._breakTorque = config.breakTorque;
	var _g = config.solverType;
	switch(_g) {
	case 0:
		this._solver = new oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver(this);
		break;
	case 1:
		this._solver = new oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver(this);
		break;
	}
	var v = config.localAnchor1;
	this._localAnchor1X = v.x;
	this._localAnchor1Y = v.y;
	this._localAnchor1Z = v.z;
	var v1 = config.localAnchor2;
	this._localAnchor2X = v1.x;
	this._localAnchor2Y = v1.y;
	this._localAnchor2Z = v1.z;
	this._relativeAnchor1X = 0;
	this._relativeAnchor1Y = 0;
	this._relativeAnchor1Z = 0;
	this._relativeAnchor2X = 0;
	this._relativeAnchor2Y = 0;
	this._relativeAnchor2Z = 0;
	this._anchor1X = 0;
	this._anchor1Y = 0;
	this._anchor1Z = 0;
	this._anchor2X = 0;
	this._anchor2Y = 0;
	this._anchor2Z = 0;
	this._localBasisX1X = 0;
	this._localBasisX1Y = 0;
	this._localBasisX1Z = 0;
	this._localBasisY1X = 0;
	this._localBasisY1Y = 0;
	this._localBasisY1Z = 0;
	this._localBasisZ1X = 0;
	this._localBasisZ1Y = 0;
	this._localBasisZ1Z = 0;
	this._localBasisX2X = 0;
	this._localBasisX2Y = 0;
	this._localBasisX2Z = 0;
	this._localBasisY2X = 0;
	this._localBasisY2Y = 0;
	this._localBasisY2Z = 0;
	this._localBasisZ2X = 0;
	this._localBasisZ2Y = 0;
	this._localBasisZ2Z = 0;
	var this1 = new Array(oimo_common_Setting.maxJacobianRows);
	this._impulses = this1;
	var _g2 = 0;
	var _g1 = oimo_common_Setting.maxJacobianRows;
	while(_g2 < _g1) {
		var i = _g2++;
		this._impulses[i] = new oimo_dynamics_constraint_joint_JointImpulse();
	}
};
oimo_dynamics_constraint_joint_Joint.__name__ = true;
oimo_dynamics_constraint_joint_Joint.prototype = {
	buildLocalBasesFromX: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z == 0) {
			this._localBasisX2X = 1;
			this._localBasisX2Y = 0;
			this._localBasisX2Z = 0;
		} else {
			var l1 = this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z;
			if(l1 > 0) {
				l1 = 1 / Math.sqrt(l1);
			}
			this._localBasisX2X *= l1;
			this._localBasisX2Y *= l1;
			this._localBasisX2Z *= l1;
		}
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var d = this._localBasisX1X * this._localBasisX2X + this._localBasisX1Y * this._localBasisX2Y + this._localBasisX1Z * this._localBasisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = this._localBasisX1Y * this._localBasisX2Z - this._localBasisX1Z * this._localBasisX2Y;
			cY = this._localBasisX1Z * this._localBasisX2X - this._localBasisX1X * this._localBasisX2Z;
			cZ = this._localBasisX1X * this._localBasisX2Y - this._localBasisX1Y * this._localBasisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w1 = slerpQW;
		var x21 = 2 * x;
		var y21 = 2 * y;
		var z21 = 2 * z;
		var xx = x * x21;
		var yy = y * y21;
		var zz = z * z21;
		var xy = x * y21;
		var yz = y * z21;
		var xz = x * z21;
		var wx = w1 * x21;
		var wy = w1 * y21;
		var wz = w1 * z21;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var x11 = this._localBasisX1X;
		var y11 = this._localBasisX1Y;
		var z11 = this._localBasisX1Z;
		var x22 = x11 * x11;
		var y22 = y11 * y11;
		var z22 = z11 * z11;
		var d2;
		if(x22 < y22) {
			if(x22 < z22) {
				d2 = 1 / Math.sqrt(y22 + z22);
				this._localBasisY1X = 0;
				this._localBasisY1Y = z11 * d2;
				this._localBasisY1Z = -y11 * d2;
			} else {
				d2 = 1 / Math.sqrt(x22 + y22);
				this._localBasisY1X = y11 * d2;
				this._localBasisY1Y = -x11 * d2;
				this._localBasisY1Z = 0;
			}
		} else if(y22 < z22) {
			d2 = 1 / Math.sqrt(z22 + x22);
			this._localBasisY1X = -z11 * d2;
			this._localBasisY1Y = 0;
			this._localBasisY1Z = x11 * d2;
		} else {
			d2 = 1 / Math.sqrt(x22 + y22);
			this._localBasisY1X = y11 * d2;
			this._localBasisY1Y = -x11 * d2;
			this._localBasisY1Z = 0;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisX1X + slerpM01 * this._localBasisX1Y + slerpM02 * this._localBasisX1Z;
		__tmp__Y = slerpM10 * this._localBasisX1X + slerpM11 * this._localBasisX1Y + slerpM12 * this._localBasisX1Z;
		__tmp__Z = slerpM20 * this._localBasisX1X + slerpM21 * this._localBasisX1Y + slerpM22 * this._localBasisX1Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = slerpM00 * this._localBasisY1X + slerpM01 * this._localBasisY1Y + slerpM02 * this._localBasisY1Z;
		__tmp__Y1 = slerpM10 * this._localBasisY1X + slerpM11 * this._localBasisY1Y + slerpM12 * this._localBasisY1Z;
		__tmp__Z1 = slerpM20 * this._localBasisY1X + slerpM21 * this._localBasisY1Y + slerpM22 * this._localBasisY1Z;
		this._localBasisY2X = __tmp__X1;
		this._localBasisY2Y = __tmp__Y1;
		this._localBasisY2Z = __tmp__Z1;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = slerpM00 * this._localBasisZ1X + slerpM01 * this._localBasisZ1Y + slerpM02 * this._localBasisZ1Z;
		__tmp__Y2 = slerpM10 * this._localBasisZ1X + slerpM11 * this._localBasisZ1Y + slerpM12 * this._localBasisZ1Z;
		__tmp__Z2 = slerpM20 * this._localBasisZ1X + slerpM21 * this._localBasisZ1Y + slerpM22 * this._localBasisZ1Z;
		this._localBasisZ2X = __tmp__X2;
		this._localBasisZ2Y = __tmp__Y2;
		this._localBasisZ2Z = __tmp__Z2;
	}
	,buildLocalBasesFromXY: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z == 0) {
			this._localBasisX2X = 1;
			this._localBasisX2Y = 0;
			this._localBasisX2Z = 0;
		} else {
			var l1 = this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z;
			if(l1 > 0) {
				l1 = 1 / Math.sqrt(l1);
			}
			this._localBasisX2X *= l1;
			this._localBasisX2Y *= l1;
			this._localBasisX2Z *= l1;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		this._localBasisZ2X = this._localBasisX2Y * this._localBasisY2Z - this._localBasisX2Z * this._localBasisY2Y;
		this._localBasisZ2Y = this._localBasisX2Z * this._localBasisY2X - this._localBasisX2X * this._localBasisY2Z;
		this._localBasisZ2Z = this._localBasisX2X * this._localBasisY2Y - this._localBasisX2Y * this._localBasisY2X;
		if(this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z == 0) {
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY1X = 0;
					this._localBasisY1Y = z1 * d;
					this._localBasisY1Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY1X = y1 * d;
					this._localBasisY1Y = -x1 * d;
					this._localBasisY1Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY1X = -z1 * d;
				this._localBasisY1Y = 0;
				this._localBasisY1Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
			this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
			this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
			this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		} else {
			var l2 = this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z;
			if(l2 > 0) {
				l2 = 1 / Math.sqrt(l2);
			}
			this._localBasisZ1X *= l2;
			this._localBasisZ1Y *= l2;
			this._localBasisZ1Z *= l2;
			this._localBasisY1X = this._localBasisZ1Y * this._localBasisX1Z - this._localBasisZ1Z * this._localBasisX1Y;
			this._localBasisY1Y = this._localBasisZ1Z * this._localBasisX1X - this._localBasisZ1X * this._localBasisX1Z;
			this._localBasisY1Z = this._localBasisZ1X * this._localBasisX1Y - this._localBasisZ1Y * this._localBasisX1X;
		}
		if(this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z == 0) {
			var x11 = this._localBasisX2X;
			var y11 = this._localBasisX2Y;
			var z11 = this._localBasisX2Z;
			var x21 = x11 * x11;
			var y21 = y11 * y11;
			var z21 = z11 * z11;
			var d1;
			if(x21 < y21) {
				if(x21 < z21) {
					d1 = 1 / Math.sqrt(y21 + z21);
					this._localBasisY2X = 0;
					this._localBasisY2Y = z11 * d1;
					this._localBasisY2Z = -y11 * d1;
				} else {
					d1 = 1 / Math.sqrt(x21 + y21);
					this._localBasisY2X = y11 * d1;
					this._localBasisY2Y = -x11 * d1;
					this._localBasisY2Z = 0;
				}
			} else if(y21 < z21) {
				d1 = 1 / Math.sqrt(z21 + x21);
				this._localBasisY2X = -z11 * d1;
				this._localBasisY2Y = 0;
				this._localBasisY2Z = x11 * d1;
			} else {
				d1 = 1 / Math.sqrt(x21 + y21);
				this._localBasisY2X = y11 * d1;
				this._localBasisY2Y = -x11 * d1;
				this._localBasisY2Z = 0;
			}
			this._localBasisZ2X = this._localBasisX2Y * this._localBasisY2Z - this._localBasisX2Z * this._localBasisY2Y;
			this._localBasisZ2Y = this._localBasisX2Z * this._localBasisY2X - this._localBasisX2X * this._localBasisY2Z;
			this._localBasisZ2Z = this._localBasisX2X * this._localBasisY2Y - this._localBasisX2Y * this._localBasisY2X;
		} else {
			var l3 = this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z;
			if(l3 > 0) {
				l3 = 1 / Math.sqrt(l3);
			}
			this._localBasisZ2X *= l3;
			this._localBasisZ2Y *= l3;
			this._localBasisZ2Z *= l3;
			this._localBasisY2X = this._localBasisZ2Y * this._localBasisX2Z - this._localBasisZ2Z * this._localBasisX2Y;
			this._localBasisY2Y = this._localBasisZ2Z * this._localBasisX2X - this._localBasisZ2X * this._localBasisX2Z;
			this._localBasisY2Z = this._localBasisZ2X * this._localBasisX2Y - this._localBasisZ2Y * this._localBasisX2X;
		}
	}
	,buildLocalBasesFromX1Z2: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z == 0) {
			this._localBasisZ2X = 0;
			this._localBasisZ2Y = 0;
			this._localBasisZ2Z = 1;
		} else {
			var l1 = this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z;
			if(l1 > 0) {
				l1 = 1 / Math.sqrt(l1);
			}
			this._localBasisZ2X *= l1;
			this._localBasisZ2Y *= l1;
			this._localBasisZ2Z *= l1;
		}
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var worldX1;
		var worldX1X;
		var worldX1Y;
		var worldX1Z;
		var worldZ1;
		var worldZ1X;
		var worldZ1Y;
		var worldZ1Z;
		var worldY;
		var worldYX;
		var worldYY;
		var worldYZ;
		var worldX2;
		var worldX2X;
		var worldX2Y;
		var worldX2Z;
		var worldZ2;
		var worldZ2X;
		var worldZ2Y;
		var worldZ2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisX1X + tf1._rotation01 * this._localBasisX1Y + tf1._rotation02 * this._localBasisX1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisX1X + tf1._rotation11 * this._localBasisX1Y + tf1._rotation12 * this._localBasisX1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisX1X + tf1._rotation21 * this._localBasisX1Y + tf1._rotation22 * this._localBasisX1Z;
		worldX1X = __tmp__X;
		worldX1Y = __tmp__Y;
		worldX1Z = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf2._rotation00 * this._localBasisZ2X + tf2._rotation01 * this._localBasisZ2Y + tf2._rotation02 * this._localBasisZ2Z;
		__tmp__Y1 = tf2._rotation10 * this._localBasisZ2X + tf2._rotation11 * this._localBasisZ2Y + tf2._rotation12 * this._localBasisZ2Z;
		__tmp__Z1 = tf2._rotation20 * this._localBasisZ2X + tf2._rotation21 * this._localBasisZ2Y + tf2._rotation22 * this._localBasisZ2Z;
		worldZ2X = __tmp__X1;
		worldZ2Y = __tmp__Y1;
		worldZ2Z = __tmp__Z1;
		worldYX = worldZ2Y * worldX1Z - worldZ2Z * worldX1Y;
		worldYY = worldZ2Z * worldX1X - worldZ2X * worldX1Z;
		worldYZ = worldZ2X * worldX1Y - worldZ2Y * worldX1X;
		if(worldYX * worldYX + worldYY * worldYY + worldYZ * worldYZ == 0) {
			var x1 = worldX1X;
			var y1 = worldX1Y;
			var z1 = worldX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					worldYX = 0;
					worldYY = z1 * d;
					worldYZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					worldYX = y1 * d;
					worldYY = -x1 * d;
					worldYZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				worldYX = -z1 * d;
				worldYY = 0;
				worldYZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				worldYX = y1 * d;
				worldYY = -x1 * d;
				worldYZ = 0;
			}
		}
		worldZ1X = worldX1Y * worldYZ - worldX1Z * worldYY;
		worldZ1Y = worldX1Z * worldYX - worldX1X * worldYZ;
		worldZ1Z = worldX1X * worldYY - worldX1Y * worldYX;
		worldX2X = worldYY * worldZ2Z - worldYZ * worldZ2Y;
		worldX2Y = worldYZ * worldZ2X - worldYX * worldZ2Z;
		worldX2Z = worldYX * worldZ2Y - worldYY * worldZ2X;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = tf1._rotation00 * worldX1X + tf1._rotation10 * worldX1Y + tf1._rotation20 * worldX1Z;
		__tmp__Y2 = tf1._rotation01 * worldX1X + tf1._rotation11 * worldX1Y + tf1._rotation21 * worldX1Z;
		__tmp__Z2 = tf1._rotation02 * worldX1X + tf1._rotation12 * worldX1Y + tf1._rotation22 * worldX1Z;
		this._localBasisX1X = __tmp__X2;
		this._localBasisX1Y = __tmp__Y2;
		this._localBasisX1Z = __tmp__Z2;
		var __tmp__X3;
		var __tmp__Y3;
		var __tmp__Z3;
		__tmp__X3 = tf1._rotation00 * worldYX + tf1._rotation10 * worldYY + tf1._rotation20 * worldYZ;
		__tmp__Y3 = tf1._rotation01 * worldYX + tf1._rotation11 * worldYY + tf1._rotation21 * worldYZ;
		__tmp__Z3 = tf1._rotation02 * worldYX + tf1._rotation12 * worldYY + tf1._rotation22 * worldYZ;
		this._localBasisY1X = __tmp__X3;
		this._localBasisY1Y = __tmp__Y3;
		this._localBasisY1Z = __tmp__Z3;
		var __tmp__X4;
		var __tmp__Y4;
		var __tmp__Z4;
		__tmp__X4 = tf1._rotation00 * worldZ1X + tf1._rotation10 * worldZ1Y + tf1._rotation20 * worldZ1Z;
		__tmp__Y4 = tf1._rotation01 * worldZ1X + tf1._rotation11 * worldZ1Y + tf1._rotation21 * worldZ1Z;
		__tmp__Z4 = tf1._rotation02 * worldZ1X + tf1._rotation12 * worldZ1Y + tf1._rotation22 * worldZ1Z;
		this._localBasisZ1X = __tmp__X4;
		this._localBasisZ1Y = __tmp__Y4;
		this._localBasisZ1Z = __tmp__Z4;
		var __tmp__X5;
		var __tmp__Y5;
		var __tmp__Z5;
		__tmp__X5 = tf2._rotation00 * worldX2X + tf2._rotation10 * worldX2Y + tf2._rotation20 * worldX2Z;
		__tmp__Y5 = tf2._rotation01 * worldX2X + tf2._rotation11 * worldX2Y + tf2._rotation21 * worldX2Z;
		__tmp__Z5 = tf2._rotation02 * worldX2X + tf2._rotation12 * worldX2Y + tf2._rotation22 * worldX2Z;
		this._localBasisX2X = __tmp__X5;
		this._localBasisX2Y = __tmp__Y5;
		this._localBasisX2Z = __tmp__Z5;
		var __tmp__X6;
		var __tmp__Y6;
		var __tmp__Z6;
		__tmp__X6 = tf2._rotation00 * worldYX + tf2._rotation10 * worldYY + tf2._rotation20 * worldYZ;
		__tmp__Y6 = tf2._rotation01 * worldYX + tf2._rotation11 * worldYY + tf2._rotation21 * worldYZ;
		__tmp__Z6 = tf2._rotation02 * worldYX + tf2._rotation12 * worldYY + tf2._rotation22 * worldYZ;
		this._localBasisY2X = __tmp__X6;
		this._localBasisY2Y = __tmp__Y6;
		this._localBasisY2Z = __tmp__Z6;
		var __tmp__X7;
		var __tmp__Y7;
		var __tmp__Z7;
		__tmp__X7 = tf2._rotation00 * worldZ2X + tf2._rotation10 * worldZ2Y + tf2._rotation20 * worldZ2Z;
		__tmp__Y7 = tf2._rotation01 * worldZ2X + tf2._rotation11 * worldZ2Y + tf2._rotation21 * worldZ2Z;
		__tmp__Z7 = tf2._rotation02 * worldZ2X + tf2._rotation12 * worldZ2Y + tf2._rotation22 * worldZ2Z;
		this._localBasisZ2X = __tmp__X7;
		this._localBasisZ2Y = __tmp__Y7;
		this._localBasisZ2Z = __tmp__Z7;
	}
	,buildLocalBasesFromXY1X2: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		if(this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z == 0) {
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY1X = 0;
					this._localBasisY1Y = z1 * d;
					this._localBasisY1Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY1X = y1 * d;
					this._localBasisY1Y = -x1 * d;
					this._localBasisY1Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY1X = -z1 * d;
				this._localBasisY1Y = 0;
				this._localBasisY1Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
			this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
			this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
			this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		} else {
			var l1 = this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z;
			if(l1 > 0) {
				l1 = 1 / Math.sqrt(l1);
			}
			this._localBasisZ1X *= l1;
			this._localBasisZ1Y *= l1;
			this._localBasisZ1Z *= l1;
			this._localBasisY1X = this._localBasisZ1Y * this._localBasisX1Z - this._localBasisZ1Z * this._localBasisX1Y;
			this._localBasisY1Y = this._localBasisZ1Z * this._localBasisX1X - this._localBasisZ1X * this._localBasisX1Z;
			this._localBasisY1Z = this._localBasisZ1X * this._localBasisX1Y - this._localBasisZ1Y * this._localBasisX1X;
		}
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var d1 = this._localBasisX1X * this._localBasisX2X + this._localBasisX1Y * this._localBasisX2Y + this._localBasisX1Z * this._localBasisX2Z;
		if(d1 < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x11 = this._localBasisX1X;
			var y11 = this._localBasisX1Y;
			var z11 = this._localBasisX1Z;
			var x21 = x11 * x11;
			var y21 = y11 * y11;
			var z21 = z11 * z11;
			var d2;
			if(x21 < y21) {
				if(x21 < z21) {
					d2 = 1 / Math.sqrt(y21 + z21);
					vX = 0;
					vY = z11 * d2;
					vZ = -y11 * d2;
				} else {
					d2 = 1 / Math.sqrt(x21 + y21);
					vX = y11 * d2;
					vY = -x11 * d2;
					vZ = 0;
				}
			} else if(y21 < z21) {
				d2 = 1 / Math.sqrt(z21 + x21);
				vX = -z11 * d2;
				vY = 0;
				vZ = x11 * d2;
			} else {
				d2 = 1 / Math.sqrt(x21 + y21);
				vX = y11 * d2;
				vY = -x11 * d2;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = this._localBasisX1Y * this._localBasisX2Z - this._localBasisX1Z * this._localBasisX2Y;
			cY = this._localBasisX1Z * this._localBasisX2X - this._localBasisX1X * this._localBasisX2Z;
			cZ = this._localBasisX1X * this._localBasisX2Y - this._localBasisX1Y * this._localBasisX2X;
			var w = Math.sqrt((1 + d1) * 0.5);
			d1 = 0.5 / w;
			cX *= d1;
			cY *= d1;
			cZ *= d1;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w1 = slerpQW;
		var x22 = 2 * x;
		var y22 = 2 * y;
		var z22 = 2 * z;
		var xx = x * x22;
		var yy = y * y22;
		var zz = z * z22;
		var xy = x * y22;
		var yz = y * z22;
		var xz = x * z22;
		var wx = w1 * x22;
		var wy = w1 * y22;
		var wz = w1 * z22;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisX1X + slerpM01 * this._localBasisX1Y + slerpM02 * this._localBasisX1Z;
		__tmp__Y = slerpM10 * this._localBasisX1X + slerpM11 * this._localBasisX1Y + slerpM12 * this._localBasisX1Z;
		__tmp__Z = slerpM20 * this._localBasisX1X + slerpM21 * this._localBasisX1Y + slerpM22 * this._localBasisX1Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = slerpM00 * this._localBasisY1X + slerpM01 * this._localBasisY1Y + slerpM02 * this._localBasisY1Z;
		__tmp__Y1 = slerpM10 * this._localBasisY1X + slerpM11 * this._localBasisY1Y + slerpM12 * this._localBasisY1Z;
		__tmp__Z1 = slerpM20 * this._localBasisY1X + slerpM21 * this._localBasisY1Y + slerpM22 * this._localBasisY1Z;
		this._localBasisY2X = __tmp__X1;
		this._localBasisY2Y = __tmp__Y1;
		this._localBasisY2Z = __tmp__Z1;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = slerpM00 * this._localBasisZ1X + slerpM01 * this._localBasisZ1Y + slerpM02 * this._localBasisZ1Z;
		__tmp__Y2 = slerpM10 * this._localBasisZ1X + slerpM11 * this._localBasisZ1Y + slerpM12 * this._localBasisZ1Z;
		__tmp__Z2 = slerpM20 * this._localBasisZ1X + slerpM21 * this._localBasisZ1Y + slerpM22 * this._localBasisZ1Z;
		this._localBasisZ2X = __tmp__X2;
		this._localBasisZ2Y = __tmp__Y2;
		this._localBasisZ2Z = __tmp__Z2;
	}
	,setSolverInfoRowLinear: function(row,diff,lm,mass,sd,timeStep,isPositionPart) {
		var cfmFactor;
		var erp;
		var slop = oimo_common_Setting.linearSlop;
		if(isPositionPart) {
			cfmFactor = 0;
			erp = 1;
		} else {
			if(sd.frequency > 0) {
				slop = 0;
				var omega = 6.28318530717958 * sd.frequency;
				var zeta = sd.dampingRatio;
				if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
					zeta = oimo_common_Setting.minSpringDamperDampingRatio;
				}
				var h = timeStep.dt;
				var c = 2 * zeta * omega;
				var k = omega * omega;
				if(sd.useSymplecticEuler) {
					cfmFactor = 1 / (h * c);
					erp = k / c;
				} else {
					cfmFactor = 1 / (h * (h * k + c));
					erp = k / (h * k + c);
				}
			} else {
				cfmFactor = 0;
				erp = this.getErp(timeStep,false);
			}
			if(lm.motorForce > 0) {
				row.motorSpeed = lm.motorSpeed;
				row.motorMaxImpulse = lm.motorForce * timeStep.dt;
			} else {
				row.motorSpeed = 0;
				row.motorMaxImpulse = 0;
			}
		}
		var lower = lm.lowerLimit;
		var upper = lm.upperLimit;
		var minImp;
		var maxImp;
		var error;
		if(lower > upper) {
			minImp = 0;
			maxImp = 0;
			error = 0;
		} else if(lower == upper) {
			minImp = -1e65536;
			maxImp = 1e65536;
			error = diff - lower;
		} else if(diff < lower) {
			minImp = -1e65536;
			maxImp = 0;
			error = diff - lower + slop;
			if(error > 0) {
				error = 0;
			}
		} else if(diff > upper) {
			minImp = 0;
			maxImp = 1e65536;
			error = diff - upper - slop;
			if(error < 0) {
				error = 0;
			}
		} else {
			minImp = 0;
			maxImp = 0;
			error = 0;
		}
		var invMass = mass == 0 ? 0 : 1 / mass;
		row.minImpulse = minImp;
		row.maxImpulse = maxImp;
		row.cfm = cfmFactor * invMass;
		row.rhs = error * erp;
	}
	,setSolverInfoRowAngular: function(row,diff,lm,mass,sd,timeStep,isPositionPart) {
		var cfmFactor;
		var erp;
		var slop = oimo_common_Setting.angularSlop;
		if(isPositionPart) {
			cfmFactor = 0;
			erp = 1;
		} else {
			if(sd.frequency > 0) {
				slop = 0;
				var omega = 6.28318530717958 * sd.frequency;
				var zeta = sd.dampingRatio;
				if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
					zeta = oimo_common_Setting.minSpringDamperDampingRatio;
				}
				var h = timeStep.dt;
				var c = 2 * zeta * omega;
				var k = omega * omega;
				if(sd.useSymplecticEuler) {
					cfmFactor = 1 / (h * c);
					erp = k / c;
				} else {
					cfmFactor = 1 / (h * (h * k + c));
					erp = k / (h * k + c);
				}
			} else {
				cfmFactor = 0;
				erp = this.getErp(timeStep,false);
			}
			if(lm.motorTorque > 0) {
				row.motorSpeed = lm.motorSpeed;
				row.motorMaxImpulse = lm.motorTorque * timeStep.dt;
			} else {
				row.motorSpeed = 0;
				row.motorMaxImpulse = 0;
			}
		}
		var lower = lm.lowerLimit;
		var upper = lm.upperLimit;
		var mid = (lower + upper) * 0.5;
		diff -= mid;
		diff = ((diff + 3.14159265358979) % 6.28318530717958 + 6.28318530717958) % 6.28318530717958 - 3.14159265358979;
		diff += mid;
		var minImp;
		var maxImp;
		var error;
		if(lower > upper) {
			minImp = 0;
			maxImp = 0;
			error = 0;
		} else if(lower == upper) {
			minImp = -1e65536;
			maxImp = 1e65536;
			error = diff - lower;
		} else if(diff < lower) {
			minImp = -1e65536;
			maxImp = 0;
			error = diff - lower + slop;
			if(error > 0) {
				error = 0;
			}
		} else if(diff > upper) {
			minImp = 0;
			maxImp = 1e65536;
			error = diff - upper - slop;
			if(error < 0) {
				error = 0;
			}
		} else {
			minImp = 0;
			maxImp = 0;
			error = 0;
		}
		var invMass = mass == 0 ? 0 : 1 / mass;
		row.minImpulse = minImp;
		row.maxImpulse = maxImp;
		row.cfm = cfmFactor * invMass;
		row.rhs = error * erp;
	}
	,getErp: function(timeStep,isPositionPart) {
		if(isPositionPart) {
			return 1;
		} else if(this._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE) {
			return timeStep.invDt * oimo_common_Setting.velocityBaumgarte;
		} else {
			return 0;
		}
	}
	,computeEffectiveInertiaMoment: function(axisX,axisY,axisZ) {
		var ia1;
		var ia1X;
		var ia1Y;
		var ia1Z;
		var ia2;
		var ia2X;
		var ia2Y;
		var ia2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b1._invInertia00 * axisX + this._b1._invInertia01 * axisY + this._b1._invInertia02 * axisZ;
		__tmp__Y = this._b1._invInertia10 * axisX + this._b1._invInertia11 * axisY + this._b1._invInertia12 * axisZ;
		__tmp__Z = this._b1._invInertia20 * axisX + this._b1._invInertia21 * axisY + this._b1._invInertia22 * axisZ;
		ia1X = __tmp__X;
		ia1Y = __tmp__Y;
		ia1Z = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = this._b2._invInertia00 * axisX + this._b2._invInertia01 * axisY + this._b2._invInertia02 * axisZ;
		__tmp__Y1 = this._b2._invInertia10 * axisX + this._b2._invInertia11 * axisY + this._b2._invInertia12 * axisZ;
		__tmp__Z1 = this._b2._invInertia20 * axisX + this._b2._invInertia21 * axisY + this._b2._invInertia22 * axisZ;
		ia2X = __tmp__X1;
		ia2Y = __tmp__Y1;
		ia2Z = __tmp__Z1;
		var invI1 = ia1X * axisX + ia1Y * axisY + ia1Z * axisZ;
		var invI2 = ia2X * axisX + ia2Y * axisY + ia2Z * axisZ;
		if(invI1 > 0) {
			var rsq = this._relativeAnchor1X * this._relativeAnchor1X + this._relativeAnchor1Y * this._relativeAnchor1Y + this._relativeAnchor1Z * this._relativeAnchor1Z;
			var dot = axisX * this._relativeAnchor1X + axisY * this._relativeAnchor1Y + axisZ * this._relativeAnchor1Z;
			var projsq = rsq - dot * dot;
			if(projsq > 0) {
				if(this._b1._invMass > 0) {
					invI1 = 1 / (1 / invI1 + this._b1._mass * projsq);
				} else {
					invI1 = 0;
				}
			}
		}
		if(invI2 > 0) {
			var rsq1 = this._relativeAnchor2X * this._relativeAnchor2X + this._relativeAnchor2Y * this._relativeAnchor2Y + this._relativeAnchor2Z * this._relativeAnchor2Z;
			var dot1 = axisX * this._relativeAnchor2X + axisY * this._relativeAnchor2Y + axisZ * this._relativeAnchor2Z;
			var projsq1 = rsq1 - dot1 * dot1;
			if(projsq1 > 0) {
				if(this._b2._invMass > 0) {
					invI2 = 1 / (1 / invI2 + this._b2._mass * projsq1);
				} else {
					invI2 = 0;
				}
			}
		}
		if(invI1 + invI2 == 0) {
			return 0;
		} else {
			return 1 / (invI1 + invI2);
		}
	}
	,computeEffectiveInertiaMoment2: function(axis1X,axis1Y,axis1Z,axis2X,axis2Y,axis2Z) {
		var ia1;
		var ia1X;
		var ia1Y;
		var ia1Z;
		var ia2;
		var ia2X;
		var ia2Y;
		var ia2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b1._invInertia00 * axis1X + this._b1._invInertia01 * axis1Y + this._b1._invInertia02 * axis1Z;
		__tmp__Y = this._b1._invInertia10 * axis1X + this._b1._invInertia11 * axis1Y + this._b1._invInertia12 * axis1Z;
		__tmp__Z = this._b1._invInertia20 * axis1X + this._b1._invInertia21 * axis1Y + this._b1._invInertia22 * axis1Z;
		ia1X = __tmp__X;
		ia1Y = __tmp__Y;
		ia1Z = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = this._b2._invInertia00 * axis2X + this._b2._invInertia01 * axis2Y + this._b2._invInertia02 * axis2Z;
		__tmp__Y1 = this._b2._invInertia10 * axis2X + this._b2._invInertia11 * axis2Y + this._b2._invInertia12 * axis2Z;
		__tmp__Z1 = this._b2._invInertia20 * axis2X + this._b2._invInertia21 * axis2Y + this._b2._invInertia22 * axis2Z;
		ia2X = __tmp__X1;
		ia2Y = __tmp__Y1;
		ia2Z = __tmp__Z1;
		var invI1 = ia1X * axis1X + ia1Y * axis1Y + ia1Z * axis1Z;
		var invI2 = ia2X * axis2X + ia2Y * axis2Y + ia2Z * axis2Z;
		if(invI1 > 0) {
			var rsq = this._relativeAnchor1X * this._relativeAnchor1X + this._relativeAnchor1Y * this._relativeAnchor1Y + this._relativeAnchor1Z * this._relativeAnchor1Z;
			var dot = axis1X * this._relativeAnchor1X + axis1Y * this._relativeAnchor1Y + axis1Z * this._relativeAnchor1Z;
			var projsq = rsq * rsq - dot * dot;
			if(projsq > 0) {
				if(this._b1._invMass > 0) {
					invI1 = 1 / (1 / invI1 + this._b1._mass * projsq);
				} else {
					invI1 = 0;
				}
			}
		}
		if(invI2 > 0) {
			var rsq1 = this._relativeAnchor2X * this._relativeAnchor2X + this._relativeAnchor2Y * this._relativeAnchor2Y + this._relativeAnchor2Z * this._relativeAnchor2Z;
			var dot1 = axis2X * this._relativeAnchor2X + axis2Y * this._relativeAnchor2Y + axis2Z * this._relativeAnchor2Z;
			var projsq1 = rsq1 * rsq1 - dot1 * dot1;
			if(projsq1 > 0) {
				if(this._b2._invMass > 0) {
					invI2 = 1 / (1 / invI2 + this._b2._mass * projsq1);
				} else {
					invI2 = 0;
				}
			}
		}
		if(invI1 + invI2 == 0) {
			return 0;
		} else {
			return 1 / (invI1 + invI2);
		}
	}
	,_syncAnchors: function() {
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localAnchor1X + tf1._rotation01 * this._localAnchor1Y + tf1._rotation02 * this._localAnchor1Z;
		__tmp__Y = tf1._rotation10 * this._localAnchor1X + tf1._rotation11 * this._localAnchor1Y + tf1._rotation12 * this._localAnchor1Z;
		__tmp__Z = tf1._rotation20 * this._localAnchor1X + tf1._rotation21 * this._localAnchor1Y + tf1._rotation22 * this._localAnchor1Z;
		this._relativeAnchor1X = __tmp__X;
		this._relativeAnchor1Y = __tmp__Y;
		this._relativeAnchor1Z = __tmp__Z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = tf2._rotation00 * this._localAnchor2X + tf2._rotation01 * this._localAnchor2Y + tf2._rotation02 * this._localAnchor2Z;
		__tmp__Y1 = tf2._rotation10 * this._localAnchor2X + tf2._rotation11 * this._localAnchor2Y + tf2._rotation12 * this._localAnchor2Z;
		__tmp__Z1 = tf2._rotation20 * this._localAnchor2X + tf2._rotation21 * this._localAnchor2Y + tf2._rotation22 * this._localAnchor2Z;
		this._relativeAnchor2X = __tmp__X1;
		this._relativeAnchor2Y = __tmp__Y1;
		this._relativeAnchor2Z = __tmp__Z1;
		this._anchor1X = this._relativeAnchor1X + tf1._positionX;
		this._anchor1Y = this._relativeAnchor1Y + tf1._positionY;
		this._anchor1Z = this._relativeAnchor1Z + tf1._positionZ;
		this._anchor2X = this._relativeAnchor2X + tf2._positionX;
		this._anchor2Y = this._relativeAnchor2Y + tf2._positionY;
		this._anchor2Z = this._relativeAnchor2Z + tf2._positionZ;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = tf1._rotation00 * this._localBasisX1X + tf1._rotation01 * this._localBasisX1Y + tf1._rotation02 * this._localBasisX1Z;
		__tmp__Y2 = tf1._rotation10 * this._localBasisX1X + tf1._rotation11 * this._localBasisX1Y + tf1._rotation12 * this._localBasisX1Z;
		__tmp__Z2 = tf1._rotation20 * this._localBasisX1X + tf1._rotation21 * this._localBasisX1Y + tf1._rotation22 * this._localBasisX1Z;
		this._basisX1X = __tmp__X2;
		this._basisX1Y = __tmp__Y2;
		this._basisX1Z = __tmp__Z2;
		var __tmp__X3;
		var __tmp__Y3;
		var __tmp__Z3;
		__tmp__X3 = tf1._rotation00 * this._localBasisY1X + tf1._rotation01 * this._localBasisY1Y + tf1._rotation02 * this._localBasisY1Z;
		__tmp__Y3 = tf1._rotation10 * this._localBasisY1X + tf1._rotation11 * this._localBasisY1Y + tf1._rotation12 * this._localBasisY1Z;
		__tmp__Z3 = tf1._rotation20 * this._localBasisY1X + tf1._rotation21 * this._localBasisY1Y + tf1._rotation22 * this._localBasisY1Z;
		this._basisY1X = __tmp__X3;
		this._basisY1Y = __tmp__Y3;
		this._basisY1Z = __tmp__Z3;
		var __tmp__X4;
		var __tmp__Y4;
		var __tmp__Z4;
		__tmp__X4 = tf1._rotation00 * this._localBasisZ1X + tf1._rotation01 * this._localBasisZ1Y + tf1._rotation02 * this._localBasisZ1Z;
		__tmp__Y4 = tf1._rotation10 * this._localBasisZ1X + tf1._rotation11 * this._localBasisZ1Y + tf1._rotation12 * this._localBasisZ1Z;
		__tmp__Z4 = tf1._rotation20 * this._localBasisZ1X + tf1._rotation21 * this._localBasisZ1Y + tf1._rotation22 * this._localBasisZ1Z;
		this._basisZ1X = __tmp__X4;
		this._basisZ1Y = __tmp__Y4;
		this._basisZ1Z = __tmp__Z4;
		var __tmp__X5;
		var __tmp__Y5;
		var __tmp__Z5;
		__tmp__X5 = tf2._rotation00 * this._localBasisX2X + tf2._rotation01 * this._localBasisX2Y + tf2._rotation02 * this._localBasisX2Z;
		__tmp__Y5 = tf2._rotation10 * this._localBasisX2X + tf2._rotation11 * this._localBasisX2Y + tf2._rotation12 * this._localBasisX2Z;
		__tmp__Z5 = tf2._rotation20 * this._localBasisX2X + tf2._rotation21 * this._localBasisX2Y + tf2._rotation22 * this._localBasisX2Z;
		this._basisX2X = __tmp__X5;
		this._basisX2Y = __tmp__Y5;
		this._basisX2Z = __tmp__Z5;
		var __tmp__X6;
		var __tmp__Y6;
		var __tmp__Z6;
		__tmp__X6 = tf2._rotation00 * this._localBasisY2X + tf2._rotation01 * this._localBasisY2Y + tf2._rotation02 * this._localBasisY2Z;
		__tmp__Y6 = tf2._rotation10 * this._localBasisY2X + tf2._rotation11 * this._localBasisY2Y + tf2._rotation12 * this._localBasisY2Z;
		__tmp__Z6 = tf2._rotation20 * this._localBasisY2X + tf2._rotation21 * this._localBasisY2Y + tf2._rotation22 * this._localBasisY2Z;
		this._basisY2X = __tmp__X6;
		this._basisY2Y = __tmp__Y6;
		this._basisY2Z = __tmp__Z6;
		var __tmp__X7;
		var __tmp__Y7;
		var __tmp__Z7;
		__tmp__X7 = tf2._rotation00 * this._localBasisZ2X + tf2._rotation01 * this._localBasisZ2Y + tf2._rotation02 * this._localBasisZ2Z;
		__tmp__Y7 = tf2._rotation10 * this._localBasisZ2X + tf2._rotation11 * this._localBasisZ2Y + tf2._rotation12 * this._localBasisZ2Z;
		__tmp__Z7 = tf2._rotation20 * this._localBasisZ2X + tf2._rotation21 * this._localBasisZ2Y + tf2._rotation22 * this._localBasisZ2Z;
		this._basisZ2X = __tmp__X7;
		this._basisZ2Y = __tmp__Y7;
		this._basisZ2Z = __tmp__Z7;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		info.numRows = 0;
	}
	,_getPositionSolverInfo: function(info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		info.numRows = 0;
	}
	,_checkDestruction: function() {
		var forceSq = this._appliedForceX * this._appliedForceX + this._appliedForceY * this._appliedForceY + this._appliedForceZ * this._appliedForceZ;
		var torqueSq = this._appliedTorqueX * this._appliedTorqueX + this._appliedTorqueY * this._appliedTorqueY + this._appliedTorqueZ * this._appliedTorqueZ;
		if(this._breakForce > 0 && forceSq > this._breakForce * this._breakForce) {
			this._world.removeJoint(this);
			return;
		}
		if(this._breakTorque > 0 && torqueSq > this._breakTorque * this._breakTorque) {
			this._world.removeJoint(this);
			return;
		}
	}
	,getRigidBody1: function() {
		return this._b1;
	}
	,getRigidBody2: function() {
		return this._b2;
	}
	,getType: function() {
		return this._type;
	}
	,getAnchor1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._anchor1X;
		v1.y = this._anchor1Y;
		v1.z = this._anchor1Z;
		return v;
	}
	,getAnchor2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._anchor2X;
		v1.y = this._anchor2Y;
		v1.z = this._anchor2Z;
		return v;
	}
	,getAnchor1To: function(anchor) {
		var v = anchor;
		v.x = this._anchor1X;
		v.y = this._anchor1Y;
		v.z = this._anchor1Z;
	}
	,getAnchor2To: function(anchor) {
		var v = anchor;
		v.x = this._anchor2X;
		v.y = this._anchor2Y;
		v.z = this._anchor2Z;
	}
	,getLocalAnchor1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localAnchor1X;
		v1.y = this._localAnchor1Y;
		v1.z = this._localAnchor1Z;
		return v;
	}
	,getLocalAnchor2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localAnchor2X;
		v1.y = this._localAnchor2Y;
		v1.z = this._localAnchor2Z;
		return v;
	}
	,getLocalAnchor1To: function(localAnchor) {
		var v = localAnchor;
		v.x = this._localAnchor1X;
		v.y = this._localAnchor1Y;
		v.z = this._localAnchor1Z;
	}
	,getLocalAnchor2To: function(localAnchor) {
		var v = localAnchor;
		v.x = this._localAnchor2X;
		v.y = this._localAnchor2Y;
		v.z = this._localAnchor2Z;
	}
	,getBasis1: function() {
		var m = new oimo_common_Mat3();
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX1X;
		b01 = this._basisY1X;
		b02 = this._basisZ1X;
		b10 = this._basisX1Y;
		b11 = this._basisY1Y;
		b12 = this._basisZ1Y;
		b20 = this._basisX1Z;
		b21 = this._basisY1Z;
		b22 = this._basisZ1Z;
		var m1 = m;
		m1.e00 = b00;
		m1.e01 = b01;
		m1.e02 = b02;
		m1.e10 = b10;
		m1.e11 = b11;
		m1.e12 = b12;
		m1.e20 = b20;
		m1.e21 = b21;
		m1.e22 = b22;
		return m;
	}
	,getBasis2: function() {
		var m = new oimo_common_Mat3();
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX2X;
		b01 = this._basisY2X;
		b02 = this._basisZ2X;
		b10 = this._basisX2Y;
		b11 = this._basisY2Y;
		b12 = this._basisZ2Y;
		b20 = this._basisX2Z;
		b21 = this._basisY2Z;
		b22 = this._basisZ2Z;
		var m1 = m;
		m1.e00 = b00;
		m1.e01 = b01;
		m1.e02 = b02;
		m1.e10 = b10;
		m1.e11 = b11;
		m1.e12 = b12;
		m1.e20 = b20;
		m1.e21 = b21;
		m1.e22 = b22;
		return m;
	}
	,getBasis1To: function(basis) {
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX1X;
		b01 = this._basisY1X;
		b02 = this._basisZ1X;
		b10 = this._basisX1Y;
		b11 = this._basisY1Y;
		b12 = this._basisZ1Y;
		b20 = this._basisX1Z;
		b21 = this._basisY1Z;
		b22 = this._basisZ1Z;
		var m = basis;
		m.e00 = b00;
		m.e01 = b01;
		m.e02 = b02;
		m.e10 = b10;
		m.e11 = b11;
		m.e12 = b12;
		m.e20 = b20;
		m.e21 = b21;
		m.e22 = b22;
	}
	,getBasis2To: function(basis) {
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX2X;
		b01 = this._basisY2X;
		b02 = this._basisZ2X;
		b10 = this._basisX2Y;
		b11 = this._basisY2Y;
		b12 = this._basisZ2Y;
		b20 = this._basisX2Z;
		b21 = this._basisY2Z;
		b22 = this._basisZ2Z;
		var m = basis;
		m.e00 = b00;
		m.e01 = b01;
		m.e02 = b02;
		m.e10 = b10;
		m.e11 = b11;
		m.e12 = b12;
		m.e20 = b20;
		m.e21 = b21;
		m.e22 = b22;
	}
	,getAllowCollision: function() {
		return this._allowCollision;
	}
	,setAllowCollision: function(allowCollision) {
		this._allowCollision = allowCollision;
	}
	,getBreakForce: function() {
		return this._breakForce;
	}
	,setBreakForce: function(breakForce) {
		this._breakForce = breakForce;
	}
	,getBreakTorque: function() {
		return this._breakTorque;
	}
	,setBreakTorque: function(breakTorque) {
		this._breakTorque = breakTorque;
	}
	,getPositionCorrectionAlgorithm: function() {
		return this._positionCorrectionAlgorithm;
	}
	,setPositionCorrectionAlgorithm: function(positionCorrectionAlgorithm) {
		switch(positionCorrectionAlgorithm) {
		case 0:case 1:case 2:
			break;
		default:
			throw new Error("invalid position correction algorithm id: " + positionCorrectionAlgorithm);
		}
		this._positionCorrectionAlgorithm = positionCorrectionAlgorithm;
	}
	,getAppliedForce: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._appliedForceX;
		v1.y = this._appliedForceY;
		v1.z = this._appliedForceZ;
		return v;
	}
	,getAppliedForceTo: function(appliedForce) {
		var v = appliedForce;
		v.x = this._appliedForceX;
		v.y = this._appliedForceY;
		v.z = this._appliedForceZ;
	}
	,getAppliedTorque: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._appliedTorqueX;
		v1.y = this._appliedTorqueY;
		v1.z = this._appliedTorqueZ;
		return v;
	}
	,getAppliedTorqueTo: function(appliedTorque) {
		var v = appliedTorque;
		v.x = this._appliedTorqueX;
		v.y = this._appliedTorqueY;
		v.z = this._appliedTorqueZ;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_dynamics_constraint_joint_CylindricalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,2);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v1 = config.localAxis2;
	this._localBasisX2X = v1.x;
	this._localBasisX2Y = v1.y;
	this._localBasisX2Z = v1.z;
	this.buildLocalBasesFromX();
	this.angle = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this.translation = 0;
	this.linearErrorY = 0;
	this.linearErrorZ = 0;
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this._translSd = config.translationalSpringDamper.clone();
	this._translLm = config.translationalLimitMotor.clone();
	this._rotSd = config.rotationalSpringDamper.clone();
	this._rotLm = config.rotationalLimitMotor.clone();
};
oimo_dynamics_constraint_joint_CylindricalJoint.__name__ = true;
oimo_dynamics_constraint_joint_CylindricalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_CylindricalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linRhsY = this.linearErrorY * erp;
		var linRhsZ = this.linearErrorZ * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var row;
		var j;
		var translationalMotorMass = 1 / (this._b1._invMass + this._b2._invMass);
		var rotationalMotorMass = this.computeEffectiveInertiaMoment(this._basis.xX,this._basis.xY,this._basis.xZ);
		if(this._translSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translation,this._translLm,translationalMotorMass,this._translSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basis.xX;
			j.lin1Y = this._basis.xY;
			j.lin1Z = this._basis.xZ;
			j.lin2X = this._basis.xX;
			j.lin2Y = this._basis.xY;
			j.lin2Z = this._basis.xZ;
			j.ang1X = this._relativeAnchor1Y * this._basis.xZ - this._relativeAnchor1Z * this._basis.xY;
			j.ang1Y = this._relativeAnchor1Z * this._basis.xX - this._relativeAnchor1X * this._basis.xZ;
			j.ang1Z = this._relativeAnchor1X * this._basis.xY - this._relativeAnchor1Y * this._basis.xX;
			j.ang2X = this._relativeAnchor2Y * this._basis.xZ - this._relativeAnchor2Z * this._basis.xY;
			j.ang2Y = this._relativeAnchor2Z * this._basis.xX - this._relativeAnchor2X * this._basis.xZ;
			j.ang2Z = this._relativeAnchor2X * this._basis.xY - this._relativeAnchor2Y * this._basis.xX;
		}
		var impulse1 = this._impulses[1];
		var row2 = info.rows[info.numRows++];
		var _this1 = row2.jacobian;
		_this1.lin1X = 0;
		_this1.lin1Y = 0;
		_this1.lin1Z = 0;
		_this1.lin2X = 0;
		_this1.lin2Y = 0;
		_this1.lin2Z = 0;
		_this1.ang1X = 0;
		_this1.ang1Y = 0;
		_this1.ang1Z = 0;
		_this1.ang2X = 0;
		_this1.ang2Y = 0;
		_this1.ang2Z = 0;
		row2.rhs = 0;
		row2.cfm = 0;
		row2.minImpulse = 0;
		row2.maxImpulse = 0;
		row2.motorSpeed = 0;
		row2.motorMaxImpulse = 0;
		row2.impulse = null;
		row2.impulse = impulse1;
		row = row2;
		row.rhs = linRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.yX;
		j.lin1Y = this._basis.yY;
		j.lin1Z = this._basis.yZ;
		j.lin2X = this._basis.yX;
		j.lin2Y = this._basis.yY;
		j.lin2Z = this._basis.yZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.yZ - this._relativeAnchor1Z * this._basis.yY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.yX - this._relativeAnchor1X * this._basis.yZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.yY - this._relativeAnchor1Y * this._basis.yX;
		j.ang2X = this._relativeAnchor2Y * this._basis.yZ - this._relativeAnchor2Z * this._basis.yY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.yX - this._relativeAnchor2X * this._basis.yZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.yY - this._relativeAnchor2Y * this._basis.yX;
		var impulse2 = this._impulses[2];
		var row3 = info.rows[info.numRows++];
		var _this2 = row3.jacobian;
		_this2.lin1X = 0;
		_this2.lin1Y = 0;
		_this2.lin1Z = 0;
		_this2.lin2X = 0;
		_this2.lin2Y = 0;
		_this2.lin2Z = 0;
		_this2.ang1X = 0;
		_this2.ang1Y = 0;
		_this2.ang1Z = 0;
		_this2.ang2X = 0;
		_this2.ang2Y = 0;
		_this2.ang2Z = 0;
		row3.rhs = 0;
		row3.cfm = 0;
		row3.minImpulse = 0;
		row3.maxImpulse = 0;
		row3.motorSpeed = 0;
		row3.motorMaxImpulse = 0;
		row3.impulse = null;
		row3.impulse = impulse2;
		row = row3;
		row.rhs = linRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.zX;
		j.lin1Y = this._basis.zY;
		j.lin1Z = this._basis.zZ;
		j.lin2X = this._basis.zX;
		j.lin2Y = this._basis.zY;
		j.lin2Z = this._basis.zZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.zZ - this._relativeAnchor1Z * this._basis.zY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.zX - this._relativeAnchor1X * this._basis.zZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.zY - this._relativeAnchor1Y * this._basis.zX;
		j.ang2X = this._relativeAnchor2Y * this._basis.zZ - this._relativeAnchor2Z * this._basis.zY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.zX - this._relativeAnchor2X * this._basis.zZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.zY - this._relativeAnchor2Y * this._basis.zX;
		if(this._rotSd.frequency <= 0 || !isPositionPart) {
			var impulse3 = this._impulses[3];
			var row4 = info.rows[info.numRows++];
			var _this3 = row4.jacobian;
			_this3.lin1X = 0;
			_this3.lin1Y = 0;
			_this3.lin1Z = 0;
			_this3.lin2X = 0;
			_this3.lin2Y = 0;
			_this3.lin2Z = 0;
			_this3.ang1X = 0;
			_this3.ang1Y = 0;
			_this3.ang1Z = 0;
			_this3.ang2X = 0;
			_this3.ang2Y = 0;
			_this3.ang2Z = 0;
			row4.rhs = 0;
			row4.cfm = 0;
			row4.minImpulse = 0;
			row4.maxImpulse = 0;
			row4.motorSpeed = 0;
			row4.motorMaxImpulse = 0;
			row4.impulse = null;
			row4.impulse = impulse3;
			row = row4;
			this.setSolverInfoRowAngular(row,this.angle,this._rotLm,rotationalMotorMass,this._rotSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._basis.xX;
			j.ang1Y = this._basis.xY;
			j.ang1Z = this._basis.xZ;
			j.ang2X = this._basis.xX;
			j.ang2Y = this._basis.xY;
			j.ang2Z = this._basis.xZ;
		}
		var impulse4 = this._impulses[4];
		var row5 = info.rows[info.numRows++];
		var _this4 = row5.jacobian;
		_this4.lin1X = 0;
		_this4.lin1Y = 0;
		_this4.lin1Z = 0;
		_this4.lin2X = 0;
		_this4.lin2Y = 0;
		_this4.lin2Z = 0;
		_this4.ang1X = 0;
		_this4.ang1Y = 0;
		_this4.ang1Z = 0;
		_this4.ang2X = 0;
		_this4.ang2Y = 0;
		_this4.ang2Z = 0;
		row5.rhs = 0;
		row5.cfm = 0;
		row5.minImpulse = 0;
		row5.maxImpulse = 0;
		row5.motorSpeed = 0;
		row5.motorMaxImpulse = 0;
		row5.impulse = null;
		row5.impulse = impulse4;
		row = row5;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.yX;
		j.ang1Y = this._basis.yY;
		j.ang1Z = this._basis.yZ;
		j.ang2X = this._basis.yX;
		j.ang2Y = this._basis.yY;
		j.ang2Z = this._basis.yZ;
		var impulse5 = this._impulses[5];
		var row6 = info.rows[info.numRows++];
		var _this5 = row6.jacobian;
		_this5.lin1X = 0;
		_this5.lin1Y = 0;
		_this5.lin1Z = 0;
		_this5.lin2X = 0;
		_this5.lin2Y = 0;
		_this5.lin2Z = 0;
		_this5.ang1X = 0;
		_this5.ang1Y = 0;
		_this5.ang1Z = 0;
		_this5.ang2X = 0;
		_this5.ang2Y = 0;
		_this5.ang2Z = 0;
		row6.rhs = 0;
		row6.cfm = 0;
		row6.minImpulse = 0;
		row6.maxImpulse = 0;
		row6.motorSpeed = 0;
		row6.motorMaxImpulse = 0;
		row6.impulse = null;
		row6.impulse = impulse5;
		row = row6;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.zX;
		j.ang1Y = this._basis.zY;
		j.ang1Z = this._basis.zZ;
		j.ang2X = this._basis.zX;
		j.ang2Y = this._basis.zY;
		j.ang2Z = this._basis.zZ;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQ;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newX;
		var newXX;
		var newXY;
		var newXZ;
		var newY;
		var newYX;
		var newYY;
		var newYZ;
		var newZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevX;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevY;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var qx;
		var qy;
		var qz;
		var qw;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d2 = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d2 < 0) {
			d2 = -d2;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d2 > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d2);
			q2X += q1X * -d2;
			q2Y += q1Y * -d2;
			q2Z += q1Z * -d2;
			q2W += q1W * -d2;
			var l1 = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l1 > 1e-32) {
				l1 = 1 / Math.sqrt(l1);
			}
			q2X *= l1;
			q2Y *= l1;
			q2Z *= l1;
			q2W *= l1;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w1 = slerpQW;
		var x21 = 2 * x;
		var y21 = 2 * y;
		var z21 = 2 * z;
		var xx = x * x21;
		var yy = y * y21;
		var zz = z * z21;
		var xy = x * y21;
		var yz = y * z21;
		var xz = x * z21;
		var wx = w1 * x21;
		var wy = w1 * y21;
		var wz = w1 * z21;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d3 = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d3 < -0.999999999) {
			var vX1;
			var vY1;
			var vZ1;
			var x11 = prevXX;
			var y11 = prevXY;
			var z11 = prevXZ;
			var x22 = x11 * x11;
			var y22 = y11 * y11;
			var z22 = z11 * z11;
			var d4;
			if(x22 < y22) {
				if(x22 < z22) {
					d4 = 1 / Math.sqrt(y22 + z22);
					vX1 = 0;
					vY1 = z11 * d4;
					vZ1 = -y11 * d4;
				} else {
					d4 = 1 / Math.sqrt(x22 + y22);
					vX1 = y11 * d4;
					vY1 = -x11 * d4;
					vZ1 = 0;
				}
			} else if(y22 < z22) {
				d4 = 1 / Math.sqrt(z22 + x22);
				vX1 = -z11 * d4;
				vY1 = 0;
				vZ1 = x11 * d4;
			} else {
				d4 = 1 / Math.sqrt(x22 + y22);
				vX1 = y11 * d4;
				vY1 = -x11 * d4;
				vZ1 = 0;
			}
			slerpQX = vX1;
			slerpQY = vY1;
			slerpQZ = vZ1;
			slerpQW = 0;
		} else {
			var cX1;
			var cY1;
			var cZ1;
			cX1 = prevXY * newXZ - prevXZ * newXY;
			cY1 = prevXZ * newXX - prevXX * newXZ;
			cZ1 = prevXX * newXY - prevXY * newXX;
			var w2 = Math.sqrt((1 + d3) * 0.5);
			d3 = 0.5 / w2;
			cX1 *= d3;
			cY1 *= d3;
			cZ1 *= d3;
			slerpQX = cX1;
			slerpQY = cY1;
			slerpQZ = cZ1;
			slerpQW = w2;
		}
		var x3 = slerpQX;
		var y3 = slerpQY;
		var z3 = slerpQZ;
		var w3 = slerpQW;
		var x23 = 2 * x3;
		var y23 = 2 * y3;
		var z23 = 2 * z3;
		var xx1 = x3 * x23;
		var yy1 = y3 * y23;
		var zz1 = z3 * z23;
		var xy1 = x3 * y23;
		var yz1 = y3 * z23;
		var xz1 = x3 * z23;
		var wx1 = w3 * x23;
		var wy1 = w3 * y23;
		var wz1 = w3 * z23;
		slerpM00 = 1 - yy1 - zz1;
		slerpM01 = xy1 - wz1;
		slerpM02 = xz1 + wy1;
		slerpM10 = xy1 + wz1;
		slerpM11 = 1 - xx1 - zz1;
		slerpM12 = yz1 - wx1;
		slerpM20 = xz1 - wy1;
		slerpM21 = yz1 + wx1;
		slerpM22 = 1 - xx1 - yy1;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y1 = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z1 = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X1;
		newYY = __tmp__Y1;
		newYZ = __tmp__Z1;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l2 = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l2 > 0) {
				l2 = 1 / Math.sqrt(l2);
			}
			newZX *= l2;
			newZY *= l2;
			newZZ *= l2;
		} else {
			var x12 = newXX;
			var y12 = newXY;
			var z12 = newXZ;
			var x24 = x12 * x12;
			var y24 = y12 * y12;
			var z24 = z12 * z12;
			var d5;
			if(x24 < y24) {
				if(x24 < z24) {
					d5 = 1 / Math.sqrt(y24 + z24);
					newZX = 0;
					newZY = z12 * d5;
					newZZ = -y12 * d5;
				} else {
					d5 = 1 / Math.sqrt(x24 + y24);
					newZX = y12 * d5;
					newZY = -x12 * d5;
					newZZ = 0;
				}
			} else if(y24 < z24) {
				d5 = 1 / Math.sqrt(z24 + x24);
				newZX = -z12 * d5;
				newZY = 0;
				newZZ = x12 * d5;
			} else {
				d5 = 1 / Math.sqrt(x24 + y24);
				newZX = y12 * d5;
				newZY = -x12 * d5;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var angError;
		var angErrorX;
		var angErrorY;
		var angErrorZ;
		angErrorX = this._basisX1Y * this._basisX2Z - this._basisX1Z * this._basisX2Y;
		angErrorY = this._basisX1Z * this._basisX2X - this._basisX1X * this._basisX2Z;
		angErrorZ = this._basisX1X * this._basisX2Y - this._basisX1Y * this._basisX2X;
		var cos1 = this._basisX1X * this._basisX2X + this._basisX1Y * this._basisX2Y + this._basisX1Z * this._basisX2Z;
		var theta1 = cos1 <= -1 ? 3.14159265358979 : cos1 >= 1 ? 0 : Math.acos(cos1);
		var l3 = angErrorX * angErrorX + angErrorY * angErrorY + angErrorZ * angErrorZ;
		if(l3 > 0) {
			l3 = 1 / Math.sqrt(l3);
		}
		angErrorX *= l3;
		angErrorY *= l3;
		angErrorZ *= l3;
		angErrorX *= theta1;
		angErrorY *= theta1;
		angErrorZ *= theta1;
		this.angularErrorY = angErrorX * this._basis.yX + angErrorY * this._basis.yY + angErrorZ * this._basis.yZ;
		this.angularErrorZ = angErrorX * this._basis.zX + angErrorY * this._basis.zY + angErrorZ * this._basis.zZ;
		var perpCross;
		var perpCrossX;
		var perpCrossY;
		var perpCrossZ;
		perpCrossX = this._basisY1Y * this._basisY2Z - this._basisY1Z * this._basisY2Y;
		perpCrossY = this._basisY1Z * this._basisY2X - this._basisY1X * this._basisY2Z;
		perpCrossZ = this._basisY1X * this._basisY2Y - this._basisY1Y * this._basisY2X;
		cos1 = this._basisY1X * this._basisY2X + this._basisY1Y * this._basisY2Y + this._basisY1Z * this._basisY2Z;
		this.angle = cos1 <= -1 ? 3.14159265358979 : cos1 >= 1 ? 0 : Math.acos(cos1);
		if(perpCrossX * this._basis.xX + perpCrossY * this._basis.xY + perpCrossZ * this._basis.xZ < 0) {
			this.angle = -this.angle;
		}
		var anchorDiff;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translation = anchorDiffX * this._basis.xX + anchorDiffY * this._basis.xY + anchorDiffZ * this._basis.xZ;
		this.linearErrorY = anchorDiffX * this._basis.yX + anchorDiffY * this._basis.yY + anchorDiffZ * this._basis.yZ;
		this.linearErrorZ = anchorDiffX * this._basis.zX + anchorDiffY * this._basis.zY + anchorDiffZ * this._basis.zZ;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getTranslationalSpringDamper: function() {
		return this._translSd;
	}
	,getRotationalSpringDamper: function() {
		return this._rotSd;
	}
	,getTranslationalLimitMotor: function() {
		return this._translLm;
	}
	,getRotationalLimitMotor: function() {
		return this._rotLm;
	}
	,getAngle: function() {
		return this.angle;
	}
	,getTranslation: function() {
		return this.translation;
	}
});
var oimo_dynamics_constraint_joint_JointConfig = function() {
	this.rigidBody1 = null;
	this.rigidBody2 = null;
	this.localAnchor1 = new oimo_common_Vec3();
	this.localAnchor2 = new oimo_common_Vec3();
	this.allowCollision = false;
	this.solverType = oimo_common_Setting.defaultJointConstraintSolverType;
	this.positionCorrectionAlgorithm = oimo_common_Setting.defaultJointPositionCorrectionAlgorithm;
	this.breakForce = 0;
	this.breakTorque = 0;
};
oimo_dynamics_constraint_joint_JointConfig.__name__ = true;
oimo_dynamics_constraint_joint_JointConfig.prototype = {
	_init: function(rb1,rb2,worldAnchor) {
		this.rigidBody1 = rb1;
		this.rigidBody2 = rb2;
		var _this = this.rigidBody1;
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldAnchor;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		vX -= _this._transform._positionX;
		vY -= _this._transform._positionY;
		vZ -= _this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = _this._transform._rotation00 * vX + _this._transform._rotation10 * vY + _this._transform._rotation20 * vZ;
		__tmp__Y = _this._transform._rotation01 * vX + _this._transform._rotation11 * vY + _this._transform._rotation21 * vZ;
		__tmp__Z = _this._transform._rotation02 * vX + _this._transform._rotation12 * vY + _this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = this.localAnchor1;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		var _this1 = this.rigidBody2;
		var v3;
		var vX1;
		var vY1;
		var vZ1;
		var v4 = worldAnchor;
		vX1 = v4.x;
		vY1 = v4.y;
		vZ1 = v4.z;
		vX1 -= _this1._transform._positionX;
		vY1 -= _this1._transform._positionY;
		vZ1 -= _this1._transform._positionZ;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = _this1._transform._rotation00 * vX1 + _this1._transform._rotation10 * vY1 + _this1._transform._rotation20 * vZ1;
		__tmp__Y1 = _this1._transform._rotation01 * vX1 + _this1._transform._rotation11 * vY1 + _this1._transform._rotation21 * vZ1;
		__tmp__Z1 = _this1._transform._rotation02 * vX1 + _this1._transform._rotation12 * vY1 + _this1._transform._rotation22 * vZ1;
		vX1 = __tmp__X1;
		vY1 = __tmp__Y1;
		vZ1 = __tmp__Z1;
		var v5 = this.localAnchor2;
		v5.x = vX1;
		v5.y = vY1;
		v5.z = vZ1;
	}
};
var oimo_dynamics_constraint_joint_CylindricalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.translationalLimitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
	this.translationalSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.rotationalLimitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.rotationalSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_CylindricalJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_CylindricalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_CylindricalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldAxis;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = this.localAxis1;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		var v3;
		var vX1;
		var vY1;
		var vZ1;
		var v4 = worldAxis;
		vX1 = v4.x;
		vY1 = v4.y;
		vZ1 = v4.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = rigidBody2._transform._rotation00 * vX1 + rigidBody2._transform._rotation10 * vY1 + rigidBody2._transform._rotation20 * vZ1;
		__tmp__Y1 = rigidBody2._transform._rotation01 * vX1 + rigidBody2._transform._rotation11 * vY1 + rigidBody2._transform._rotation21 * vZ1;
		__tmp__Z1 = rigidBody2._transform._rotation02 * vX1 + rigidBody2._transform._rotation12 * vY1 + rigidBody2._transform._rotation22 * vZ1;
		vX1 = __tmp__X1;
		vY1 = __tmp__Y1;
		vZ1 = __tmp__Z1;
		var v5 = this.localAxis2;
		v5.x = vX1;
		v5.y = vY1;
		v5.z = vZ1;
		return this;
	}
});
var oimo_dynamics_constraint_joint_GenericJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.GENERIC);
	var tmp;
	var _this = config.localBasis1;
	if(!(_this.e00 * (_this.e11 * _this.e22 - _this.e12 * _this.e21) - _this.e01 * (_this.e10 * _this.e22 - _this.e12 * _this.e20) + _this.e02 * (_this.e10 * _this.e21 - _this.e11 * _this.e20) < 0)) {
		var _this1 = config.localBasis2;
		tmp = _this1.e00 * (_this1.e11 * _this1.e22 - _this1.e12 * _this1.e21) - _this1.e01 * (_this1.e10 * _this1.e22 - _this1.e12 * _this1.e20) + _this1.e02 * (_this1.e10 * _this1.e21 - _this1.e11 * _this1.e20) < 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		console.log("../../workspace_as3/OimoPhysics/src/oimo/dynamics/constraint/joint/GenericJoint.hx:46:","[warning] joint basis must be right handed");
	}
	var lb1;
	var lb100;
	var lb101;
	var lb102;
	var lb110;
	var lb111;
	var lb112;
	var lb120;
	var lb121;
	var lb122;
	var lb2;
	var lb200;
	var lb201;
	var lb202;
	var lb210;
	var lb211;
	var lb212;
	var lb220;
	var lb221;
	var lb222;
	var m = config.localBasis1;
	lb100 = m.e00;
	lb101 = m.e01;
	lb102 = m.e02;
	lb110 = m.e10;
	lb111 = m.e11;
	lb112 = m.e12;
	lb120 = m.e20;
	lb121 = m.e21;
	lb122 = m.e22;
	var m1 = config.localBasis2;
	lb200 = m1.e00;
	lb201 = m1.e01;
	lb202 = m1.e02;
	lb210 = m1.e10;
	lb211 = m1.e11;
	lb212 = m1.e12;
	lb220 = m1.e20;
	lb221 = m1.e21;
	lb222 = m1.e22;
	this._localBasisX1X = lb100;
	this._localBasisX1Y = lb110;
	this._localBasisX1Z = lb120;
	this._localBasisY1X = lb101;
	this._localBasisY1Y = lb111;
	this._localBasisY1Z = lb121;
	this._localBasisZ1X = lb102;
	this._localBasisZ1Y = lb112;
	this._localBasisZ1Z = lb122;
	this._localBasisX2X = lb200;
	this._localBasisX2Y = lb210;
	this._localBasisX2Z = lb220;
	this._localBasisY2X = lb201;
	this._localBasisY2Y = lb211;
	this._localBasisY2Z = lb221;
	this._localBasisZ2X = lb202;
	this._localBasisZ2Y = lb212;
	this._localBasisZ2Z = lb222;
	this._angleX = 0;
	this._angleY = 0;
	this._angleZ = 0;
	this.translationX = 0;
	this.translationY = 0;
	this.translationZ = 0;
	this.xSingular = false;
	this.ySingular = false;
	this.zSingular = false;
	var this1 = new Array(3);
	this._translLms = this1;
	var this2 = new Array(3);
	this._translSds = this2;
	var this3 = new Array(3);
	this._rotLms = this3;
	var this4 = new Array(3);
	this._rotSds = this4;
	this._translLms[0] = config.translationalLimitMotors[0].clone();
	this._translLms[1] = config.translationalLimitMotors[1].clone();
	this._translLms[2] = config.translationalLimitMotors[2].clone();
	this._translSds[0] = config.translationalSpringDampers[0].clone();
	this._translSds[1] = config.translationalSpringDampers[1].clone();
	this._translSds[2] = config.translationalSpringDampers[2].clone();
	this._rotLms[0] = config.rotationalLimitMotors[0].clone();
	this._rotLms[1] = config.rotationalLimitMotors[1].clone();
	this._rotLms[2] = config.rotationalLimitMotors[2].clone();
	this._rotSds[0] = config.rotationalSpringDampers[0].clone();
	this._rotSds[1] = config.rotationalSpringDampers[1].clone();
	this._rotSds[2] = config.rotationalSpringDampers[2].clone();
};
oimo_dynamics_constraint_joint_GenericJoint.__name__ = true;
oimo_dynamics_constraint_joint_GenericJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_GenericJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var row;
		var j;
		var translMotorMass = 1 / (this._b1._invMass + this._b2._invMass);
		var motorMassX = this.computeEffectiveInertiaMoment(this._axisXX,this._axisXY,this._axisXZ);
		var motorMassY = this.computeEffectiveInertiaMoment(this._axisYX,this._axisYY,this._axisYZ);
		var motorMassZ = this.computeEffectiveInertiaMoment(this._axisZX,this._axisZY,this._axisZZ);
		if(this._translSds[0].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translationX,this._translLms[0],translMotorMass,this._translSds[0],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisX1X;
			j.lin1Y = this._basisX1Y;
			j.lin1Z = this._basisX1Z;
			j.lin2X = this._basisX1X;
			j.lin2Y = this._basisX1Y;
			j.lin2Z = this._basisX1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisX1Z - this._relativeAnchor1Z * this._basisX1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisX1X - this._relativeAnchor1X * this._basisX1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisX1Y - this._relativeAnchor1Y * this._basisX1X;
			j.ang2X = this._relativeAnchor2Y * this._basisX1Z - this._relativeAnchor2Z * this._basisX1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisX1X - this._relativeAnchor2X * this._basisX1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisX1Y - this._relativeAnchor2Y * this._basisX1X;
		}
		if(this._translSds[1].frequency <= 0 || !isPositionPart) {
			var impulse1 = this._impulses[1];
			var row2 = info.rows[info.numRows++];
			var _this1 = row2.jacobian;
			_this1.lin1X = 0;
			_this1.lin1Y = 0;
			_this1.lin1Z = 0;
			_this1.lin2X = 0;
			_this1.lin2Y = 0;
			_this1.lin2Z = 0;
			_this1.ang1X = 0;
			_this1.ang1Y = 0;
			_this1.ang1Z = 0;
			_this1.ang2X = 0;
			_this1.ang2Y = 0;
			_this1.ang2Z = 0;
			row2.rhs = 0;
			row2.cfm = 0;
			row2.minImpulse = 0;
			row2.maxImpulse = 0;
			row2.motorSpeed = 0;
			row2.motorMaxImpulse = 0;
			row2.impulse = null;
			row2.impulse = impulse1;
			row = row2;
			this.setSolverInfoRowLinear(row,this.translationY,this._translLms[1],translMotorMass,this._translSds[1],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisY1X;
			j.lin1Y = this._basisY1Y;
			j.lin1Z = this._basisY1Z;
			j.lin2X = this._basisY1X;
			j.lin2Y = this._basisY1Y;
			j.lin2Z = this._basisY1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisY1Z - this._relativeAnchor1Z * this._basisY1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisY1X - this._relativeAnchor1X * this._basisY1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisY1Y - this._relativeAnchor1Y * this._basisY1X;
			j.ang2X = this._relativeAnchor2Y * this._basisY1Z - this._relativeAnchor2Z * this._basisY1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisY1X - this._relativeAnchor2X * this._basisY1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisY1Y - this._relativeAnchor2Y * this._basisY1X;
		}
		if(this._translSds[2].frequency <= 0 || !isPositionPart) {
			var impulse2 = this._impulses[2];
			var row3 = info.rows[info.numRows++];
			var _this2 = row3.jacobian;
			_this2.lin1X = 0;
			_this2.lin1Y = 0;
			_this2.lin1Z = 0;
			_this2.lin2X = 0;
			_this2.lin2Y = 0;
			_this2.lin2Z = 0;
			_this2.ang1X = 0;
			_this2.ang1Y = 0;
			_this2.ang1Z = 0;
			_this2.ang2X = 0;
			_this2.ang2Y = 0;
			_this2.ang2Z = 0;
			row3.rhs = 0;
			row3.cfm = 0;
			row3.minImpulse = 0;
			row3.maxImpulse = 0;
			row3.motorSpeed = 0;
			row3.motorMaxImpulse = 0;
			row3.impulse = null;
			row3.impulse = impulse2;
			row = row3;
			this.setSolverInfoRowLinear(row,this.translationZ,this._translLms[2],translMotorMass,this._translSds[2],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisZ1X;
			j.lin1Y = this._basisZ1Y;
			j.lin1Z = this._basisZ1Z;
			j.lin2X = this._basisZ1X;
			j.lin2Y = this._basisZ1Y;
			j.lin2Z = this._basisZ1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisZ1Z - this._relativeAnchor1Z * this._basisZ1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisZ1X - this._relativeAnchor1X * this._basisZ1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisZ1Y - this._relativeAnchor1Y * this._basisZ1X;
			j.ang2X = this._relativeAnchor2Y * this._basisZ1Z - this._relativeAnchor2Z * this._basisZ1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisZ1X - this._relativeAnchor2X * this._basisZ1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisZ1Y - this._relativeAnchor2Y * this._basisZ1X;
		}
		if(!this.xSingular && (this._rotSds[0].frequency <= 0 || !isPositionPart)) {
			var impulse3 = this._impulses[3];
			var row4 = info.rows[info.numRows++];
			var _this3 = row4.jacobian;
			_this3.lin1X = 0;
			_this3.lin1Y = 0;
			_this3.lin1Z = 0;
			_this3.lin2X = 0;
			_this3.lin2Y = 0;
			_this3.lin2Z = 0;
			_this3.ang1X = 0;
			_this3.ang1Y = 0;
			_this3.ang1Z = 0;
			_this3.ang2X = 0;
			_this3.ang2Y = 0;
			_this3.ang2Z = 0;
			row4.rhs = 0;
			row4.cfm = 0;
			row4.minImpulse = 0;
			row4.maxImpulse = 0;
			row4.motorSpeed = 0;
			row4.motorMaxImpulse = 0;
			row4.impulse = null;
			row4.impulse = impulse3;
			row = row4;
			this.setSolverInfoRowAngular(row,this._angleX,this._rotLms[0],motorMassX,this._rotSds[0],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisXX;
			j.ang1Y = this._axisXY;
			j.ang1Z = this._axisXZ;
			j.ang2X = this._axisXX;
			j.ang2Y = this._axisXY;
			j.ang2Z = this._axisXZ;
		}
		if(!this.ySingular && (this._rotSds[1].frequency <= 0 || !isPositionPart)) {
			var impulse4 = this._impulses[4];
			var row5 = info.rows[info.numRows++];
			var _this4 = row5.jacobian;
			_this4.lin1X = 0;
			_this4.lin1Y = 0;
			_this4.lin1Z = 0;
			_this4.lin2X = 0;
			_this4.lin2Y = 0;
			_this4.lin2Z = 0;
			_this4.ang1X = 0;
			_this4.ang1Y = 0;
			_this4.ang1Z = 0;
			_this4.ang2X = 0;
			_this4.ang2Y = 0;
			_this4.ang2Z = 0;
			row5.rhs = 0;
			row5.cfm = 0;
			row5.minImpulse = 0;
			row5.maxImpulse = 0;
			row5.motorSpeed = 0;
			row5.motorMaxImpulse = 0;
			row5.impulse = null;
			row5.impulse = impulse4;
			row = row5;
			this.setSolverInfoRowAngular(row,this._angleY,this._rotLms[1],motorMassY,this._rotSds[1],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisYX;
			j.ang1Y = this._axisYY;
			j.ang1Z = this._axisYZ;
			j.ang2X = this._axisYX;
			j.ang2Y = this._axisYY;
			j.ang2Z = this._axisYZ;
		}
		if(!this.zSingular && (this._rotSds[2].frequency <= 0 || !isPositionPart)) {
			var impulse5 = this._impulses[5];
			var row6 = info.rows[info.numRows++];
			var _this5 = row6.jacobian;
			_this5.lin1X = 0;
			_this5.lin1Y = 0;
			_this5.lin1Z = 0;
			_this5.lin2X = 0;
			_this5.lin2Y = 0;
			_this5.lin2Z = 0;
			_this5.ang1X = 0;
			_this5.ang1Y = 0;
			_this5.ang1Z = 0;
			_this5.ang2X = 0;
			_this5.ang2Y = 0;
			_this5.ang2Z = 0;
			row6.rhs = 0;
			row6.cfm = 0;
			row6.minImpulse = 0;
			row6.maxImpulse = 0;
			row6.motorSpeed = 0;
			row6.motorMaxImpulse = 0;
			row6.impulse = null;
			row6.impulse = impulse5;
			row = row6;
			this.setSolverInfoRowAngular(row,this._angleZ,this._rotLms[2],motorMassZ,this._rotSds[2],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisZX;
			j.ang1Y = this._axisZY;
			j.ang1Z = this._axisZZ;
			j.ang2X = this._axisZX;
			j.ang2Y = this._axisZY;
			j.ang2Z = this._axisZZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__10 = rot101 * rot200 + rot111 * rot210 + rot121 * rot220;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__20 = rot102 * rot200 + rot112 * rot210 + rot122 * rot220;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var angleAxisX;
		var angleAxisXX;
		var angleAxisXY;
		var angleAxisXZ;
		var angleAxisY;
		var angleAxisYX;
		var angleAxisYY;
		var angleAxisYZ;
		var angleAxisZ;
		var angleAxisZX;
		var angleAxisZY;
		var angleAxisZZ;
		angleAxisXX = this._basisX1X;
		angleAxisXY = this._basisX1Y;
		angleAxisXZ = this._basisX1Z;
		angleAxisZX = this._basisZ2X;
		angleAxisZY = this._basisZ2Y;
		angleAxisZZ = this._basisZ2Z;
		angleAxisYX = angleAxisZY * angleAxisXZ - angleAxisZZ * angleAxisXY;
		angleAxisYY = angleAxisZZ * angleAxisXX - angleAxisZX * angleAxisXZ;
		angleAxisYZ = angleAxisZX * angleAxisXY - angleAxisZY * angleAxisXX;
		this._axisXX = angleAxisYY * angleAxisZZ - angleAxisYZ * angleAxisZY;
		this._axisXY = angleAxisYZ * angleAxisZX - angleAxisYX * angleAxisZZ;
		this._axisXZ = angleAxisYX * angleAxisZY - angleAxisYY * angleAxisZX;
		this._axisYX = angleAxisYX;
		this._axisYY = angleAxisYY;
		this._axisYZ = angleAxisYZ;
		this._axisZX = angleAxisXY * angleAxisYZ - angleAxisXZ * angleAxisYY;
		this._axisZY = angleAxisXZ * angleAxisYX - angleAxisXX * angleAxisYZ;
		this._axisZZ = angleAxisXX * angleAxisYY - angleAxisXY * angleAxisYX;
		var l = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisXX *= l;
		this._axisXY *= l;
		this._axisXZ *= l;
		var l1 = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ;
		if(l1 > 0) {
			l1 = 1 / Math.sqrt(l1);
		}
		this._axisYX *= l1;
		this._axisYY *= l1;
		this._axisYZ *= l1;
		var l2 = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ;
		if(l2 > 0) {
			l2 = 1 / Math.sqrt(l2);
		}
		this._axisZX *= l2;
		this._axisZY *= l2;
		this._axisZZ *= l2;
		this.xSingular = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ == 0;
		this.ySingular = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ == 0;
		this.zSingular = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ == 0;
		var rot11;
		var rot1001;
		var rot1011;
		var rot1021;
		var rot1101;
		var rot1111;
		var rot1121;
		var rot1201;
		var rot1211;
		var rot1221;
		var rot21;
		var rot2001;
		var rot2011;
		var rot2021;
		var rot2101;
		var rot2111;
		var rot2121;
		var rot2201;
		var rot2211;
		var rot2221;
		rot1001 = this._basisX1X;
		rot1011 = this._basisY1X;
		rot1021 = this._basisZ1X;
		rot1101 = this._basisX1Y;
		rot1111 = this._basisY1Y;
		rot1121 = this._basisZ1Y;
		rot1201 = this._basisX1Z;
		rot1211 = this._basisY1Z;
		rot1221 = this._basisZ1Z;
		rot2001 = this._basisX2X;
		rot2011 = this._basisY2X;
		rot2021 = this._basisZ2X;
		rot2101 = this._basisX2Y;
		rot2111 = this._basisY2Y;
		rot2121 = this._basisZ2Y;
		rot2201 = this._basisX2Z;
		rot2211 = this._basisY2Z;
		rot2221 = this._basisZ2Z;
		var relRot1;
		var relRot001;
		var relRot011;
		var relRot021;
		var relRot101;
		var relRot111;
		var relRot121;
		var relRot201;
		var relRot211;
		var relRot221;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = rot1001 * rot2001 + rot1101 * rot2101 + rot1201 * rot2201;
		__tmp__011 = rot1001 * rot2011 + rot1101 * rot2111 + rot1201 * rot2211;
		__tmp__021 = rot1001 * rot2021 + rot1101 * rot2121 + rot1201 * rot2221;
		__tmp__101 = rot1011 * rot2001 + rot1111 * rot2101 + rot1211 * rot2201;
		__tmp__111 = rot1011 * rot2011 + rot1111 * rot2111 + rot1211 * rot2211;
		__tmp__121 = rot1011 * rot2021 + rot1111 * rot2121 + rot1211 * rot2221;
		__tmp__201 = rot1021 * rot2001 + rot1121 * rot2101 + rot1221 * rot2201;
		__tmp__211 = rot1021 * rot2011 + rot1121 * rot2111 + rot1221 * rot2211;
		__tmp__221 = rot1021 * rot2021 + rot1121 * rot2121 + rot1221 * rot2221;
		relRot001 = __tmp__001;
		relRot011 = __tmp__011;
		relRot021 = __tmp__021;
		relRot101 = __tmp__101;
		relRot111 = __tmp__111;
		relRot121 = __tmp__121;
		relRot201 = __tmp__201;
		relRot211 = __tmp__211;
		relRot221 = __tmp__221;
		var angles;
		var anglesX;
		var anglesY;
		var anglesZ;
		var sy = relRot021;
		if(sy <= -1) {
			var xSubZ = Math.atan2(relRot211,relRot111);
			anglesX = xSubZ * 0.5;
			anglesY = -1.570796326794895;
			anglesZ = -xSubZ * 0.5;
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(relRot211,relRot111);
			anglesX = xAddZ * 0.5;
			anglesY = 1.570796326794895;
			anglesZ = xAddZ * 0.5;
		} else {
			var y = Math.asin(sy);
			var x = Math.atan2(-relRot121,relRot221);
			var z = Math.atan2(-relRot011,relRot001);
			anglesX = x;
			anglesY = y;
			anglesZ = z;
		}
		this._angleX = anglesX;
		this._angleY = anglesY;
		this._angleZ = anglesZ;
		var anchorDiff;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translationX = anchorDiffX * this._basisX1X + anchorDiffY * this._basisX1Y + anchorDiffZ * this._basisX1Z;
		this.translationY = anchorDiffX * this._basisY1X + anchorDiffY * this._basisY1Y + anchorDiffZ * this._basisY1Z;
		this.translationZ = anchorDiffX * this._basisZ1X + anchorDiffY * this._basisZ1Y + anchorDiffZ * this._basisZ1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxisX: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxisY: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._axisYX;
		v1.y = this._axisYY;
		v1.z = this._axisYZ;
		return v;
	}
	,getAxisZ: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisZ2X;
		v1.y = this._basisZ2Y;
		v1.z = this._basisZ2Z;
		return v;
	}
	,getTranslationalSpringDampers: function() {
		return this._translSds.slice(0);
	}
	,getRotationalSpringDampers: function() {
		return this._translSds.slice(0);
	}
	,getTranslationalLimitMotors: function() {
		return this._translLms.slice(0);
	}
	,getRotationalLimitMotors: function() {
		return this._rotLms.slice(0);
	}
	,getAngles: function() {
		return new oimo_common_Vec3(this._angleX,this._angleY,this._angleZ);
	}
	,getTranslations: function() {
		return new oimo_common_Vec3(this.translationX,this.translationY,this.translationZ);
	}
});
var oimo_dynamics_constraint_joint_GenericJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localBasis1 = new oimo_common_Mat3();
	this.localBasis2 = new oimo_common_Mat3();
	var _g = [];
	var _g1 = 0;
	while(_g1 < 3) {
		var i = _g1++;
		_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	}
	this.translationalLimitMotors = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 3) {
		var i1 = _g2++;
		_g11.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	}
	this.rotationalLimitMotors = _g11;
	this.translationalSpringDampers = [new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper()];
	this.rotationalSpringDampers = [new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper()];
};
oimo_dynamics_constraint_joint_GenericJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_GenericJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_GenericJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldBasis1,worldBasis2) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var tf1 = rigidBody1._transform;
		var tf2 = rigidBody2._transform;
		var wb1;
		var wb100;
		var wb101;
		var wb102;
		var wb110;
		var wb111;
		var wb112;
		var wb120;
		var wb121;
		var wb122;
		var wb2;
		var wb200;
		var wb201;
		var wb202;
		var wb210;
		var wb211;
		var wb212;
		var wb220;
		var wb221;
		var wb222;
		var lb1;
		var lb100;
		var lb101;
		var lb102;
		var lb110;
		var lb111;
		var lb112;
		var lb120;
		var lb121;
		var lb122;
		var lb2;
		var lb200;
		var lb201;
		var lb202;
		var lb210;
		var lb211;
		var lb212;
		var lb220;
		var lb221;
		var lb222;
		var m = worldBasis1;
		wb100 = m.e00;
		wb101 = m.e01;
		wb102 = m.e02;
		wb110 = m.e10;
		wb111 = m.e11;
		wb112 = m.e12;
		wb120 = m.e20;
		wb121 = m.e21;
		wb122 = m.e22;
		var m1 = worldBasis2;
		wb200 = m1.e00;
		wb201 = m1.e01;
		wb202 = m1.e02;
		wb210 = m1.e10;
		wb211 = m1.e11;
		wb212 = m1.e12;
		wb220 = m1.e20;
		wb221 = m1.e21;
		wb222 = m1.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * wb100 + tf1._rotation10 * wb110 + tf1._rotation20 * wb120;
		__tmp__01 = tf1._rotation00 * wb101 + tf1._rotation10 * wb111 + tf1._rotation20 * wb121;
		__tmp__02 = tf1._rotation00 * wb102 + tf1._rotation10 * wb112 + tf1._rotation20 * wb122;
		__tmp__10 = tf1._rotation01 * wb100 + tf1._rotation11 * wb110 + tf1._rotation21 * wb120;
		__tmp__11 = tf1._rotation01 * wb101 + tf1._rotation11 * wb111 + tf1._rotation21 * wb121;
		__tmp__12 = tf1._rotation01 * wb102 + tf1._rotation11 * wb112 + tf1._rotation21 * wb122;
		__tmp__20 = tf1._rotation02 * wb100 + tf1._rotation12 * wb110 + tf1._rotation22 * wb120;
		__tmp__21 = tf1._rotation02 * wb101 + tf1._rotation12 * wb111 + tf1._rotation22 * wb121;
		__tmp__22 = tf1._rotation02 * wb102 + tf1._rotation12 * wb112 + tf1._rotation22 * wb122;
		lb100 = __tmp__00;
		lb101 = __tmp__01;
		lb102 = __tmp__02;
		lb110 = __tmp__10;
		lb111 = __tmp__11;
		lb112 = __tmp__12;
		lb120 = __tmp__20;
		lb121 = __tmp__21;
		lb122 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = tf2._rotation00 * wb200 + tf2._rotation10 * wb210 + tf2._rotation20 * wb220;
		__tmp__011 = tf2._rotation00 * wb201 + tf2._rotation10 * wb211 + tf2._rotation20 * wb221;
		__tmp__021 = tf2._rotation00 * wb202 + tf2._rotation10 * wb212 + tf2._rotation20 * wb222;
		__tmp__101 = tf2._rotation01 * wb200 + tf2._rotation11 * wb210 + tf2._rotation21 * wb220;
		__tmp__111 = tf2._rotation01 * wb201 + tf2._rotation11 * wb211 + tf2._rotation21 * wb221;
		__tmp__121 = tf2._rotation01 * wb202 + tf2._rotation11 * wb212 + tf2._rotation21 * wb222;
		__tmp__201 = tf2._rotation02 * wb200 + tf2._rotation12 * wb210 + tf2._rotation22 * wb220;
		__tmp__211 = tf2._rotation02 * wb201 + tf2._rotation12 * wb211 + tf2._rotation22 * wb221;
		__tmp__221 = tf2._rotation02 * wb202 + tf2._rotation12 * wb212 + tf2._rotation22 * wb222;
		lb200 = __tmp__001;
		lb201 = __tmp__011;
		lb202 = __tmp__021;
		lb210 = __tmp__101;
		lb211 = __tmp__111;
		lb212 = __tmp__121;
		lb220 = __tmp__201;
		lb221 = __tmp__211;
		lb222 = __tmp__221;
		var m2 = this.localBasis1;
		m2.e00 = lb100;
		m2.e01 = lb101;
		m2.e02 = lb102;
		m2.e10 = lb110;
		m2.e11 = lb111;
		m2.e12 = lb112;
		m2.e20 = lb120;
		m2.e21 = lb121;
		m2.e22 = lb122;
		var m3 = this.localBasis2;
		m3.e00 = lb200;
		m3.e01 = lb201;
		m3.e02 = lb202;
		m3.e10 = lb210;
		m3.e11 = lb211;
		m3.e12 = lb212;
		m3.e20 = lb220;
		m3.e21 = lb221;
		m3.e22 = lb222;
		return this;
	}
});
var oimo_dynamics_constraint_joint_JointImpulse = function() {
	this.impulse = 0;
	this.impulseM = 0;
	this.impulseP = 0;
};
oimo_dynamics_constraint_joint_JointImpulse.__name__ = true;
var oimo_dynamics_constraint_joint_JointLink = function(joint) {
	this._joint = joint;
};
oimo_dynamics_constraint_joint_JointLink.__name__ = true;
oimo_dynamics_constraint_joint_JointLink.prototype = {
	getContact: function() {
		return this._joint;
	}
	,getOther: function() {
		return this._other;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_dynamics_constraint_joint_JointMacro = function() { };
oimo_dynamics_constraint_joint_JointMacro.__name__ = true;
var oimo_dynamics_constraint_joint_JointType = function() { };
oimo_dynamics_constraint_joint_JointType.__name__ = true;
var oimo_dynamics_constraint_joint_PrismaticJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.PRISMATIC);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v1 = config.localAxis2;
	this._localBasisX2X = v1.x;
	this._localBasisX2Y = v1.y;
	this._localBasisX2Z = v1.z;
	this.buildLocalBasesFromX();
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this.translation = 0;
	this.linearErrorY = 0;
	this.linearErrorZ = 0;
	this.angularErrorX = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this._sd = config.springDamper.clone();
	this._lm = config.limitMotor.clone();
};
oimo_dynamics_constraint_joint_PrismaticJoint.__name__ = true;
oimo_dynamics_constraint_joint_PrismaticJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_PrismaticJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linRhsY = this.linearErrorY * erp;
		var linRhsZ = this.linearErrorZ * erp;
		var angRhsX = this.angularErrorX * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var row;
		var j;
		var motorMass = 1 / (this._b1._invMass + this._b2._invMass);
		if(this._sd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translation,this._lm,motorMass,this._sd,timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basis.xX;
			j.lin1Y = this._basis.xY;
			j.lin1Z = this._basis.xZ;
			j.lin2X = this._basis.xX;
			j.lin2Y = this._basis.xY;
			j.lin2Z = this._basis.xZ;
			j.ang1X = this._relativeAnchor1Y * this._basis.xZ - this._relativeAnchor1Z * this._basis.xY;
			j.ang1Y = this._relativeAnchor1Z * this._basis.xX - this._relativeAnchor1X * this._basis.xZ;
			j.ang1Z = this._relativeAnchor1X * this._basis.xY - this._relativeAnchor1Y * this._basis.xX;
			j.ang2X = this._relativeAnchor2Y * this._basis.xZ - this._relativeAnchor2Z * this._basis.xY;
			j.ang2Y = this._relativeAnchor2Z * this._basis.xX - this._relativeAnchor2X * this._basis.xZ;
			j.ang2Z = this._relativeAnchor2X * this._basis.xY - this._relativeAnchor2Y * this._basis.xX;
		}
		var impulse1 = this._impulses[1];
		var row2 = info.rows[info.numRows++];
		var _this1 = row2.jacobian;
		_this1.lin1X = 0;
		_this1.lin1Y = 0;
		_this1.lin1Z = 0;
		_this1.lin2X = 0;
		_this1.lin2Y = 0;
		_this1.lin2Z = 0;
		_this1.ang1X = 0;
		_this1.ang1Y = 0;
		_this1.ang1Z = 0;
		_this1.ang2X = 0;
		_this1.ang2Y = 0;
		_this1.ang2Z = 0;
		row2.rhs = 0;
		row2.cfm = 0;
		row2.minImpulse = 0;
		row2.maxImpulse = 0;
		row2.motorSpeed = 0;
		row2.motorMaxImpulse = 0;
		row2.impulse = null;
		row2.impulse = impulse1;
		row = row2;
		row.rhs = linRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.yX;
		j.lin1Y = this._basis.yY;
		j.lin1Z = this._basis.yZ;
		j.lin2X = this._basis.yX;
		j.lin2Y = this._basis.yY;
		j.lin2Z = this._basis.yZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.yZ - this._relativeAnchor1Z * this._basis.yY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.yX - this._relativeAnchor1X * this._basis.yZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.yY - this._relativeAnchor1Y * this._basis.yX;
		j.ang2X = this._relativeAnchor2Y * this._basis.yZ - this._relativeAnchor2Z * this._basis.yY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.yX - this._relativeAnchor2X * this._basis.yZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.yY - this._relativeAnchor2Y * this._basis.yX;
		var impulse2 = this._impulses[2];
		var row3 = info.rows[info.numRows++];
		var _this2 = row3.jacobian;
		_this2.lin1X = 0;
		_this2.lin1Y = 0;
		_this2.lin1Z = 0;
		_this2.lin2X = 0;
		_this2.lin2Y = 0;
		_this2.lin2Z = 0;
		_this2.ang1X = 0;
		_this2.ang1Y = 0;
		_this2.ang1Z = 0;
		_this2.ang2X = 0;
		_this2.ang2Y = 0;
		_this2.ang2Z = 0;
		row3.rhs = 0;
		row3.cfm = 0;
		row3.minImpulse = 0;
		row3.maxImpulse = 0;
		row3.motorSpeed = 0;
		row3.motorMaxImpulse = 0;
		row3.impulse = null;
		row3.impulse = impulse2;
		row = row3;
		row.rhs = linRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.zX;
		j.lin1Y = this._basis.zY;
		j.lin1Z = this._basis.zZ;
		j.lin2X = this._basis.zX;
		j.lin2Y = this._basis.zY;
		j.lin2Z = this._basis.zZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.zZ - this._relativeAnchor1Z * this._basis.zY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.zX - this._relativeAnchor1X * this._basis.zZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.zY - this._relativeAnchor1Y * this._basis.zX;
		j.ang2X = this._relativeAnchor2Y * this._basis.zZ - this._relativeAnchor2Z * this._basis.zY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.zX - this._relativeAnchor2X * this._basis.zZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.zY - this._relativeAnchor2Y * this._basis.zX;
		var impulse3 = this._impulses[3];
		var row4 = info.rows[info.numRows++];
		var _this3 = row4.jacobian;
		_this3.lin1X = 0;
		_this3.lin1Y = 0;
		_this3.lin1Z = 0;
		_this3.lin2X = 0;
		_this3.lin2Y = 0;
		_this3.lin2Z = 0;
		_this3.ang1X = 0;
		_this3.ang1Y = 0;
		_this3.ang1Z = 0;
		_this3.ang2X = 0;
		_this3.ang2Y = 0;
		_this3.ang2Z = 0;
		row4.rhs = 0;
		row4.cfm = 0;
		row4.minImpulse = 0;
		row4.maxImpulse = 0;
		row4.motorSpeed = 0;
		row4.motorMaxImpulse = 0;
		row4.impulse = null;
		row4.impulse = impulse3;
		row = row4;
		row.rhs = angRhsX;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 1;
		j.ang1Y = 0;
		j.ang1Z = 0;
		j.ang2X = 1;
		j.ang2Y = 0;
		j.ang2Z = 0;
		var impulse4 = this._impulses[4];
		var row5 = info.rows[info.numRows++];
		var _this4 = row5.jacobian;
		_this4.lin1X = 0;
		_this4.lin1Y = 0;
		_this4.lin1Z = 0;
		_this4.lin2X = 0;
		_this4.lin2Y = 0;
		_this4.lin2Z = 0;
		_this4.ang1X = 0;
		_this4.ang1Y = 0;
		_this4.ang1Z = 0;
		_this4.ang2X = 0;
		_this4.ang2Y = 0;
		_this4.ang2Z = 0;
		row5.rhs = 0;
		row5.cfm = 0;
		row5.minImpulse = 0;
		row5.maxImpulse = 0;
		row5.motorSpeed = 0;
		row5.motorMaxImpulse = 0;
		row5.impulse = null;
		row5.impulse = impulse4;
		row = row5;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 0;
		j.ang1Y = 1;
		j.ang1Z = 0;
		j.ang2X = 0;
		j.ang2Y = 1;
		j.ang2Z = 0;
		var impulse5 = this._impulses[5];
		var row6 = info.rows[info.numRows++];
		var _this5 = row6.jacobian;
		_this5.lin1X = 0;
		_this5.lin1Y = 0;
		_this5.lin1Z = 0;
		_this5.lin2X = 0;
		_this5.lin2Y = 0;
		_this5.lin2Z = 0;
		_this5.ang1X = 0;
		_this5.ang1Y = 0;
		_this5.ang1Z = 0;
		_this5.ang2X = 0;
		_this5.ang2Y = 0;
		_this5.ang2Z = 0;
		row6.rhs = 0;
		row6.cfm = 0;
		row6.minImpulse = 0;
		row6.maxImpulse = 0;
		row6.motorSpeed = 0;
		row6.motorMaxImpulse = 0;
		row6.impulse = null;
		row6.impulse = impulse5;
		row = row6;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 0;
		j.ang1Y = 0;
		j.ang1Z = 1;
		j.ang2X = 0;
		j.ang2Y = 0;
		j.ang2Z = 1;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQ;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newX;
		var newXX;
		var newXY;
		var newXZ;
		var newY;
		var newYX;
		var newYY;
		var newYZ;
		var newZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevX;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevY;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var qx;
		var qy;
		var qz;
		var qw;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d2 = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d2 < 0) {
			d2 = -d2;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d2 > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d2);
			q2X += q1X * -d2;
			q2Y += q1Y * -d2;
			q2Z += q1Z * -d2;
			q2W += q1W * -d2;
			var l1 = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l1 > 1e-32) {
				l1 = 1 / Math.sqrt(l1);
			}
			q2X *= l1;
			q2Y *= l1;
			q2Z *= l1;
			q2W *= l1;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w1 = slerpQW;
		var x21 = 2 * x;
		var y21 = 2 * y;
		var z21 = 2 * z;
		var xx = x * x21;
		var yy = y * y21;
		var zz = z * z21;
		var xy = x * y21;
		var yz = y * z21;
		var xz = x * z21;
		var wx = w1 * x21;
		var wy = w1 * y21;
		var wz = w1 * z21;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d3 = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d3 < -0.999999999) {
			var vX1;
			var vY1;
			var vZ1;
			var x11 = prevXX;
			var y11 = prevXY;
			var z11 = prevXZ;
			var x22 = x11 * x11;
			var y22 = y11 * y11;
			var z22 = z11 * z11;
			var d4;
			if(x22 < y22) {
				if(x22 < z22) {
					d4 = 1 / Math.sqrt(y22 + z22);
					vX1 = 0;
					vY1 = z11 * d4;
					vZ1 = -y11 * d4;
				} else {
					d4 = 1 / Math.sqrt(x22 + y22);
					vX1 = y11 * d4;
					vY1 = -x11 * d4;
					vZ1 = 0;
				}
			} else if(y22 < z22) {
				d4 = 1 / Math.sqrt(z22 + x22);
				vX1 = -z11 * d4;
				vY1 = 0;
				vZ1 = x11 * d4;
			} else {
				d4 = 1 / Math.sqrt(x22 + y22);
				vX1 = y11 * d4;
				vY1 = -x11 * d4;
				vZ1 = 0;
			}
			slerpQX = vX1;
			slerpQY = vY1;
			slerpQZ = vZ1;
			slerpQW = 0;
		} else {
			var cX1;
			var cY1;
			var cZ1;
			cX1 = prevXY * newXZ - prevXZ * newXY;
			cY1 = prevXZ * newXX - prevXX * newXZ;
			cZ1 = prevXX * newXY - prevXY * newXX;
			var w2 = Math.sqrt((1 + d3) * 0.5);
			d3 = 0.5 / w2;
			cX1 *= d3;
			cY1 *= d3;
			cZ1 *= d3;
			slerpQX = cX1;
			slerpQY = cY1;
			slerpQZ = cZ1;
			slerpQW = w2;
		}
		var x3 = slerpQX;
		var y3 = slerpQY;
		var z3 = slerpQZ;
		var w3 = slerpQW;
		var x23 = 2 * x3;
		var y23 = 2 * y3;
		var z23 = 2 * z3;
		var xx1 = x3 * x23;
		var yy1 = y3 * y23;
		var zz1 = z3 * z23;
		var xy1 = x3 * y23;
		var yz1 = y3 * z23;
		var xz1 = x3 * z23;
		var wx1 = w3 * x23;
		var wy1 = w3 * y23;
		var wz1 = w3 * z23;
		slerpM00 = 1 - yy1 - zz1;
		slerpM01 = xy1 - wz1;
		slerpM02 = xz1 + wy1;
		slerpM10 = xy1 + wz1;
		slerpM11 = 1 - xx1 - zz1;
		slerpM12 = yz1 - wx1;
		slerpM20 = xz1 - wy1;
		slerpM21 = yz1 + wx1;
		slerpM22 = 1 - xx1 - yy1;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y1 = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z1 = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X1;
		newYY = __tmp__Y1;
		newYZ = __tmp__Z1;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l2 = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l2 > 0) {
				l2 = 1 / Math.sqrt(l2);
			}
			newZX *= l2;
			newZY *= l2;
			newZZ *= l2;
		} else {
			var x12 = newXX;
			var y12 = newXY;
			var z12 = newXZ;
			var x24 = x12 * x12;
			var y24 = y12 * y12;
			var z24 = z12 * z12;
			var d5;
			if(x24 < y24) {
				if(x24 < z24) {
					d5 = 1 / Math.sqrt(y24 + z24);
					newZX = 0;
					newZY = z12 * d5;
					newZZ = -y12 * d5;
				} else {
					d5 = 1 / Math.sqrt(x24 + y24);
					newZX = y12 * d5;
					newZY = -x12 * d5;
					newZZ = 0;
				}
			} else if(y24 < z24) {
				d5 = 1 / Math.sqrt(z24 + x24);
				newZX = -z12 * d5;
				newZY = 0;
				newZZ = x12 * d5;
			} else {
				d5 = 1 / Math.sqrt(x24 + y24);
				newZX = y12 * d5;
				newZY = -x12 * d5;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot200 * rot100 + rot201 * rot101 + rot202 * rot102;
		__tmp__01 = rot200 * rot110 + rot201 * rot111 + rot202 * rot112;
		__tmp__02 = rot200 * rot120 + rot201 * rot121 + rot202 * rot122;
		__tmp__10 = rot210 * rot100 + rot211 * rot101 + rot212 * rot102;
		__tmp__11 = rot210 * rot110 + rot211 * rot111 + rot212 * rot112;
		__tmp__12 = rot210 * rot120 + rot211 * rot121 + rot212 * rot122;
		__tmp__20 = rot220 * rot100 + rot221 * rot101 + rot222 * rot102;
		__tmp__21 = rot220 * rot110 + rot221 * rot111 + rot222 * rot112;
		__tmp__22 = rot220 * rot120 + rot221 * rot121 + rot222 * rot122;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var relQ;
		var relQX;
		var relQY;
		var relQZ;
		var relQW;
		var e00 = relRot00;
		var e11 = relRot11;
		var e22 = relRot22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			relQW = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot21 - relRot12) * s;
			relQY = (relRot02 - relRot20) * s;
			relQZ = (relRot10 - relRot01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				relQX = 0.5 * s;
				s = 0.5 / s;
				relQY = (relRot01 + relRot10) * s;
				relQZ = (relRot02 + relRot20) * s;
				relQW = (relRot21 - relRot12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				relQZ = 0.5 * s;
				s = 0.5 / s;
				relQX = (relRot02 + relRot20) * s;
				relQY = (relRot12 + relRot21) * s;
				relQW = (relRot10 - relRot01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			relQY = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot01 + relRot10) * s;
			relQZ = (relRot12 + relRot21) * s;
			relQW = (relRot02 - relRot20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			relQZ = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot02 + relRot20) * s;
			relQY = (relRot12 + relRot21) * s;
			relQW = (relRot10 - relRot01) * s;
		}
		var cosHalfTheta = relQW;
		var theta1 = (cosHalfTheta <= -1 ? 3.14159265358979 : cosHalfTheta >= 1 ? 0 : Math.acos(cosHalfTheta)) * 2;
		this.angularErrorX = relQX;
		this.angularErrorY = relQY;
		this.angularErrorZ = relQZ;
		var l3 = this.angularErrorX * this.angularErrorX + this.angularErrorY * this.angularErrorY + this.angularErrorZ * this.angularErrorZ;
		if(l3 > 0) {
			l3 = 1 / Math.sqrt(l3);
		}
		this.angularErrorX *= l3;
		this.angularErrorY *= l3;
		this.angularErrorZ *= l3;
		this.angularErrorX *= theta1;
		this.angularErrorY *= theta1;
		this.angularErrorZ *= theta1;
		var anchorDiff;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translation = anchorDiffX * this._basis.xX + anchorDiffY * this._basis.xY + anchorDiffZ * this._basis.xZ;
		this.linearErrorY = anchorDiffX * this._basis.yX + anchorDiffY * this._basis.yY + anchorDiffZ * this._basis.yZ;
		this.linearErrorZ = anchorDiffX * this._basis.zX + anchorDiffY * this._basis.zY + anchorDiffZ * this._basis.zZ;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,getLimitMotor: function() {
		return this._lm;
	}
	,getTranslation: function() {
		return this.translation;
	}
});
var oimo_dynamics_constraint_joint_PrismaticJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.limitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_PrismaticJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_PrismaticJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_PrismaticJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldAxis;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = this.localAxis1;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		var v3;
		var vX1;
		var vY1;
		var vZ1;
		var v4 = worldAxis;
		vX1 = v4.x;
		vY1 = v4.y;
		vZ1 = v4.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = rigidBody2._transform._rotation00 * vX1 + rigidBody2._transform._rotation10 * vY1 + rigidBody2._transform._rotation20 * vZ1;
		__tmp__Y1 = rigidBody2._transform._rotation01 * vX1 + rigidBody2._transform._rotation11 * vY1 + rigidBody2._transform._rotation21 * vZ1;
		__tmp__Z1 = rigidBody2._transform._rotation02 * vX1 + rigidBody2._transform._rotation12 * vY1 + rigidBody2._transform._rotation22 * vZ1;
		vX1 = __tmp__X1;
		vY1 = __tmp__Y1;
		vZ1 = __tmp__Z1;
		var v5 = this.localAxis2;
		v5.x = vX1;
		v5.y = vY1;
		v5.z = vZ1;
		return this;
	}
});
var oimo_dynamics_constraint_joint_RagdollJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.RAGDOLL);
	var v = config.localTwistAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v1 = config.localSwingAxis1;
	this._localBasisY1X = v1.x;
	this._localBasisY1Y = v1.y;
	this._localBasisY1Z = v1.z;
	var v2 = config.localTwistAxis2;
	this._localBasisX2X = v2.x;
	this._localBasisX2Y = v2.y;
	this._localBasisX2Z = v2.z;
	this.buildLocalBasesFromXY1X2();
	this._twistSd = config.twistSpringDamper.clone();
	this._twistLm = config.twistLimitMotor.clone();
	this._swingSd = config.swingSpringDamper.clone();
	this._maxSwingAngle1 = config.maxSwingAngle1;
	this._maxSwingAngle2 = config.maxSwingAngle2;
	if(this._maxSwingAngle1 < oimo_common_Setting.minRagdollMaxSwingAngle) {
		this._maxSwingAngle1 = oimo_common_Setting.minRagdollMaxSwingAngle;
	}
	if(this._maxSwingAngle2 < oimo_common_Setting.minRagdollMaxSwingAngle) {
		this._maxSwingAngle2 = oimo_common_Setting.minRagdollMaxSwingAngle;
	}
	this.dummySwingLm = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.dummySwingLm.lowerLimit = -1;
	this.dummySwingLm.upperLimit = 0;
	this._swingAngle = 0;
	this._twistAngle = 0;
	this.swingError = 0;
	this.swingAxisX = 0;
	this.swingAxisY = 0;
	this.swingAxisZ = 0;
	this.twistAxisX = 0;
	this.twistAxisY = 0;
	this.twistAxisZ = 0;
};
oimo_dynamics_constraint_joint_RagdollJoint.__name__ = true;
oimo_dynamics_constraint_joint_RagdollJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_RagdollJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var swingMass = this.computeEffectiveInertiaMoment(this.swingAxisX,this.swingAxisY,this.swingAxisZ);
		var twistMass = this.computeEffectiveInertiaMoment(this._basisX2X,this._basisX2Y,this._basisX2Z);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse1 = this._impulses[1];
		var row2 = info.rows[info.numRows++];
		var _this1 = row2.jacobian;
		_this1.lin1X = 0;
		_this1.lin1Y = 0;
		_this1.lin1Z = 0;
		_this1.lin2X = 0;
		_this1.lin2Y = 0;
		_this1.lin2Z = 0;
		_this1.ang1X = 0;
		_this1.ang1Y = 0;
		_this1.ang1Z = 0;
		_this1.ang2X = 0;
		_this1.ang2Y = 0;
		_this1.ang2Z = 0;
		row2.rhs = 0;
		row2.cfm = 0;
		row2.minImpulse = 0;
		row2.maxImpulse = 0;
		row2.motorSpeed = 0;
		row2.motorMaxImpulse = 0;
		row2.impulse = null;
		row2.impulse = impulse1;
		row1 = row2;
		row1.rhs = linRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse2 = this._impulses[2];
		var row3 = info.rows[info.numRows++];
		var _this2 = row3.jacobian;
		_this2.lin1X = 0;
		_this2.lin1Y = 0;
		_this2.lin1Z = 0;
		_this2.lin2X = 0;
		_this2.lin2Y = 0;
		_this2.lin2Z = 0;
		_this2.ang1X = 0;
		_this2.ang1Y = 0;
		_this2.ang1Z = 0;
		_this2.ang2X = 0;
		_this2.ang2Y = 0;
		_this2.ang2Z = 0;
		row3.rhs = 0;
		row3.cfm = 0;
		row3.minImpulse = 0;
		row3.maxImpulse = 0;
		row3.motorSpeed = 0;
		row3.motorMaxImpulse = 0;
		row3.impulse = null;
		row3.impulse = impulse2;
		row1 = row3;
		row1.rhs = linRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(this.swingError > 0 && (this._swingSd.frequency <= 0 || !isPositionPart)) {
			var impulse3 = this._impulses[3];
			var row4 = info.rows[info.numRows++];
			var _this3 = row4.jacobian;
			_this3.lin1X = 0;
			_this3.lin1Y = 0;
			_this3.lin1Z = 0;
			_this3.lin2X = 0;
			_this3.lin2Y = 0;
			_this3.lin2Z = 0;
			_this3.ang1X = 0;
			_this3.ang1Y = 0;
			_this3.ang1Z = 0;
			_this3.ang2X = 0;
			_this3.ang2Y = 0;
			_this3.ang2Z = 0;
			row4.rhs = 0;
			row4.cfm = 0;
			row4.minImpulse = 0;
			row4.maxImpulse = 0;
			row4.motorSpeed = 0;
			row4.motorMaxImpulse = 0;
			row4.impulse = null;
			row4.impulse = impulse3;
			row1 = row4;
			this.setSolverInfoRowAngular(row1,this.swingError,this.dummySwingLm,swingMass,this._swingSd,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this.swingAxisX;
			j.ang1Y = this.swingAxisY;
			j.ang1Z = this.swingAxisZ;
			j.ang2X = this.swingAxisX;
			j.ang2Y = this.swingAxisY;
			j.ang2Z = this.swingAxisZ;
		}
		if(this._twistSd.frequency <= 0 || !isPositionPart) {
			var impulse4 = this._impulses[4];
			var row5 = info.rows[info.numRows++];
			var _this4 = row5.jacobian;
			_this4.lin1X = 0;
			_this4.lin1Y = 0;
			_this4.lin1Z = 0;
			_this4.lin2X = 0;
			_this4.lin2Y = 0;
			_this4.lin2Z = 0;
			_this4.ang1X = 0;
			_this4.ang1Y = 0;
			_this4.ang1Z = 0;
			_this4.ang2X = 0;
			_this4.ang2Y = 0;
			_this4.ang2Z = 0;
			row5.rhs = 0;
			row5.cfm = 0;
			row5.minImpulse = 0;
			row5.maxImpulse = 0;
			row5.motorSpeed = 0;
			row5.motorMaxImpulse = 0;
			row5.impulse = null;
			row5.impulse = impulse4;
			row1 = row5;
			this.setSolverInfoRowAngular(row1,this._twistAngle,this._twistLm,twistMass,this._twistSd,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this.twistAxisX;
			j.ang1Y = this.twistAxisY;
			j.ang1Z = this.twistAxisZ;
			j.ang2X = this.twistAxisX;
			j.ang2Y = this.twistAxisY;
			j.ang2Z = this.twistAxisZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var axis1;
		var axis1X;
		var axis1Y;
		var axis1Z;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis1X = this._basisX1X;
		axis1Y = this._basisX1Y;
		axis1Z = this._basisX1Z;
		axis2X = this._basisX2X;
		axis2Y = this._basisX2Y;
		axis2Z = this._basisX2Z;
		var basis1Mat;
		var basis1Mat00;
		var basis1Mat01;
		var basis1Mat02;
		var basis1Mat10;
		var basis1Mat11;
		var basis1Mat12;
		var basis1Mat20;
		var basis1Mat21;
		var basis1Mat22;
		var basis2Mat;
		var basis2Mat00;
		var basis2Mat01;
		var basis2Mat02;
		var basis2Mat10;
		var basis2Mat11;
		var basis2Mat12;
		var basis2Mat20;
		var basis2Mat21;
		var basis2Mat22;
		basis1Mat00 = this._basisX1X;
		basis1Mat01 = this._basisY1X;
		basis1Mat02 = this._basisZ1X;
		basis1Mat10 = this._basisX1Y;
		basis1Mat11 = this._basisY1Y;
		basis1Mat12 = this._basisZ1Y;
		basis1Mat20 = this._basisX1Z;
		basis1Mat21 = this._basisY1Z;
		basis1Mat22 = this._basisZ1Z;
		basis2Mat00 = this._basisX2X;
		basis2Mat01 = this._basisY2X;
		basis2Mat02 = this._basisZ2X;
		basis2Mat10 = this._basisX2Y;
		basis2Mat11 = this._basisY2Y;
		basis2Mat12 = this._basisZ2Y;
		basis2Mat20 = this._basisX2Z;
		basis2Mat21 = this._basisY2Z;
		basis2Mat22 = this._basisZ2Z;
		var swingQ;
		var swingQX;
		var swingQY;
		var swingQZ;
		var swingQW;
		var swingM;
		var swingM00;
		var swingM01;
		var swingM02;
		var swingM10;
		var swingM11;
		var swingM12;
		var swingM20;
		var swingM21;
		var swingM22;
		var swingV;
		var swingVX;
		var swingVY;
		var swingVZ;
		var d = axis1X * axis2X + axis1Y * axis2Y + axis1Z * axis2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = axis1X;
			var y1 = axis1Y;
			var z1 = axis1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			swingQX = vX;
			swingQY = vY;
			swingQZ = vZ;
			swingQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = axis1Y * axis2Z - axis1Z * axis2Y;
			cY = axis1Z * axis2X - axis1X * axis2Z;
			cZ = axis1X * axis2Y - axis1Y * axis2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			swingQX = cX;
			swingQY = cY;
			swingQZ = cZ;
			swingQW = w;
		}
		var x = swingQX;
		var y = swingQY;
		var z = swingQZ;
		var w1 = swingQW;
		var x21 = 2 * x;
		var y21 = 2 * y;
		var z21 = 2 * z;
		var xx = x * x21;
		var yy = y * y21;
		var zz = z * z21;
		var xy = x * y21;
		var yz = y * z21;
		var xz = x * z21;
		var wx = w1 * x21;
		var wy = w1 * y21;
		var wz = w1 * z21;
		swingM00 = 1 - yy - zz;
		swingM01 = xy - wz;
		swingM02 = xz + wy;
		swingM10 = xy + wz;
		swingM11 = 1 - xx - zz;
		swingM12 = yz - wx;
		swingM20 = xz - wy;
		swingM21 = yz + wx;
		swingM22 = 1 - xx - yy;
		this._swingAngle = (swingQW <= -1 ? 3.14159265358979 : swingQW >= 1 ? 0 : Math.acos(swingQW)) * 2;
		swingVX = swingQX;
		swingVY = swingQY;
		swingVZ = swingQZ;
		var basisY2In1;
		var basisY2In1X;
		var basisY2In1Y;
		var basisY2In1Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = swingM00 * this._basisY2X + swingM10 * this._basisY2Y + swingM20 * this._basisY2Z;
		__tmp__Y = swingM01 * this._basisY2X + swingM11 * this._basisY2Y + swingM21 * this._basisY2Z;
		__tmp__Z = swingM02 * this._basisY2X + swingM12 * this._basisY2Y + swingM22 * this._basisY2Z;
		basisY2In1X = __tmp__X;
		basisY2In1Y = __tmp__Y;
		basisY2In1Z = __tmp__Z;
		var yCoord = this._basisY1X * basisY2In1X + this._basisY1Y * basisY2In1Y + this._basisY1Z * basisY2In1Z;
		var zCoord = this._basisZ1X * basisY2In1X + this._basisZ1Y * basisY2In1Y + this._basisZ1Z * basisY2In1Z;
		this._twistAngle = Math.atan2(zCoord,yCoord);
		this.twistAxisX = this._basisX1X + this._basisX2X;
		this.twistAxisY = this._basisX1Y + this._basisX2Y;
		this.twistAxisZ = this._basisX1Z + this._basisX2Z;
		var l = this.twistAxisX * this.twistAxisX + this.twistAxisY * this.twistAxisY + this.twistAxisZ * this.twistAxisZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this.twistAxisX *= l;
		this.twistAxisY *= l;
		this.twistAxisZ *= l;
		var invLen = Math.sqrt(swingVX * swingVX + swingVY * swingVY + swingVZ * swingVZ);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		swingVX *= invLen * this._swingAngle;
		swingVY *= invLen * this._swingAngle;
		swingVZ *= invLen * this._swingAngle;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = basis1Mat00 * swingVX + basis1Mat10 * swingVY + basis1Mat20 * swingVZ;
		__tmp__Y1 = basis1Mat01 * swingVX + basis1Mat11 * swingVY + basis1Mat21 * swingVZ;
		__tmp__Z1 = basis1Mat02 * swingVX + basis1Mat12 * swingVY + basis1Mat22 * swingVZ;
		swingVX = __tmp__X1;
		swingVY = __tmp__Y1;
		swingVZ = __tmp__Z1;
		var x3 = swingVY;
		var y3 = swingVZ;
		var a = this._maxSwingAngle1;
		var b = this._maxSwingAngle2;
		var invA2 = 1 / (a * a);
		var invB2 = 1 / (b * b);
		var w2 = x3 * x3 * invA2 + y3 * y3 * invB2;
		if(w2 == 0) {
			this.swingAxisX = 0;
			this.swingAxisY = 0;
			this.swingAxisZ = 0;
			this.swingError = 0;
		} else {
			var t = Math.sqrt(1 / w2);
			var x0 = x3 * t;
			var y0 = y3 * t;
			var nx = x0 * invA2;
			var ny = y0 * invB2;
			invLen = 1 / Math.sqrt(nx * nx + ny * ny);
			nx *= invLen;
			ny *= invLen;
			var depth = (x3 - x0) * nx + (y3 - y0) * ny;
			if(depth > 0) {
				this.swingError = depth;
				this.swingAxisX = 0;
				this.swingAxisY = nx;
				this.swingAxisZ = ny;
				var __tmp__X2;
				var __tmp__Y2;
				var __tmp__Z2;
				__tmp__X2 = basis1Mat00 * this.swingAxisX + basis1Mat01 * this.swingAxisY + basis1Mat02 * this.swingAxisZ;
				__tmp__Y2 = basis1Mat10 * this.swingAxisX + basis1Mat11 * this.swingAxisY + basis1Mat12 * this.swingAxisZ;
				__tmp__Z2 = basis1Mat20 * this.swingAxisX + basis1Mat21 * this.swingAxisY + basis1Mat22 * this.swingAxisZ;
				this.swingAxisX = __tmp__X2;
				this.swingAxisY = __tmp__Y2;
				this.swingAxisZ = __tmp__Z2;
				var __tmp__X3;
				var __tmp__Y3;
				var __tmp__Z3;
				__tmp__X3 = swingM00 * this.swingAxisX + swingM01 * this.swingAxisY + swingM02 * this.swingAxisZ;
				__tmp__Y3 = swingM10 * this.swingAxisX + swingM11 * this.swingAxisY + swingM12 * this.swingAxisZ;
				__tmp__Z3 = swingM20 * this.swingAxisX + swingM21 * this.swingAxisY + swingM22 * this.swingAxisZ;
				this.swingAxisX = __tmp__X3;
				this.swingAxisY = __tmp__Y3;
				this.swingAxisZ = __tmp__Z3;
			} else {
				this.swingError = 0;
			}
		}
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getTwistSpringDamper: function() {
		return this._twistSd;
	}
	,getTwistLimitMotor: function() {
		return this._twistLm;
	}
	,getSwingSpringDamper: function() {
		return this._swingSd;
	}
	,getSwingAxis: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this.swingAxisX;
		v1.y = this.swingAxisY;
		v1.z = this.swingAxisZ;
		return v;
	}
	,getSwingAxisTo: function(axis) {
		var v = axis;
		v.x = this.swingAxisX;
		v.y = this.swingAxisY;
		v.z = this.swingAxisZ;
	}
	,getSwingAngle: function() {
		return this._swingAngle;
	}
	,getTwistAngle: function() {
		return this._twistAngle;
	}
});
var oimo_dynamics_constraint_joint_RagdollJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localTwistAxis1 = new oimo_common_Vec3(1,0,0);
	this.localTwistAxis2 = new oimo_common_Vec3(1,0,0);
	this.localSwingAxis1 = new oimo_common_Vec3(0,1,0);
	this.twistSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.swingSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.twistLimitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.maxSwingAngle1 = 3.14159265358979;
	this.maxSwingAngle2 = 3.14159265358979;
};
oimo_dynamics_constraint_joint_RagdollJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_RagdollJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_RagdollJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldTwistAxis,worldSwingAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldTwistAxis;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = this.localTwistAxis1;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		var v3;
		var vX1;
		var vY1;
		var vZ1;
		var v4 = worldTwistAxis;
		vX1 = v4.x;
		vY1 = v4.y;
		vZ1 = v4.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = rigidBody2._transform._rotation00 * vX1 + rigidBody2._transform._rotation10 * vY1 + rigidBody2._transform._rotation20 * vZ1;
		__tmp__Y1 = rigidBody2._transform._rotation01 * vX1 + rigidBody2._transform._rotation11 * vY1 + rigidBody2._transform._rotation21 * vZ1;
		__tmp__Z1 = rigidBody2._transform._rotation02 * vX1 + rigidBody2._transform._rotation12 * vY1 + rigidBody2._transform._rotation22 * vZ1;
		vX1 = __tmp__X1;
		vY1 = __tmp__Y1;
		vZ1 = __tmp__Z1;
		var v5 = this.localTwistAxis2;
		v5.x = vX1;
		v5.y = vY1;
		v5.z = vZ1;
		var v6;
		var vX2;
		var vY2;
		var vZ2;
		var v7 = worldSwingAxis;
		vX2 = v7.x;
		vY2 = v7.y;
		vZ2 = v7.z;
		var __tmp__X2;
		var __tmp__Y2;
		var __tmp__Z2;
		__tmp__X2 = rigidBody1._transform._rotation00 * vX2 + rigidBody1._transform._rotation10 * vY2 + rigidBody1._transform._rotation20 * vZ2;
		__tmp__Y2 = rigidBody1._transform._rotation01 * vX2 + rigidBody1._transform._rotation11 * vY2 + rigidBody1._transform._rotation21 * vZ2;
		__tmp__Z2 = rigidBody1._transform._rotation02 * vX2 + rigidBody1._transform._rotation12 * vY2 + rigidBody1._transform._rotation22 * vZ2;
		vX2 = __tmp__X2;
		vY2 = __tmp__Y2;
		vZ2 = __tmp__Z2;
		var v8 = this.localSwingAxis1;
		v8.x = vX2;
		v8.y = vY2;
		v8.z = vZ2;
		return this;
	}
});
var oimo_dynamics_constraint_joint_RevoluteJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,1);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v1 = config.localAxis2;
	this._localBasisX2X = v1.x;
	this._localBasisX2Y = v1.y;
	this._localBasisX2Z = v1.z;
	this.buildLocalBasesFromX();
	this.angle = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this._sd = config.springDamper.clone();
	this._lm = config.limitMotor.clone();
};
oimo_dynamics_constraint_joint_RevoluteJoint.__name__ = true;
oimo_dynamics_constraint_joint_RevoluteJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_RevoluteJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var motorMass = this.computeEffectiveInertiaMoment(this._basis.xX,this._basis.xY,this._basis.xZ);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse1 = this._impulses[1];
		var row2 = info.rows[info.numRows++];
		var _this1 = row2.jacobian;
		_this1.lin1X = 0;
		_this1.lin1Y = 0;
		_this1.lin1Z = 0;
		_this1.lin2X = 0;
		_this1.lin2Y = 0;
		_this1.lin2Z = 0;
		_this1.ang1X = 0;
		_this1.ang1Y = 0;
		_this1.ang1Z = 0;
		_this1.ang2X = 0;
		_this1.ang2Y = 0;
		_this1.ang2Z = 0;
		row2.rhs = 0;
		row2.cfm = 0;
		row2.minImpulse = 0;
		row2.maxImpulse = 0;
		row2.motorSpeed = 0;
		row2.motorMaxImpulse = 0;
		row2.impulse = null;
		row2.impulse = impulse1;
		row1 = row2;
		row1.rhs = linRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse2 = this._impulses[2];
		var row3 = info.rows[info.numRows++];
		var _this2 = row3.jacobian;
		_this2.lin1X = 0;
		_this2.lin1Y = 0;
		_this2.lin1Z = 0;
		_this2.lin2X = 0;
		_this2.lin2Y = 0;
		_this2.lin2Z = 0;
		_this2.ang1X = 0;
		_this2.ang1Y = 0;
		_this2.ang1Z = 0;
		_this2.ang2X = 0;
		_this2.ang2Y = 0;
		_this2.ang2Z = 0;
		row3.rhs = 0;
		row3.cfm = 0;
		row3.minImpulse = 0;
		row3.maxImpulse = 0;
		row3.motorSpeed = 0;
		row3.motorMaxImpulse = 0;
		row3.impulse = null;
		row3.impulse = impulse2;
		row1 = row3;
		row1.rhs = linRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(this._sd.frequency <= 0 || !isPositionPart) {
			var impulse3 = this._impulses[3];
			var row4 = info.rows[info.numRows++];
			var _this3 = row4.jacobian;
			_this3.lin1X = 0;
			_this3.lin1Y = 0;
			_this3.lin1Z = 0;
			_this3.lin2X = 0;
			_this3.lin2Y = 0;
			_this3.lin2Z = 0;
			_this3.ang1X = 0;
			_this3.ang1Y = 0;
			_this3.ang1Z = 0;
			_this3.ang2X = 0;
			_this3.ang2Y = 0;
			_this3.ang2Z = 0;
			row4.rhs = 0;
			row4.cfm = 0;
			row4.minImpulse = 0;
			row4.maxImpulse = 0;
			row4.motorSpeed = 0;
			row4.motorMaxImpulse = 0;
			row4.impulse = null;
			row4.impulse = impulse3;
			row1 = row4;
			this.setSolverInfoRowAngular(row1,this.angle,this._lm,motorMass,this._sd,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this._basis.xX;
			j.ang1Y = this._basis.xY;
			j.ang1Z = this._basis.xZ;
			j.ang2X = this._basis.xX;
			j.ang2Y = this._basis.xY;
			j.ang2Z = this._basis.xZ;
		}
		var impulse4 = this._impulses[4];
		var row5 = info.rows[info.numRows++];
		var _this4 = row5.jacobian;
		_this4.lin1X = 0;
		_this4.lin1Y = 0;
		_this4.lin1Z = 0;
		_this4.lin2X = 0;
		_this4.lin2Y = 0;
		_this4.lin2Z = 0;
		_this4.ang1X = 0;
		_this4.ang1Y = 0;
		_this4.ang1Z = 0;
		_this4.ang2X = 0;
		_this4.ang2Y = 0;
		_this4.ang2Z = 0;
		row5.rhs = 0;
		row5.cfm = 0;
		row5.minImpulse = 0;
		row5.maxImpulse = 0;
		row5.motorSpeed = 0;
		row5.motorMaxImpulse = 0;
		row5.impulse = null;
		row5.impulse = impulse4;
		row1 = row5;
		row1.rhs = angRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.ang1X = this._basis.yX;
		j.ang1Y = this._basis.yY;
		j.ang1Z = this._basis.yZ;
		j.ang2X = this._basis.yX;
		j.ang2Y = this._basis.yY;
		j.ang2Z = this._basis.yZ;
		var impulse5 = this._impulses[5];
		var row6 = info.rows[info.numRows++];
		var _this5 = row6.jacobian;
		_this5.lin1X = 0;
		_this5.lin1Y = 0;
		_this5.lin1Z = 0;
		_this5.lin2X = 0;
		_this5.lin2Y = 0;
		_this5.lin2Z = 0;
		_this5.ang1X = 0;
		_this5.ang1Y = 0;
		_this5.ang1Z = 0;
		_this5.ang2X = 0;
		_this5.ang2Y = 0;
		_this5.ang2Z = 0;
		row6.rhs = 0;
		row6.cfm = 0;
		row6.minImpulse = 0;
		row6.maxImpulse = 0;
		row6.motorSpeed = 0;
		row6.motorMaxImpulse = 0;
		row6.impulse = null;
		row6.impulse = impulse5;
		row1 = row6;
		row1.rhs = angRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.ang1X = this._basis.zX;
		j.ang1Y = this._basis.zY;
		j.ang1Z = this._basis.zZ;
		j.ang2X = this._basis.zX;
		j.ang2Y = this._basis.zY;
		j.ang2Z = this._basis.zZ;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQ;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newX;
		var newXX;
		var newXY;
		var newXZ;
		var newY;
		var newYX;
		var newYY;
		var newYZ;
		var newZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevX;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevY;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var qx;
		var qy;
		var qz;
		var qw;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d2 = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d2 < 0) {
			d2 = -d2;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d2 > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d2);
			q2X += q1X * -d2;
			q2Y += q1Y * -d2;
			q2Z += q1Z * -d2;
			q2W += q1W * -d2;
			var l1 = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l1 > 1e-32) {
				l1 = 1 / Math.sqrt(l1);
			}
			q2X *= l1;
			q2Y *= l1;
			q2Z *= l1;
			q2W *= l1;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w1 = slerpQW;
		var x21 = 2 * x;
		var y21 = 2 * y;
		var z21 = 2 * z;
		var xx = x * x21;
		var yy = y * y21;
		var zz = z * z21;
		var xy = x * y21;
		var yz = y * z21;
		var xz = x * z21;
		var wx = w1 * x21;
		var wy = w1 * y21;
		var wz = w1 * z21;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d3 = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d3 < -0.999999999) {
			var vX1;
			var vY1;
			var vZ1;
			var x11 = prevXX;
			var y11 = prevXY;
			var z11 = prevXZ;
			var x22 = x11 * x11;
			var y22 = y11 * y11;
			var z22 = z11 * z11;
			var d4;
			if(x22 < y22) {
				if(x22 < z22) {
					d4 = 1 / Math.sqrt(y22 + z22);
					vX1 = 0;
					vY1 = z11 * d4;
					vZ1 = -y11 * d4;
				} else {
					d4 = 1 / Math.sqrt(x22 + y22);
					vX1 = y11 * d4;
					vY1 = -x11 * d4;
					vZ1 = 0;
				}
			} else if(y22 < z22) {
				d4 = 1 / Math.sqrt(z22 + x22);
				vX1 = -z11 * d4;
				vY1 = 0;
				vZ1 = x11 * d4;
			} else {
				d4 = 1 / Math.sqrt(x22 + y22);
				vX1 = y11 * d4;
				vY1 = -x11 * d4;
				vZ1 = 0;
			}
			slerpQX = vX1;
			slerpQY = vY1;
			slerpQZ = vZ1;
			slerpQW = 0;
		} else {
			var cX1;
			var cY1;
			var cZ1;
			cX1 = prevXY * newXZ - prevXZ * newXY;
			cY1 = prevXZ * newXX - prevXX * newXZ;
			cZ1 = prevXX * newXY - prevXY * newXX;
			var w2 = Math.sqrt((1 + d3) * 0.5);
			d3 = 0.5 / w2;
			cX1 *= d3;
			cY1 *= d3;
			cZ1 *= d3;
			slerpQX = cX1;
			slerpQY = cY1;
			slerpQZ = cZ1;
			slerpQW = w2;
		}
		var x3 = slerpQX;
		var y3 = slerpQY;
		var z3 = slerpQZ;
		var w3 = slerpQW;
		var x23 = 2 * x3;
		var y23 = 2 * y3;
		var z23 = 2 * z3;
		var xx1 = x3 * x23;
		var yy1 = y3 * y23;
		var zz1 = z3 * z23;
		var xy1 = x3 * y23;
		var yz1 = y3 * z23;
		var xz1 = x3 * z23;
		var wx1 = w3 * x23;
		var wy1 = w3 * y23;
		var wz1 = w3 * z23;
		slerpM00 = 1 - yy1 - zz1;
		slerpM01 = xy1 - wz1;
		slerpM02 = xz1 + wy1;
		slerpM10 = xy1 + wz1;
		slerpM11 = 1 - xx1 - zz1;
		slerpM12 = yz1 - wx1;
		slerpM20 = xz1 - wy1;
		slerpM21 = yz1 + wx1;
		slerpM22 = 1 - xx1 - yy1;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y1 = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z1 = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X1;
		newYY = __tmp__Y1;
		newYZ = __tmp__Z1;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l2 = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l2 > 0) {
				l2 = 1 / Math.sqrt(l2);
			}
			newZX *= l2;
			newZY *= l2;
			newZZ *= l2;
		} else {
			var x12 = newXX;
			var y12 = newXY;
			var z12 = newXZ;
			var x24 = x12 * x12;
			var y24 = y12 * y12;
			var z24 = z12 * z12;
			var d5;
			if(x24 < y24) {
				if(x24 < z24) {
					d5 = 1 / Math.sqrt(y24 + z24);
					newZX = 0;
					newZY = z12 * d5;
					newZZ = -y12 * d5;
				} else {
					d5 = 1 / Math.sqrt(x24 + y24);
					newZX = y12 * d5;
					newZY = -x12 * d5;
					newZZ = 0;
				}
			} else if(y24 < z24) {
				d5 = 1 / Math.sqrt(z24 + x24);
				newZX = -z12 * d5;
				newZY = 0;
				newZZ = x12 * d5;
			} else {
				d5 = 1 / Math.sqrt(x24 + y24);
				newZX = y12 * d5;
				newZY = -x12 * d5;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var angError;
		var angErrorX;
		var angErrorY;
		var angErrorZ;
		angErrorX = this._basisX1Y * this._basisX2Z - this._basisX1Z * this._basisX2Y;
		angErrorY = this._basisX1Z * this._basisX2X - this._basisX1X * this._basisX2Z;
		angErrorZ = this._basisX1X * this._basisX2Y - this._basisX1Y * this._basisX2X;
		var cos1 = this._basisX1X * this._basisX2X + this._basisX1Y * this._basisX2Y + this._basisX1Z * this._basisX2Z;
		var theta1 = cos1 <= -1 ? 3.14159265358979 : cos1 >= 1 ? 0 : Math.acos(cos1);
		var l3 = angErrorX * angErrorX + angErrorY * angErrorY + angErrorZ * angErrorZ;
		if(l3 > 0) {
			l3 = 1 / Math.sqrt(l3);
		}
		angErrorX *= l3;
		angErrorY *= l3;
		angErrorZ *= l3;
		angErrorX *= theta1;
		angErrorY *= theta1;
		angErrorZ *= theta1;
		this.angularErrorY = angErrorX * this._basis.yX + angErrorY * this._basis.yY + angErrorZ * this._basis.yZ;
		this.angularErrorZ = angErrorX * this._basis.zX + angErrorY * this._basis.zY + angErrorZ * this._basis.zZ;
		var perpCross;
		var perpCrossX;
		var perpCrossY;
		var perpCrossZ;
		perpCrossX = this._basisY1Y * this._basisY2Z - this._basisY1Z * this._basisY2Y;
		perpCrossY = this._basisY1Z * this._basisY2X - this._basisY1X * this._basisY2Z;
		perpCrossZ = this._basisY1X * this._basisY2Y - this._basisY1Y * this._basisY2X;
		cos1 = this._basisY1X * this._basisY2X + this._basisY1Y * this._basisY2Y + this._basisY1Z * this._basisY2Z;
		this.angle = cos1 <= -1 ? 3.14159265358979 : cos1 >= 1 ? 0 : Math.acos(cos1);
		if(perpCrossX * this._basis.xX + perpCrossY * this._basis.xY + perpCrossZ * this._basis.xZ < 0) {
			this.angle = -this.angle;
		}
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,getLimitMotor: function() {
		return this._lm;
	}
	,getAngle: function() {
		return this.angle;
	}
});
var oimo_dynamics_constraint_joint_RevoluteJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.limitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
};
oimo_dynamics_constraint_joint_RevoluteJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_RevoluteJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_RevoluteJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldAxis;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = this.localAxis1;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		var v3;
		var vX1;
		var vY1;
		var vZ1;
		var v4 = worldAxis;
		vX1 = v4.x;
		vY1 = v4.y;
		vZ1 = v4.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = rigidBody2._transform._rotation00 * vX1 + rigidBody2._transform._rotation10 * vY1 + rigidBody2._transform._rotation20 * vZ1;
		__tmp__Y1 = rigidBody2._transform._rotation01 * vX1 + rigidBody2._transform._rotation11 * vY1 + rigidBody2._transform._rotation21 * vZ1;
		__tmp__Z1 = rigidBody2._transform._rotation02 * vX1 + rigidBody2._transform._rotation12 * vY1 + rigidBody2._transform._rotation22 * vZ1;
		vX1 = __tmp__X1;
		vY1 = __tmp__Y1;
		vZ1 = __tmp__Z1;
		var v5 = this.localAxis2;
		v5.x = vX1;
		v5.y = vY1;
		v5.z = vZ1;
		return this;
	}
});
var oimo_dynamics_constraint_joint_RotationalLimitMotor = function() {
	this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorTorque = 0;
};
oimo_dynamics_constraint_joint_RotationalLimitMotor.__name__ = true;
oimo_dynamics_constraint_joint_RotationalLimitMotor.prototype = {
	setLimits: function(lower,upper) {
		this.lowerLimit = lower;
		this.upperLimit = upper;
		return this;
	}
	,setMotor: function(speed,torque) {
		this.motorSpeed = speed;
		this.motorTorque = torque;
		return this;
	}
	,clone: function() {
		var lm = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
		lm.lowerLimit = this.lowerLimit;
		lm.upperLimit = this.upperLimit;
		lm.motorSpeed = this.motorSpeed;
		lm.motorTorque = this.motorTorque;
		return lm;
	}
};
var oimo_dynamics_constraint_joint_SphericalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,0);
	this._sd = config.springDamper.clone();
};
oimo_dynamics_constraint_joint_SphericalJoint.__name__ = true;
oimo_dynamics_constraint_joint_SphericalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_SphericalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		if(this._sd.frequency > 0 && isPositionPart) {
			return;
		}
		var error;
		var errorX;
		var errorY;
		var errorZ;
		errorX = this._anchor2X - this._anchor1X;
		errorY = this._anchor2Y - this._anchor1Y;
		errorZ = this._anchor2Z - this._anchor1Z;
		var cfm;
		var erp;
		if(this._sd.frequency > 0) {
			var omega = 6.28318530717958 * this._sd.frequency;
			var zeta = this._sd.dampingRatio;
			if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
				zeta = oimo_common_Setting.minSpringDamperDampingRatio;
			}
			var h = timeStep.dt;
			var c = 2 * zeta * omega;
			var k = omega * omega;
			if(this._sd.useSymplecticEuler) {
				cfm = 1 / (h * c);
				erp = k / c;
			} else {
				cfm = 1 / (h * (h * k + c));
				erp = k / (h * k + c);
			}
			cfm *= this._b1._invMass + this._b2._invMass;
		} else {
			cfm = 0;
			erp = this.getErp(timeStep,isPositionPart);
		}
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = errorX * erp;
		linearRhsY = errorY * erp;
		linearRhsZ = errorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = cfm;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse1 = this._impulses[1];
		var row2 = info.rows[info.numRows++];
		var _this1 = row2.jacobian;
		_this1.lin1X = 0;
		_this1.lin1Y = 0;
		_this1.lin1Z = 0;
		_this1.lin2X = 0;
		_this1.lin2Y = 0;
		_this1.lin2Z = 0;
		_this1.ang1X = 0;
		_this1.ang1Y = 0;
		_this1.ang1Z = 0;
		_this1.ang2X = 0;
		_this1.ang2Y = 0;
		_this1.ang2Z = 0;
		row2.rhs = 0;
		row2.cfm = 0;
		row2.minImpulse = 0;
		row2.maxImpulse = 0;
		row2.motorSpeed = 0;
		row2.motorMaxImpulse = 0;
		row2.impulse = null;
		row2.impulse = impulse1;
		row1 = row2;
		row1.rhs = linRhsY;
		row1.cfm = cfm;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse2 = this._impulses[2];
		var row3 = info.rows[info.numRows++];
		var _this2 = row3.jacobian;
		_this2.lin1X = 0;
		_this2.lin1Y = 0;
		_this2.lin1Z = 0;
		_this2.lin2X = 0;
		_this2.lin2Y = 0;
		_this2.lin2Z = 0;
		_this2.ang1X = 0;
		_this2.ang1Y = 0;
		_this2.ang1Z = 0;
		_this2.ang2X = 0;
		_this2.ang2Y = 0;
		_this2.ang2Z = 0;
		row3.rhs = 0;
		row3.cfm = 0;
		row3.minImpulse = 0;
		row3.maxImpulse = 0;
		row3.motorSpeed = 0;
		row3.motorMaxImpulse = 0;
		row3.impulse = null;
		row3.impulse = impulse2;
		row1 = row3;
		row1.rhs = linRhsZ;
		row1.cfm = cfm;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getSpringDamper: function() {
		return this._sd;
	}
});
var oimo_dynamics_constraint_joint_SphericalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_SphericalJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_SphericalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_SphericalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		return this;
	}
});
var oimo_dynamics_constraint_joint_SpringDamper = function() {
	this.frequency = 0;
	this.dampingRatio = 0;
	this.useSymplecticEuler = false;
};
oimo_dynamics_constraint_joint_SpringDamper.__name__ = true;
oimo_dynamics_constraint_joint_SpringDamper.prototype = {
	setSpring: function(frequency,dampingRatio) {
		this.frequency = frequency;
		this.dampingRatio = dampingRatio;
		return this;
	}
	,setSymplecticEuler: function(useSymplecticEuler) {
		this.useSymplecticEuler = useSymplecticEuler;
		return this;
	}
	,clone: function() {
		var sd = new oimo_dynamics_constraint_joint_SpringDamper();
		sd.frequency = this.frequency;
		sd.dampingRatio = this.dampingRatio;
		sd.useSymplecticEuler = this.useSymplecticEuler;
		return sd;
	}
};
var oimo_dynamics_constraint_joint_TranslationalLimitMotor = function() {
	this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorForce = 0;
};
oimo_dynamics_constraint_joint_TranslationalLimitMotor.__name__ = true;
oimo_dynamics_constraint_joint_TranslationalLimitMotor.prototype = {
	setLimits: function(lower,upper) {
		this.lowerLimit = lower;
		this.upperLimit = upper;
		return this;
	}
	,setMotor: function(speed,force) {
		this.motorSpeed = speed;
		this.motorForce = force;
		return this;
	}
	,clone: function() {
		var lm = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
		lm.lowerLimit = this.lowerLimit;
		lm.upperLimit = this.upperLimit;
		lm.motorSpeed = this.motorSpeed;
		lm.motorForce = this.motorForce;
		return lm;
	}
};
var oimo_dynamics_constraint_joint_UniversalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.UNIVERSAL);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v1 = config.localAxis2;
	this._localBasisZ2X = v1.x;
	this._localBasisZ2Y = v1.y;
	this._localBasisZ2Z = v1.z;
	this.buildLocalBasesFromX1Z2();
	this._angleX = 0;
	this._angleY = 0;
	this._angleZ = 0;
	this.xSingular = false;
	this.ySingular = false;
	this.zSingular = false;
	this._sd1 = config.springDamper1.clone();
	this._sd2 = config.springDamper2.clone();
	this._lm1 = config.limitMotor1.clone();
	this._lm2 = config.limitMotor2.clone();
};
oimo_dynamics_constraint_joint_UniversalJoint.__name__ = true;
oimo_dynamics_constraint_joint_UniversalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_UniversalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var angRhsY = this._angleY * erp;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var motorMassX = this.computeEffectiveInertiaMoment(this._axisXX,this._axisXY,this._axisXZ);
		var motorMassZ = this.computeEffectiveInertiaMoment(this._axisZX,this._axisZY,this._axisZZ);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse1 = this._impulses[1];
		var row2 = info.rows[info.numRows++];
		var _this1 = row2.jacobian;
		_this1.lin1X = 0;
		_this1.lin1Y = 0;
		_this1.lin1Z = 0;
		_this1.lin2X = 0;
		_this1.lin2Y = 0;
		_this1.lin2Z = 0;
		_this1.ang1X = 0;
		_this1.ang1Y = 0;
		_this1.ang1Z = 0;
		_this1.ang2X = 0;
		_this1.ang2Y = 0;
		_this1.ang2Z = 0;
		row2.rhs = 0;
		row2.cfm = 0;
		row2.minImpulse = 0;
		row2.maxImpulse = 0;
		row2.motorSpeed = 0;
		row2.motorMaxImpulse = 0;
		row2.impulse = null;
		row2.impulse = impulse1;
		row1 = row2;
		row1.rhs = linRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse2 = this._impulses[2];
		var row3 = info.rows[info.numRows++];
		var _this2 = row3.jacobian;
		_this2.lin1X = 0;
		_this2.lin1Y = 0;
		_this2.lin1Z = 0;
		_this2.lin2X = 0;
		_this2.lin2Y = 0;
		_this2.lin2Z = 0;
		_this2.ang1X = 0;
		_this2.ang1Y = 0;
		_this2.ang1Z = 0;
		_this2.ang2X = 0;
		_this2.ang2Y = 0;
		_this2.ang2Z = 0;
		row3.rhs = 0;
		row3.cfm = 0;
		row3.minImpulse = 0;
		row3.maxImpulse = 0;
		row3.motorSpeed = 0;
		row3.motorMaxImpulse = 0;
		row3.impulse = null;
		row3.impulse = impulse2;
		row1 = row3;
		row1.rhs = linRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(!this.xSingular && (this._sd1.frequency <= 0 || !isPositionPart)) {
			var impulse3 = this._impulses[3];
			var row4 = info.rows[info.numRows++];
			var _this3 = row4.jacobian;
			_this3.lin1X = 0;
			_this3.lin1Y = 0;
			_this3.lin1Z = 0;
			_this3.lin2X = 0;
			_this3.lin2Y = 0;
			_this3.lin2Z = 0;
			_this3.ang1X = 0;
			_this3.ang1Y = 0;
			_this3.ang1Z = 0;
			_this3.ang2X = 0;
			_this3.ang2Y = 0;
			_this3.ang2Z = 0;
			row4.rhs = 0;
			row4.cfm = 0;
			row4.minImpulse = 0;
			row4.maxImpulse = 0;
			row4.motorSpeed = 0;
			row4.motorMaxImpulse = 0;
			row4.impulse = null;
			row4.impulse = impulse3;
			row1 = row4;
			this.setSolverInfoRowAngular(row1,this._angleX,this._lm1,motorMassX,this._sd1,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this._axisXX;
			j.ang1Y = this._axisXY;
			j.ang1Z = this._axisXZ;
			j.ang2X = this._axisXX;
			j.ang2Y = this._axisXY;
			j.ang2Z = this._axisXZ;
		}
		if(!this.ySingular) {
			var impulse4 = this._impulses[4];
			var row5 = info.rows[info.numRows++];
			var _this4 = row5.jacobian;
			_this4.lin1X = 0;
			_this4.lin1Y = 0;
			_this4.lin1Z = 0;
			_this4.lin2X = 0;
			_this4.lin2Y = 0;
			_this4.lin2Z = 0;
			_this4.ang1X = 0;
			_this4.ang1Y = 0;
			_this4.ang1Z = 0;
			_this4.ang2X = 0;
			_this4.ang2Y = 0;
			_this4.ang2Z = 0;
			row5.rhs = 0;
			row5.cfm = 0;
			row5.minImpulse = 0;
			row5.maxImpulse = 0;
			row5.motorSpeed = 0;
			row5.motorMaxImpulse = 0;
			row5.impulse = null;
			row5.impulse = impulse4;
			row1 = row5;
			row1.rhs = angRhsY;
			row1.cfm = 0;
			row1.minImpulse = -1e65536;
			row1.maxImpulse = 1e65536;
			j = row1.jacobian;
			j.ang1X = this._axisYX;
			j.ang1Y = this._axisYY;
			j.ang1Z = this._axisYZ;
			j.ang2X = this._axisYX;
			j.ang2Y = this._axisYY;
			j.ang2Z = this._axisYZ;
		}
		if(!this.zSingular && (this._sd2.frequency <= 0 || !isPositionPart)) {
			var impulse5 = this._impulses[5];
			var row6 = info.rows[info.numRows++];
			var _this5 = row6.jacobian;
			_this5.lin1X = 0;
			_this5.lin1Y = 0;
			_this5.lin1Z = 0;
			_this5.lin2X = 0;
			_this5.lin2Y = 0;
			_this5.lin2Z = 0;
			_this5.ang1X = 0;
			_this5.ang1Y = 0;
			_this5.ang1Z = 0;
			_this5.ang2X = 0;
			_this5.ang2Y = 0;
			_this5.ang2Z = 0;
			row6.rhs = 0;
			row6.cfm = 0;
			row6.minImpulse = 0;
			row6.maxImpulse = 0;
			row6.motorSpeed = 0;
			row6.motorMaxImpulse = 0;
			row6.impulse = null;
			row6.impulse = impulse5;
			row1 = row6;
			this.setSolverInfoRowAngular(row1,this._angleZ,this._lm2,motorMassZ,this._sd2,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this._axisZX;
			j.ang1Y = this._axisZY;
			j.ang1Z = this._axisZZ;
			j.ang2X = this._axisZX;
			j.ang2Y = this._axisZY;
			j.ang2Z = this._axisZZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__10 = rot101 * rot200 + rot111 * rot210 + rot121 * rot220;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__20 = rot102 * rot200 + rot112 * rot210 + rot122 * rot220;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var angleAxisX;
		var angleAxisXX;
		var angleAxisXY;
		var angleAxisXZ;
		var angleAxisY;
		var angleAxisYX;
		var angleAxisYY;
		var angleAxisYZ;
		var angleAxisZ;
		var angleAxisZX;
		var angleAxisZY;
		var angleAxisZZ;
		angleAxisXX = this._basisX1X;
		angleAxisXY = this._basisX1Y;
		angleAxisXZ = this._basisX1Z;
		angleAxisZX = this._basisZ2X;
		angleAxisZY = this._basisZ2Y;
		angleAxisZZ = this._basisZ2Z;
		angleAxisYX = angleAxisZY * angleAxisXZ - angleAxisZZ * angleAxisXY;
		angleAxisYY = angleAxisZZ * angleAxisXX - angleAxisZX * angleAxisXZ;
		angleAxisYZ = angleAxisZX * angleAxisXY - angleAxisZY * angleAxisXX;
		this._axisXX = angleAxisYY * angleAxisZZ - angleAxisYZ * angleAxisZY;
		this._axisXY = angleAxisYZ * angleAxisZX - angleAxisYX * angleAxisZZ;
		this._axisXZ = angleAxisYX * angleAxisZY - angleAxisYY * angleAxisZX;
		this._axisYX = angleAxisYX;
		this._axisYY = angleAxisYY;
		this._axisYZ = angleAxisYZ;
		this._axisZX = angleAxisXY * angleAxisYZ - angleAxisXZ * angleAxisYY;
		this._axisZY = angleAxisXZ * angleAxisYX - angleAxisXX * angleAxisYZ;
		this._axisZZ = angleAxisXX * angleAxisYY - angleAxisXY * angleAxisYX;
		var l = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisXX *= l;
		this._axisXY *= l;
		this._axisXZ *= l;
		var l1 = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ;
		if(l1 > 0) {
			l1 = 1 / Math.sqrt(l1);
		}
		this._axisYX *= l1;
		this._axisYY *= l1;
		this._axisYZ *= l1;
		var l2 = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ;
		if(l2 > 0) {
			l2 = 1 / Math.sqrt(l2);
		}
		this._axisZX *= l2;
		this._axisZY *= l2;
		this._axisZZ *= l2;
		this.xSingular = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ == 0;
		this.ySingular = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ == 0;
		this.zSingular = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ == 0;
		var rot11;
		var rot1001;
		var rot1011;
		var rot1021;
		var rot1101;
		var rot1111;
		var rot1121;
		var rot1201;
		var rot1211;
		var rot1221;
		var rot21;
		var rot2001;
		var rot2011;
		var rot2021;
		var rot2101;
		var rot2111;
		var rot2121;
		var rot2201;
		var rot2211;
		var rot2221;
		rot1001 = this._basisX1X;
		rot1011 = this._basisY1X;
		rot1021 = this._basisZ1X;
		rot1101 = this._basisX1Y;
		rot1111 = this._basisY1Y;
		rot1121 = this._basisZ1Y;
		rot1201 = this._basisX1Z;
		rot1211 = this._basisY1Z;
		rot1221 = this._basisZ1Z;
		rot2001 = this._basisX2X;
		rot2011 = this._basisY2X;
		rot2021 = this._basisZ2X;
		rot2101 = this._basisX2Y;
		rot2111 = this._basisY2Y;
		rot2121 = this._basisZ2Y;
		rot2201 = this._basisX2Z;
		rot2211 = this._basisY2Z;
		rot2221 = this._basisZ2Z;
		var relRot1;
		var relRot001;
		var relRot011;
		var relRot021;
		var relRot101;
		var relRot111;
		var relRot121;
		var relRot201;
		var relRot211;
		var relRot221;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = rot1001 * rot2001 + rot1101 * rot2101 + rot1201 * rot2201;
		__tmp__011 = rot1001 * rot2011 + rot1101 * rot2111 + rot1201 * rot2211;
		__tmp__021 = rot1001 * rot2021 + rot1101 * rot2121 + rot1201 * rot2221;
		__tmp__101 = rot1011 * rot2001 + rot1111 * rot2101 + rot1211 * rot2201;
		__tmp__111 = rot1011 * rot2011 + rot1111 * rot2111 + rot1211 * rot2211;
		__tmp__121 = rot1011 * rot2021 + rot1111 * rot2121 + rot1211 * rot2221;
		__tmp__201 = rot1021 * rot2001 + rot1121 * rot2101 + rot1221 * rot2201;
		__tmp__211 = rot1021 * rot2011 + rot1121 * rot2111 + rot1221 * rot2211;
		__tmp__221 = rot1021 * rot2021 + rot1121 * rot2121 + rot1221 * rot2221;
		relRot001 = __tmp__001;
		relRot011 = __tmp__011;
		relRot021 = __tmp__021;
		relRot101 = __tmp__101;
		relRot111 = __tmp__111;
		relRot121 = __tmp__121;
		relRot201 = __tmp__201;
		relRot211 = __tmp__211;
		relRot221 = __tmp__221;
		var angles;
		var anglesX;
		var anglesY;
		var anglesZ;
		var sy = relRot021;
		if(sy <= -1) {
			var xSubZ = Math.atan2(relRot211,relRot111);
			anglesX = xSubZ * 0.5;
			anglesY = -1.570796326794895;
			anglesZ = -xSubZ * 0.5;
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(relRot211,relRot111);
			anglesX = xAddZ * 0.5;
			anglesY = 1.570796326794895;
			anglesZ = xAddZ * 0.5;
		} else {
			var y = Math.asin(sy);
			var x = Math.atan2(-relRot121,relRot221);
			var z = Math.atan2(-relRot011,relRot001);
			anglesX = x;
			anglesY = y;
			anglesZ = z;
		}
		this._angleX = anglesX;
		this._angleY = anglesY;
		this._angleZ = anglesZ;
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisZ2X;
		v1.y = this._basisZ2Y;
		v1.z = this._basisZ2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisZ2X;
		v.y = this._basisZ2Y;
		v.z = this._basisZ2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisZ2X;
		v1.y = this._localBasisZ2Y;
		v1.z = this._localBasisZ2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisZ2X;
		v.y = this._localBasisZ2Y;
		v.z = this._localBasisZ2Z;
	}
	,getSpringDamper1: function() {
		return this._sd1;
	}
	,getSpringDamper2: function() {
		return this._sd2;
	}
	,getLimitMotor1: function() {
		return this._lm1;
	}
	,getLimitMotor2: function() {
		return this._lm2;
	}
	,getAngle1: function() {
		return this._angleX;
	}
	,getAngle2: function() {
		return this._angleZ;
	}
});
var oimo_dynamics_constraint_joint_UniversalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.springDamper1 = new oimo_dynamics_constraint_joint_SpringDamper();
	this.springDamper2 = new oimo_dynamics_constraint_joint_SpringDamper();
	this.limitMotor1 = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.limitMotor2 = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
};
oimo_dynamics_constraint_joint_UniversalJointConfig.__name__ = true;
oimo_dynamics_constraint_joint_UniversalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_UniversalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis1,worldAxis2) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldAxis1;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = this.localAxis1;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		var v3;
		var vX1;
		var vY1;
		var vZ1;
		var v4 = worldAxis2;
		vX1 = v4.x;
		vY1 = v4.y;
		vZ1 = v4.z;
		var __tmp__X1;
		var __tmp__Y1;
		var __tmp__Z1;
		__tmp__X1 = rigidBody2._transform._rotation00 * vX1 + rigidBody2._transform._rotation10 * vY1 + rigidBody2._transform._rotation20 * vZ1;
		__tmp__Y1 = rigidBody2._transform._rotation01 * vX1 + rigidBody2._transform._rotation11 * vY1 + rigidBody2._transform._rotation21 * vZ1;
		__tmp__Z1 = rigidBody2._transform._rotation02 * vX1 + rigidBody2._transform._rotation12 * vY1 + rigidBody2._transform._rotation22 * vZ1;
		vX1 = __tmp__X1;
		vY1 = __tmp__Y1;
		vZ1 = __tmp__Z1;
		var v5 = this.localAxis2;
		v5.x = vX1;
		v5.y = vY1;
		v5.z = vZ1;
		return this;
	}
});
var oimo_dynamics_constraint_solver_ConstraintSolverType = function() { };
oimo_dynamics_constraint_solver_ConstraintSolverType.__name__ = true;
var oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow = function() {
	this.invMLinN1X = 0;
	this.invMLinN1Y = 0;
	this.invMLinN1Z = 0;
	this.invMLinN2X = 0;
	this.invMLinN2Y = 0;
	this.invMLinN2Z = 0;
	this.invMAngN1X = 0;
	this.invMAngN1Y = 0;
	this.invMAngN1Z = 0;
	this.invMAngN2X = 0;
	this.invMAngN2Y = 0;
	this.invMAngN2Z = 0;
	this.invMLinT1X = 0;
	this.invMLinT1Y = 0;
	this.invMLinT1Z = 0;
	this.invMLinT2X = 0;
	this.invMLinT2Y = 0;
	this.invMLinT2Z = 0;
	this.invMAngT1X = 0;
	this.invMAngT1Y = 0;
	this.invMAngT1Z = 0;
	this.invMAngT2X = 0;
	this.invMAngT2Y = 0;
	this.invMAngT2Z = 0;
	this.invMLinB1X = 0;
	this.invMLinB1Y = 0;
	this.invMLinB1Z = 0;
	this.invMLinB2X = 0;
	this.invMLinB2Y = 0;
	this.invMLinB2Z = 0;
	this.invMAngB1X = 0;
	this.invMAngB1Y = 0;
	this.invMAngB1Z = 0;
	this.invMAngB2X = 0;
	this.invMAngB2Y = 0;
	this.invMAngB2Z = 0;
	this.massN = 0;
	this.massTB00 = 0;
	this.massTB01 = 0;
	this.massTB10 = 0;
	this.massTB11 = 0;
};
oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow.__name__ = true;
var oimo_dynamics_constraint_solver_common_JointSolverMassDataRow = function() {
	this.invMLin1X = 0;
	this.invMLin1Y = 0;
	this.invMLin1Z = 0;
	this.invMLin2X = 0;
	this.invMLin2Y = 0;
	this.invMLin2Z = 0;
	this.invMAng1X = 0;
	this.invMAng1Y = 0;
	this.invMAng1Z = 0;
	this.invMAng2X = 0;
	this.invMAng2Y = 0;
	this.invMAng2Z = 0;
	this.mass = 0;
	this.massWithoutCfm = 0;
};
oimo_dynamics_constraint_solver_common_JointSolverMassDataRow.__name__ = true;
var oimo_dynamics_constraint_solver_direct_Boundary = function(maxRows) {
	var this1 = new Array(maxRows);
	this.iBounded = this1;
	var this2 = new Array(maxRows);
	this.iUnbounded = this2;
	var this3 = new Array(maxRows);
	this.signs = this3;
	var this4 = new Array(maxRows);
	this.b = this4;
	this.numBounded = 0;
	this.numUnbounded = 0;
	this.matrixId = 0;
};
oimo_dynamics_constraint_solver_direct_Boundary.__name__ = true;
oimo_dynamics_constraint_solver_direct_Boundary.prototype = {
	init: function(buildInfo) {
		this.numBounded = buildInfo.numBounded;
		var _g1 = 0;
		var _g = this.numBounded;
		while(_g1 < _g) {
			var i = _g1++;
			this.iBounded[i] = buildInfo.iBounded[i];
			this.signs[i] = buildInfo.signs[i];
		}
		this.numUnbounded = buildInfo.numUnbounded;
		this.matrixId = 0;
		var _g11 = 0;
		var _g2 = this.numUnbounded;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var idx = buildInfo.iUnbounded[i1];
			this.iUnbounded[i1] = idx;
			this.matrixId |= 1 << idx;
		}
	}
	,computeImpulses: function(info,mass,relVels,impulses,dImpulses,impulseFactor,noCheck) {
		var _g1 = 0;
		var _g = this.numUnbounded;
		while(_g1 < _g) {
			var i = _g1++;
			var idx = this.iUnbounded[i];
			var row = info.rows[idx];
			var relVel = relVels[idx];
			this.b[idx] = row.rhs * impulseFactor - relVel - row.cfm * impulses[idx];
		}
		var invMassWithoutCfm = mass._invMassWithoutCfm;
		var _g11 = 0;
		var _g2 = this.numBounded;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var idx1 = this.iBounded[i1];
			var sign = this.signs[i1];
			var row1 = info.rows[idx1];
			var oldImpulse = impulses[idx1];
			var impulse = sign < 0 ? row1.minImpulse : sign > 0 ? row1.maxImpulse : 0;
			var dImpulse = impulse - oldImpulse;
			dImpulses[idx1] = dImpulse;
			if(dImpulse != 0) {
				var _g3 = 0;
				var _g21 = this.numUnbounded;
				while(_g3 < _g21) {
					var j = _g3++;
					var idx2 = this.iUnbounded[j];
					var dRelVel = invMassWithoutCfm[idx1][idx2] * dImpulse;
					var _g4 = idx2;
					var _g5 = this.b;
					_g5[_g4] = _g5[_g4] - dRelVel;
				}
			}
		}
		var indices = this.iUnbounded;
		var n = this.numUnbounded;
		var id = 0;
		var _g12 = 0;
		var _g6 = n;
		while(_g12 < _g6) {
			var i2 = _g12++;
			id |= 1 << indices[i2];
		}
		var massMatrix;
		if(mass._cacheComputed[id]) {
			massMatrix = mass._cachedSubmatrices[id];
		} else {
			mass.computeSubmatrix(id,indices,n);
			mass._cacheComputed[id] = true;
			massMatrix = mass._cachedSubmatrices[id];
		}
		var ok = true;
		var _g13 = 0;
		var _g7 = this.numUnbounded;
		while(_g13 < _g7) {
			var i3 = _g13++;
			var idx3 = this.iUnbounded[i3];
			var row2 = info.rows[idx3];
			var oldImpulse1 = impulses[idx3];
			var impulse1 = oldImpulse1;
			var _g31 = 0;
			var _g22 = this.numUnbounded;
			while(_g31 < _g22) {
				var j1 = _g31++;
				var idx21 = this.iUnbounded[j1];
				impulse1 += this.b[idx21] * massMatrix[i3][j1];
			}
			if(impulse1 < row2.minImpulse - oimo_common_Setting.directMlcpSolverEps || impulse1 > row2.maxImpulse + oimo_common_Setting.directMlcpSolverEps) {
				ok = false;
				break;
			}
			dImpulses[idx3] = impulse1 - oldImpulse1;
		}
		if(noCheck) {
			return true;
		}
		if(!ok) {
			return false;
		}
		var _g14 = 0;
		var _g8 = this.numBounded;
		while(_g14 < _g8) {
			var i4 = _g14++;
			var idx4 = this.iBounded[i4];
			var row3 = info.rows[idx4];
			var sign1 = this.signs[i4];
			var error = 0;
			var newImpulse = impulses[idx4] + dImpulses[idx4];
			var relVel1 = relVels[idx4];
			var _g32 = 0;
			var _g23 = info.numRows;
			while(_g32 < _g23) {
				var j2 = _g32++;
				relVel1 += invMassWithoutCfm[idx4][j2] * dImpulses[j2];
			}
			error = row3.rhs * impulseFactor - relVel1 - row3.cfm * newImpulse;
			if(sign1 < 0 && error > oimo_common_Setting.directMlcpSolverEps || sign1 > 0 && error < -oimo_common_Setting.directMlcpSolverEps) {
				ok = false;
				break;
			}
		}
		return ok;
	}
};
var oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo = function(size) {
	this.size = size;
	this.numBounded = 0;
	var this1 = new Array(size);
	this.iBounded = this1;
	var this2 = new Array(size);
	this.signs = this2;
	this.numUnbounded = 0;
	var this3 = new Array(size);
	this.iUnbounded = this3;
};
oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo.__name__ = true;
var oimo_dynamics_constraint_solver_direct_BoundaryBuilder = function(maxRows) {
	this.maxRows = maxRows;
	this.numBoundaries = 0;
	var this1 = new Array(1 << maxRows);
	this.boundaries = this1;
	this.bbInfo = new oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo(maxRows);
};
oimo_dynamics_constraint_solver_direct_BoundaryBuilder.__name__ = true;
oimo_dynamics_constraint_solver_direct_BoundaryBuilder.prototype = {
	buildBoundariesRecursive: function(info,i) {
		if(i == info.numRows) {
			if(this.boundaries[this.numBoundaries] == null) {
				this.boundaries[this.numBoundaries] = new oimo_dynamics_constraint_solver_direct_Boundary(this.maxRows);
			}
			this.boundaries[this.numBoundaries++].init(this.bbInfo);
			return;
		}
		var row = info.rows[i];
		var lowerLimitEnabled = row.minImpulse > -1e65536;
		var upperLimitEnabled = row.maxImpulse < 1e65536;
		var disabled = row.minImpulse == 0 && row.maxImpulse == 0;
		if(disabled) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = 0;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
			return;
		}
		var _this1 = this.bbInfo;
		_this1.iUnbounded[_this1.numUnbounded] = i;
		_this1.numUnbounded++;
		this.buildBoundariesRecursive(info,i + 1);
		this.bbInfo.numUnbounded--;
		if(lowerLimitEnabled) {
			var _this2 = this.bbInfo;
			_this2.iBounded[_this2.numBounded] = i;
			_this2.signs[_this2.numBounded] = -1;
			_this2.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
		}
		if(upperLimitEnabled) {
			var _this3 = this.bbInfo;
			_this3.iBounded[_this3.numBounded] = i;
			_this3.signs[_this3.numBounded] = 1;
			_this3.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
		}
	}
	,buildBoundaries: function(info) {
		this.numBoundaries = 0;
		var _this = this.bbInfo;
		_this.numBounded = 0;
		_this.numUnbounded = 0;
		this.buildBoundariesRecursive(info,0);
	}
};
var oimo_dynamics_constraint_solver_direct_BoundarySelector = function(n) {
	this.n = n;
	var this1 = new Array(n);
	this.indices = this1;
	var this2 = new Array(n);
	this.tmpIndices = this2;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		this.indices[i] = i;
	}
};
oimo_dynamics_constraint_solver_direct_BoundarySelector.__name__ = true;
oimo_dynamics_constraint_solver_direct_BoundarySelector.prototype = {
	getIndex: function(i) {
		return this.indices[i];
	}
	,select: function(index) {
		var i = 0;
		while(this.indices[i] != index) ++i;
		while(i > 0) {
			var tmp = this.indices[i];
			this.indices[i] = this.indices[i - 1];
			this.indices[i - 1] = tmp;
			--i;
		}
	}
	,setSize: function(size) {
		var numSmaller = 0;
		var numGreater = 0;
		var _g1 = 0;
		var _g = this.n;
		while(_g1 < _g) {
			var i = _g1++;
			var idx = this.indices[i];
			if(idx < size) {
				this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = this.indices;
		this.indices = this.tmpIndices;
		this.tmpIndices = tmp;
	}
};
var oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver = function(joint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.joint = joint;
	this.info = new oimo_dynamics_constraint_info_joint_JointSolverInfo();
	var maxRows = oimo_common_Setting.maxJacobianRows;
	this.massMatrix = new oimo_dynamics_constraint_solver_direct_MassMatrix(maxRows);
	this.boundaryBuilder = new oimo_dynamics_constraint_solver_direct_BoundaryBuilder(maxRows);
	var this1 = new Array(maxRows);
	this.massData = this1;
	var _g1 = 0;
	var _g = this.massData.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.massData[i] = new oimo_dynamics_constraint_solver_common_JointSolverMassDataRow();
	}
	var numMaxBoundaries = this.boundaryBuilder.boundaries.length;
	this.velBoundarySelector = new oimo_dynamics_constraint_solver_direct_BoundarySelector(numMaxBoundaries);
	this.posBoundarySelector = new oimo_dynamics_constraint_solver_direct_BoundarySelector(numMaxBoundaries);
	var this2 = new Array(maxRows);
	this.relVels = this2;
	var this3 = new Array(maxRows);
	this.impulses = this3;
	var this4 = new Array(maxRows);
	this.dImpulses = this4;
	var this5 = new Array(maxRows);
	this.dTotalImpulses = this5;
	var _g11 = 0;
	var _g2 = maxRows;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this.relVels[i1] = 0;
		this.impulses[i1] = 0;
		this.dImpulses[i1] = 0;
		this.dTotalImpulses[i1] = 0;
	}
};
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.__name__ = true;
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this2 = this.velBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g1 = 0;
		var _g = _this2.n;
		while(_g1 < _g) {
			var i = _g1++;
			var idx = _this2.indices[i];
			if(idx < size) {
				_this2.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this2.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this2.indices;
		_this2.indices = _this2.tmpIndices;
		_this2.tmpIndices = tmp;
	}
	,warmStart: function(timeStep) {
		var _g = this.joint._positionCorrectionAlgorithm;
		var factor = _g == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE ? oimo_common_Setting.jointWarmStartingFactorForBaungarte : oimo_common_Setting.jointWarmStartingFactor;
		factor *= timeStep.dtRatio;
		if(factor <= 0) {
			var _g1 = 0;
			var _g2 = this.info.numRows;
			while(_g1 < _g2) {
				var i = _g1++;
				var row = this.info.rows[i];
				var _this = row.impulse;
				_this.impulse = 0;
				_this.impulseM = 0;
				_this.impulseP = 0;
			}
			return;
		}
		var _g11 = 0;
		var _g3 = this.info.numRows;
		while(_g11 < _g3) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var imp = row1.impulse;
			var impulse = imp.impulse * factor;
			if(impulse < row1.minImpulse) {
				impulse = row1.minImpulse;
			} else if(impulse > row1.maxImpulse) {
				impulse = row1.maxImpulse;
			}
			imp.impulse = impulse;
			if(row1.motorMaxImpulse > 0) {
				var impulseM = imp.impulseM * factor;
				var max = row1.motorMaxImpulse;
				if(impulseM < -max) {
					impulseM = -max;
				} else if(impulseM > max) {
					impulseM = max;
				}
				imp.impulseM = impulseM;
			} else {
				imp.impulseM = 0;
			}
			this.dImpulses[i1] = imp.impulse + imp.impulseM;
		}
		var impulses = this.dImpulses;
		var linearSet = false;
		var angularSet = false;
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g12 = 0;
		var _g4 = this.info.numRows;
		while(_g12 < _g4) {
			var i2 = _g12++;
			var row2 = this.info.rows[i2];
			var j = row2.jacobian;
			var md = this.massData[i2];
			var imp1 = impulses[i2];
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * imp1;
				lv1Y += md.invMLin1Y * imp1;
				lv1Z += md.invMLin1Z * imp1;
				lv2X += md.invMLin2X * -imp1;
				lv2Y += md.invMLin2Y * -imp1;
				lv2Z += md.invMLin2Z * -imp1;
				linearSet = true;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * imp1;
				av1Y += md.invMAng1Y * imp1;
				av1Z += md.invMAng1Z * imp1;
				av2X += md.invMAng2X * -imp1;
				av2Y += md.invMAng2Y * -imp1;
				av2Z += md.invMAng2Z * -imp1;
				angularSet = true;
			}
		}
		if(linearSet) {
			this._b1._velX = lv1X;
			this._b1._velY = lv1Y;
			this._b1._velZ = lv1Z;
			this._b2._velX = lv2X;
			this._b2._velY = lv2Y;
			this._b2._velZ = lv2Z;
		}
		if(angularSet) {
			this._b1._angVelX = av1X;
			this._b1._angVelY = av1Y;
			this._b1._angVelZ = av1Z;
			this._b2._angVelX = av2X;
			this._b2._angVelY = av2Y;
			this._b2._angVelZ = av2Z;
		}
	}
	,solveVelocity: function() {
		var numRows = this.info.numRows;
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g1 = 0;
		var _g = numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var relVel = 0;
			relVel += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			relVel -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			relVel += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			relVel -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			this.relVels[i] = relVel;
			this.impulses[i] = imp.impulse;
			this.dTotalImpulses[i] = 0;
		}
		var invMass = this.massMatrix._invMassWithoutCfm;
		var _g11 = 0;
		var _g2 = numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var imp1 = row1.impulse;
			var md = this.massData[i1];
			if(row1.motorMaxImpulse > 0) {
				var oldImpulseM = imp1.impulseM;
				var impulseM = oldImpulseM + md.massWithoutCfm * (-row1.motorSpeed - this.relVels[i1]);
				var maxImpulseM = row1.motorMaxImpulse;
				if(impulseM < -maxImpulseM) {
					impulseM = -maxImpulseM;
				} else if(impulseM > maxImpulseM) {
					impulseM = maxImpulseM;
				}
				imp1.impulseM = impulseM;
				var dImpulseM = impulseM - oldImpulseM;
				this.dTotalImpulses[i1] = dImpulseM;
				var _g3 = 0;
				var _g21 = numRows;
				while(_g3 < _g21) {
					var j1 = _g3++;
					var _g4 = j1;
					var _g5 = this.relVels;
					_g5[_g4] = _g5[_g4] + dImpulseM * invMass[i1][j1];
				}
			}
		}
		var solved = false;
		var _g12 = 0;
		var _g6 = this.boundaryBuilder.numBoundaries;
		while(_g12 < _g6) {
			var i2 = _g12++;
			var idx = this.velBoundarySelector.indices[i2];
			var b = this.boundaryBuilder.boundaries[idx];
			if(b.computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,1,false)) {
				var _g31 = 0;
				var _g22 = numRows;
				while(_g31 < _g22) {
					var j2 = _g31++;
					var row2 = this.info.rows[j2];
					var imp2 = row2.impulse;
					var dimp = this.dImpulses[j2];
					imp2.impulse += dimp;
					var _g41 = j2;
					var _g51 = this.dTotalImpulses;
					_g51[_g41] = _g51[_g41] + dimp;
				}
				var impulses = this.dTotalImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv11;
				var lv1X1;
				var lv1Y1;
				var lv1Z1;
				var lv21;
				var lv2X1;
				var lv2Y1;
				var lv2Z1;
				var av11;
				var av1X1;
				var av1Y1;
				var av1Z1;
				var av21;
				var av2X1;
				var av2Y1;
				var av2Z1;
				lv1X1 = this._b1._velX;
				lv1Y1 = this._b1._velY;
				lv1Z1 = this._b1._velZ;
				lv2X1 = this._b2._velX;
				lv2Y1 = this._b2._velY;
				lv2Z1 = this._b2._velZ;
				av1X1 = this._b1._angVelX;
				av1Y1 = this._b1._angVelY;
				av1Z1 = this._b1._angVelZ;
				av2X1 = this._b2._angVelX;
				av2Y1 = this._b2._angVelY;
				av2Z1 = this._b2._angVelZ;
				var _g13 = 0;
				var _g7 = this.info.numRows;
				while(_g13 < _g7) {
					var i3 = _g13++;
					var row3 = this.info.rows[i3];
					var j3 = row3.jacobian;
					var md1 = this.massData[i3];
					var imp3 = impulses[i3];
					if((j3.flag & 1) != 0) {
						lv1X1 += md1.invMLin1X * imp3;
						lv1Y1 += md1.invMLin1Y * imp3;
						lv1Z1 += md1.invMLin1Z * imp3;
						lv2X1 += md1.invMLin2X * -imp3;
						lv2Y1 += md1.invMLin2Y * -imp3;
						lv2Z1 += md1.invMLin2Z * -imp3;
						linearSet = true;
					}
					if((j3.flag & 2) != 0) {
						av1X1 += md1.invMAng1X * imp3;
						av1Y1 += md1.invMAng1Y * imp3;
						av1Z1 += md1.invMAng1Z * imp3;
						av2X1 += md1.invMAng2X * -imp3;
						av2Y1 += md1.invMAng2Y * -imp3;
						av2Z1 += md1.invMAng2Z * -imp3;
						angularSet = true;
					}
				}
				if(linearSet) {
					this._b1._velX = lv1X1;
					this._b1._velY = lv1Y1;
					this._b1._velZ = lv1Z1;
					this._b2._velX = lv2X1;
					this._b2._velY = lv2Y1;
					this._b2._velZ = lv2Z1;
				}
				if(angularSet) {
					this._b1._angVelX = av1X1;
					this._b1._angVelY = av1Y1;
					this._b1._angVelZ = av1Z1;
					this._b2._angVelX = av2X1;
					this._b2._angVelY = av2Y1;
					this._b2._angVelZ = av2Z1;
				}
				var _this = this.velBoundarySelector;
				var i4 = 0;
				while(_this.indices[i4] != idx) ++i4;
				while(i4 > 0) {
					var tmp = _this.indices[i4];
					_this.indices[i4] = _this.indices[i4 - 1];
					_this.indices[i4 - 1] = tmp;
					--i4;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			console.log("../../workspace_as3/OimoPhysics/src/oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx:338:","could not find solution. (velocity)");
			return;
		}
	}
	,postSolveVelocity: function(timeStep) {
		var lin;
		var linX;
		var linY;
		var linZ;
		var ang;
		var angX;
		var angY;
		var angZ;
		linX = 0;
		linY = 0;
		linZ = 0;
		angX = 0;
		angY = 0;
		angZ = 0;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if((j.flag & 1) != 0) {
				linX += j.lin1X * imp.impulse;
				linY += j.lin1Y * imp.impulse;
				linZ += j.lin1Z * imp.impulse;
			} else if((j.flag & 2) != 0) {
				angX += j.ang1X * imp.impulse;
				angY += j.ang1Y * imp.impulse;
				angZ += j.ang1Z * imp.impulse;
			}
		}
		this.joint._appliedForceX = linX * timeStep.invDt;
		this.joint._appliedForceY = linY * timeStep.invDt;
		this.joint._appliedForceZ = linZ * timeStep.invDt;
		this.joint._appliedTorqueX = angX * timeStep.invDt;
		this.joint._appliedTorqueY = angY * timeStep.invDt;
		this.joint._appliedTorqueZ = angZ * timeStep.invDt;
	}
	,preSolvePosition: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this2 = this.posBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g1 = 0;
		var _g = _this2.n;
		while(_g1 < _g) {
			var i = _g1++;
			var idx = _this2.indices[i];
			if(idx < size) {
				_this2.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this2.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this2.indices;
		_this2.indices = _this2.tmpIndices;
		_this2.tmpIndices = tmp;
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.info.rows[i1].impulse.impulseP = 0;
		}
	}
	,solvePositionSplitImpulse: function() {
		var numRows = this.info.numRows;
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g1 = 0;
		var _g = numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var relVel = 0;
			relVel += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			relVel -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			relVel += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			relVel -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			this.relVels[i] = relVel;
			this.impulses[i] = imp.impulseP;
		}
		var solved = false;
		var _g11 = 0;
		var _g2 = this.boundaryBuilder.numBoundaries;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var idx = this.posBoundarySelector.indices[i1];
			var b = this.boundaryBuilder.boundaries[idx];
			if(b.computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,oimo_common_Setting.positionSplitImpulseBaumgarte,false)) {
				var _g3 = 0;
				var _g21 = numRows;
				while(_g3 < _g21) {
					var j1 = _g3++;
					var row1 = this.info.rows[j1];
					var imp1 = row1.impulse;
					var dimp = this.dImpulses[j1];
					imp1.impulseP += dimp;
				}
				var impulses = this.dImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv11;
				var lv1X1;
				var lv1Y1;
				var lv1Z1;
				var lv21;
				var lv2X1;
				var lv2Y1;
				var lv2Z1;
				var av11;
				var av1X1;
				var av1Y1;
				var av1Z1;
				var av21;
				var av2X1;
				var av2Y1;
				var av2Z1;
				lv1X1 = this._b1._pseudoVelX;
				lv1Y1 = this._b1._pseudoVelY;
				lv1Z1 = this._b1._pseudoVelZ;
				lv2X1 = this._b2._pseudoVelX;
				lv2Y1 = this._b2._pseudoVelY;
				lv2Z1 = this._b2._pseudoVelZ;
				av1X1 = this._b1._angPseudoVelX;
				av1Y1 = this._b1._angPseudoVelY;
				av1Z1 = this._b1._angPseudoVelZ;
				av2X1 = this._b2._angPseudoVelX;
				av2Y1 = this._b2._angPseudoVelY;
				av2Z1 = this._b2._angPseudoVelZ;
				var _g12 = 0;
				var _g4 = this.info.numRows;
				while(_g12 < _g4) {
					var i2 = _g12++;
					var row2 = this.info.rows[i2];
					var j2 = row2.jacobian;
					var md = this.massData[i2];
					var imp2 = impulses[i2];
					if((j2.flag & 1) != 0) {
						lv1X1 += md.invMLin1X * imp2;
						lv1Y1 += md.invMLin1Y * imp2;
						lv1Z1 += md.invMLin1Z * imp2;
						lv2X1 += md.invMLin2X * -imp2;
						lv2Y1 += md.invMLin2Y * -imp2;
						lv2Z1 += md.invMLin2Z * -imp2;
						linearSet = true;
					}
					if((j2.flag & 2) != 0) {
						av1X1 += md.invMAng1X * imp2;
						av1Y1 += md.invMAng1Y * imp2;
						av1Z1 += md.invMAng1Z * imp2;
						av2X1 += md.invMAng2X * -imp2;
						av2Y1 += md.invMAng2Y * -imp2;
						av2Z1 += md.invMAng2Z * -imp2;
						angularSet = true;
					}
				}
				if(linearSet) {
					this._b1._pseudoVelX = lv1X1;
					this._b1._pseudoVelY = lv1Y1;
					this._b1._pseudoVelZ = lv1Z1;
					this._b2._pseudoVelX = lv2X1;
					this._b2._pseudoVelY = lv2Y1;
					this._b2._pseudoVelZ = lv2Z1;
				}
				if(angularSet) {
					this._b1._angPseudoVelX = av1X1;
					this._b1._angPseudoVelY = av1Y1;
					this._b1._angPseudoVelZ = av1Z1;
					this._b2._angPseudoVelX = av2X1;
					this._b2._angPseudoVelY = av2Y1;
					this._b2._angPseudoVelZ = av2Z1;
				}
				var _this = this.posBoundarySelector;
				var i3 = 0;
				while(_this.indices[i3] != idx) ++i3;
				while(i3 > 0) {
					var tmp = _this.indices[i3];
					_this.indices[i3] = _this.indices[i3 - 1];
					_this.indices[i3 - 1] = tmp;
					--i3;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			console.log("../../workspace_as3/OimoPhysics/src/oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx:454:","could not find solution. (split impulse)");
			return;
		}
	}
	,solvePositionNgs: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this2 = this.posBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g1 = 0;
		var _g = _this2.n;
		while(_g1 < _g) {
			var i = _g1++;
			var idx = _this2.indices[i];
			if(idx < size) {
				_this2.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this2.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this2.indices;
		_this2.indices = _this2.tmpIndices;
		_this2.tmpIndices = tmp;
		var numRows = this.info.numRows;
		var _g11 = 0;
		var _g2 = numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var row = this.info.rows[i1];
			var imp = row.impulse;
			var j = row.jacobian;
			this.relVels[i1] = 0;
			this.impulses[i1] = imp.impulseP;
		}
		var solved = false;
		var _g12 = 0;
		var _g3 = this.boundaryBuilder.numBoundaries;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var idx1 = this.posBoundarySelector.indices[i2];
			var b = this.boundaryBuilder.boundaries[idx1];
			if(b.computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,oimo_common_Setting.positionNgsBaumgarte,false)) {
				var _g31 = 0;
				var _g21 = numRows;
				while(_g31 < _g21) {
					var j1 = _g31++;
					var row1 = this.info.rows[j1];
					var imp1 = row1.impulse;
					var dimp = this.dImpulses[j1];
					imp1.impulseP += dimp;
				}
				var impulses = this.dImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1;
				var av1X;
				var av1Y;
				var av1Z;
				var av2;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = 0;
				lv1Y = 0;
				lv1Z = 0;
				lv2X = 0;
				lv2Y = 0;
				lv2Z = 0;
				av1X = 0;
				av1Y = 0;
				av1Z = 0;
				av2X = 0;
				av2Y = 0;
				av2Z = 0;
				var _g13 = 0;
				var _g4 = this.info.numRows;
				while(_g13 < _g4) {
					var i3 = _g13++;
					var row2 = this.info.rows[i3];
					var j2 = row2.jacobian;
					var md = this.massData[i3];
					var imp2 = impulses[i3];
					if((j2.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp2;
						lv1Y += md.invMLin1Y * imp2;
						lv1Z += md.invMLin1Z * imp2;
						lv2X += md.invMLin2X * -imp2;
						lv2Y += md.invMLin2Y * -imp2;
						lv2Z += md.invMLin2Z * -imp2;
						linearSet = true;
					}
					if((j2.flag & 2) != 0) {
						av1X += md.invMAng1X * imp2;
						av1Y += md.invMAng1Y * imp2;
						av1Z += md.invMAng1Z * imp2;
						av2X += md.invMAng2X * -imp2;
						av2Y += md.invMAng2Y * -imp2;
						av2Z += md.invMAng2Z * -imp2;
						angularSet = true;
					}
				}
				if(linearSet) {
					var _this3 = this._b1;
					_this3._transform._positionX += lv1X;
					_this3._transform._positionY += lv1Y;
					_this3._transform._positionZ += lv1Z;
					var _this4 = this._b2;
					_this4._transform._positionX += lv2X;
					_this4._transform._positionY += lv2Y;
					_this4._transform._positionZ += lv2Z;
				}
				if(angularSet) {
					var _this5 = this._b1;
					var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
					var halfTheta = theta * 0.5;
					var rotationToSinAxisFactor;
					var cosHalfTheta;
					if(halfTheta < 0.5) {
						var ht2 = halfTheta * halfTheta;
						rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
						cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
					} else {
						rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
						cosHalfTheta = Math.cos(halfTheta);
					}
					var sinAxis;
					var sinAxisX;
					var sinAxisY;
					var sinAxisZ;
					sinAxisX = av1X * rotationToSinAxisFactor;
					sinAxisY = av1Y * rotationToSinAxisFactor;
					sinAxisZ = av1Z * rotationToSinAxisFactor;
					var dq;
					var dqX;
					var dqY;
					var dqZ;
					var dqW;
					dqX = sinAxisX;
					dqY = sinAxisY;
					dqZ = sinAxisZ;
					dqW = cosHalfTheta;
					var q;
					var qX;
					var qY;
					var qZ;
					var qW;
					var e00 = _this5._transform._rotation00;
					var e11 = _this5._transform._rotation11;
					var e22 = _this5._transform._rotation22;
					var t = e00 + e11 + e22;
					var s;
					if(t > 0) {
						s = Math.sqrt(t + 1);
						qW = 0.5 * s;
						s = 0.5 / s;
						qX = (_this5._transform._rotation21 - _this5._transform._rotation12) * s;
						qY = (_this5._transform._rotation02 - _this5._transform._rotation20) * s;
						qZ = (_this5._transform._rotation10 - _this5._transform._rotation01) * s;
					} else if(e00 > e11) {
						if(e00 > e22) {
							s = Math.sqrt(e00 - e11 - e22 + 1);
							qX = 0.5 * s;
							s = 0.5 / s;
							qY = (_this5._transform._rotation01 + _this5._transform._rotation10) * s;
							qZ = (_this5._transform._rotation02 + _this5._transform._rotation20) * s;
							qW = (_this5._transform._rotation21 - _this5._transform._rotation12) * s;
						} else {
							s = Math.sqrt(e22 - e00 - e11 + 1);
							qZ = 0.5 * s;
							s = 0.5 / s;
							qX = (_this5._transform._rotation02 + _this5._transform._rotation20) * s;
							qY = (_this5._transform._rotation12 + _this5._transform._rotation21) * s;
							qW = (_this5._transform._rotation10 - _this5._transform._rotation01) * s;
						}
					} else if(e11 > e22) {
						s = Math.sqrt(e11 - e22 - e00 + 1);
						qY = 0.5 * s;
						s = 0.5 / s;
						qX = (_this5._transform._rotation01 + _this5._transform._rotation10) * s;
						qZ = (_this5._transform._rotation12 + _this5._transform._rotation21) * s;
						qW = (_this5._transform._rotation02 - _this5._transform._rotation20) * s;
					} else {
						s = Math.sqrt(e22 - e00 - e11 + 1);
						qZ = 0.5 * s;
						s = 0.5 / s;
						qX = (_this5._transform._rotation02 + _this5._transform._rotation20) * s;
						qY = (_this5._transform._rotation12 + _this5._transform._rotation21) * s;
						qW = (_this5._transform._rotation10 - _this5._transform._rotation01) * s;
					}
					qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
					qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
					qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
					qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
					var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
					if(l > 1e-32) {
						l = 1 / Math.sqrt(l);
					}
					qX *= l;
					qY *= l;
					qZ *= l;
					qW *= l;
					var x = qX;
					var y = qY;
					var z = qZ;
					var w = qW;
					var x2 = 2 * x;
					var y2 = 2 * y;
					var z2 = 2 * z;
					var xx = x * x2;
					var yy = y * y2;
					var zz = z * z2;
					var xy = x * y2;
					var yz = y * z2;
					var xz = x * z2;
					var wx = w * x2;
					var wy = w * y2;
					var wz = w * z2;
					_this5._transform._rotation00 = 1 - yy - zz;
					_this5._transform._rotation01 = xy - wz;
					_this5._transform._rotation02 = xz + wy;
					_this5._transform._rotation10 = xy + wz;
					_this5._transform._rotation11 = 1 - xx - zz;
					_this5._transform._rotation12 = yz - wx;
					_this5._transform._rotation20 = xz - wy;
					_this5._transform._rotation21 = yz + wx;
					_this5._transform._rotation22 = 1 - xx - yy;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = _this5._transform._rotation00 * _this5._invLocalInertia00 + _this5._transform._rotation01 * _this5._invLocalInertia10 + _this5._transform._rotation02 * _this5._invLocalInertia20;
					__tmp__01 = _this5._transform._rotation00 * _this5._invLocalInertia01 + _this5._transform._rotation01 * _this5._invLocalInertia11 + _this5._transform._rotation02 * _this5._invLocalInertia21;
					__tmp__02 = _this5._transform._rotation00 * _this5._invLocalInertia02 + _this5._transform._rotation01 * _this5._invLocalInertia12 + _this5._transform._rotation02 * _this5._invLocalInertia22;
					__tmp__10 = _this5._transform._rotation10 * _this5._invLocalInertia00 + _this5._transform._rotation11 * _this5._invLocalInertia10 + _this5._transform._rotation12 * _this5._invLocalInertia20;
					__tmp__11 = _this5._transform._rotation10 * _this5._invLocalInertia01 + _this5._transform._rotation11 * _this5._invLocalInertia11 + _this5._transform._rotation12 * _this5._invLocalInertia21;
					__tmp__12 = _this5._transform._rotation10 * _this5._invLocalInertia02 + _this5._transform._rotation11 * _this5._invLocalInertia12 + _this5._transform._rotation12 * _this5._invLocalInertia22;
					__tmp__20 = _this5._transform._rotation20 * _this5._invLocalInertia00 + _this5._transform._rotation21 * _this5._invLocalInertia10 + _this5._transform._rotation22 * _this5._invLocalInertia20;
					__tmp__21 = _this5._transform._rotation20 * _this5._invLocalInertia01 + _this5._transform._rotation21 * _this5._invLocalInertia11 + _this5._transform._rotation22 * _this5._invLocalInertia21;
					__tmp__22 = _this5._transform._rotation20 * _this5._invLocalInertia02 + _this5._transform._rotation21 * _this5._invLocalInertia12 + _this5._transform._rotation22 * _this5._invLocalInertia22;
					_this5._invInertia00 = __tmp__00;
					_this5._invInertia01 = __tmp__01;
					_this5._invInertia02 = __tmp__02;
					_this5._invInertia10 = __tmp__10;
					_this5._invInertia11 = __tmp__11;
					_this5._invInertia12 = __tmp__12;
					_this5._invInertia20 = __tmp__20;
					_this5._invInertia21 = __tmp__21;
					_this5._invInertia22 = __tmp__22;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = _this5._invInertia00 * _this5._transform._rotation00 + _this5._invInertia01 * _this5._transform._rotation01 + _this5._invInertia02 * _this5._transform._rotation02;
					__tmp__011 = _this5._invInertia00 * _this5._transform._rotation10 + _this5._invInertia01 * _this5._transform._rotation11 + _this5._invInertia02 * _this5._transform._rotation12;
					__tmp__021 = _this5._invInertia00 * _this5._transform._rotation20 + _this5._invInertia01 * _this5._transform._rotation21 + _this5._invInertia02 * _this5._transform._rotation22;
					__tmp__101 = _this5._invInertia10 * _this5._transform._rotation00 + _this5._invInertia11 * _this5._transform._rotation01 + _this5._invInertia12 * _this5._transform._rotation02;
					__tmp__111 = _this5._invInertia10 * _this5._transform._rotation10 + _this5._invInertia11 * _this5._transform._rotation11 + _this5._invInertia12 * _this5._transform._rotation12;
					__tmp__121 = _this5._invInertia10 * _this5._transform._rotation20 + _this5._invInertia11 * _this5._transform._rotation21 + _this5._invInertia12 * _this5._transform._rotation22;
					__tmp__201 = _this5._invInertia20 * _this5._transform._rotation00 + _this5._invInertia21 * _this5._transform._rotation01 + _this5._invInertia22 * _this5._transform._rotation02;
					__tmp__211 = _this5._invInertia20 * _this5._transform._rotation10 + _this5._invInertia21 * _this5._transform._rotation11 + _this5._invInertia22 * _this5._transform._rotation12;
					__tmp__221 = _this5._invInertia20 * _this5._transform._rotation20 + _this5._invInertia21 * _this5._transform._rotation21 + _this5._invInertia22 * _this5._transform._rotation22;
					_this5._invInertia00 = __tmp__001;
					_this5._invInertia01 = __tmp__011;
					_this5._invInertia02 = __tmp__021;
					_this5._invInertia10 = __tmp__101;
					_this5._invInertia11 = __tmp__111;
					_this5._invInertia12 = __tmp__121;
					_this5._invInertia20 = __tmp__201;
					_this5._invInertia21 = __tmp__211;
					_this5._invInertia22 = __tmp__221;
					_this5._invInertia00 *= _this5._rotFactor.x;
					_this5._invInertia01 *= _this5._rotFactor.x;
					_this5._invInertia02 *= _this5._rotFactor.x;
					_this5._invInertia10 *= _this5._rotFactor.y;
					_this5._invInertia11 *= _this5._rotFactor.y;
					_this5._invInertia12 *= _this5._rotFactor.y;
					_this5._invInertia20 *= _this5._rotFactor.z;
					_this5._invInertia21 *= _this5._rotFactor.z;
					_this5._invInertia22 *= _this5._rotFactor.z;
					var _this6 = this._b2;
					var theta1 = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
					var halfTheta1 = theta1 * 0.5;
					var rotationToSinAxisFactor1;
					var cosHalfTheta1;
					if(halfTheta1 < 0.5) {
						var ht21 = halfTheta1 * halfTheta1;
						rotationToSinAxisFactor1 = 0.5 * (1 - ht21 * 0.16666666666666666 + ht21 * ht21 * 0.0083333333333333332);
						cosHalfTheta1 = 1 - ht21 * 0.5 + ht21 * ht21 * 0.041666666666666664;
					} else {
						rotationToSinAxisFactor1 = Math.sin(halfTheta1) / theta1;
						cosHalfTheta1 = Math.cos(halfTheta1);
					}
					var sinAxis1;
					var sinAxisX1;
					var sinAxisY1;
					var sinAxisZ1;
					sinAxisX1 = av2X * rotationToSinAxisFactor1;
					sinAxisY1 = av2Y * rotationToSinAxisFactor1;
					sinAxisZ1 = av2Z * rotationToSinAxisFactor1;
					var dq1;
					var dqX1;
					var dqY1;
					var dqZ1;
					var dqW1;
					dqX1 = sinAxisX1;
					dqY1 = sinAxisY1;
					dqZ1 = sinAxisZ1;
					dqW1 = cosHalfTheta1;
					var q1;
					var qX1;
					var qY1;
					var qZ1;
					var qW1;
					var e001 = _this6._transform._rotation00;
					var e111 = _this6._transform._rotation11;
					var e221 = _this6._transform._rotation22;
					var t1 = e001 + e111 + e221;
					var s1;
					if(t1 > 0) {
						s1 = Math.sqrt(t1 + 1);
						qW1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this6._transform._rotation21 - _this6._transform._rotation12) * s1;
						qY1 = (_this6._transform._rotation02 - _this6._transform._rotation20) * s1;
						qZ1 = (_this6._transform._rotation10 - _this6._transform._rotation01) * s1;
					} else if(e001 > e111) {
						if(e001 > e221) {
							s1 = Math.sqrt(e001 - e111 - e221 + 1);
							qX1 = 0.5 * s1;
							s1 = 0.5 / s1;
							qY1 = (_this6._transform._rotation01 + _this6._transform._rotation10) * s1;
							qZ1 = (_this6._transform._rotation02 + _this6._transform._rotation20) * s1;
							qW1 = (_this6._transform._rotation21 - _this6._transform._rotation12) * s1;
						} else {
							s1 = Math.sqrt(e221 - e001 - e111 + 1);
							qZ1 = 0.5 * s1;
							s1 = 0.5 / s1;
							qX1 = (_this6._transform._rotation02 + _this6._transform._rotation20) * s1;
							qY1 = (_this6._transform._rotation12 + _this6._transform._rotation21) * s1;
							qW1 = (_this6._transform._rotation10 - _this6._transform._rotation01) * s1;
						}
					} else if(e111 > e221) {
						s1 = Math.sqrt(e111 - e221 - e001 + 1);
						qY1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this6._transform._rotation01 + _this6._transform._rotation10) * s1;
						qZ1 = (_this6._transform._rotation12 + _this6._transform._rotation21) * s1;
						qW1 = (_this6._transform._rotation02 - _this6._transform._rotation20) * s1;
					} else {
						s1 = Math.sqrt(e221 - e001 - e111 + 1);
						qZ1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this6._transform._rotation02 + _this6._transform._rotation20) * s1;
						qY1 = (_this6._transform._rotation12 + _this6._transform._rotation21) * s1;
						qW1 = (_this6._transform._rotation10 - _this6._transform._rotation01) * s1;
					}
					qX1 = dqW1 * qX1 + dqX1 * qW1 + dqY1 * qZ1 - dqZ1 * qY1;
					qY1 = dqW1 * qY1 - dqX1 * qZ1 + dqY1 * qW1 + dqZ1 * qX1;
					qZ1 = dqW1 * qZ1 + dqX1 * qY1 - dqY1 * qX1 + dqZ1 * qW1;
					qW1 = dqW1 * qW1 - dqX1 * qX1 - dqY1 * qY1 - dqZ1 * qZ1;
					var l1 = qX1 * qX1 + qY1 * qY1 + qZ1 * qZ1 + qW1 * qW1;
					if(l1 > 1e-32) {
						l1 = 1 / Math.sqrt(l1);
					}
					qX1 *= l1;
					qY1 *= l1;
					qZ1 *= l1;
					qW1 *= l1;
					var x1 = qX1;
					var y1 = qY1;
					var z1 = qZ1;
					var w1 = qW1;
					var x21 = 2 * x1;
					var y21 = 2 * y1;
					var z21 = 2 * z1;
					var xx1 = x1 * x21;
					var yy1 = y1 * y21;
					var zz1 = z1 * z21;
					var xy1 = x1 * y21;
					var yz1 = y1 * z21;
					var xz1 = x1 * z21;
					var wx1 = w1 * x21;
					var wy1 = w1 * y21;
					var wz1 = w1 * z21;
					_this6._transform._rotation00 = 1 - yy1 - zz1;
					_this6._transform._rotation01 = xy1 - wz1;
					_this6._transform._rotation02 = xz1 + wy1;
					_this6._transform._rotation10 = xy1 + wz1;
					_this6._transform._rotation11 = 1 - xx1 - zz1;
					_this6._transform._rotation12 = yz1 - wx1;
					_this6._transform._rotation20 = xz1 - wy1;
					_this6._transform._rotation21 = yz1 + wx1;
					_this6._transform._rotation22 = 1 - xx1 - yy1;
					var __tmp__002;
					var __tmp__012;
					var __tmp__022;
					var __tmp__102;
					var __tmp__112;
					var __tmp__122;
					var __tmp__202;
					var __tmp__212;
					var __tmp__222;
					__tmp__002 = _this6._transform._rotation00 * _this6._invLocalInertia00 + _this6._transform._rotation01 * _this6._invLocalInertia10 + _this6._transform._rotation02 * _this6._invLocalInertia20;
					__tmp__012 = _this6._transform._rotation00 * _this6._invLocalInertia01 + _this6._transform._rotation01 * _this6._invLocalInertia11 + _this6._transform._rotation02 * _this6._invLocalInertia21;
					__tmp__022 = _this6._transform._rotation00 * _this6._invLocalInertia02 + _this6._transform._rotation01 * _this6._invLocalInertia12 + _this6._transform._rotation02 * _this6._invLocalInertia22;
					__tmp__102 = _this6._transform._rotation10 * _this6._invLocalInertia00 + _this6._transform._rotation11 * _this6._invLocalInertia10 + _this6._transform._rotation12 * _this6._invLocalInertia20;
					__tmp__112 = _this6._transform._rotation10 * _this6._invLocalInertia01 + _this6._transform._rotation11 * _this6._invLocalInertia11 + _this6._transform._rotation12 * _this6._invLocalInertia21;
					__tmp__122 = _this6._transform._rotation10 * _this6._invLocalInertia02 + _this6._transform._rotation11 * _this6._invLocalInertia12 + _this6._transform._rotation12 * _this6._invLocalInertia22;
					__tmp__202 = _this6._transform._rotation20 * _this6._invLocalInertia00 + _this6._transform._rotation21 * _this6._invLocalInertia10 + _this6._transform._rotation22 * _this6._invLocalInertia20;
					__tmp__212 = _this6._transform._rotation20 * _this6._invLocalInertia01 + _this6._transform._rotation21 * _this6._invLocalInertia11 + _this6._transform._rotation22 * _this6._invLocalInertia21;
					__tmp__222 = _this6._transform._rotation20 * _this6._invLocalInertia02 + _this6._transform._rotation21 * _this6._invLocalInertia12 + _this6._transform._rotation22 * _this6._invLocalInertia22;
					_this6._invInertia00 = __tmp__002;
					_this6._invInertia01 = __tmp__012;
					_this6._invInertia02 = __tmp__022;
					_this6._invInertia10 = __tmp__102;
					_this6._invInertia11 = __tmp__112;
					_this6._invInertia12 = __tmp__122;
					_this6._invInertia20 = __tmp__202;
					_this6._invInertia21 = __tmp__212;
					_this6._invInertia22 = __tmp__222;
					var __tmp__003;
					var __tmp__013;
					var __tmp__023;
					var __tmp__103;
					var __tmp__113;
					var __tmp__123;
					var __tmp__203;
					var __tmp__213;
					var __tmp__223;
					__tmp__003 = _this6._invInertia00 * _this6._transform._rotation00 + _this6._invInertia01 * _this6._transform._rotation01 + _this6._invInertia02 * _this6._transform._rotation02;
					__tmp__013 = _this6._invInertia00 * _this6._transform._rotation10 + _this6._invInertia01 * _this6._transform._rotation11 + _this6._invInertia02 * _this6._transform._rotation12;
					__tmp__023 = _this6._invInertia00 * _this6._transform._rotation20 + _this6._invInertia01 * _this6._transform._rotation21 + _this6._invInertia02 * _this6._transform._rotation22;
					__tmp__103 = _this6._invInertia10 * _this6._transform._rotation00 + _this6._invInertia11 * _this6._transform._rotation01 + _this6._invInertia12 * _this6._transform._rotation02;
					__tmp__113 = _this6._invInertia10 * _this6._transform._rotation10 + _this6._invInertia11 * _this6._transform._rotation11 + _this6._invInertia12 * _this6._transform._rotation12;
					__tmp__123 = _this6._invInertia10 * _this6._transform._rotation20 + _this6._invInertia11 * _this6._transform._rotation21 + _this6._invInertia12 * _this6._transform._rotation22;
					__tmp__203 = _this6._invInertia20 * _this6._transform._rotation00 + _this6._invInertia21 * _this6._transform._rotation01 + _this6._invInertia22 * _this6._transform._rotation02;
					__tmp__213 = _this6._invInertia20 * _this6._transform._rotation10 + _this6._invInertia21 * _this6._transform._rotation11 + _this6._invInertia22 * _this6._transform._rotation12;
					__tmp__223 = _this6._invInertia20 * _this6._transform._rotation20 + _this6._invInertia21 * _this6._transform._rotation21 + _this6._invInertia22 * _this6._transform._rotation22;
					_this6._invInertia00 = __tmp__003;
					_this6._invInertia01 = __tmp__013;
					_this6._invInertia02 = __tmp__023;
					_this6._invInertia10 = __tmp__103;
					_this6._invInertia11 = __tmp__113;
					_this6._invInertia12 = __tmp__123;
					_this6._invInertia20 = __tmp__203;
					_this6._invInertia21 = __tmp__213;
					_this6._invInertia22 = __tmp__223;
					_this6._invInertia00 *= _this6._rotFactor.x;
					_this6._invInertia01 *= _this6._rotFactor.x;
					_this6._invInertia02 *= _this6._rotFactor.x;
					_this6._invInertia10 *= _this6._rotFactor.y;
					_this6._invInertia11 *= _this6._rotFactor.y;
					_this6._invInertia12 *= _this6._rotFactor.y;
					_this6._invInertia20 *= _this6._rotFactor.z;
					_this6._invInertia21 *= _this6._rotFactor.z;
					_this6._invInertia22 *= _this6._rotFactor.z;
				}
				var _this7 = this.posBoundarySelector;
				var i4 = 0;
				while(_this7.indices[i4] != idx1) ++i4;
				while(i4 > 0) {
					var tmp1 = _this7.indices[i4];
					_this7.indices[i4] = _this7.indices[i4 - 1];
					_this7.indices[i4 - 1] = tmp1;
					--i4;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			console.log("../../workspace_as3/OimoPhysics/src/oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx:506:","could not find solution. (NGS)");
			return;
		}
	}
	,postSolve: function() {
		this.joint._syncAnchors();
		this.joint._checkDestruction();
	}
});
var oimo_dynamics_constraint_solver_direct_MassMatrix = function(size) {
	this._size = size;
	var this1 = new Array(this._size);
	this.tmpMatrix = this1;
	var this2 = new Array(this._size);
	this._invMass = this2;
	var this3 = new Array(this._size);
	this._invMassWithoutCfm = this3;
	var _g1 = 0;
	var _g = this._size;
	while(_g1 < _g) {
		var i = _g1++;
		var this4 = this.tmpMatrix;
		var this5 = new Array(this._size);
		this4[i] = this5;
		var this6 = this._invMass;
		var this7 = new Array(this._size);
		this6[i] = this7;
		var this8 = this._invMassWithoutCfm;
		var this9 = new Array(this._size);
		this8[i] = this9;
		var _g3 = 0;
		var _g2 = this._size;
		while(_g3 < _g2) {
			var j = _g3++;
			this.tmpMatrix[i][j] = 0;
			this._invMass[i][j] = 0;
			this._invMassWithoutCfm[i][j] = 0;
		}
	}
	this._maxSubmatrixId = 1 << this._size;
	var this10 = new Array(this._maxSubmatrixId);
	this._cacheComputed = this10;
	var this11 = new Array(this._maxSubmatrixId);
	this._cachedSubmatrices = this11;
	var _g11 = 0;
	var _g4 = this._maxSubmatrixId;
	while(_g11 < _g4) {
		var i1 = _g11++;
		var t = i1;
		t = (t & 85) + (t >> 1 & 85);
		t = (t & 51) + (t >> 2 & 51);
		t = (t & 15) + (t >> 4 & 15);
		var matrixSize = t;
		var this12 = new Array(matrixSize);
		var subMatrix = this12;
		var _g31 = 0;
		var _g21 = matrixSize;
		while(_g31 < _g21) {
			var j1 = _g31++;
			var this13 = new Array(matrixSize);
			subMatrix[j1] = this13;
			var _g5 = 0;
			var _g41 = matrixSize;
			while(_g5 < _g41) {
				var k = _g5++;
				subMatrix[j1][k] = 0;
			}
		}
		this._cacheComputed[i1] = false;
		this._cachedSubmatrices[i1] = subMatrix;
	}
};
oimo_dynamics_constraint_solver_direct_MassMatrix.__name__ = true;
oimo_dynamics_constraint_solver_direct_MassMatrix.prototype = {
	computeSubmatrix: function(id,indices,size) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			var ii = indices[i];
			var _g3 = 0;
			var _g2 = size;
			while(_g3 < _g2) {
				var j = _g3++;
				this.tmpMatrix[i][j] = this._invMass[ii][indices[j]];
			}
		}
		var src = this.tmpMatrix;
		var dst = this._cachedSubmatrices[id];
		var srci;
		var dsti;
		var srcj;
		var dstj;
		var diag;
		switch(size) {
		case 4:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] = srci[1] * diag;
			srci[2] = srci[2] * diag;
			srci[3] = srci[3] * diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] = dsti[0] * diag;
			srci[2] = srci[2] * diag;
			srci[3] = srci[3] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			srci[3] = srci[3] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			dsti[2] = dsti[2] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			dstj[2] = dstj[2] - dsti[2] * srcj[3];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			break;
		case 5:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] = srci[1] * diag;
			srci[2] = srci[2] * diag;
			srci[3] = srci[3] * diag;
			srci[4] = srci[4] * diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] = dsti[0] * diag;
			srci[2] = srci[2] * diag;
			srci[3] = srci[3] * diag;
			srci[4] = srci[4] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			srci[3] = srci[3] * diag;
			srci[4] = srci[4] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			dsti[2] = dsti[2] * diag;
			srci[4] = srci[4] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			dstj[2] = dstj[2] - dsti[2] * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			dstj[2] = dstj[2] - dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srci = src[4];
			dsti = dst[4];
			diag = 1 / srci[4];
			dsti[4] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			dsti[2] = dsti[2] * diag;
			dsti[3] = dsti[3] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			dstj[2] = dstj[2] - dsti[2] * srcj[4];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			dstj[2] = dstj[2] - dsti[2] * srcj[4];
			dstj[3] = dstj[3] - dsti[3] * srcj[4];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			dsti = dst[4];
			dst[0][4] = dsti[0];
			dst[1][4] = dsti[1];
			dst[2][4] = dsti[2];
			dst[3][4] = dsti[3];
			break;
		case 6:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] = srci[1] * diag;
			srci[2] = srci[2] * diag;
			srci[3] = srci[3] * diag;
			srci[4] = srci[4] * diag;
			srci[5] = srci[5] * diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj[5] = srcj[5] - srci[5] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj[5] = srcj[5] - srci[5] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj[5] = srcj[5] - srci[5] * srcj[0];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj[5] = srcj[5] - srci[5] * srcj[0];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = -diag * srcj[0];
			srcj[1] = srcj[1] - srci[1] * srcj[0];
			srcj[2] = srcj[2] - srci[2] * srcj[0];
			srcj[3] = srcj[3] - srci[3] * srcj[0];
			srcj[4] = srcj[4] - srci[4] * srcj[0];
			srcj[5] = srcj[5] - srci[5] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] = dsti[0] * diag;
			srci[2] = srci[2] * diag;
			srci[3] = srci[3] * diag;
			srci[4] = srci[4] * diag;
			srci[5] = srci[5] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj[5] = srcj[5] - srci[5] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj[5] = srcj[5] - srci[5] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj[5] = srcj[5] - srci[5] * srcj[1];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj[5] = srcj[5] - srci[5] * srcj[1];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = dstj[0] - dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] = srcj[2] - srci[2] * srcj[1];
			srcj[3] = srcj[3] - srci[3] * srcj[1];
			srcj[4] = srcj[4] - srci[4] * srcj[1];
			srcj[5] = srcj[5] - srci[5] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			srci[3] = srci[3] * diag;
			srci[4] = srci[4] * diag;
			srci[5] = srci[5] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj[5] = srcj[5] - srci[5] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj[5] = srcj[5] - srci[5] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj[5] = srcj[5] - srci[5] * srcj[2];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj[5] = srcj[5] - srci[5] * srcj[2];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = dstj[0] - dsti[0] * srcj[2];
			dstj[1] = dstj[1] - dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] = srcj[3] - srci[3] * srcj[2];
			srcj[4] = srcj[4] - srci[4] * srcj[2];
			srcj[5] = srcj[5] - srci[5] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			dsti[2] = dsti[2] * diag;
			srci[4] = srci[4] * diag;
			srci[5] = srci[5] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj[5] = srcj[5] - srci[5] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj[5] = srcj[5] - srci[5] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			dstj[2] = dstj[2] - dsti[2] * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj[5] = srcj[5] - srci[5] * srcj[3];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			dstj[2] = dstj[2] - dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj[5] = srcj[5] - srci[5] * srcj[3];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = dstj[0] - dsti[0] * srcj[3];
			dstj[1] = dstj[1] - dsti[1] * srcj[3];
			dstj[2] = dstj[2] - dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] = srcj[4] - srci[4] * srcj[3];
			srcj[5] = srcj[5] - srci[5] * srcj[3];
			srci = src[4];
			dsti = dst[4];
			diag = 1 / srci[4];
			dsti[4] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			dsti[2] = dsti[2] * diag;
			dsti[3] = dsti[3] * diag;
			srci[5] = srci[5] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			srcj[5] = srcj[5] - srci[5] * srcj[4];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			srcj[5] = srcj[5] - srci[5] * srcj[4];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			dstj[2] = dstj[2] - dsti[2] * srcj[4];
			srcj[5] = srcj[5] - srci[5] * srcj[4];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			dstj[2] = dstj[2] - dsti[2] * srcj[4];
			dstj[3] = dstj[3] - dsti[3] * srcj[4];
			srcj[5] = srcj[5] - srci[5] * srcj[4];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = dstj[0] - dsti[0] * srcj[4];
			dstj[1] = dstj[1] - dsti[1] * srcj[4];
			dstj[2] = dstj[2] - dsti[2] * srcj[4];
			dstj[3] = dstj[3] - dsti[3] * srcj[4];
			dstj[4] = -diag * srcj[4];
			srcj[5] = srcj[5] - srci[5] * srcj[4];
			srci = src[5];
			dsti = dst[5];
			diag = 1 / srci[5];
			dsti[5] = diag;
			dsti[0] = dsti[0] * diag;
			dsti[1] = dsti[1] * diag;
			dsti[2] = dsti[2] * diag;
			dsti[3] = dsti[3] * diag;
			dsti[4] = dsti[4] * diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] = dstj[0] - dsti[0] * srcj[5];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = dstj[0] - dsti[0] * srcj[5];
			dstj[1] = dstj[1] - dsti[1] * srcj[5];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = dstj[0] - dsti[0] * srcj[5];
			dstj[1] = dstj[1] - dsti[1] * srcj[5];
			dstj[2] = dstj[2] - dsti[2] * srcj[5];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = dstj[0] - dsti[0] * srcj[5];
			dstj[1] = dstj[1] - dsti[1] * srcj[5];
			dstj[2] = dstj[2] - dsti[2] * srcj[5];
			dstj[3] = dstj[3] - dsti[3] * srcj[5];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = dstj[0] - dsti[0] * srcj[5];
			dstj[1] = dstj[1] - dsti[1] * srcj[5];
			dstj[2] = dstj[2] - dsti[2] * srcj[5];
			dstj[3] = dstj[3] - dsti[3] * srcj[5];
			dstj[4] = dstj[4] - dsti[4] * srcj[5];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			dsti = dst[4];
			dst[0][4] = dsti[0];
			dst[1][4] = dsti[1];
			dst[2][4] = dsti[2];
			dst[3][4] = dsti[3];
			dsti = dst[5];
			dst[0][5] = dsti[0];
			dst[1][5] = dsti[1];
			dst[2][5] = dsti[2];
			dst[3][5] = dsti[3];
			dst[4][5] = dsti[4];
			break;
		default:
			var _g11 = 0;
			var _g4 = size;
			while(_g11 < _g4) {
				var i1 = _g11++;
				srci = src[i1];
				dsti = dst[i1];
				var diag1 = 1 / srci[i1];
				dsti[i1] = diag1;
				var _g31 = 0;
				var _g21 = i1;
				while(_g31 < _g21) {
					var j1 = _g31++;
					dsti[j1] = dsti[j1] * diag1;
				}
				var _g32 = i1 + 1;
				var _g22 = size;
				while(_g32 < _g22) {
					var j2 = _g32++;
					srci[j2] = srci[j2] * diag1;
				}
				var _g33 = 0;
				var _g23 = i1;
				while(_g33 < _g23) {
					var j3 = _g33++;
					srcj = src[j3];
					dstj = dst[j3];
					var _g5 = 0;
					var _g41 = j3 + 1;
					while(_g5 < _g41) {
						var k = _g5++;
						dstj[k] = dstj[k] - dsti[k] * srcj[i1];
					}
					var _g51 = i1 + 1;
					var _g42 = size;
					while(_g51 < _g42) {
						var k1 = _g51++;
						srcj[k1] = srcj[k1] - srci[k1] * srcj[i1];
					}
				}
				var _g34 = i1 + 1;
				var _g24 = size;
				while(_g34 < _g24) {
					var j4 = _g34++;
					srcj = src[j4];
					dstj = dst[j4];
					var _g52 = 0;
					var _g43 = i1;
					while(_g52 < _g43) {
						var k2 = _g52++;
						dstj[k2] = dstj[k2] - dsti[k2] * srcj[i1];
					}
					dstj[i1] = -diag1 * srcj[i1];
					var _g53 = i1 + 1;
					var _g44 = size;
					while(_g53 < _g44) {
						var k3 = _g53++;
						srcj[k3] = srcj[k3] - srci[k3] * srcj[i1];
					}
				}
			}
			var _g12 = 1;
			var _g6 = size;
			while(_g12 < _g6) {
				var i2 = _g12++;
				dsti = dst[i2];
				var _g35 = 0;
				var _g25 = i2;
				while(_g35 < _g25) {
					var j5 = _g35++;
					dst[j5][i2] = dsti[j5];
				}
			}
		}
	}
	,computeInvMass: function(info,massData) {
		var invMass = this._invMass;
		var invMassWithoutCfm = this._invMassWithoutCfm;
		var numRows = info.numRows;
		var b1 = info.b1;
		var b2 = info.b2;
		var invM1 = b1._invMass;
		var invM2 = b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = b1._invInertia00;
		invI101 = b1._invInertia01;
		invI102 = b1._invInertia02;
		invI110 = b1._invInertia10;
		invI111 = b1._invInertia11;
		invI112 = b1._invInertia12;
		invI120 = b1._invInertia20;
		invI121 = b1._invInertia21;
		invI122 = b1._invInertia22;
		invI200 = b2._invInertia00;
		invI201 = b2._invInertia01;
		invI202 = b2._invInertia02;
		invI210 = b2._invInertia10;
		invI211 = b2._invInertia11;
		invI212 = b2._invInertia12;
		invI220 = b2._invInertia20;
		invI221 = b2._invInertia21;
		invI222 = b2._invInertia22;
		var _g1 = 0;
		var _g = numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var j = info.rows[i].jacobian;
			var md = massData[i];
			j.updateSparsity();
			if((j.flag & 1) != 0) {
				md.invMLin1X = j.lin1X * invM1;
				md.invMLin1Y = j.lin1Y * invM1;
				md.invMLin1Z = j.lin1Z * invM1;
				md.invMLin2X = j.lin2X * invM2;
				md.invMLin2Y = j.lin2Y * invM2;
				md.invMLin2Z = j.lin2Z * invM2;
			} else {
				md.invMLin1X = 0;
				md.invMLin1Y = 0;
				md.invMLin1Z = 0;
				md.invMLin2X = 0;
				md.invMLin2Y = 0;
				md.invMLin2Z = 0;
			}
			if((j.flag & 2) != 0) {
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
				__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
				__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
				md.invMAng1X = __tmp__X;
				md.invMAng1Y = __tmp__Y;
				md.invMAng1Z = __tmp__Z;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
				__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
				__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
				md.invMAng2X = __tmp__X1;
				md.invMAng2Y = __tmp__Y1;
				md.invMAng2Z = __tmp__Z1;
			} else {
				md.invMAng1X = 0;
				md.invMAng1Y = 0;
				md.invMAng1Z = 0;
				md.invMAng2X = 0;
				md.invMAng2Y = 0;
				md.invMAng2Z = 0;
			}
		}
		var _g11 = 0;
		var _g2 = numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var j1 = info.rows[i1].jacobian;
			var _g3 = i1;
			var _g21 = numRows;
			while(_g3 < _g21) {
				var j2 = _g3++;
				var j21 = info.rows[j2].jacobian;
				var md2 = massData[j2];
				var val = j1.lin1X * md2.invMLin1X + j1.lin1Y * md2.invMLin1Y + j1.lin1Z * md2.invMLin1Z + (j1.ang1X * md2.invMAng1X + j1.ang1Y * md2.invMAng1Y + j1.ang1Z * md2.invMAng1Z) + (j1.lin2X * md2.invMLin2X + j1.lin2Y * md2.invMLin2Y + j1.lin2Z * md2.invMLin2Z) + (j1.ang2X * md2.invMAng2X + j1.ang2Y * md2.invMAng2Y + j1.ang2Z * md2.invMAng2Z);
				if(i1 == j2) {
					invMass[i1][j2] = val + info.rows[i1].cfm;
					invMassWithoutCfm[i1][j2] = val;
					md2.mass = val + info.rows[i1].cfm;
					md2.massWithoutCfm = val;
					if(md2.mass != 0) {
						md2.mass = 1 / md2.mass;
					}
					if(md2.massWithoutCfm != 0) {
						md2.massWithoutCfm = 1 / md2.massWithoutCfm;
					}
				} else {
					invMass[i1][j2] = val;
					invMass[j2][i1] = val;
					invMassWithoutCfm[i1][j2] = val;
					invMassWithoutCfm[j2][i1] = val;
				}
			}
		}
		var _g12 = 0;
		var _g4 = this._maxSubmatrixId;
		while(_g12 < _g4) {
			var i2 = _g12++;
			this._cacheComputed[i2] = false;
		}
	}
};
var oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver = function(constraint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.constraint = constraint;
	this.info = new oimo_dynamics_constraint_info_contact_ContactSolverInfo();
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.massData = this1;
	var _g1 = 0;
	var _g = this.massData.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.massData[i] = new oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow();
	}
};
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.__name__ = true;
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.constraint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			md.invMLinT1X = jt.lin1X * invM1;
			md.invMLinT1Y = jt.lin1Y * invM1;
			md.invMLinT1Z = jt.lin1Z * invM1;
			md.invMLinT2X = jt.lin2X * invM2;
			md.invMLinT2Y = jt.lin2Y * invM2;
			md.invMLinT2Z = jt.lin2Z * invM2;
			md.invMLinB1X = jb.lin1X * invM1;
			md.invMLinB1Y = jb.lin1Y * invM1;
			md.invMLinB1Z = jb.lin1Z * invM1;
			md.invMLinB2X = jb.lin2X * invM2;
			md.invMLinB2Y = jb.lin2Y * invM2;
			md.invMLinB2Z = jb.lin2Z * invM2;
			var __tmp__X2;
			var __tmp__Y2;
			var __tmp__Z2;
			__tmp__X2 = invI100 * jt.ang1X + invI101 * jt.ang1Y + invI102 * jt.ang1Z;
			__tmp__Y2 = invI110 * jt.ang1X + invI111 * jt.ang1Y + invI112 * jt.ang1Z;
			__tmp__Z2 = invI120 * jt.ang1X + invI121 * jt.ang1Y + invI122 * jt.ang1Z;
			md.invMAngT1X = __tmp__X2;
			md.invMAngT1Y = __tmp__Y2;
			md.invMAngT1Z = __tmp__Z2;
			var __tmp__X3;
			var __tmp__Y3;
			var __tmp__Z3;
			__tmp__X3 = invI200 * jt.ang2X + invI201 * jt.ang2Y + invI202 * jt.ang2Z;
			__tmp__Y3 = invI210 * jt.ang2X + invI211 * jt.ang2Y + invI212 * jt.ang2Z;
			__tmp__Z3 = invI220 * jt.ang2X + invI221 * jt.ang2Y + invI222 * jt.ang2Z;
			md.invMAngT2X = __tmp__X3;
			md.invMAngT2Y = __tmp__Y3;
			md.invMAngT2Z = __tmp__Z3;
			var __tmp__X4;
			var __tmp__Y4;
			var __tmp__Z4;
			__tmp__X4 = invI100 * jb.ang1X + invI101 * jb.ang1Y + invI102 * jb.ang1Z;
			__tmp__Y4 = invI110 * jb.ang1X + invI111 * jb.ang1Y + invI112 * jb.ang1Z;
			__tmp__Z4 = invI120 * jb.ang1X + invI121 * jb.ang1Y + invI122 * jb.ang1Z;
			md.invMAngB1X = __tmp__X4;
			md.invMAngB1Y = __tmp__Y4;
			md.invMAngB1Z = __tmp__Z4;
			var __tmp__X5;
			var __tmp__Y5;
			var __tmp__Z5;
			__tmp__X5 = invI200 * jb.ang2X + invI201 * jb.ang2Y + invI202 * jb.ang2Z;
			__tmp__Y5 = invI210 * jb.ang2X + invI211 * jb.ang2Y + invI212 * jb.ang2Z;
			__tmp__Z5 = invI220 * jb.ang2X + invI221 * jb.ang2Y + invI222 * jb.ang2Z;
			md.invMAngB2X = __tmp__X5;
			md.invMAngB2Y = __tmp__Y5;
			md.invMAngB2Z = __tmp__Z5;
			var invMassTB00 = invM1 + invM2 + (md.invMAngT1X * jt.ang1X + md.invMAngT1Y * jt.ang1Y + md.invMAngT1Z * jt.ang1Z) + (md.invMAngT2X * jt.ang2X + md.invMAngT2Y * jt.ang2Y + md.invMAngT2Z * jt.ang2Z);
			var invMassTB01 = md.invMAngT1X * jb.ang1X + md.invMAngT1Y * jb.ang1Y + md.invMAngT1Z * jb.ang1Z + (md.invMAngT2X * jb.ang2X + md.invMAngT2Y * jb.ang2Y + md.invMAngT2Z * jb.ang2Z);
			var invMassTB10 = invMassTB01;
			var invMassTB11 = invM1 + invM2 + (md.invMAngB1X * jb.ang1X + md.invMAngB1Y * jb.ang1Y + md.invMAngB1Z * jb.ang1Z) + (md.invMAngB2X * jb.ang2X + md.invMAngB2Y * jb.ang2Y + md.invMAngB2Z * jb.ang2Z);
			var invDet = invMassTB00 * invMassTB11 - invMassTB01 * invMassTB10;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			md.massTB00 = invMassTB11 * invDet;
			md.massTB01 = -invMassTB01 * invDet;
			md.massTB10 = -invMassTB10 * invDet;
			md.massTB11 = invMassTB00 * invDet;
		}
	}
	,warmStart: function(timeStep) {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var md = this.massData[i];
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			var impulseN = imp.impulseN;
			var impulseT = imp.impulseLX * jt.lin1X + imp.impulseLY * jt.lin1Y + imp.impulseLZ * jt.lin1Z;
			var impulseB = imp.impulseLX * jb.lin1X + imp.impulseLY * jb.lin1Y + imp.impulseLZ * jb.lin1Z;
			imp.impulseT = impulseT;
			imp.impulseB = impulseB;
			imp.impulseN *= timeStep.dtRatio;
			imp.impulseT *= timeStep.dtRatio;
			imp.impulseB *= timeStep.dtRatio;
			lv1X += md.invMLinN1X * impulseN;
			lv1Y += md.invMLinN1Y * impulseN;
			lv1Z += md.invMLinN1Z * impulseN;
			lv1X += md.invMLinT1X * impulseT;
			lv1Y += md.invMLinT1Y * impulseT;
			lv1Z += md.invMLinT1Z * impulseT;
			lv1X += md.invMLinB1X * impulseB;
			lv1Y += md.invMLinB1Y * impulseB;
			lv1Z += md.invMLinB1Z * impulseB;
			lv2X += md.invMLinN2X * -impulseN;
			lv2Y += md.invMLinN2Y * -impulseN;
			lv2Z += md.invMLinN2Z * -impulseN;
			lv2X += md.invMLinT2X * -impulseT;
			lv2Y += md.invMLinT2Y * -impulseT;
			lv2Z += md.invMLinT2Z * -impulseT;
			lv2X += md.invMLinB2X * -impulseB;
			lv2Y += md.invMLinB2Y * -impulseB;
			lv2Z += md.invMLinB2Z * -impulseB;
			av1X += md.invMAngN1X * impulseN;
			av1Y += md.invMAngN1Y * impulseN;
			av1Z += md.invMAngN1Z * impulseN;
			av1X += md.invMAngT1X * impulseT;
			av1Y += md.invMAngT1Y * impulseT;
			av1Z += md.invMAngT1Z * impulseT;
			av1X += md.invMAngB1X * impulseB;
			av1Y += md.invMAngB1Y * impulseB;
			av1Z += md.invMAngB1Z * impulseB;
			av2X += md.invMAngN2X * -impulseN;
			av2Y += md.invMAngN2Y * -impulseN;
			av2Z += md.invMAngN2Z * -impulseN;
			av2X += md.invMAngT2X * -impulseT;
			av2Y += md.invMAngT2Y * -impulseT;
			av2Z += md.invMAngT2Z * -impulseT;
			av2X += md.invMAngB2X * -impulseB;
			av2Y += md.invMAngB2Y * -impulseB;
			av2Z += md.invMAngB2Z * -impulseB;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,solveVelocity: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var rvt = 0;
			var j = row.jacobianT;
			rvt += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvt -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvt += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvt -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var rvb = 0;
			j = row.jacobianB;
			rvb += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvb -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvb += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvb -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseT = -(rvt * md.massTB00 + rvb * md.massTB01);
			var impulseB = -(rvt * md.massTB10 + rvb * md.massTB11);
			var oldImpulseT = imp.impulseT;
			var oldImpulseB = imp.impulseB;
			imp.impulseT += impulseT;
			imp.impulseB += impulseB;
			var maxImpulse = row.friction * imp.impulseN;
			if(maxImpulse == 0) {
				imp.impulseT = 0;
				imp.impulseB = 0;
			} else {
				var impulseLengthSq = imp.impulseT * imp.impulseT + imp.impulseB * imp.impulseB;
				if(impulseLengthSq > maxImpulse * maxImpulse) {
					var invL = maxImpulse / Math.sqrt(impulseLengthSq);
					imp.impulseT *= invL;
					imp.impulseB *= invL;
				}
			}
			impulseT = imp.impulseT - oldImpulseT;
			impulseB = imp.impulseB - oldImpulseB;
			lv1X += md.invMLinT1X * impulseT;
			lv1Y += md.invMLinT1Y * impulseT;
			lv1Z += md.invMLinT1Z * impulseT;
			lv1X += md.invMLinB1X * impulseB;
			lv1Y += md.invMLinB1Y * impulseB;
			lv1Z += md.invMLinB1Z * impulseB;
			lv2X += md.invMLinT2X * -impulseT;
			lv2Y += md.invMLinT2Y * -impulseT;
			lv2Z += md.invMLinT2Z * -impulseT;
			lv2X += md.invMLinB2X * -impulseB;
			lv2Y += md.invMLinB2Y * -impulseB;
			lv2Z += md.invMLinB2Z * -impulseB;
			av1X += md.invMAngT1X * impulseT;
			av1Y += md.invMAngT1Y * impulseT;
			av1Z += md.invMAngT1Z * impulseT;
			av1X += md.invMAngB1X * impulseB;
			av1Y += md.invMAngB1Y * impulseB;
			av1Z += md.invMAngB1Z * impulseB;
			av2X += md.invMAngT2X * -impulseT;
			av2Y += md.invMAngT2Y * -impulseT;
			av2Z += md.invMAngT2Z * -impulseT;
			av2X += md.invMAngB2X * -impulseB;
			av2Y += md.invMAngB2Y * -impulseB;
			av2Z += md.invMAngB2Z * -impulseB;
		}
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var md1 = this.massData[i1];
			var imp1 = row1.impulse;
			var rvn = 0;
			var j1 = row1.jacobianN;
			rvn += lv1X * j1.lin1X + lv1Y * j1.lin1Y + lv1Z * j1.lin1Z;
			rvn -= lv2X * j1.lin2X + lv2Y * j1.lin2Y + lv2Z * j1.lin2Z;
			rvn += av1X * j1.ang1X + av1Y * j1.ang1Y + av1Z * j1.ang1Z;
			rvn -= av2X * j1.ang2X + av2Y * j1.ang2Y + av2Z * j1.ang2Z;
			var impulseN = (row1.rhs - rvn) * md1.massN;
			var oldImpulseN = imp1.impulseN;
			imp1.impulseN += impulseN;
			if(imp1.impulseN < 0) {
				imp1.impulseN = 0;
			}
			impulseN = imp1.impulseN - oldImpulseN;
			lv1X += md1.invMLinN1X * impulseN;
			lv1Y += md1.invMLinN1Y * impulseN;
			lv1Z += md1.invMLinN1Z * impulseN;
			lv2X += md1.invMLinN2X * -impulseN;
			lv2Y += md1.invMLinN2Y * -impulseN;
			lv2Z += md1.invMLinN2Z * -impulseN;
			av1X += md1.invMAngN1X * impulseN;
			av1Y += md1.invMAngN1Y * impulseN;
			av1Z += md1.invMAngN1Z * impulseN;
			av2X += md1.invMAngN2X * -impulseN;
			av2Y += md1.invMAngN2Y * -impulseN;
			av2Z += md1.invMAngN2Z * -impulseN;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,preSolvePosition: function(timeStep) {
		this.constraint._syncManifold();
		this.constraint._getPositionSolverInfo(this.info);
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
		}
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.info.rows[i1].impulse.impulseP = 0;
		}
	}
	,solvePositionSplitImpulse: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobianN;
			var rvn = 0;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs - rvn) * md.massN * oimo_common_Setting.positionSplitImpulseBaumgarte;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < 0) {
				imp.impulseP = 0;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLinN1X * impulseP;
			lv1Y += md.invMLinN1Y * impulseP;
			lv1Z += md.invMLinN1Z * impulseP;
			lv2X += md.invMLinN2X * -impulseP;
			lv2Y += md.invMLinN2Y * -impulseP;
			lv2Z += md.invMLinN2Z * -impulseP;
			av1X += md.invMAngN1X * impulseP;
			av1Y += md.invMAngN1Y * impulseP;
			av1Z += md.invMAngN1Z * impulseP;
			av2X += md.invMAngN2X * -impulseP;
			av2Y += md.invMAngN2Y * -impulseP;
			av2Z += md.invMAngN2Z * -impulseP;
		}
		this._b1._pseudoVelX = lv1X;
		this._b1._pseudoVelY = lv1Y;
		this._b1._pseudoVelZ = lv1Z;
		this._b2._pseudoVelX = lv2X;
		this._b2._pseudoVelY = lv2Y;
		this._b2._pseudoVelZ = lv2Z;
		this._b1._angPseudoVelX = av1X;
		this._b1._angPseudoVelY = av1Y;
		this._b1._angPseudoVelZ = av1Z;
		this._b2._angPseudoVelX = av2X;
		this._b2._angPseudoVelY = av2Y;
		this._b2._angPseudoVelZ = av2Z;
	}
	,solvePositionNgs: function(timeStep) {
		this.constraint._syncManifold();
		this.constraint._getPositionSolverInfo(this.info);
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
		}
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = 0;
		lv1Y = 0;
		lv1Z = 0;
		lv2X = 0;
		lv2Y = 0;
		lv2Z = 0;
		av1X = 0;
		av1Y = 0;
		av1Z = 0;
		av2X = 0;
		av2Y = 0;
		av2Z = 0;
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var md1 = this.massData[i1];
			var imp = row1.impulse;
			var j1 = row1.jacobianN;
			var rvn = 0;
			rvn += lv1X * j1.lin1X + lv1Y * j1.lin1Y + lv1Z * j1.lin1Z;
			rvn -= lv2X * j1.lin2X + lv2Y * j1.lin2Y + lv2Z * j1.lin2Z;
			rvn += av1X * j1.ang1X + av1Y * j1.ang1Y + av1Z * j1.ang1Z;
			rvn -= av2X * j1.ang2X + av2Y * j1.ang2Y + av2Z * j1.ang2Z;
			var impulseP = (row1.rhs - rvn) * md1.massN * oimo_common_Setting.positionNgsBaumgarte;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < 0) {
				imp.impulseP = 0;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md1.invMLinN1X * impulseP;
			lv1Y += md1.invMLinN1Y * impulseP;
			lv1Z += md1.invMLinN1Z * impulseP;
			lv2X += md1.invMLinN2X * -impulseP;
			lv2Y += md1.invMLinN2Y * -impulseP;
			lv2Z += md1.invMLinN2Z * -impulseP;
			av1X += md1.invMAngN1X * impulseP;
			av1Y += md1.invMAngN1Y * impulseP;
			av1Z += md1.invMAngN1Z * impulseP;
			av2X += md1.invMAngN2X * -impulseP;
			av2Y += md1.invMAngN2Y * -impulseP;
			av2Z += md1.invMAngN2Z * -impulseP;
		}
		var _this = this._b1;
		_this._transform._positionX += lv1X;
		_this._transform._positionY += lv1Y;
		_this._transform._positionZ += lv1Z;
		var _this1 = this._b2;
		_this1._transform._positionX += lv2X;
		_this1._transform._positionY += lv2Y;
		_this1._transform._positionZ += lv2Z;
		var _this2 = this._b1;
		var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxis;
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av1X * rotationToSinAxisFactor;
		sinAxisY = av1Y * rotationToSinAxisFactor;
		sinAxisZ = av1Z * rotationToSinAxisFactor;
		var dq;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this2._transform._rotation00;
		var e11 = _this2._transform._rotation11;
		var e22 = _this2._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
			qY = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
			qZ = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
				qZ = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
				qW = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
				qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
				qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
			qZ = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
			qW = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
			qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
			qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this2._transform._rotation00 = 1 - yy - zz;
		_this2._transform._rotation01 = xy - wz;
		_this2._transform._rotation02 = xz + wy;
		_this2._transform._rotation10 = xy + wz;
		_this2._transform._rotation11 = 1 - xx - zz;
		_this2._transform._rotation12 = yz - wx;
		_this2._transform._rotation20 = xz - wy;
		_this2._transform._rotation21 = yz + wx;
		_this2._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this2._transform._rotation00 * _this2._invLocalInertia00 + _this2._transform._rotation01 * _this2._invLocalInertia10 + _this2._transform._rotation02 * _this2._invLocalInertia20;
		__tmp__01 = _this2._transform._rotation00 * _this2._invLocalInertia01 + _this2._transform._rotation01 * _this2._invLocalInertia11 + _this2._transform._rotation02 * _this2._invLocalInertia21;
		__tmp__02 = _this2._transform._rotation00 * _this2._invLocalInertia02 + _this2._transform._rotation01 * _this2._invLocalInertia12 + _this2._transform._rotation02 * _this2._invLocalInertia22;
		__tmp__10 = _this2._transform._rotation10 * _this2._invLocalInertia00 + _this2._transform._rotation11 * _this2._invLocalInertia10 + _this2._transform._rotation12 * _this2._invLocalInertia20;
		__tmp__11 = _this2._transform._rotation10 * _this2._invLocalInertia01 + _this2._transform._rotation11 * _this2._invLocalInertia11 + _this2._transform._rotation12 * _this2._invLocalInertia21;
		__tmp__12 = _this2._transform._rotation10 * _this2._invLocalInertia02 + _this2._transform._rotation11 * _this2._invLocalInertia12 + _this2._transform._rotation12 * _this2._invLocalInertia22;
		__tmp__20 = _this2._transform._rotation20 * _this2._invLocalInertia00 + _this2._transform._rotation21 * _this2._invLocalInertia10 + _this2._transform._rotation22 * _this2._invLocalInertia20;
		__tmp__21 = _this2._transform._rotation20 * _this2._invLocalInertia01 + _this2._transform._rotation21 * _this2._invLocalInertia11 + _this2._transform._rotation22 * _this2._invLocalInertia21;
		__tmp__22 = _this2._transform._rotation20 * _this2._invLocalInertia02 + _this2._transform._rotation21 * _this2._invLocalInertia12 + _this2._transform._rotation22 * _this2._invLocalInertia22;
		_this2._invInertia00 = __tmp__00;
		_this2._invInertia01 = __tmp__01;
		_this2._invInertia02 = __tmp__02;
		_this2._invInertia10 = __tmp__10;
		_this2._invInertia11 = __tmp__11;
		_this2._invInertia12 = __tmp__12;
		_this2._invInertia20 = __tmp__20;
		_this2._invInertia21 = __tmp__21;
		_this2._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = _this2._invInertia00 * _this2._transform._rotation00 + _this2._invInertia01 * _this2._transform._rotation01 + _this2._invInertia02 * _this2._transform._rotation02;
		__tmp__011 = _this2._invInertia00 * _this2._transform._rotation10 + _this2._invInertia01 * _this2._transform._rotation11 + _this2._invInertia02 * _this2._transform._rotation12;
		__tmp__021 = _this2._invInertia00 * _this2._transform._rotation20 + _this2._invInertia01 * _this2._transform._rotation21 + _this2._invInertia02 * _this2._transform._rotation22;
		__tmp__101 = _this2._invInertia10 * _this2._transform._rotation00 + _this2._invInertia11 * _this2._transform._rotation01 + _this2._invInertia12 * _this2._transform._rotation02;
		__tmp__111 = _this2._invInertia10 * _this2._transform._rotation10 + _this2._invInertia11 * _this2._transform._rotation11 + _this2._invInertia12 * _this2._transform._rotation12;
		__tmp__121 = _this2._invInertia10 * _this2._transform._rotation20 + _this2._invInertia11 * _this2._transform._rotation21 + _this2._invInertia12 * _this2._transform._rotation22;
		__tmp__201 = _this2._invInertia20 * _this2._transform._rotation00 + _this2._invInertia21 * _this2._transform._rotation01 + _this2._invInertia22 * _this2._transform._rotation02;
		__tmp__211 = _this2._invInertia20 * _this2._transform._rotation10 + _this2._invInertia21 * _this2._transform._rotation11 + _this2._invInertia22 * _this2._transform._rotation12;
		__tmp__221 = _this2._invInertia20 * _this2._transform._rotation20 + _this2._invInertia21 * _this2._transform._rotation21 + _this2._invInertia22 * _this2._transform._rotation22;
		_this2._invInertia00 = __tmp__001;
		_this2._invInertia01 = __tmp__011;
		_this2._invInertia02 = __tmp__021;
		_this2._invInertia10 = __tmp__101;
		_this2._invInertia11 = __tmp__111;
		_this2._invInertia12 = __tmp__121;
		_this2._invInertia20 = __tmp__201;
		_this2._invInertia21 = __tmp__211;
		_this2._invInertia22 = __tmp__221;
		_this2._invInertia00 *= _this2._rotFactor.x;
		_this2._invInertia01 *= _this2._rotFactor.x;
		_this2._invInertia02 *= _this2._rotFactor.x;
		_this2._invInertia10 *= _this2._rotFactor.y;
		_this2._invInertia11 *= _this2._rotFactor.y;
		_this2._invInertia12 *= _this2._rotFactor.y;
		_this2._invInertia20 *= _this2._rotFactor.z;
		_this2._invInertia21 *= _this2._rotFactor.z;
		_this2._invInertia22 *= _this2._rotFactor.z;
		var _this3 = this._b2;
		var theta1 = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
		var halfTheta1 = theta1 * 0.5;
		var rotationToSinAxisFactor1;
		var cosHalfTheta1;
		if(halfTheta1 < 0.5) {
			var ht21 = halfTheta1 * halfTheta1;
			rotationToSinAxisFactor1 = 0.5 * (1 - ht21 * 0.16666666666666666 + ht21 * ht21 * 0.0083333333333333332);
			cosHalfTheta1 = 1 - ht21 * 0.5 + ht21 * ht21 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor1 = Math.sin(halfTheta1) / theta1;
			cosHalfTheta1 = Math.cos(halfTheta1);
		}
		var sinAxis1;
		var sinAxisX1;
		var sinAxisY1;
		var sinAxisZ1;
		sinAxisX1 = av2X * rotationToSinAxisFactor1;
		sinAxisY1 = av2Y * rotationToSinAxisFactor1;
		sinAxisZ1 = av2Z * rotationToSinAxisFactor1;
		var dq1;
		var dqX1;
		var dqY1;
		var dqZ1;
		var dqW1;
		dqX1 = sinAxisX1;
		dqY1 = sinAxisY1;
		dqZ1 = sinAxisZ1;
		dqW1 = cosHalfTheta1;
		var q1;
		var qX1;
		var qY1;
		var qZ1;
		var qW1;
		var e001 = _this3._transform._rotation00;
		var e111 = _this3._transform._rotation11;
		var e221 = _this3._transform._rotation22;
		var t1 = e001 + e111 + e221;
		var s1;
		if(t1 > 0) {
			s1 = Math.sqrt(t1 + 1);
			qW1 = 0.5 * s1;
			s1 = 0.5 / s1;
			qX1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
			qY1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
			qZ1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
		} else if(e001 > e111) {
			if(e001 > e221) {
				s1 = Math.sqrt(e001 - e111 - e221 + 1);
				qX1 = 0.5 * s1;
				s1 = 0.5 / s1;
				qY1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
				qZ1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
				qW1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
			} else {
				s1 = Math.sqrt(e221 - e001 - e111 + 1);
				qZ1 = 0.5 * s1;
				s1 = 0.5 / s1;
				qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
				qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
				qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
			}
		} else if(e111 > e221) {
			s1 = Math.sqrt(e111 - e221 - e001 + 1);
			qY1 = 0.5 * s1;
			s1 = 0.5 / s1;
			qX1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
			qZ1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
			qW1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
		} else {
			s1 = Math.sqrt(e221 - e001 - e111 + 1);
			qZ1 = 0.5 * s1;
			s1 = 0.5 / s1;
			qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
			qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
			qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
		}
		qX1 = dqW1 * qX1 + dqX1 * qW1 + dqY1 * qZ1 - dqZ1 * qY1;
		qY1 = dqW1 * qY1 - dqX1 * qZ1 + dqY1 * qW1 + dqZ1 * qX1;
		qZ1 = dqW1 * qZ1 + dqX1 * qY1 - dqY1 * qX1 + dqZ1 * qW1;
		qW1 = dqW1 * qW1 - dqX1 * qX1 - dqY1 * qY1 - dqZ1 * qZ1;
		var l1 = qX1 * qX1 + qY1 * qY1 + qZ1 * qZ1 + qW1 * qW1;
		if(l1 > 1e-32) {
			l1 = 1 / Math.sqrt(l1);
		}
		qX1 *= l1;
		qY1 *= l1;
		qZ1 *= l1;
		qW1 *= l1;
		var x1 = qX1;
		var y1 = qY1;
		var z1 = qZ1;
		var w1 = qW1;
		var x21 = 2 * x1;
		var y21 = 2 * y1;
		var z21 = 2 * z1;
		var xx1 = x1 * x21;
		var yy1 = y1 * y21;
		var zz1 = z1 * z21;
		var xy1 = x1 * y21;
		var yz1 = y1 * z21;
		var xz1 = x1 * z21;
		var wx1 = w1 * x21;
		var wy1 = w1 * y21;
		var wz1 = w1 * z21;
		_this3._transform._rotation00 = 1 - yy1 - zz1;
		_this3._transform._rotation01 = xy1 - wz1;
		_this3._transform._rotation02 = xz1 + wy1;
		_this3._transform._rotation10 = xy1 + wz1;
		_this3._transform._rotation11 = 1 - xx1 - zz1;
		_this3._transform._rotation12 = yz1 - wx1;
		_this3._transform._rotation20 = xz1 - wy1;
		_this3._transform._rotation21 = yz1 + wx1;
		_this3._transform._rotation22 = 1 - xx1 - yy1;
		var __tmp__002;
		var __tmp__012;
		var __tmp__022;
		var __tmp__102;
		var __tmp__112;
		var __tmp__122;
		var __tmp__202;
		var __tmp__212;
		var __tmp__222;
		__tmp__002 = _this3._transform._rotation00 * _this3._invLocalInertia00 + _this3._transform._rotation01 * _this3._invLocalInertia10 + _this3._transform._rotation02 * _this3._invLocalInertia20;
		__tmp__012 = _this3._transform._rotation00 * _this3._invLocalInertia01 + _this3._transform._rotation01 * _this3._invLocalInertia11 + _this3._transform._rotation02 * _this3._invLocalInertia21;
		__tmp__022 = _this3._transform._rotation00 * _this3._invLocalInertia02 + _this3._transform._rotation01 * _this3._invLocalInertia12 + _this3._transform._rotation02 * _this3._invLocalInertia22;
		__tmp__102 = _this3._transform._rotation10 * _this3._invLocalInertia00 + _this3._transform._rotation11 * _this3._invLocalInertia10 + _this3._transform._rotation12 * _this3._invLocalInertia20;
		__tmp__112 = _this3._transform._rotation10 * _this3._invLocalInertia01 + _this3._transform._rotation11 * _this3._invLocalInertia11 + _this3._transform._rotation12 * _this3._invLocalInertia21;
		__tmp__122 = _this3._transform._rotation10 * _this3._invLocalInertia02 + _this3._transform._rotation11 * _this3._invLocalInertia12 + _this3._transform._rotation12 * _this3._invLocalInertia22;
		__tmp__202 = _this3._transform._rotation20 * _this3._invLocalInertia00 + _this3._transform._rotation21 * _this3._invLocalInertia10 + _this3._transform._rotation22 * _this3._invLocalInertia20;
		__tmp__212 = _this3._transform._rotation20 * _this3._invLocalInertia01 + _this3._transform._rotation21 * _this3._invLocalInertia11 + _this3._transform._rotation22 * _this3._invLocalInertia21;
		__tmp__222 = _this3._transform._rotation20 * _this3._invLocalInertia02 + _this3._transform._rotation21 * _this3._invLocalInertia12 + _this3._transform._rotation22 * _this3._invLocalInertia22;
		_this3._invInertia00 = __tmp__002;
		_this3._invInertia01 = __tmp__012;
		_this3._invInertia02 = __tmp__022;
		_this3._invInertia10 = __tmp__102;
		_this3._invInertia11 = __tmp__112;
		_this3._invInertia12 = __tmp__122;
		_this3._invInertia20 = __tmp__202;
		_this3._invInertia21 = __tmp__212;
		_this3._invInertia22 = __tmp__222;
		var __tmp__003;
		var __tmp__013;
		var __tmp__023;
		var __tmp__103;
		var __tmp__113;
		var __tmp__123;
		var __tmp__203;
		var __tmp__213;
		var __tmp__223;
		__tmp__003 = _this3._invInertia00 * _this3._transform._rotation00 + _this3._invInertia01 * _this3._transform._rotation01 + _this3._invInertia02 * _this3._transform._rotation02;
		__tmp__013 = _this3._invInertia00 * _this3._transform._rotation10 + _this3._invInertia01 * _this3._transform._rotation11 + _this3._invInertia02 * _this3._transform._rotation12;
		__tmp__023 = _this3._invInertia00 * _this3._transform._rotation20 + _this3._invInertia01 * _this3._transform._rotation21 + _this3._invInertia02 * _this3._transform._rotation22;
		__tmp__103 = _this3._invInertia10 * _this3._transform._rotation00 + _this3._invInertia11 * _this3._transform._rotation01 + _this3._invInertia12 * _this3._transform._rotation02;
		__tmp__113 = _this3._invInertia10 * _this3._transform._rotation10 + _this3._invInertia11 * _this3._transform._rotation11 + _this3._invInertia12 * _this3._transform._rotation12;
		__tmp__123 = _this3._invInertia10 * _this3._transform._rotation20 + _this3._invInertia11 * _this3._transform._rotation21 + _this3._invInertia12 * _this3._transform._rotation22;
		__tmp__203 = _this3._invInertia20 * _this3._transform._rotation00 + _this3._invInertia21 * _this3._transform._rotation01 + _this3._invInertia22 * _this3._transform._rotation02;
		__tmp__213 = _this3._invInertia20 * _this3._transform._rotation10 + _this3._invInertia21 * _this3._transform._rotation11 + _this3._invInertia22 * _this3._transform._rotation12;
		__tmp__223 = _this3._invInertia20 * _this3._transform._rotation20 + _this3._invInertia21 * _this3._transform._rotation21 + _this3._invInertia22 * _this3._transform._rotation22;
		_this3._invInertia00 = __tmp__003;
		_this3._invInertia01 = __tmp__013;
		_this3._invInertia02 = __tmp__023;
		_this3._invInertia10 = __tmp__103;
		_this3._invInertia11 = __tmp__113;
		_this3._invInertia12 = __tmp__123;
		_this3._invInertia20 = __tmp__203;
		_this3._invInertia21 = __tmp__213;
		_this3._invInertia22 = __tmp__223;
		_this3._invInertia00 *= _this3._rotFactor.x;
		_this3._invInertia01 *= _this3._rotFactor.x;
		_this3._invInertia02 *= _this3._rotFactor.x;
		_this3._invInertia10 *= _this3._rotFactor.y;
		_this3._invInertia11 *= _this3._rotFactor.y;
		_this3._invInertia12 *= _this3._rotFactor.y;
		_this3._invInertia20 *= _this3._rotFactor.z;
		_this3._invInertia21 *= _this3._rotFactor.z;
		_this3._invInertia22 *= _this3._rotFactor.z;
	}
	,postSolve: function() {
		var lin1;
		var lin1X;
		var lin1Y;
		var lin1Z;
		var ang1;
		var ang1X;
		var ang1Y;
		var ang1Z;
		var ang2;
		var ang2X;
		var ang2Y;
		var ang2Z;
		lin1X = 0;
		lin1Y = 0;
		lin1Z = 0;
		ang1X = 0;
		ang1Y = 0;
		ang1Z = 0;
		ang2X = 0;
		ang2Y = 0;
		ang2Z = 0;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var jn = row.jacobianN;
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			var impN = imp.impulseN;
			var impT = imp.impulseT;
			var impB = imp.impulseB;
			var impulseL;
			var impulseLX;
			var impulseLY;
			var impulseLZ;
			impulseLX = 0;
			impulseLY = 0;
			impulseLZ = 0;
			impulseLX += jt.lin1X * impT;
			impulseLY += jt.lin1Y * impT;
			impulseLZ += jt.lin1Z * impT;
			impulseLX += jb.lin1X * impB;
			impulseLY += jb.lin1Y * impB;
			impulseLZ += jb.lin1Z * impB;
			imp.impulseLX = impulseLX;
			imp.impulseLY = impulseLY;
			imp.impulseLZ = impulseLZ;
			lin1X += jn.lin1X * impN;
			lin1Y += jn.lin1Y * impN;
			lin1Z += jn.lin1Z * impN;
			ang1X += jn.ang1X * impN;
			ang1Y += jn.ang1Y * impN;
			ang1Z += jn.ang1Z * impN;
			ang2X += jn.ang2X * impN;
			ang2Y += jn.ang2Y * impN;
			ang2Z += jn.ang2Z * impN;
			lin1X += jt.lin1X * impT;
			lin1Y += jt.lin1Y * impT;
			lin1Z += jt.lin1Z * impT;
			ang1X += jt.ang1X * impT;
			ang1Y += jt.ang1Y * impT;
			ang1Z += jt.ang1Z * impT;
			ang2X += jt.ang2X * impT;
			ang2Y += jt.ang2Y * impT;
			ang2Z += jt.ang2Z * impT;
			lin1X += jb.lin1X * impB;
			lin1Y += jb.lin1Y * impB;
			lin1Z += jb.lin1Z * impB;
			ang1X += jb.ang1X * impB;
			ang1Y += jb.ang1Y * impB;
			ang1Z += jb.ang1Z * impB;
			ang2X += jb.ang2X * impB;
			ang2Y += jb.ang2Y * impB;
			ang2Z += jb.ang2Z * impB;
		}
		this._b1._linearContactImpulseX += lin1X;
		this._b1._linearContactImpulseY += lin1Y;
		this._b1._linearContactImpulseZ += lin1Z;
		this._b1._angularContactImpulseX += ang1X;
		this._b1._angularContactImpulseY += ang1Y;
		this._b1._angularContactImpulseZ += ang1Z;
		this._b2._linearContactImpulseX -= lin1X;
		this._b2._linearContactImpulseY -= lin1Y;
		this._b2._linearContactImpulseZ -= lin1Z;
		this._b2._angularContactImpulseX -= ang2X;
		this._b2._angularContactImpulseY -= ang2Y;
		this._b2._angularContactImpulseZ -= ang2Z;
		this.constraint._syncManifold();
	}
});
var oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver = function(joint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.joint = joint;
	this.info = new oimo_dynamics_constraint_info_joint_JointSolverInfo();
	var this1 = new Array(oimo_common_Setting.maxJacobianRows);
	this.massData = this1;
	var _g1 = 0;
	var _g = this.massData.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.massData[i] = new oimo_dynamics_constraint_solver_common_JointSolverMassDataRow();
	}
};
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.__name__ = true;
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobian;
			j.updateSparsity();
			if((j.flag & 1) != 0) {
				md.invMLin1X = j.lin1X * invM1;
				md.invMLin1Y = j.lin1Y * invM1;
				md.invMLin1Z = j.lin1Z * invM1;
				md.invMLin2X = j.lin2X * invM2;
				md.invMLin2Y = j.lin2Y * invM2;
				md.invMLin2Z = j.lin2Z * invM2;
			} else {
				md.invMLin1X = 0;
				md.invMLin1Y = 0;
				md.invMLin1Z = 0;
				md.invMLin2X = 0;
				md.invMLin2Y = 0;
				md.invMLin2Z = 0;
			}
			if((j.flag & 2) != 0) {
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
				__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
				__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
				md.invMAng1X = __tmp__X;
				md.invMAng1Y = __tmp__Y;
				md.invMAng1Z = __tmp__Z;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
				__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
				__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
				md.invMAng2X = __tmp__X1;
				md.invMAng2Y = __tmp__Y1;
				md.invMAng2Z = __tmp__Z1;
			} else {
				md.invMAng1X = 0;
				md.invMAng1Y = 0;
				md.invMAng1Z = 0;
				md.invMAng2X = 0;
				md.invMAng2Y = 0;
				md.invMAng2Z = 0;
			}
			md.massWithoutCfm = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			md.mass = md.massWithoutCfm + row.cfm;
			if(md.massWithoutCfm != 0) {
				md.massWithoutCfm = 1 / md.massWithoutCfm;
			}
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
	}
	,warmStart: function(timeStep) {
		var _g = this.joint._positionCorrectionAlgorithm;
		var factor = _g == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE ? oimo_common_Setting.jointWarmStartingFactorForBaungarte : oimo_common_Setting.jointWarmStartingFactor;
		factor *= timeStep.dtRatio;
		if(factor <= 0) {
			var _g1 = 0;
			var _g2 = this.info.numRows;
			while(_g1 < _g2) {
				var i = _g1++;
				var row = this.info.rows[i];
				var _this = row.impulse;
				_this.impulse = 0;
				_this.impulseM = 0;
				_this.impulseP = 0;
			}
			return;
		}
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g11 = 0;
		var _g3 = this.info.numRows;
		while(_g11 < _g3) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var md = this.massData[i1];
			var imp = row1.impulse;
			var j = row1.jacobian;
			imp.impulse *= factor;
			imp.impulseM *= factor;
			var impulse = imp.impulse + imp.impulseM;
			lv1X += md.invMLin1X * impulse;
			lv1Y += md.invMLin1Y * impulse;
			lv1Z += md.invMLin1Z * impulse;
			lv2X += md.invMLin2X * -impulse;
			lv2Y += md.invMLin2Y * -impulse;
			lv2Z += md.invMLin2Z * -impulse;
			av1X += md.invMAng1X * impulse;
			av1Y += md.invMAng1Y * impulse;
			av1Z += md.invMAng1Z * impulse;
			av2X += md.invMAng2X * -impulse;
			av2Y += md.invMAng2Y * -impulse;
			av2Z += md.invMAng2Z * -impulse;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,solveVelocity: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if(row.motorMaxImpulse == 0) {
				continue;
			}
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseM = (-row.motorSpeed - rv) * md.massWithoutCfm;
			var oldImpulseM = imp.impulseM;
			imp.impulseM += impulseM;
			if(imp.impulseM < -row.motorMaxImpulse) {
				imp.impulseM = -row.motorMaxImpulse;
			} else if(imp.impulseM > row.motorMaxImpulse) {
				imp.impulseM = row.motorMaxImpulse;
			}
			impulseM = imp.impulseM - oldImpulseM;
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * impulseM;
				lv1Y += md.invMLin1Y * impulseM;
				lv1Z += md.invMLin1Z * impulseM;
				lv2X += md.invMLin2X * -impulseM;
				lv2Y += md.invMLin2Y * -impulseM;
				lv2Z += md.invMLin2Z * -impulseM;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * impulseM;
				av1Y += md.invMAng1Y * impulseM;
				av1Z += md.invMAng1Z * impulseM;
				av2X += md.invMAng2X * -impulseM;
				av2Y += md.invMAng2Y * -impulseM;
				av2Z += md.invMAng2Z * -impulseM;
			}
		}
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var md1 = this.massData[i1];
			var imp1 = row1.impulse;
			var j1 = row1.jacobian;
			var rv1 = 0;
			rv1 += lv1X * j1.lin1X + lv1Y * j1.lin1Y + lv1Z * j1.lin1Z;
			rv1 -= lv2X * j1.lin2X + lv2Y * j1.lin2Y + lv2Z * j1.lin2Z;
			rv1 += av1X * j1.ang1X + av1Y * j1.ang1Y + av1Z * j1.ang1Z;
			rv1 -= av2X * j1.ang2X + av2Y * j1.ang2Y + av2Z * j1.ang2Z;
			var impulse = (row1.rhs - rv1 - imp1.impulse * row1.cfm) * md1.mass;
			var oldImpulse = imp1.impulse;
			imp1.impulse += impulse;
			if(imp1.impulse < row1.minImpulse) {
				imp1.impulse = row1.minImpulse;
			} else if(imp1.impulse > row1.maxImpulse) {
				imp1.impulse = row1.maxImpulse;
			}
			impulse = imp1.impulse - oldImpulse;
			if((j1.flag & 1) != 0) {
				lv1X += md1.invMLin1X * impulse;
				lv1Y += md1.invMLin1Y * impulse;
				lv1Z += md1.invMLin1Z * impulse;
				lv2X += md1.invMLin2X * -impulse;
				lv2Y += md1.invMLin2Y * -impulse;
				lv2Z += md1.invMLin2Z * -impulse;
			}
			if((j1.flag & 2) != 0) {
				av1X += md1.invMAng1X * impulse;
				av1Y += md1.invMAng1Y * impulse;
				av1Z += md1.invMAng1Z * impulse;
				av2X += md1.invMAng2X * -impulse;
				av2Y += md1.invMAng2Y * -impulse;
				av2Z += md1.invMAng2Z * -impulse;
			}
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,postSolveVelocity: function(timeStep) {
		var lin;
		var linX;
		var linY;
		var linZ;
		var ang;
		var angX;
		var angY;
		var angZ;
		linX = 0;
		linY = 0;
		linZ = 0;
		angX = 0;
		angY = 0;
		angZ = 0;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if((j.flag & 1) != 0) {
				linX += j.lin1X * imp.impulse;
				linY += j.lin1Y * imp.impulse;
				linZ += j.lin1Z * imp.impulse;
			} else if((j.flag & 2) != 0) {
				angX += j.ang1X * imp.impulse;
				angY += j.ang1Y * imp.impulse;
				angZ += j.ang1Z * imp.impulse;
			}
		}
		this.joint._appliedForceX = linX * timeStep.invDt;
		this.joint._appliedForceY = linY * timeStep.invDt;
		this.joint._appliedForceZ = linZ * timeStep.invDt;
		this.joint._appliedTorqueX = angX * timeStep.invDt;
		this.joint._appliedTorqueY = angY * timeStep.invDt;
		this.joint._appliedTorqueZ = angZ * timeStep.invDt;
	}
	,preSolvePosition: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			md.invMLin1X = j.lin1X * invM1;
			md.invMLin1Y = j.lin1Y * invM1;
			md.invMLin1Z = j.lin1Z * invM1;
			md.invMLin2X = j.lin2X * invM2;
			md.invMLin2Y = j.lin2Y * invM2;
			md.invMLin2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAng1X = __tmp__X;
			md.invMAng1Y = __tmp__Y;
			md.invMAng1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAng2X = __tmp__X1;
			md.invMAng2Y = __tmp__Y1;
			md.invMAng2Z = __tmp__Z1;
			md.mass = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.info.rows[i1].impulse.impulseP = 0;
		}
	}
	,solvePositionSplitImpulse: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs * oimo_common_Setting.positionSplitImpulseBaumgarte - rv) * md.mass;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < row.minImpulse) {
				imp.impulseP = row.minImpulse;
			} else if(imp.impulseP > row.maxImpulse) {
				imp.impulseP = row.maxImpulse;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLin1X * impulseP;
			lv1Y += md.invMLin1Y * impulseP;
			lv1Z += md.invMLin1Z * impulseP;
			lv2X += md.invMLin2X * -impulseP;
			lv2Y += md.invMLin2Y * -impulseP;
			lv2Z += md.invMLin2Z * -impulseP;
			av1X += md.invMAng1X * impulseP;
			av1Y += md.invMAng1Y * impulseP;
			av1Z += md.invMAng1Z * impulseP;
			av2X += md.invMAng2X * -impulseP;
			av2Y += md.invMAng2Y * -impulseP;
			av2Z += md.invMAng2Z * -impulseP;
		}
		this._b1._pseudoVelX = lv1X;
		this._b1._pseudoVelY = lv1Y;
		this._b1._pseudoVelZ = lv1Z;
		this._b2._pseudoVelX = lv2X;
		this._b2._pseudoVelY = lv2Y;
		this._b2._pseudoVelZ = lv2Z;
		this._b1._angPseudoVelX = av1X;
		this._b1._angPseudoVelY = av1Y;
		this._b1._angPseudoVelZ = av1Z;
		this._b2._angPseudoVelX = av2X;
		this._b2._angPseudoVelY = av2Y;
		this._b2._angPseudoVelZ = av2Z;
	}
	,solvePositionNgs: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g1 = 0;
		var _g = this.info.numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			md.invMLin1X = j.lin1X * invM1;
			md.invMLin1Y = j.lin1Y * invM1;
			md.invMLin1Z = j.lin1Z * invM1;
			md.invMLin2X = j.lin2X * invM2;
			md.invMLin2Y = j.lin2Y * invM2;
			md.invMLin2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAng1X = __tmp__X;
			md.invMAng1Y = __tmp__Y;
			md.invMAng1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAng2X = __tmp__X1;
			md.invMAng2Y = __tmp__Y1;
			md.invMAng2Z = __tmp__Z1;
			md.mass = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = 0;
		lv1Y = 0;
		lv1Z = 0;
		lv2X = 0;
		lv2Y = 0;
		lv2Z = 0;
		av1X = 0;
		av1Y = 0;
		av1Z = 0;
		av2X = 0;
		av2Y = 0;
		av2Z = 0;
		var _g11 = 0;
		var _g2 = this.info.numRows;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var row1 = this.info.rows[i1];
			var md1 = this.massData[i1];
			var imp1 = row1.impulse;
			var j1 = row1.jacobian;
			var rv = 0;
			rv += lv1X * j1.lin1X + lv1Y * j1.lin1Y + lv1Z * j1.lin1Z;
			rv -= lv2X * j1.lin2X + lv2Y * j1.lin2Y + lv2Z * j1.lin2Z;
			rv += av1X * j1.ang1X + av1Y * j1.ang1Y + av1Z * j1.ang1Z;
			rv -= av2X * j1.ang2X + av2Y * j1.ang2Y + av2Z * j1.ang2Z;
			var impulseP = (row1.rhs * oimo_common_Setting.positionNgsBaumgarte - rv) * md1.mass;
			var oldImpulseP = imp1.impulseP;
			imp1.impulseP += impulseP;
			if(imp1.impulseP < row1.minImpulse) {
				imp1.impulseP = row1.minImpulse;
			} else if(imp1.impulseP > row1.maxImpulse) {
				imp1.impulseP = row1.maxImpulse;
			}
			impulseP = imp1.impulseP - oldImpulseP;
			lv1X += md1.invMLin1X * impulseP;
			lv1Y += md1.invMLin1Y * impulseP;
			lv1Z += md1.invMLin1Z * impulseP;
			lv2X += md1.invMLin2X * -impulseP;
			lv2Y += md1.invMLin2Y * -impulseP;
			lv2Z += md1.invMLin2Z * -impulseP;
			av1X += md1.invMAng1X * impulseP;
			av1Y += md1.invMAng1Y * impulseP;
			av1Z += md1.invMAng1Z * impulseP;
			av2X += md1.invMAng2X * -impulseP;
			av2Y += md1.invMAng2Y * -impulseP;
			av2Z += md1.invMAng2Z * -impulseP;
		}
		var _this = this._b1;
		_this._transform._positionX += lv1X;
		_this._transform._positionY += lv1Y;
		_this._transform._positionZ += lv1Z;
		var _this1 = this._b2;
		_this1._transform._positionX += lv2X;
		_this1._transform._positionY += lv2Y;
		_this1._transform._positionZ += lv2Z;
		var _this2 = this._b1;
		var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxis;
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av1X * rotationToSinAxisFactor;
		sinAxisY = av1Y * rotationToSinAxisFactor;
		sinAxisZ = av1Z * rotationToSinAxisFactor;
		var dq;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this2._transform._rotation00;
		var e11 = _this2._transform._rotation11;
		var e22 = _this2._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
			qY = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
			qZ = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
				qZ = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
				qW = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
				qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
				qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
			qZ = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
			qW = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
			qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
			qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this2._transform._rotation00 = 1 - yy - zz;
		_this2._transform._rotation01 = xy - wz;
		_this2._transform._rotation02 = xz + wy;
		_this2._transform._rotation10 = xy + wz;
		_this2._transform._rotation11 = 1 - xx - zz;
		_this2._transform._rotation12 = yz - wx;
		_this2._transform._rotation20 = xz - wy;
		_this2._transform._rotation21 = yz + wx;
		_this2._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this2._transform._rotation00 * _this2._invLocalInertia00 + _this2._transform._rotation01 * _this2._invLocalInertia10 + _this2._transform._rotation02 * _this2._invLocalInertia20;
		__tmp__01 = _this2._transform._rotation00 * _this2._invLocalInertia01 + _this2._transform._rotation01 * _this2._invLocalInertia11 + _this2._transform._rotation02 * _this2._invLocalInertia21;
		__tmp__02 = _this2._transform._rotation00 * _this2._invLocalInertia02 + _this2._transform._rotation01 * _this2._invLocalInertia12 + _this2._transform._rotation02 * _this2._invLocalInertia22;
		__tmp__10 = _this2._transform._rotation10 * _this2._invLocalInertia00 + _this2._transform._rotation11 * _this2._invLocalInertia10 + _this2._transform._rotation12 * _this2._invLocalInertia20;
		__tmp__11 = _this2._transform._rotation10 * _this2._invLocalInertia01 + _this2._transform._rotation11 * _this2._invLocalInertia11 + _this2._transform._rotation12 * _this2._invLocalInertia21;
		__tmp__12 = _this2._transform._rotation10 * _this2._invLocalInertia02 + _this2._transform._rotation11 * _this2._invLocalInertia12 + _this2._transform._rotation12 * _this2._invLocalInertia22;
		__tmp__20 = _this2._transform._rotation20 * _this2._invLocalInertia00 + _this2._transform._rotation21 * _this2._invLocalInertia10 + _this2._transform._rotation22 * _this2._invLocalInertia20;
		__tmp__21 = _this2._transform._rotation20 * _this2._invLocalInertia01 + _this2._transform._rotation21 * _this2._invLocalInertia11 + _this2._transform._rotation22 * _this2._invLocalInertia21;
		__tmp__22 = _this2._transform._rotation20 * _this2._invLocalInertia02 + _this2._transform._rotation21 * _this2._invLocalInertia12 + _this2._transform._rotation22 * _this2._invLocalInertia22;
		_this2._invInertia00 = __tmp__00;
		_this2._invInertia01 = __tmp__01;
		_this2._invInertia02 = __tmp__02;
		_this2._invInertia10 = __tmp__10;
		_this2._invInertia11 = __tmp__11;
		_this2._invInertia12 = __tmp__12;
		_this2._invInertia20 = __tmp__20;
		_this2._invInertia21 = __tmp__21;
		_this2._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = _this2._invInertia00 * _this2._transform._rotation00 + _this2._invInertia01 * _this2._transform._rotation01 + _this2._invInertia02 * _this2._transform._rotation02;
		__tmp__011 = _this2._invInertia00 * _this2._transform._rotation10 + _this2._invInertia01 * _this2._transform._rotation11 + _this2._invInertia02 * _this2._transform._rotation12;
		__tmp__021 = _this2._invInertia00 * _this2._transform._rotation20 + _this2._invInertia01 * _this2._transform._rotation21 + _this2._invInertia02 * _this2._transform._rotation22;
		__tmp__101 = _this2._invInertia10 * _this2._transform._rotation00 + _this2._invInertia11 * _this2._transform._rotation01 + _this2._invInertia12 * _this2._transform._rotation02;
		__tmp__111 = _this2._invInertia10 * _this2._transform._rotation10 + _this2._invInertia11 * _this2._transform._rotation11 + _this2._invInertia12 * _this2._transform._rotation12;
		__tmp__121 = _this2._invInertia10 * _this2._transform._rotation20 + _this2._invInertia11 * _this2._transform._rotation21 + _this2._invInertia12 * _this2._transform._rotation22;
		__tmp__201 = _this2._invInertia20 * _this2._transform._rotation00 + _this2._invInertia21 * _this2._transform._rotation01 + _this2._invInertia22 * _this2._transform._rotation02;
		__tmp__211 = _this2._invInertia20 * _this2._transform._rotation10 + _this2._invInertia21 * _this2._transform._rotation11 + _this2._invInertia22 * _this2._transform._rotation12;
		__tmp__221 = _this2._invInertia20 * _this2._transform._rotation20 + _this2._invInertia21 * _this2._transform._rotation21 + _this2._invInertia22 * _this2._transform._rotation22;
		_this2._invInertia00 = __tmp__001;
		_this2._invInertia01 = __tmp__011;
		_this2._invInertia02 = __tmp__021;
		_this2._invInertia10 = __tmp__101;
		_this2._invInertia11 = __tmp__111;
		_this2._invInertia12 = __tmp__121;
		_this2._invInertia20 = __tmp__201;
		_this2._invInertia21 = __tmp__211;
		_this2._invInertia22 = __tmp__221;
		_this2._invInertia00 *= _this2._rotFactor.x;
		_this2._invInertia01 *= _this2._rotFactor.x;
		_this2._invInertia02 *= _this2._rotFactor.x;
		_this2._invInertia10 *= _this2._rotFactor.y;
		_this2._invInertia11 *= _this2._rotFactor.y;
		_this2._invInertia12 *= _this2._rotFactor.y;
		_this2._invInertia20 *= _this2._rotFactor.z;
		_this2._invInertia21 *= _this2._rotFactor.z;
		_this2._invInertia22 *= _this2._rotFactor.z;
		var _this3 = this._b2;
		var theta1 = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
		var halfTheta1 = theta1 * 0.5;
		var rotationToSinAxisFactor1;
		var cosHalfTheta1;
		if(halfTheta1 < 0.5) {
			var ht21 = halfTheta1 * halfTheta1;
			rotationToSinAxisFactor1 = 0.5 * (1 - ht21 * 0.16666666666666666 + ht21 * ht21 * 0.0083333333333333332);
			cosHalfTheta1 = 1 - ht21 * 0.5 + ht21 * ht21 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor1 = Math.sin(halfTheta1) / theta1;
			cosHalfTheta1 = Math.cos(halfTheta1);
		}
		var sinAxis1;
		var sinAxisX1;
		var sinAxisY1;
		var sinAxisZ1;
		sinAxisX1 = av2X * rotationToSinAxisFactor1;
		sinAxisY1 = av2Y * rotationToSinAxisFactor1;
		sinAxisZ1 = av2Z * rotationToSinAxisFactor1;
		var dq1;
		var dqX1;
		var dqY1;
		var dqZ1;
		var dqW1;
		dqX1 = sinAxisX1;
		dqY1 = sinAxisY1;
		dqZ1 = sinAxisZ1;
		dqW1 = cosHalfTheta1;
		var q1;
		var qX1;
		var qY1;
		var qZ1;
		var qW1;
		var e001 = _this3._transform._rotation00;
		var e111 = _this3._transform._rotation11;
		var e221 = _this3._transform._rotation22;
		var t1 = e001 + e111 + e221;
		var s1;
		if(t1 > 0) {
			s1 = Math.sqrt(t1 + 1);
			qW1 = 0.5 * s1;
			s1 = 0.5 / s1;
			qX1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
			qY1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
			qZ1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
		} else if(e001 > e111) {
			if(e001 > e221) {
				s1 = Math.sqrt(e001 - e111 - e221 + 1);
				qX1 = 0.5 * s1;
				s1 = 0.5 / s1;
				qY1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
				qZ1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
				qW1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
			} else {
				s1 = Math.sqrt(e221 - e001 - e111 + 1);
				qZ1 = 0.5 * s1;
				s1 = 0.5 / s1;
				qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
				qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
				qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
			}
		} else if(e111 > e221) {
			s1 = Math.sqrt(e111 - e221 - e001 + 1);
			qY1 = 0.5 * s1;
			s1 = 0.5 / s1;
			qX1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
			qZ1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
			qW1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
		} else {
			s1 = Math.sqrt(e221 - e001 - e111 + 1);
			qZ1 = 0.5 * s1;
			s1 = 0.5 / s1;
			qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
			qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
			qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
		}
		qX1 = dqW1 * qX1 + dqX1 * qW1 + dqY1 * qZ1 - dqZ1 * qY1;
		qY1 = dqW1 * qY1 - dqX1 * qZ1 + dqY1 * qW1 + dqZ1 * qX1;
		qZ1 = dqW1 * qZ1 + dqX1 * qY1 - dqY1 * qX1 + dqZ1 * qW1;
		qW1 = dqW1 * qW1 - dqX1 * qX1 - dqY1 * qY1 - dqZ1 * qZ1;
		var l1 = qX1 * qX1 + qY1 * qY1 + qZ1 * qZ1 + qW1 * qW1;
		if(l1 > 1e-32) {
			l1 = 1 / Math.sqrt(l1);
		}
		qX1 *= l1;
		qY1 *= l1;
		qZ1 *= l1;
		qW1 *= l1;
		var x1 = qX1;
		var y1 = qY1;
		var z1 = qZ1;
		var w1 = qW1;
		var x21 = 2 * x1;
		var y21 = 2 * y1;
		var z21 = 2 * z1;
		var xx1 = x1 * x21;
		var yy1 = y1 * y21;
		var zz1 = z1 * z21;
		var xy1 = x1 * y21;
		var yz1 = y1 * z21;
		var xz1 = x1 * z21;
		var wx1 = w1 * x21;
		var wy1 = w1 * y21;
		var wz1 = w1 * z21;
		_this3._transform._rotation00 = 1 - yy1 - zz1;
		_this3._transform._rotation01 = xy1 - wz1;
		_this3._transform._rotation02 = xz1 + wy1;
		_this3._transform._rotation10 = xy1 + wz1;
		_this3._transform._rotation11 = 1 - xx1 - zz1;
		_this3._transform._rotation12 = yz1 - wx1;
		_this3._transform._rotation20 = xz1 - wy1;
		_this3._transform._rotation21 = yz1 + wx1;
		_this3._transform._rotation22 = 1 - xx1 - yy1;
		var __tmp__002;
		var __tmp__012;
		var __tmp__022;
		var __tmp__102;
		var __tmp__112;
		var __tmp__122;
		var __tmp__202;
		var __tmp__212;
		var __tmp__222;
		__tmp__002 = _this3._transform._rotation00 * _this3._invLocalInertia00 + _this3._transform._rotation01 * _this3._invLocalInertia10 + _this3._transform._rotation02 * _this3._invLocalInertia20;
		__tmp__012 = _this3._transform._rotation00 * _this3._invLocalInertia01 + _this3._transform._rotation01 * _this3._invLocalInertia11 + _this3._transform._rotation02 * _this3._invLocalInertia21;
		__tmp__022 = _this3._transform._rotation00 * _this3._invLocalInertia02 + _this3._transform._rotation01 * _this3._invLocalInertia12 + _this3._transform._rotation02 * _this3._invLocalInertia22;
		__tmp__102 = _this3._transform._rotation10 * _this3._invLocalInertia00 + _this3._transform._rotation11 * _this3._invLocalInertia10 + _this3._transform._rotation12 * _this3._invLocalInertia20;
		__tmp__112 = _this3._transform._rotation10 * _this3._invLocalInertia01 + _this3._transform._rotation11 * _this3._invLocalInertia11 + _this3._transform._rotation12 * _this3._invLocalInertia21;
		__tmp__122 = _this3._transform._rotation10 * _this3._invLocalInertia02 + _this3._transform._rotation11 * _this3._invLocalInertia12 + _this3._transform._rotation12 * _this3._invLocalInertia22;
		__tmp__202 = _this3._transform._rotation20 * _this3._invLocalInertia00 + _this3._transform._rotation21 * _this3._invLocalInertia10 + _this3._transform._rotation22 * _this3._invLocalInertia20;
		__tmp__212 = _this3._transform._rotation20 * _this3._invLocalInertia01 + _this3._transform._rotation21 * _this3._invLocalInertia11 + _this3._transform._rotation22 * _this3._invLocalInertia21;
		__tmp__222 = _this3._transform._rotation20 * _this3._invLocalInertia02 + _this3._transform._rotation21 * _this3._invLocalInertia12 + _this3._transform._rotation22 * _this3._invLocalInertia22;
		_this3._invInertia00 = __tmp__002;
		_this3._invInertia01 = __tmp__012;
		_this3._invInertia02 = __tmp__022;
		_this3._invInertia10 = __tmp__102;
		_this3._invInertia11 = __tmp__112;
		_this3._invInertia12 = __tmp__122;
		_this3._invInertia20 = __tmp__202;
		_this3._invInertia21 = __tmp__212;
		_this3._invInertia22 = __tmp__222;
		var __tmp__003;
		var __tmp__013;
		var __tmp__023;
		var __tmp__103;
		var __tmp__113;
		var __tmp__123;
		var __tmp__203;
		var __tmp__213;
		var __tmp__223;
		__tmp__003 = _this3._invInertia00 * _this3._transform._rotation00 + _this3._invInertia01 * _this3._transform._rotation01 + _this3._invInertia02 * _this3._transform._rotation02;
		__tmp__013 = _this3._invInertia00 * _this3._transform._rotation10 + _this3._invInertia01 * _this3._transform._rotation11 + _this3._invInertia02 * _this3._transform._rotation12;
		__tmp__023 = _this3._invInertia00 * _this3._transform._rotation20 + _this3._invInertia01 * _this3._transform._rotation21 + _this3._invInertia02 * _this3._transform._rotation22;
		__tmp__103 = _this3._invInertia10 * _this3._transform._rotation00 + _this3._invInertia11 * _this3._transform._rotation01 + _this3._invInertia12 * _this3._transform._rotation02;
		__tmp__113 = _this3._invInertia10 * _this3._transform._rotation10 + _this3._invInertia11 * _this3._transform._rotation11 + _this3._invInertia12 * _this3._transform._rotation12;
		__tmp__123 = _this3._invInertia10 * _this3._transform._rotation20 + _this3._invInertia11 * _this3._transform._rotation21 + _this3._invInertia12 * _this3._transform._rotation22;
		__tmp__203 = _this3._invInertia20 * _this3._transform._rotation00 + _this3._invInertia21 * _this3._transform._rotation01 + _this3._invInertia22 * _this3._transform._rotation02;
		__tmp__213 = _this3._invInertia20 * _this3._transform._rotation10 + _this3._invInertia21 * _this3._transform._rotation11 + _this3._invInertia22 * _this3._transform._rotation12;
		__tmp__223 = _this3._invInertia20 * _this3._transform._rotation20 + _this3._invInertia21 * _this3._transform._rotation21 + _this3._invInertia22 * _this3._transform._rotation22;
		_this3._invInertia00 = __tmp__003;
		_this3._invInertia01 = __tmp__013;
		_this3._invInertia02 = __tmp__023;
		_this3._invInertia10 = __tmp__103;
		_this3._invInertia11 = __tmp__113;
		_this3._invInertia12 = __tmp__123;
		_this3._invInertia20 = __tmp__203;
		_this3._invInertia21 = __tmp__213;
		_this3._invInertia22 = __tmp__223;
		_this3._invInertia00 *= _this3._rotFactor.x;
		_this3._invInertia01 *= _this3._rotFactor.x;
		_this3._invInertia02 *= _this3._rotFactor.x;
		_this3._invInertia10 *= _this3._rotFactor.y;
		_this3._invInertia11 *= _this3._rotFactor.y;
		_this3._invInertia12 *= _this3._rotFactor.y;
		_this3._invInertia20 *= _this3._rotFactor.z;
		_this3._invInertia21 *= _this3._rotFactor.z;
		_this3._invInertia22 *= _this3._rotFactor.z;
	}
	,postSolve: function() {
		this.joint._syncAnchors();
		this.joint._checkDestruction();
	}
});
var oimo_dynamics_rigidbody_MassData = function() {
	this.mass = 0;
	this.localInertia = new oimo_common_Mat3();
};
oimo_dynamics_rigidbody_MassData.__name__ = true;
var oimo_dynamics_rigidbody_RigidBody = function(config) {
	this._next = null;
	this._prev = null;
	this._shapeList = null;
	this._shapeListLast = null;
	this._numShapes = 0;
	this._contactLinkList = null;
	this._contactLinkListLast = null;
	this._numContactLinks = 0;
	this._jointLinkList = null;
	this._jointLinkListLast = null;
	this._numJointLinks = 0;
	var v = config.linearVelocity;
	this._velX = v.x;
	this._velY = v.y;
	this._velZ = v.z;
	var v1 = config.angularVelocity;
	this._angVelX = v1.x;
	this._angVelY = v1.y;
	this._angVelZ = v1.z;
	this._pseudoVelX = 0;
	this._pseudoVelY = 0;
	this._pseudoVelZ = 0;
	this._angPseudoVelX = 0;
	this._angPseudoVelY = 0;
	this._angPseudoVelZ = 0;
	this._ptransform = new oimo_common_Transform();
	this._transform = new oimo_common_Transform();
	var v2 = config.position;
	this._ptransform._positionX = v2.x;
	this._ptransform._positionY = v2.y;
	this._ptransform._positionZ = v2.z;
	var m = config.rotation;
	this._ptransform._rotation00 = m.e00;
	this._ptransform._rotation01 = m.e01;
	this._ptransform._rotation02 = m.e02;
	this._ptransform._rotation10 = m.e10;
	this._ptransform._rotation11 = m.e11;
	this._ptransform._rotation12 = m.e12;
	this._ptransform._rotation20 = m.e20;
	this._ptransform._rotation21 = m.e21;
	this._ptransform._rotation22 = m.e22;
	var dst = this._transform;
	var src = this._ptransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	this._type = config.type;
	this._sleepTime = 0;
	this._sleeping = false;
	this._autoSleep = config.autoSleep;
	this._mass = 0;
	this._invMass = 0;
	this._localInertia00 = 0;
	this._localInertia01 = 0;
	this._localInertia02 = 0;
	this._localInertia10 = 0;
	this._localInertia11 = 0;
	this._localInertia12 = 0;
	this._localInertia20 = 0;
	this._localInertia21 = 0;
	this._localInertia22 = 0;
	this._invLocalInertia00 = 0;
	this._invLocalInertia01 = 0;
	this._invLocalInertia02 = 0;
	this._invLocalInertia10 = 0;
	this._invLocalInertia11 = 0;
	this._invLocalInertia12 = 0;
	this._invLocalInertia20 = 0;
	this._invLocalInertia21 = 0;
	this._invLocalInertia22 = 0;
	this._invLocalInertiaWithoutRotFactor00 = 0;
	this._invLocalInertiaWithoutRotFactor01 = 0;
	this._invLocalInertiaWithoutRotFactor02 = 0;
	this._invLocalInertiaWithoutRotFactor10 = 0;
	this._invLocalInertiaWithoutRotFactor11 = 0;
	this._invLocalInertiaWithoutRotFactor12 = 0;
	this._invLocalInertiaWithoutRotFactor20 = 0;
	this._invLocalInertiaWithoutRotFactor21 = 0;
	this._invLocalInertiaWithoutRotFactor22 = 0;
	this._invInertia00 = 0;
	this._invInertia01 = 0;
	this._invInertia02 = 0;
	this._invInertia10 = 0;
	this._invInertia11 = 0;
	this._invInertia12 = 0;
	this._invInertia20 = 0;
	this._invInertia21 = 0;
	this._invInertia22 = 0;
	this._linearDamping = config.linearDamping;
	this._angularDamping = config.angularDamping;
	this._forceX = 0;
	this._forceY = 0;
	this._forceZ = 0;
	this._torqueX = 0;
	this._torqueY = 0;
	this._torqueZ = 0;
	this._linearContactImpulseX = 0;
	this._linearContactImpulseY = 0;
	this._linearContactImpulseZ = 0;
	this._angularContactImpulseX = 0;
	this._angularContactImpulseY = 0;
	this._angularContactImpulseZ = 0;
	this._rotFactor = new oimo_common_Vec3(1,1,1);
	this._addedToIsland = false;
	this._gravityScale = 1;
	this._world = null;
};
oimo_dynamics_rigidbody_RigidBody.__name__ = true;
oimo_dynamics_rigidbody_RigidBody.prototype = {
	_integrate: function(dt) {
		var _g = this._type;
		switch(_g) {
		case 1:
			this._velX = 0;
			this._velY = 0;
			this._velZ = 0;
			this._angVelX = 0;
			this._angVelY = 0;
			this._angVelZ = 0;
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			break;
		case 0:case 2:
			var translation;
			var translationX;
			var translationY;
			var translationZ;
			var rotation;
			var rotationX;
			var rotationY;
			var rotationZ;
			translationX = this._velX * dt;
			translationY = this._velY * dt;
			translationZ = this._velZ * dt;
			rotationX = this._angVelX * dt;
			rotationY = this._angVelY * dt;
			rotationZ = this._angVelZ * dt;
			var translationLengthSq = translationX * translationX + translationY * translationY + translationZ * translationZ;
			var rotationLengthSq = rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ;
			if(translationLengthSq == 0 && rotationLengthSq == 0) {
				return;
			}
			if(translationLengthSq > oimo_common_Setting.maxTranslationPerStep * oimo_common_Setting.maxTranslationPerStep) {
				var l = oimo_common_Setting.maxTranslationPerStep / Math.sqrt(translationLengthSq);
				this._velX *= l;
				this._velY *= l;
				this._velZ *= l;
				translationX *= l;
				translationY *= l;
				translationZ *= l;
			}
			if(rotationLengthSq > oimo_common_Setting.maxRotationPerStep * oimo_common_Setting.maxRotationPerStep) {
				var l1 = oimo_common_Setting.maxRotationPerStep / Math.sqrt(rotationLengthSq);
				this._angVelX *= l1;
				this._angVelY *= l1;
				this._angVelZ *= l1;
				rotationX *= l1;
				rotationY *= l1;
				rotationZ *= l1;
			}
			this._transform._positionX += translationX;
			this._transform._positionY += translationY;
			this._transform._positionZ += translationZ;
			var theta = Math.sqrt(rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ);
			var halfTheta = theta * 0.5;
			var rotationToSinAxisFactor;
			var cosHalfTheta;
			if(halfTheta < 0.5) {
				var ht2 = halfTheta * halfTheta;
				rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
				cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
			} else {
				rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
				cosHalfTheta = Math.cos(halfTheta);
			}
			var sinAxis;
			var sinAxisX;
			var sinAxisY;
			var sinAxisZ;
			sinAxisX = rotationX * rotationToSinAxisFactor;
			sinAxisY = rotationY * rotationToSinAxisFactor;
			sinAxisZ = rotationZ * rotationToSinAxisFactor;
			var dq;
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = sinAxisX;
			dqY = sinAxisY;
			dqZ = sinAxisZ;
			dqW = cosHalfTheta;
			var q;
			var qX;
			var qY;
			var qZ;
			var qW;
			var e00 = this._transform._rotation00;
			var e11 = this._transform._rotation11;
			var e22 = this._transform._rotation22;
			var t = e00 + e11 + e22;
			var s;
			if(t > 0) {
				s = Math.sqrt(t + 1);
				qW = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation21 - this._transform._rotation12) * s;
				qY = (this._transform._rotation02 - this._transform._rotation20) * s;
				qZ = (this._transform._rotation10 - this._transform._rotation01) * s;
			} else if(e00 > e11) {
				if(e00 > e22) {
					s = Math.sqrt(e00 - e11 - e22 + 1);
					qX = 0.5 * s;
					s = 0.5 / s;
					qY = (this._transform._rotation01 + this._transform._rotation10) * s;
					qZ = (this._transform._rotation02 + this._transform._rotation20) * s;
					qW = (this._transform._rotation21 - this._transform._rotation12) * s;
				} else {
					s = Math.sqrt(e22 - e00 - e11 + 1);
					qZ = 0.5 * s;
					s = 0.5 / s;
					qX = (this._transform._rotation02 + this._transform._rotation20) * s;
					qY = (this._transform._rotation12 + this._transform._rotation21) * s;
					qW = (this._transform._rotation10 - this._transform._rotation01) * s;
				}
			} else if(e11 > e22) {
				s = Math.sqrt(e11 - e22 - e00 + 1);
				qY = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation01 + this._transform._rotation10) * s;
				qZ = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation02 - this._transform._rotation20) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation02 + this._transform._rotation20) * s;
				qY = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
			qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
			qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
			qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
			qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
			var l2 = qX * qX + qY * qY + qZ * qZ + qW * qW;
			if(l2 > 1e-32) {
				l2 = 1 / Math.sqrt(l2);
			}
			qX *= l2;
			qY *= l2;
			qZ *= l2;
			qW *= l2;
			var x = qX;
			var y = qY;
			var z = qZ;
			var w = qW;
			var x2 = 2 * x;
			var y2 = 2 * y;
			var z2 = 2 * z;
			var xx = x * x2;
			var yy = y * y2;
			var zz = z * z2;
			var xy = x * y2;
			var yz = y * z2;
			var xz = x * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			this._transform._rotation00 = 1 - yy - zz;
			this._transform._rotation01 = xy - wz;
			this._transform._rotation02 = xz + wy;
			this._transform._rotation10 = xy + wz;
			this._transform._rotation11 = 1 - xx - zz;
			this._transform._rotation12 = yz - wx;
			this._transform._rotation20 = xz - wy;
			this._transform._rotation21 = yz + wx;
			this._transform._rotation22 = 1 - xx - yy;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
			__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
			__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
			__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
			__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
			__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
			__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
			__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
			__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
			__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
			__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
			__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
			__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
			__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
			__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
			__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
			__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
			this._invInertia00 = __tmp__001;
			this._invInertia01 = __tmp__011;
			this._invInertia02 = __tmp__021;
			this._invInertia10 = __tmp__101;
			this._invInertia11 = __tmp__111;
			this._invInertia12 = __tmp__121;
			this._invInertia20 = __tmp__201;
			this._invInertia21 = __tmp__211;
			this._invInertia22 = __tmp__221;
			this._invInertia00 *= this._rotFactor.x;
			this._invInertia01 *= this._rotFactor.x;
			this._invInertia02 *= this._rotFactor.x;
			this._invInertia10 *= this._rotFactor.y;
			this._invInertia11 *= this._rotFactor.y;
			this._invInertia12 *= this._rotFactor.y;
			this._invInertia20 *= this._rotFactor.z;
			this._invInertia21 *= this._rotFactor.z;
			this._invInertia22 *= this._rotFactor.z;
			break;
		}
	}
	,_integratePseudoVelocity: function() {
		var pseudoVelLengthSq = this._pseudoVelX * this._pseudoVelX + this._pseudoVelY * this._pseudoVelY + this._pseudoVelZ * this._pseudoVelZ;
		var angPseudoVelLengthSq = this._angPseudoVelX * this._angPseudoVelX + this._angPseudoVelY * this._angPseudoVelY + this._angPseudoVelZ * this._angPseudoVelZ;
		if(pseudoVelLengthSq == 0 && angPseudoVelLengthSq == 0) {
			return;
		}
		var _g = this._type;
		switch(_g) {
		case 1:
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			break;
		case 0:case 2:
			var translation;
			var translationX;
			var translationY;
			var translationZ;
			var rotation;
			var rotationX;
			var rotationY;
			var rotationZ;
			translationX = this._pseudoVelX;
			translationY = this._pseudoVelY;
			translationZ = this._pseudoVelZ;
			rotationX = this._angPseudoVelX;
			rotationY = this._angPseudoVelY;
			rotationZ = this._angPseudoVelZ;
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			this._transform._positionX += translationX;
			this._transform._positionY += translationY;
			this._transform._positionZ += translationZ;
			var theta = Math.sqrt(rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ);
			var halfTheta = theta * 0.5;
			var rotationToSinAxisFactor;
			var cosHalfTheta;
			if(halfTheta < 0.5) {
				var ht2 = halfTheta * halfTheta;
				rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
				cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
			} else {
				rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
				cosHalfTheta = Math.cos(halfTheta);
			}
			var sinAxis;
			var sinAxisX;
			var sinAxisY;
			var sinAxisZ;
			sinAxisX = rotationX * rotationToSinAxisFactor;
			sinAxisY = rotationY * rotationToSinAxisFactor;
			sinAxisZ = rotationZ * rotationToSinAxisFactor;
			var dq;
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = sinAxisX;
			dqY = sinAxisY;
			dqZ = sinAxisZ;
			dqW = cosHalfTheta;
			var q;
			var qX;
			var qY;
			var qZ;
			var qW;
			var e00 = this._transform._rotation00;
			var e11 = this._transform._rotation11;
			var e22 = this._transform._rotation22;
			var t = e00 + e11 + e22;
			var s;
			if(t > 0) {
				s = Math.sqrt(t + 1);
				qW = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation21 - this._transform._rotation12) * s;
				qY = (this._transform._rotation02 - this._transform._rotation20) * s;
				qZ = (this._transform._rotation10 - this._transform._rotation01) * s;
			} else if(e00 > e11) {
				if(e00 > e22) {
					s = Math.sqrt(e00 - e11 - e22 + 1);
					qX = 0.5 * s;
					s = 0.5 / s;
					qY = (this._transform._rotation01 + this._transform._rotation10) * s;
					qZ = (this._transform._rotation02 + this._transform._rotation20) * s;
					qW = (this._transform._rotation21 - this._transform._rotation12) * s;
				} else {
					s = Math.sqrt(e22 - e00 - e11 + 1);
					qZ = 0.5 * s;
					s = 0.5 / s;
					qX = (this._transform._rotation02 + this._transform._rotation20) * s;
					qY = (this._transform._rotation12 + this._transform._rotation21) * s;
					qW = (this._transform._rotation10 - this._transform._rotation01) * s;
				}
			} else if(e11 > e22) {
				s = Math.sqrt(e11 - e22 - e00 + 1);
				qY = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation01 + this._transform._rotation10) * s;
				qZ = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation02 - this._transform._rotation20) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation02 + this._transform._rotation20) * s;
				qY = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
			qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
			qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
			qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
			qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
			var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			qX *= l;
			qY *= l;
			qZ *= l;
			qW *= l;
			var x = qX;
			var y = qY;
			var z = qZ;
			var w = qW;
			var x2 = 2 * x;
			var y2 = 2 * y;
			var z2 = 2 * z;
			var xx = x * x2;
			var yy = y * y2;
			var zz = z * z2;
			var xy = x * y2;
			var yz = y * z2;
			var xz = x * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			this._transform._rotation00 = 1 - yy - zz;
			this._transform._rotation01 = xy - wz;
			this._transform._rotation02 = xz + wy;
			this._transform._rotation10 = xy + wz;
			this._transform._rotation11 = 1 - xx - zz;
			this._transform._rotation12 = yz - wx;
			this._transform._rotation20 = xz - wy;
			this._transform._rotation21 = yz + wx;
			this._transform._rotation22 = 1 - xx - yy;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
			__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
			__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
			__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
			__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
			__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
			__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
			__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
			__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
			__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
			__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
			__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
			__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
			__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
			__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
			__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
			__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
			this._invInertia00 = __tmp__001;
			this._invInertia01 = __tmp__011;
			this._invInertia02 = __tmp__021;
			this._invInertia10 = __tmp__101;
			this._invInertia11 = __tmp__111;
			this._invInertia12 = __tmp__121;
			this._invInertia20 = __tmp__201;
			this._invInertia21 = __tmp__211;
			this._invInertia22 = __tmp__221;
			this._invInertia00 *= this._rotFactor.x;
			this._invInertia01 *= this._rotFactor.x;
			this._invInertia02 *= this._rotFactor.x;
			this._invInertia10 *= this._rotFactor.y;
			this._invInertia11 *= this._rotFactor.y;
			this._invInertia12 *= this._rotFactor.y;
			this._invInertia20 *= this._rotFactor.z;
			this._invInertia21 *= this._rotFactor.z;
			this._invInertia22 *= this._rotFactor.z;
			break;
		}
	}
	,updateMass: function() {
		var totalInertia;
		var totalInertia00;
		var totalInertia01;
		var totalInertia02;
		var totalInertia10;
		var totalInertia11;
		var totalInertia12;
		var totalInertia20;
		var totalInertia21;
		var totalInertia22;
		totalInertia00 = 0;
		totalInertia01 = 0;
		totalInertia02 = 0;
		totalInertia10 = 0;
		totalInertia11 = 0;
		totalInertia12 = 0;
		totalInertia20 = 0;
		totalInertia21 = 0;
		totalInertia22 = 0;
		var totalMass = 0;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var g = s._geom;
			g._updateMass();
			var mass = s._density * g._volume;
			var inertia;
			var inertia00;
			var inertia01;
			var inertia02;
			var inertia10;
			var inertia11;
			var inertia12;
			var inertia20;
			var inertia21;
			var inertia22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = s._localTransform._rotation00 * g._inertiaCoeff00 + s._localTransform._rotation01 * g._inertiaCoeff10 + s._localTransform._rotation02 * g._inertiaCoeff20;
			__tmp__01 = s._localTransform._rotation00 * g._inertiaCoeff01 + s._localTransform._rotation01 * g._inertiaCoeff11 + s._localTransform._rotation02 * g._inertiaCoeff21;
			__tmp__02 = s._localTransform._rotation00 * g._inertiaCoeff02 + s._localTransform._rotation01 * g._inertiaCoeff12 + s._localTransform._rotation02 * g._inertiaCoeff22;
			__tmp__10 = s._localTransform._rotation10 * g._inertiaCoeff00 + s._localTransform._rotation11 * g._inertiaCoeff10 + s._localTransform._rotation12 * g._inertiaCoeff20;
			__tmp__11 = s._localTransform._rotation10 * g._inertiaCoeff01 + s._localTransform._rotation11 * g._inertiaCoeff11 + s._localTransform._rotation12 * g._inertiaCoeff21;
			__tmp__12 = s._localTransform._rotation10 * g._inertiaCoeff02 + s._localTransform._rotation11 * g._inertiaCoeff12 + s._localTransform._rotation12 * g._inertiaCoeff22;
			__tmp__20 = s._localTransform._rotation20 * g._inertiaCoeff00 + s._localTransform._rotation21 * g._inertiaCoeff10 + s._localTransform._rotation22 * g._inertiaCoeff20;
			__tmp__21 = s._localTransform._rotation20 * g._inertiaCoeff01 + s._localTransform._rotation21 * g._inertiaCoeff11 + s._localTransform._rotation22 * g._inertiaCoeff21;
			__tmp__22 = s._localTransform._rotation20 * g._inertiaCoeff02 + s._localTransform._rotation21 * g._inertiaCoeff12 + s._localTransform._rotation22 * g._inertiaCoeff22;
			inertia00 = __tmp__00;
			inertia01 = __tmp__01;
			inertia02 = __tmp__02;
			inertia10 = __tmp__10;
			inertia11 = __tmp__11;
			inertia12 = __tmp__12;
			inertia20 = __tmp__20;
			inertia21 = __tmp__21;
			inertia22 = __tmp__22;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = inertia00 * s._localTransform._rotation00 + inertia01 * s._localTransform._rotation01 + inertia02 * s._localTransform._rotation02;
			__tmp__011 = inertia00 * s._localTransform._rotation10 + inertia01 * s._localTransform._rotation11 + inertia02 * s._localTransform._rotation12;
			__tmp__021 = inertia00 * s._localTransform._rotation20 + inertia01 * s._localTransform._rotation21 + inertia02 * s._localTransform._rotation22;
			__tmp__101 = inertia10 * s._localTransform._rotation00 + inertia11 * s._localTransform._rotation01 + inertia12 * s._localTransform._rotation02;
			__tmp__111 = inertia10 * s._localTransform._rotation10 + inertia11 * s._localTransform._rotation11 + inertia12 * s._localTransform._rotation12;
			__tmp__121 = inertia10 * s._localTransform._rotation20 + inertia11 * s._localTransform._rotation21 + inertia12 * s._localTransform._rotation22;
			__tmp__201 = inertia20 * s._localTransform._rotation00 + inertia21 * s._localTransform._rotation01 + inertia22 * s._localTransform._rotation02;
			__tmp__211 = inertia20 * s._localTransform._rotation10 + inertia21 * s._localTransform._rotation11 + inertia22 * s._localTransform._rotation12;
			__tmp__221 = inertia20 * s._localTransform._rotation20 + inertia21 * s._localTransform._rotation21 + inertia22 * s._localTransform._rotation22;
			inertia00 = __tmp__001;
			inertia01 = __tmp__011;
			inertia02 = __tmp__021;
			inertia10 = __tmp__101;
			inertia11 = __tmp__111;
			inertia12 = __tmp__121;
			inertia20 = __tmp__201;
			inertia21 = __tmp__211;
			inertia22 = __tmp__221;
			inertia00 *= mass;
			inertia01 *= mass;
			inertia02 *= mass;
			inertia10 *= mass;
			inertia11 *= mass;
			inertia12 *= mass;
			inertia20 *= mass;
			inertia21 *= mass;
			inertia22 *= mass;
			var cogInertia;
			var cogInertia00;
			var cogInertia01;
			var cogInertia02;
			var cogInertia10;
			var cogInertia11;
			var cogInertia12;
			var cogInertia20;
			var cogInertia21;
			var cogInertia22;
			var xx = s._localTransform._positionX * s._localTransform._positionX;
			var yy = s._localTransform._positionY * s._localTransform._positionY;
			var zz = s._localTransform._positionZ * s._localTransform._positionZ;
			var xy = -s._localTransform._positionX * s._localTransform._positionY;
			var yz = -s._localTransform._positionY * s._localTransform._positionZ;
			var zx = -s._localTransform._positionZ * s._localTransform._positionX;
			cogInertia00 = yy + zz;
			cogInertia01 = xy;
			cogInertia02 = zx;
			cogInertia10 = xy;
			cogInertia11 = xx + zz;
			cogInertia12 = yz;
			cogInertia20 = zx;
			cogInertia21 = yz;
			cogInertia22 = xx + yy;
			inertia00 += cogInertia00 * mass;
			inertia01 += cogInertia01 * mass;
			inertia02 += cogInertia02 * mass;
			inertia10 += cogInertia10 * mass;
			inertia11 += cogInertia11 * mass;
			inertia12 += cogInertia12 * mass;
			inertia20 += cogInertia20 * mass;
			inertia21 += cogInertia21 * mass;
			inertia22 += cogInertia22 * mass;
			totalMass += mass;
			totalInertia00 += inertia00;
			totalInertia01 += inertia01;
			totalInertia02 += inertia02;
			totalInertia10 += inertia10;
			totalInertia11 += inertia11;
			totalInertia12 += inertia12;
			totalInertia20 += inertia20;
			totalInertia21 += inertia21;
			totalInertia22 += inertia22;
			s = n;
		}
		this._mass = totalMass;
		this._localInertia00 = totalInertia00;
		this._localInertia01 = totalInertia01;
		this._localInertia02 = totalInertia02;
		this._localInertia10 = totalInertia10;
		this._localInertia11 = totalInertia11;
		this._localInertia12 = totalInertia12;
		this._localInertia20 = totalInertia20;
		this._localInertia21 = totalInertia21;
		this._localInertia22 = totalInertia22;
		var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
		var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
		var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
		var det = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
		if(this._mass > 0 && det > 0 && this._type == 0) {
			this._invMass = 1 / this._mass;
			var d001 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
			var d011 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
			var d021 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
			var d10 = this._localInertia01 * this._localInertia22 - this._localInertia02 * this._localInertia21;
			var d11 = this._localInertia00 * this._localInertia22 - this._localInertia02 * this._localInertia20;
			var d12 = this._localInertia00 * this._localInertia21 - this._localInertia01 * this._localInertia20;
			var d20 = this._localInertia01 * this._localInertia12 - this._localInertia02 * this._localInertia11;
			var d21 = this._localInertia00 * this._localInertia12 - this._localInertia02 * this._localInertia10;
			var d22 = this._localInertia00 * this._localInertia11 - this._localInertia01 * this._localInertia10;
			var d = this._localInertia00 * d001 - this._localInertia01 * d011 + this._localInertia02 * d021;
			if(d < -1e-32 || d > 1e-32) {
				d = 1 / d;
			}
			this._invLocalInertia00 = d001 * d;
			this._invLocalInertia01 = -d10 * d;
			this._invLocalInertia02 = d20 * d;
			this._invLocalInertia10 = -d011 * d;
			this._invLocalInertia11 = d11 * d;
			this._invLocalInertia12 = -d21 * d;
			this._invLocalInertia20 = d021 * d;
			this._invLocalInertia21 = -d12 * d;
			this._invLocalInertia22 = d22 * d;
			this._invLocalInertiaWithoutRotFactor00 = this._invLocalInertia00;
			this._invLocalInertiaWithoutRotFactor01 = this._invLocalInertia01;
			this._invLocalInertiaWithoutRotFactor02 = this._invLocalInertia02;
			this._invLocalInertiaWithoutRotFactor10 = this._invLocalInertia10;
			this._invLocalInertiaWithoutRotFactor11 = this._invLocalInertia11;
			this._invLocalInertiaWithoutRotFactor12 = this._invLocalInertia12;
			this._invLocalInertiaWithoutRotFactor20 = this._invLocalInertia20;
			this._invLocalInertiaWithoutRotFactor21 = this._invLocalInertia21;
			this._invLocalInertiaWithoutRotFactor22 = this._invLocalInertia22;
			this._invLocalInertia00 = this._invLocalInertiaWithoutRotFactor00 * this._rotFactor.x;
			this._invLocalInertia01 = this._invLocalInertiaWithoutRotFactor01 * this._rotFactor.x;
			this._invLocalInertia02 = this._invLocalInertiaWithoutRotFactor02 * this._rotFactor.x;
			this._invLocalInertia10 = this._invLocalInertiaWithoutRotFactor10 * this._rotFactor.y;
			this._invLocalInertia11 = this._invLocalInertiaWithoutRotFactor11 * this._rotFactor.y;
			this._invLocalInertia12 = this._invLocalInertiaWithoutRotFactor12 * this._rotFactor.y;
			this._invLocalInertia20 = this._invLocalInertiaWithoutRotFactor20 * this._rotFactor.z;
			this._invLocalInertia21 = this._invLocalInertiaWithoutRotFactor21 * this._rotFactor.z;
			this._invLocalInertia22 = this._invLocalInertiaWithoutRotFactor22 * this._rotFactor.z;
		} else {
			this._invMass = 0;
			this._invLocalInertia00 = 0;
			this._invLocalInertia01 = 0;
			this._invLocalInertia02 = 0;
			this._invLocalInertia10 = 0;
			this._invLocalInertia11 = 0;
			this._invLocalInertia12 = 0;
			this._invLocalInertia20 = 0;
			this._invLocalInertia21 = 0;
			this._invLocalInertia22 = 0;
			this._invLocalInertiaWithoutRotFactor00 = 0;
			this._invLocalInertiaWithoutRotFactor01 = 0;
			this._invLocalInertiaWithoutRotFactor02 = 0;
			this._invLocalInertiaWithoutRotFactor10 = 0;
			this._invLocalInertiaWithoutRotFactor11 = 0;
			this._invLocalInertiaWithoutRotFactor12 = 0;
			this._invLocalInertiaWithoutRotFactor20 = 0;
			this._invLocalInertiaWithoutRotFactor21 = 0;
			this._invLocalInertiaWithoutRotFactor22 = 0;
			if(this._type == 0) {
				this._type = 1;
			}
		}
		var __tmp__002;
		var __tmp__012;
		var __tmp__022;
		var __tmp__102;
		var __tmp__112;
		var __tmp__122;
		var __tmp__202;
		var __tmp__212;
		var __tmp__222;
		__tmp__002 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__012 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__022 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__102 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__112 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__122 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__202 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__212 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__222 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__002;
		this._invInertia01 = __tmp__012;
		this._invInertia02 = __tmp__022;
		this._invInertia10 = __tmp__102;
		this._invInertia11 = __tmp__112;
		this._invInertia12 = __tmp__122;
		this._invInertia20 = __tmp__202;
		this._invInertia21 = __tmp__212;
		this._invInertia22 = __tmp__222;
		var __tmp__003;
		var __tmp__013;
		var __tmp__023;
		var __tmp__103;
		var __tmp__113;
		var __tmp__123;
		var __tmp__203;
		var __tmp__213;
		var __tmp__223;
		__tmp__003 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__013 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__023 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__103 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__113 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__123 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__203 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__213 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__223 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__003;
		this._invInertia01 = __tmp__013;
		this._invInertia02 = __tmp__023;
		this._invInertia10 = __tmp__103;
		this._invInertia11 = __tmp__113;
		this._invInertia12 = __tmp__123;
		this._invInertia20 = __tmp__203;
		this._invInertia21 = __tmp__213;
		this._invInertia22 = __tmp__223;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getPosition: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._transform._positionX;
		v1.y = this._transform._positionY;
		v1.z = this._transform._positionZ;
		return v;
	}
	,getPositionTo: function(position) {
		var v = position;
		v.x = this._transform._positionX;
		v.y = this._transform._positionY;
		v.z = this._transform._positionZ;
	}
	,setPosition: function(position) {
		var v = position;
		this._transform._positionX = v.x;
		this._transform._positionY = v.y;
		this._transform._positionZ = v.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__00;
			dst1._rotation01 = __tmp__01;
			dst1._rotation02 = __tmp__02;
			dst1._rotation10 = __tmp__10;
			dst1._rotation11 = __tmp__11;
			dst1._rotation12 = __tmp__12;
			dst1._rotation20 = __tmp__20;
			dst1._rotation21 = __tmp__21;
			dst1._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__001;
			dst2._rotation01 = __tmp__011;
			dst2._rotation02 = __tmp__021;
			dst2._rotation10 = __tmp__101;
			dst2._rotation11 = __tmp__111;
			dst2._rotation12 = __tmp__121;
			dst2._rotation20 = __tmp__201;
			dst2._rotation21 = __tmp__211;
			dst2._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v1 = s.displacement;
				v1.x = dX;
				v1.y = dY;
				v1.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,translate: function(translation) {
		var diff;
		var diffX;
		var diffY;
		var diffZ;
		var v = translation;
		diffX = v.x;
		diffY = v.y;
		diffZ = v.z;
		this._transform._positionX += diffX;
		this._transform._positionY += diffY;
		this._transform._positionZ += diffZ;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__00;
			dst1._rotation01 = __tmp__01;
			dst1._rotation02 = __tmp__02;
			dst1._rotation10 = __tmp__10;
			dst1._rotation11 = __tmp__11;
			dst1._rotation12 = __tmp__12;
			dst1._rotation20 = __tmp__20;
			dst1._rotation21 = __tmp__21;
			dst1._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__001;
			dst2._rotation01 = __tmp__011;
			dst2._rotation02 = __tmp__021;
			dst2._rotation10 = __tmp__101;
			dst2._rotation11 = __tmp__111;
			dst2._rotation12 = __tmp__121;
			dst2._rotation20 = __tmp__201;
			dst2._rotation21 = __tmp__211;
			dst2._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v1 = s.displacement;
				v1.x = dX;
				v1.y = dY;
				v1.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getRotation: function() {
		var m = new oimo_common_Mat3();
		var m1 = m;
		m1.e00 = this._transform._rotation00;
		m1.e01 = this._transform._rotation01;
		m1.e02 = this._transform._rotation02;
		m1.e10 = this._transform._rotation10;
		m1.e11 = this._transform._rotation11;
		m1.e12 = this._transform._rotation12;
		m1.e20 = this._transform._rotation20;
		m1.e21 = this._transform._rotation21;
		m1.e22 = this._transform._rotation22;
		return m;
	}
	,getRotationTo: function(rotation) {
		var m = rotation;
		m.e00 = this._transform._rotation00;
		m.e01 = this._transform._rotation01;
		m.e02 = this._transform._rotation02;
		m.e10 = this._transform._rotation10;
		m.e11 = this._transform._rotation11;
		m.e12 = this._transform._rotation12;
		m.e20 = this._transform._rotation20;
		m.e21 = this._transform._rotation21;
		m.e22 = this._transform._rotation22;
	}
	,setRotation: function(rotation) {
		var m = rotation;
		this._transform._rotation00 = m.e00;
		this._transform._rotation01 = m.e01;
		this._transform._rotation02 = m.e02;
		this._transform._rotation10 = m.e10;
		this._transform._rotation11 = m.e11;
		this._transform._rotation12 = m.e12;
		this._transform._rotation20 = m.e20;
		this._transform._rotation21 = m.e21;
		this._transform._rotation22 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__002;
			var __tmp__012;
			var __tmp__022;
			var __tmp__102;
			var __tmp__112;
			var __tmp__122;
			var __tmp__202;
			var __tmp__212;
			var __tmp__222;
			__tmp__002 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__012 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__022 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__102 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__112 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__122 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__202 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__212 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__222 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__002;
			dst1._rotation01 = __tmp__012;
			dst1._rotation02 = __tmp__022;
			dst1._rotation10 = __tmp__102;
			dst1._rotation11 = __tmp__112;
			dst1._rotation12 = __tmp__122;
			dst1._rotation20 = __tmp__202;
			dst1._rotation21 = __tmp__212;
			dst1._rotation22 = __tmp__222;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__003;
			var __tmp__013;
			var __tmp__023;
			var __tmp__103;
			var __tmp__113;
			var __tmp__123;
			var __tmp__203;
			var __tmp__213;
			var __tmp__223;
			__tmp__003 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__013 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__023 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__103 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__113 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__123 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__203 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__213 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__223 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__003;
			dst2._rotation01 = __tmp__013;
			dst2._rotation02 = __tmp__023;
			dst2._rotation10 = __tmp__103;
			dst2._rotation11 = __tmp__113;
			dst2._rotation12 = __tmp__123;
			dst2._rotation20 = __tmp__203;
			dst2._rotation21 = __tmp__213;
			dst2._rotation22 = __tmp__223;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,setRotationXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		this._transform._rotation00 = cy * cz;
		this._transform._rotation01 = -cy * sz;
		this._transform._rotation02 = sy;
		this._transform._rotation10 = cx * sz + cz * sx * sy;
		this._transform._rotation11 = cx * cz - sx * sy * sz;
		this._transform._rotation12 = -cy * sx;
		this._transform._rotation20 = sx * sz - cx * cz * sy;
		this._transform._rotation21 = cz * sx + cx * sy * sz;
		this._transform._rotation22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__002;
			var __tmp__012;
			var __tmp__022;
			var __tmp__102;
			var __tmp__112;
			var __tmp__122;
			var __tmp__202;
			var __tmp__212;
			var __tmp__222;
			__tmp__002 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__012 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__022 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__102 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__112 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__122 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__202 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__212 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__222 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__002;
			dst1._rotation01 = __tmp__012;
			dst1._rotation02 = __tmp__022;
			dst1._rotation10 = __tmp__102;
			dst1._rotation11 = __tmp__112;
			dst1._rotation12 = __tmp__122;
			dst1._rotation20 = __tmp__202;
			dst1._rotation21 = __tmp__212;
			dst1._rotation22 = __tmp__222;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__003;
			var __tmp__013;
			var __tmp__023;
			var __tmp__103;
			var __tmp__113;
			var __tmp__123;
			var __tmp__203;
			var __tmp__213;
			var __tmp__223;
			__tmp__003 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__013 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__023 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__103 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__113 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__123 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__203 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__213 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__223 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__003;
			dst2._rotation01 = __tmp__013;
			dst2._rotation02 = __tmp__023;
			dst2._rotation10 = __tmp__103;
			dst2._rotation11 = __tmp__113;
			dst2._rotation12 = __tmp__123;
			dst2._rotation20 = __tmp__203;
			dst2._rotation21 = __tmp__213;
			dst2._rotation22 = __tmp__223;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v1 = s.displacement;
				v1.x = dX;
				v1.y = dY;
				v1.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,rotate: function(rotation) {
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var m = rotation;
		rot00 = m.e00;
		rot01 = m.e01;
		rot02 = m.e02;
		rot10 = m.e10;
		rot11 = m.e11;
		rot12 = m.e12;
		rot20 = m.e20;
		rot21 = m.e21;
		rot22 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._transform._rotation00 + rot01 * this._transform._rotation10 + rot02 * this._transform._rotation20;
		__tmp__01 = rot00 * this._transform._rotation01 + rot01 * this._transform._rotation11 + rot02 * this._transform._rotation21;
		__tmp__02 = rot00 * this._transform._rotation02 + rot01 * this._transform._rotation12 + rot02 * this._transform._rotation22;
		__tmp__10 = rot10 * this._transform._rotation00 + rot11 * this._transform._rotation10 + rot12 * this._transform._rotation20;
		__tmp__11 = rot10 * this._transform._rotation01 + rot11 * this._transform._rotation11 + rot12 * this._transform._rotation21;
		__tmp__12 = rot10 * this._transform._rotation02 + rot11 * this._transform._rotation12 + rot12 * this._transform._rotation22;
		__tmp__20 = rot20 * this._transform._rotation00 + rot21 * this._transform._rotation10 + rot22 * this._transform._rotation20;
		__tmp__21 = rot20 * this._transform._rotation01 + rot21 * this._transform._rotation11 + rot22 * this._transform._rotation21;
		__tmp__22 = rot20 * this._transform._rotation02 + rot21 * this._transform._rotation12 + rot22 * this._transform._rotation22;
		this._transform._rotation00 = __tmp__00;
		this._transform._rotation01 = __tmp__01;
		this._transform._rotation02 = __tmp__02;
		this._transform._rotation10 = __tmp__10;
		this._transform._rotation11 = __tmp__11;
		this._transform._rotation12 = __tmp__12;
		this._transform._rotation20 = __tmp__20;
		this._transform._rotation21 = __tmp__21;
		this._transform._rotation22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__011 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__021 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__101 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__111 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__121 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__201 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__211 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__221 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		var __tmp__002;
		var __tmp__012;
		var __tmp__022;
		var __tmp__102;
		var __tmp__112;
		var __tmp__122;
		var __tmp__202;
		var __tmp__212;
		var __tmp__222;
		__tmp__002 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__012 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__022 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__102 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__112 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__122 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__202 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__212 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__222 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__002;
		this._invInertia01 = __tmp__012;
		this._invInertia02 = __tmp__022;
		this._invInertia10 = __tmp__102;
		this._invInertia11 = __tmp__112;
		this._invInertia12 = __tmp__122;
		this._invInertia20 = __tmp__202;
		this._invInertia21 = __tmp__212;
		this._invInertia22 = __tmp__222;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__003;
			var __tmp__013;
			var __tmp__023;
			var __tmp__103;
			var __tmp__113;
			var __tmp__123;
			var __tmp__203;
			var __tmp__213;
			var __tmp__223;
			__tmp__003 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__013 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__023 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__103 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__113 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__123 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__203 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__213 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__223 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__003;
			dst1._rotation01 = __tmp__013;
			dst1._rotation02 = __tmp__023;
			dst1._rotation10 = __tmp__103;
			dst1._rotation11 = __tmp__113;
			dst1._rotation12 = __tmp__123;
			dst1._rotation20 = __tmp__203;
			dst1._rotation21 = __tmp__213;
			dst1._rotation22 = __tmp__223;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__004;
			var __tmp__014;
			var __tmp__024;
			var __tmp__104;
			var __tmp__114;
			var __tmp__124;
			var __tmp__204;
			var __tmp__214;
			var __tmp__224;
			__tmp__004 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__014 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__024 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__104 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__114 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__124 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__204 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__214 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__224 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__004;
			dst2._rotation01 = __tmp__014;
			dst2._rotation02 = __tmp__024;
			dst2._rotation10 = __tmp__104;
			dst2._rotation11 = __tmp__114;
			dst2._rotation12 = __tmp__124;
			dst2._rotation20 = __tmp__204;
			dst2._rotation21 = __tmp__214;
			dst2._rotation22 = __tmp__224;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,rotateXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._transform._rotation00 + rot01 * this._transform._rotation10 + rot02 * this._transform._rotation20;
		__tmp__01 = rot00 * this._transform._rotation01 + rot01 * this._transform._rotation11 + rot02 * this._transform._rotation21;
		__tmp__02 = rot00 * this._transform._rotation02 + rot01 * this._transform._rotation12 + rot02 * this._transform._rotation22;
		__tmp__10 = rot10 * this._transform._rotation00 + rot11 * this._transform._rotation10 + rot12 * this._transform._rotation20;
		__tmp__11 = rot10 * this._transform._rotation01 + rot11 * this._transform._rotation11 + rot12 * this._transform._rotation21;
		__tmp__12 = rot10 * this._transform._rotation02 + rot11 * this._transform._rotation12 + rot12 * this._transform._rotation22;
		__tmp__20 = rot20 * this._transform._rotation00 + rot21 * this._transform._rotation10 + rot22 * this._transform._rotation20;
		__tmp__21 = rot20 * this._transform._rotation01 + rot21 * this._transform._rotation11 + rot22 * this._transform._rotation21;
		__tmp__22 = rot20 * this._transform._rotation02 + rot21 * this._transform._rotation12 + rot22 * this._transform._rotation22;
		this._transform._rotation00 = __tmp__00;
		this._transform._rotation01 = __tmp__01;
		this._transform._rotation02 = __tmp__02;
		this._transform._rotation10 = __tmp__10;
		this._transform._rotation11 = __tmp__11;
		this._transform._rotation12 = __tmp__12;
		this._transform._rotation20 = __tmp__20;
		this._transform._rotation21 = __tmp__21;
		this._transform._rotation22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__011 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__021 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__101 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__111 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__121 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__201 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__211 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__221 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		var __tmp__002;
		var __tmp__012;
		var __tmp__022;
		var __tmp__102;
		var __tmp__112;
		var __tmp__122;
		var __tmp__202;
		var __tmp__212;
		var __tmp__222;
		__tmp__002 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__012 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__022 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__102 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__112 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__122 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__202 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__212 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__222 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__002;
		this._invInertia01 = __tmp__012;
		this._invInertia02 = __tmp__022;
		this._invInertia10 = __tmp__102;
		this._invInertia11 = __tmp__112;
		this._invInertia12 = __tmp__122;
		this._invInertia20 = __tmp__202;
		this._invInertia21 = __tmp__212;
		this._invInertia22 = __tmp__222;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__003;
			var __tmp__013;
			var __tmp__023;
			var __tmp__103;
			var __tmp__113;
			var __tmp__123;
			var __tmp__203;
			var __tmp__213;
			var __tmp__223;
			__tmp__003 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__013 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__023 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__103 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__113 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__123 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__203 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__213 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__223 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__003;
			dst1._rotation01 = __tmp__013;
			dst1._rotation02 = __tmp__023;
			dst1._rotation10 = __tmp__103;
			dst1._rotation11 = __tmp__113;
			dst1._rotation12 = __tmp__123;
			dst1._rotation20 = __tmp__203;
			dst1._rotation21 = __tmp__213;
			dst1._rotation22 = __tmp__223;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__004;
			var __tmp__014;
			var __tmp__024;
			var __tmp__104;
			var __tmp__114;
			var __tmp__124;
			var __tmp__204;
			var __tmp__214;
			var __tmp__224;
			__tmp__004 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__014 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__024 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__104 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__114 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__124 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__204 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__214 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__224 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__004;
			dst2._rotation01 = __tmp__014;
			dst2._rotation02 = __tmp__024;
			dst2._rotation10 = __tmp__104;
			dst2._rotation11 = __tmp__114;
			dst2._rotation12 = __tmp__124;
			dst2._rotation20 = __tmp__204;
			dst2._rotation21 = __tmp__214;
			dst2._rotation22 = __tmp__224;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v1 = s.displacement;
				v1.x = dX;
				v1.y = dY;
				v1.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getOrientation: function() {
		var q = new oimo_common_Quat();
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._transform._rotation00;
		var e11 = this._transform._rotation11;
		var e22 = this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation21 - this._transform._rotation12) * s;
			iqY = (this._transform._rotation02 - this._transform._rotation20) * s;
			iqZ = (this._transform._rotation10 - this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._transform._rotation01 + this._transform._rotation10) * s;
				iqZ = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqW = (this._transform._rotation21 - this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
				iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation01 + this._transform._rotation10) * s;
			iqZ = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation02 - this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
			iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
		}
		var q1 = q;
		q1.x = iqX;
		q1.y = iqY;
		q1.z = iqZ;
		q1.w = iqW;
		return q;
	}
	,getOrientationTo: function(orientation) {
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._transform._rotation00;
		var e11 = this._transform._rotation11;
		var e22 = this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation21 - this._transform._rotation12) * s;
			iqY = (this._transform._rotation02 - this._transform._rotation20) * s;
			iqZ = (this._transform._rotation10 - this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._transform._rotation01 + this._transform._rotation10) * s;
				iqZ = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqW = (this._transform._rotation21 - this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
				iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation01 + this._transform._rotation10) * s;
			iqZ = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation02 - this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
			iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
		}
		var q = orientation;
		q.x = iqX;
		q.y = iqY;
		q.z = iqZ;
		q.w = iqW;
	}
	,setOrientation: function(quaternion) {
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var q1 = quaternion;
		qX = q1.x;
		qY = q1.y;
		qZ = q1.z;
		qW = q1.w;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this._transform._rotation00 = 1 - yy - zz;
		this._transform._rotation01 = xy - wz;
		this._transform._rotation02 = xz + wy;
		this._transform._rotation10 = xy + wz;
		this._transform._rotation11 = 1 - xx - zz;
		this._transform._rotation12 = yz - wx;
		this._transform._rotation20 = xz - wy;
		this._transform._rotation21 = yz + wx;
		this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__002;
			var __tmp__012;
			var __tmp__022;
			var __tmp__102;
			var __tmp__112;
			var __tmp__122;
			var __tmp__202;
			var __tmp__212;
			var __tmp__222;
			__tmp__002 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__012 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__022 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__102 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__112 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__122 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__202 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__212 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__222 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__002;
			dst1._rotation01 = __tmp__012;
			dst1._rotation02 = __tmp__022;
			dst1._rotation10 = __tmp__102;
			dst1._rotation11 = __tmp__112;
			dst1._rotation12 = __tmp__122;
			dst1._rotation20 = __tmp__202;
			dst1._rotation21 = __tmp__212;
			dst1._rotation22 = __tmp__222;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__003;
			var __tmp__013;
			var __tmp__023;
			var __tmp__103;
			var __tmp__113;
			var __tmp__123;
			var __tmp__203;
			var __tmp__213;
			var __tmp__223;
			__tmp__003 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__013 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__023 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__103 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__113 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__123 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__203 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__213 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__223 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__003;
			dst2._rotation01 = __tmp__013;
			dst2._rotation02 = __tmp__023;
			dst2._rotation10 = __tmp__103;
			dst2._rotation11 = __tmp__113;
			dst2._rotation12 = __tmp__123;
			dst2._rotation20 = __tmp__203;
			dst2._rotation21 = __tmp__213;
			dst2._rotation22 = __tmp__223;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getTransform: function() {
		var _this = this._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getTransformTo: function(transform) {
		var transform1 = this._transform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,setTransform: function(transform) {
		this._transform._positionX = transform._positionX;
		this._transform._positionY = transform._positionY;
		this._transform._positionZ = transform._positionZ;
		this._transform._rotation00 = transform._rotation00;
		this._transform._rotation01 = transform._rotation01;
		this._transform._rotation02 = transform._rotation02;
		this._transform._rotation10 = transform._rotation10;
		this._transform._rotation11 = transform._rotation11;
		this._transform._rotation12 = transform._rotation12;
		this._transform._rotation20 = transform._rotation20;
		this._transform._rotation21 = transform._rotation21;
		this._transform._rotation22 = transform._rotation22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst1 = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__002;
			var __tmp__012;
			var __tmp__022;
			var __tmp__102;
			var __tmp__112;
			var __tmp__122;
			var __tmp__202;
			var __tmp__212;
			var __tmp__222;
			__tmp__002 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__012 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__022 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__102 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__112 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__122 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__202 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__212 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__222 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst1._rotation00 = __tmp__002;
			dst1._rotation01 = __tmp__012;
			dst1._rotation02 = __tmp__022;
			dst1._rotation10 = __tmp__102;
			dst1._rotation11 = __tmp__112;
			dst1._rotation12 = __tmp__122;
			dst1._rotation20 = __tmp__202;
			dst1._rotation21 = __tmp__212;
			dst1._rotation22 = __tmp__222;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst1._positionX = __tmp__X;
			dst1._positionY = __tmp__Y;
			dst1._positionZ = __tmp__Z;
			dst1._positionX += src2._positionX;
			dst1._positionY += src2._positionY;
			dst1._positionZ += src2._positionZ;
			var dst2 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__003;
			var __tmp__013;
			var __tmp__023;
			var __tmp__103;
			var __tmp__113;
			var __tmp__123;
			var __tmp__203;
			var __tmp__213;
			var __tmp__223;
			__tmp__003 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__013 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__023 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__103 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__113 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__123 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__203 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__213 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__223 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst2._rotation00 = __tmp__003;
			dst2._rotation01 = __tmp__013;
			dst2._rotation02 = __tmp__023;
			dst2._rotation10 = __tmp__103;
			dst2._rotation11 = __tmp__113;
			dst2._rotation12 = __tmp__123;
			dst2._rotation20 = __tmp__203;
			dst2._rotation21 = __tmp__213;
			dst2._rotation22 = __tmp__223;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst2._positionX = __tmp__X1;
			dst2._positionY = __tmp__Y1;
			dst2._positionZ = __tmp__Z1;
			dst2._positionX += src21._positionX;
			dst2._positionY += src21._positionY;
			dst2._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getMass: function() {
		return this._mass;
	}
	,getLocalInertia: function() {
		var m = new oimo_common_Mat3();
		var m1 = m;
		m1.e00 = this._localInertia00;
		m1.e01 = this._localInertia01;
		m1.e02 = this._localInertia02;
		m1.e10 = this._localInertia10;
		m1.e11 = this._localInertia11;
		m1.e12 = this._localInertia12;
		m1.e20 = this._localInertia20;
		m1.e21 = this._localInertia21;
		m1.e22 = this._localInertia22;
		return m;
	}
	,getLocalInertiaTo: function(inertia) {
		var m = inertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
	}
	,getMassData: function() {
		var md = new oimo_dynamics_rigidbody_MassData();
		md.mass = this._mass;
		var m = md.localInertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
		return md;
	}
	,getMassDataTo: function(massData) {
		massData.mass = this._mass;
		var m = massData.localInertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
	}
	,setMassData: function(massData) {
		this._mass = massData.mass;
		var m = massData.localInertia;
		this._localInertia00 = m.e00;
		this._localInertia01 = m.e01;
		this._localInertia02 = m.e02;
		this._localInertia10 = m.e10;
		this._localInertia11 = m.e11;
		this._localInertia12 = m.e12;
		this._localInertia20 = m.e20;
		this._localInertia21 = m.e21;
		this._localInertia22 = m.e22;
		var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
		var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
		var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
		var det = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
		if(this._mass > 0 && det > 0 && this._type == 0) {
			this._invMass = 1 / this._mass;
			var d001 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
			var d011 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
			var d021 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
			var d10 = this._localInertia01 * this._localInertia22 - this._localInertia02 * this._localInertia21;
			var d11 = this._localInertia00 * this._localInertia22 - this._localInertia02 * this._localInertia20;
			var d12 = this._localInertia00 * this._localInertia21 - this._localInertia01 * this._localInertia20;
			var d20 = this._localInertia01 * this._localInertia12 - this._localInertia02 * this._localInertia11;
			var d21 = this._localInertia00 * this._localInertia12 - this._localInertia02 * this._localInertia10;
			var d22 = this._localInertia00 * this._localInertia11 - this._localInertia01 * this._localInertia10;
			var d = this._localInertia00 * d001 - this._localInertia01 * d011 + this._localInertia02 * d021;
			if(d < -1e-32 || d > 1e-32) {
				d = 1 / d;
			}
			this._invLocalInertia00 = d001 * d;
			this._invLocalInertia01 = -d10 * d;
			this._invLocalInertia02 = d20 * d;
			this._invLocalInertia10 = -d011 * d;
			this._invLocalInertia11 = d11 * d;
			this._invLocalInertia12 = -d21 * d;
			this._invLocalInertia20 = d021 * d;
			this._invLocalInertia21 = -d12 * d;
			this._invLocalInertia22 = d22 * d;
			this._invLocalInertiaWithoutRotFactor00 = this._invLocalInertia00;
			this._invLocalInertiaWithoutRotFactor01 = this._invLocalInertia01;
			this._invLocalInertiaWithoutRotFactor02 = this._invLocalInertia02;
			this._invLocalInertiaWithoutRotFactor10 = this._invLocalInertia10;
			this._invLocalInertiaWithoutRotFactor11 = this._invLocalInertia11;
			this._invLocalInertiaWithoutRotFactor12 = this._invLocalInertia12;
			this._invLocalInertiaWithoutRotFactor20 = this._invLocalInertia20;
			this._invLocalInertiaWithoutRotFactor21 = this._invLocalInertia21;
			this._invLocalInertiaWithoutRotFactor22 = this._invLocalInertia22;
			this._invLocalInertia00 = this._invLocalInertiaWithoutRotFactor00 * this._rotFactor.x;
			this._invLocalInertia01 = this._invLocalInertiaWithoutRotFactor01 * this._rotFactor.x;
			this._invLocalInertia02 = this._invLocalInertiaWithoutRotFactor02 * this._rotFactor.x;
			this._invLocalInertia10 = this._invLocalInertiaWithoutRotFactor10 * this._rotFactor.y;
			this._invLocalInertia11 = this._invLocalInertiaWithoutRotFactor11 * this._rotFactor.y;
			this._invLocalInertia12 = this._invLocalInertiaWithoutRotFactor12 * this._rotFactor.y;
			this._invLocalInertia20 = this._invLocalInertiaWithoutRotFactor20 * this._rotFactor.z;
			this._invLocalInertia21 = this._invLocalInertiaWithoutRotFactor21 * this._rotFactor.z;
			this._invLocalInertia22 = this._invLocalInertiaWithoutRotFactor22 * this._rotFactor.z;
		} else {
			this._invMass = 0;
			this._invLocalInertia00 = 0;
			this._invLocalInertia01 = 0;
			this._invLocalInertia02 = 0;
			this._invLocalInertia10 = 0;
			this._invLocalInertia11 = 0;
			this._invLocalInertia12 = 0;
			this._invLocalInertia20 = 0;
			this._invLocalInertia21 = 0;
			this._invLocalInertia22 = 0;
			this._invLocalInertiaWithoutRotFactor00 = 0;
			this._invLocalInertiaWithoutRotFactor01 = 0;
			this._invLocalInertiaWithoutRotFactor02 = 0;
			this._invLocalInertiaWithoutRotFactor10 = 0;
			this._invLocalInertiaWithoutRotFactor11 = 0;
			this._invLocalInertiaWithoutRotFactor12 = 0;
			this._invLocalInertiaWithoutRotFactor20 = 0;
			this._invLocalInertiaWithoutRotFactor21 = 0;
			this._invLocalInertiaWithoutRotFactor22 = 0;
			if(this._type == 0) {
				this._type = 1;
			}
		}
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getRotationFactor: function() {
		var _this = this._rotFactor;
		return new oimo_common_Vec3(_this.x,_this.y,_this.z);
	}
	,setRotationFactor: function(rotationFactor) {
		var _this = this._rotFactor;
		_this.x = rotationFactor.x;
		_this.y = rotationFactor.y;
		_this.z = rotationFactor.z;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__001;
		var __tmp__011;
		var __tmp__021;
		var __tmp__101;
		var __tmp__111;
		var __tmp__121;
		var __tmp__201;
		var __tmp__211;
		var __tmp__221;
		__tmp__001 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__011 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__021 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__101 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__111 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__121 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__201 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__211 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__221 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__001;
		this._invInertia01 = __tmp__011;
		this._invInertia02 = __tmp__021;
		this._invInertia10 = __tmp__101;
		this._invInertia11 = __tmp__111;
		this._invInertia12 = __tmp__121;
		this._invInertia20 = __tmp__201;
		this._invInertia21 = __tmp__211;
		this._invInertia22 = __tmp__221;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearVelocity: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._velX;
		v1.y = this._velY;
		v1.z = this._velZ;
		return v;
	}
	,getLinearVelocityTo: function(linearVelocity) {
		var v = linearVelocity;
		v.x = this._velX;
		v.y = this._velY;
		v.z = this._velZ;
	}
	,setLinearVelocity: function(linearVelocity) {
		if(this._type == 1) {
			this._velX = 0;
			this._velY = 0;
			this._velZ = 0;
		} else {
			var v = linearVelocity;
			this._velX = v.x;
			this._velY = v.y;
			this._velZ = v.z;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getAngularVelocity: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._angVelX;
		v1.y = this._angVelY;
		v1.z = this._angVelZ;
		return v;
	}
	,getAngularVelocityTo: function(angularVelocity) {
		var v = angularVelocity;
		v.x = this._velX;
		v.y = this._velY;
		v.z = this._velZ;
	}
	,setAngularVelocity: function(angularVelocity) {
		if(this._type == 1) {
			this._angVelX = 0;
			this._angVelY = 0;
			this._angVelZ = 0;
		} else {
			var v = angularVelocity;
			this._angVelX = v.x;
			this._angVelY = v.y;
			this._angVelZ = v.z;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,addLinearVelocity: function(linearVelocityChange) {
		if(this._type != 1) {
			var d;
			var dX;
			var dY;
			var dZ;
			var v = linearVelocityChange;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			this._velX += dX;
			this._velY += dY;
			this._velZ += dZ;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,addAngularVelocity: function(angularVelocityChange) {
		if(this._type != 1) {
			var d;
			var dX;
			var dY;
			var dZ;
			var v = angularVelocityChange;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			this._angVelX += dX;
			this._angVelY += dY;
			this._angVelZ += dZ;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyImpulse: function(impulse,positionInWorld) {
		var imp;
		var impX;
		var impY;
		var impZ;
		var v = impulse;
		impX = v.x;
		impY = v.y;
		impZ = v.z;
		this._velX += impX * this._invMass;
		this._velY += impY * this._invMass;
		this._velZ += impZ * this._invMass;
		var aimp;
		var aimpX;
		var aimpY;
		var aimpZ;
		var pos;
		var posX;
		var posY;
		var posZ;
		var v1 = positionInWorld;
		posX = v1.x;
		posY = v1.y;
		posZ = v1.z;
		posX -= this._transform._positionX;
		posY -= this._transform._positionY;
		posZ -= this._transform._positionZ;
		aimpX = posY * impZ - posZ * impY;
		aimpY = posZ * impX - posX * impZ;
		aimpZ = posX * impY - posY * impX;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._invInertia00 * aimpX + this._invInertia01 * aimpY + this._invInertia02 * aimpZ;
		__tmp__Y = this._invInertia10 * aimpX + this._invInertia11 * aimpY + this._invInertia12 * aimpZ;
		__tmp__Z = this._invInertia20 * aimpX + this._invInertia21 * aimpY + this._invInertia22 * aimpZ;
		aimpX = __tmp__X;
		aimpY = __tmp__Y;
		aimpZ = __tmp__Z;
		this._angVelX += aimpX;
		this._angVelY += aimpY;
		this._angVelZ += aimpZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyLinearImpulse: function(impulse) {
		var imp;
		var impX;
		var impY;
		var impZ;
		var v = impulse;
		impX = v.x;
		impY = v.y;
		impZ = v.z;
		this._velX += impX * this._invMass;
		this._velY += impY * this._invMass;
		this._velZ += impZ * this._invMass;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyAngularImpulse: function(impulse) {
		var imp;
		var impX;
		var impY;
		var impZ;
		var v = impulse;
		impX = v.x;
		impY = v.y;
		impZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._invInertia00 * impX + this._invInertia01 * impY + this._invInertia02 * impZ;
		__tmp__Y = this._invInertia10 * impX + this._invInertia11 * impY + this._invInertia12 * impZ;
		__tmp__Z = this._invInertia20 * impX + this._invInertia21 * impY + this._invInertia22 * impZ;
		impX = __tmp__X;
		impY = __tmp__Y;
		impZ = __tmp__Z;
		this._angVelX += impX;
		this._angVelY += impY;
		this._angVelZ += impZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyForce: function(force,positionInWorld) {
		var iforce;
		var iforceX;
		var iforceY;
		var iforceZ;
		var v = force;
		iforceX = v.x;
		iforceY = v.y;
		iforceZ = v.z;
		this._forceX += iforceX;
		this._forceY += iforceY;
		this._forceZ += iforceZ;
		var itorque;
		var itorqueX;
		var itorqueY;
		var itorqueZ;
		var pos;
		var posX;
		var posY;
		var posZ;
		var v1 = positionInWorld;
		posX = v1.x;
		posY = v1.y;
		posZ = v1.z;
		posX -= this._transform._positionX;
		posY -= this._transform._positionY;
		posZ -= this._transform._positionZ;
		itorqueX = posY * iforceZ - posZ * iforceY;
		itorqueY = posZ * iforceX - posX * iforceZ;
		itorqueZ = posX * iforceY - posY * iforceX;
		this._torqueX += itorqueX;
		this._torqueY += itorqueY;
		this._torqueZ += itorqueZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyForceToCenter: function(force) {
		var iforce;
		var iforceX;
		var iforceY;
		var iforceZ;
		var v = force;
		iforceX = v.x;
		iforceY = v.y;
		iforceZ = v.z;
		this._forceX += iforceX;
		this._forceY += iforceY;
		this._forceZ += iforceZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyTorque: function(torque) {
		var itorque;
		var itorqueX;
		var itorqueY;
		var itorqueZ;
		var v = torque;
		itorqueX = v.x;
		itorqueY = v.y;
		itorqueZ = v.z;
		this._torqueX += itorqueX;
		this._torqueY += itorqueY;
		this._torqueZ += itorqueZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearContactImpulse: function() {
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = this._linearContactImpulseX;
		v.y = this._linearContactImpulseY;
		v.z = this._linearContactImpulseZ;
		return res;
	}
	,getLinearContactImpulseTo: function(linearContactImpulse) {
		var v = linearContactImpulse;
		v.x = this._linearContactImpulseX;
		v.y = this._linearContactImpulseY;
		v.z = this._linearContactImpulseZ;
	}
	,getAngularContactImpulse: function() {
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = this._angularContactImpulseX;
		v.y = this._angularContactImpulseY;
		v.z = this._angularContactImpulseZ;
		return res;
	}
	,getAngularContactImpulseTo: function(angularContactImpulse) {
		var v = angularContactImpulse;
		v.x = this._angularContactImpulseX;
		v.y = this._angularContactImpulseY;
		v.z = this._angularContactImpulseZ;
	}
	,getGravityScale: function() {
		return this._gravityScale;
	}
	,setGravityScale: function(gravityScale) {
		this._gravityScale = gravityScale;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLocalPoint: function(worldPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldPoint;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		vX -= this._transform._positionX;
		vY -= this._transform._positionY;
		vZ -= this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		var v2 = res;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		return res;
	}
	,getLocalPointTo: function(worldPoint,localPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldPoint;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		vX -= this._transform._positionX;
		vY -= this._transform._positionY;
		vZ -= this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = localPoint;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
	}
	,getLocalVector: function(worldVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldVector;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		var v2 = res;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		return res;
	}
	,getLocalVectorTo: function(worldVector,localVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = worldVector;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = localVector;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
	}
	,getWorldPoint: function(localPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = localPoint;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += this._transform._positionX;
		vY += this._transform._positionY;
		vZ += this._transform._positionZ;
		var res = new oimo_common_Vec3();
		var v2 = res;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		return res;
	}
	,getWorldPointTo: function(localPoint,worldPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = localPoint;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += this._transform._positionX;
		vY += this._transform._positionY;
		vZ += this._transform._positionZ;
		var v2 = worldPoint;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
	}
	,getWorldVector: function(localVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = localVector;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		var v2 = res;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
		return res;
	}
	,getWorldVectorTo: function(localVector,worldVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v1 = localVector;
		vX = v1.x;
		vY = v1.y;
		vZ = v1.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v2 = worldVector;
		v2.x = vX;
		v2.y = vY;
		v2.z = vZ;
	}
	,getNumShapes: function() {
		return this._numShapes;
	}
	,getShapeList: function() {
		return this._shapeList;
	}
	,getNumContectLinks: function() {
		return this._numContactLinks;
	}
	,getContactLinkList: function() {
		return this._contactLinkList;
	}
	,getNumJointLinks: function() {
		return this._numJointLinks;
	}
	,getJointLinkList: function() {
		return this._jointLinkList;
	}
	,addShape: function(shape) {
		if(this._shapeList == null) {
			this._shapeList = shape;
			this._shapeListLast = shape;
		} else {
			this._shapeListLast._next = shape;
			shape._prev = this._shapeListLast;
			this._shapeListLast = shape;
		}
		this._numShapes++;
		shape._rigidBody = this;
		if(this._world != null) {
			var _this = this._world;
			shape._proxy = _this._broadPhase.createProxy(shape,shape._aabb);
			shape._id = _this._shapeIdCount++;
			_this._numShapes++;
		}
		this.updateMass();
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
	}
	,removeShape: function(shape) {
		var prev = shape._prev;
		var next = shape._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(shape == this._shapeList) {
			this._shapeList = this._shapeList._next;
		}
		if(shape == this._shapeListLast) {
			this._shapeListLast = this._shapeListLast._prev;
		}
		shape._next = null;
		shape._prev = null;
		this._numShapes--;
		shape._rigidBody = null;
		if(this._world != null) {
			var _this = this._world;
			_this._broadPhase.destroyProxy(shape._proxy);
			shape._proxy = null;
			shape._id = -1;
			var cl = shape._rigidBody._contactLinkList;
			while(cl != null) {
				var n = cl._next;
				var c = cl._contact;
				if(c._s1 == shape || c._s2 == shape) {
					var _this1 = cl._other;
					_this1._sleeping = false;
					_this1._sleepTime = 0;
					var _this2 = _this._contactManager;
					var prev1 = c._prev;
					var next1 = c._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c == _this2._contactList) {
						_this2._contactList = _this2._contactList._next;
					}
					if(c == _this2._contactListLast) {
						_this2._contactListLast = _this2._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev2 = c._link1._prev;
					var next2 = c._link1._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev3 = c._link2._prev;
					var next3 = c._link2._next;
					if(prev3 != null) {
						prev3._next = next3;
					}
					if(next3 != null) {
						next3._prev = prev3;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this3 = c._contactConstraint;
					_this3._s1 = null;
					_this3._s2 = null;
					_this3._b1 = null;
					_this3._b2 = null;
					_this3._tf1 = null;
					_this3._tf2 = null;
					c._next = _this2._contactPool;
					_this2._contactPool = c;
					_this2._numContacts--;
				}
				cl = n;
			}
			_this._numShapes--;
		}
		this.updateMass();
		var s = this._shapeList;
		while(s != null) {
			var n1 = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n1;
		}
	}
	,getType: function() {
		return this._type;
	}
	,setType: function(type) {
		this._type = type;
		this.updateMass();
	}
	,wakeUp: function() {
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,sleep: function() {
		this._sleeping = true;
		this._sleepTime = 0;
	}
	,isSleeping: function() {
		return this._sleeping;
	}
	,getSleepTime: function() {
		return this._sleepTime;
	}
	,setAutoSleep: function(autoSleepEnabled) {
		this._autoSleep = autoSleepEnabled;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearDamping: function() {
		return this._linearDamping;
	}
	,setLinearDamping: function(damping) {
		this._linearDamping = damping;
	}
	,getAngularDamping: function() {
		return this._angularDamping;
	}
	,setAngularDamping: function(damping) {
		this._angularDamping = damping;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_dynamics_rigidbody_RigidBodyConfig = function() {
	this.position = new oimo_common_Vec3();
	this.rotation = new oimo_common_Mat3();
	this.linearVelocity = new oimo_common_Vec3();
	this.angularVelocity = new oimo_common_Vec3();
	this.type = 0;
	this.autoSleep = true;
	this.linearDamping = 0;
	this.angularDamping = 0;
};
oimo_dynamics_rigidbody_RigidBodyConfig.__name__ = true;
var oimo_dynamics_rigidbody_RigidBodyType = function() { };
oimo_dynamics_rigidbody_RigidBodyType.__name__ = true;
var oimo_dynamics_rigidbody_Shape = function(config) {
	this._id = -1;
	this._localTransform = new oimo_common_Transform();
	this._ptransform = new oimo_common_Transform();
	this._transform = new oimo_common_Transform();
	var v = config.position;
	this._localTransform._positionX = v.x;
	this._localTransform._positionY = v.y;
	this._localTransform._positionZ = v.z;
	var m = config.rotation;
	this._localTransform._rotation00 = m.e00;
	this._localTransform._rotation01 = m.e01;
	this._localTransform._rotation02 = m.e02;
	this._localTransform._rotation10 = m.e10;
	this._localTransform._rotation11 = m.e11;
	this._localTransform._rotation12 = m.e12;
	this._localTransform._rotation20 = m.e20;
	this._localTransform._rotation21 = m.e21;
	this._localTransform._rotation22 = m.e22;
	var dst = this._ptransform;
	var src = this._localTransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var dst1 = this._transform;
	var src1 = this._localTransform;
	dst1._positionX = src1._positionX;
	dst1._positionY = src1._positionY;
	dst1._positionZ = src1._positionZ;
	dst1._rotation00 = src1._rotation00;
	dst1._rotation01 = src1._rotation01;
	dst1._rotation02 = src1._rotation02;
	dst1._rotation10 = src1._rotation10;
	dst1._rotation11 = src1._rotation11;
	dst1._rotation12 = src1._rotation12;
	dst1._rotation20 = src1._rotation20;
	dst1._rotation21 = src1._rotation21;
	dst1._rotation22 = src1._rotation22;
	this._restitution = config.restitution;
	this._friction = config.friction;
	this._density = config.density;
	this._geom = config.geometry;
	this._collisionGroup = config.collisionGroup;
	this._collisionMask = config.collisionMask;
	this._contactCallback = config.contactCallback;
	this._aabb = new oimo_collision_geometry_Aabb();
	this._proxy = null;
	this.displacement = new oimo_common_Vec3();
};
oimo_dynamics_rigidbody_Shape.__name__ = true;
oimo_dynamics_rigidbody_Shape.prototype = {
	getFriction: function() {
		return this._friction;
	}
	,setFriction: function(friction) {
		this._friction = friction;
	}
	,getRestitution: function() {
		return this._restitution;
	}
	,setRestitution: function(restitution) {
		this._restitution = restitution;
	}
	,getLocalTransform: function() {
		var _this = this._localTransform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getLocalTransformTo: function(transform) {
		var transform1 = this._localTransform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,getTransform: function() {
		var _this = this._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getTransformTo: function(transform) {
		var transform1 = this._transform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,setLocalTransform: function(transform) {
		var _this = this._localTransform;
		_this._positionX = transform._positionX;
		_this._positionY = transform._positionY;
		_this._positionZ = transform._positionZ;
		_this._rotation00 = transform._rotation00;
		_this._rotation01 = transform._rotation01;
		_this._rotation02 = transform._rotation02;
		_this._rotation10 = transform._rotation10;
		_this._rotation11 = transform._rotation11;
		_this._rotation12 = transform._rotation12;
		_this._rotation20 = transform._rotation20;
		_this._rotation21 = transform._rotation21;
		_this._rotation22 = transform._rotation22;
		if(this._rigidBody != null) {
			var _this1 = this._rigidBody;
			_this1.updateMass();
			var s = _this1._shapeList;
			while(s != null) {
				var n = s._next;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var src2 = _this1._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += src2._positionX;
				dst._positionY += src2._positionY;
				dst._positionZ += src2._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var src21 = _this1._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src21._positionX;
				dst1._positionY += src21._positionY;
				dst1._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,getDensity: function() {
		return this._density;
	}
	,setDensity: function(density) {
		this._density = density;
		if(this._rigidBody != null) {
			var _this = this._rigidBody;
			_this.updateMass();
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var src2 = _this._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += src2._positionX;
				dst._positionY += src2._positionY;
				dst._positionZ += src2._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var src21 = _this._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src21._positionX;
				dst1._positionY += src21._positionY;
				dst1._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,getAabb: function() {
		return this._aabb.clone();
	}
	,getAabbTo: function(aabb) {
		aabb.copyFrom(this._aabb);
	}
	,getGeometry: function() {
		return this._geom;
	}
	,getRigidBody: function() {
		return this._rigidBody;
	}
	,getCollisionGroup: function() {
		return this._collisionGroup;
	}
	,setCollisionGroup: function(collisionGroup) {
		this._collisionGroup = collisionGroup;
	}
	,getCollisionMask: function() {
		return this._collisionMask;
	}
	,setCollisionMask: function(collisionMask) {
		this._collisionMask = collisionMask;
	}
	,getContactCallback: function() {
		return this._contactCallback;
	}
	,setContactCallback: function(callback) {
		this._contactCallback = callback;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
};
var oimo_dynamics_rigidbody_ShapeConfig = function() {
	this.position = new oimo_common_Vec3();
	this.rotation = new oimo_common_Mat3();
	this.friction = oimo_common_Setting.defaultFriction;
	this.restitution = oimo_common_Setting.defaultRestitution;
	this.density = oimo_common_Setting.defaultDensity;
	this.collisionGroup = oimo_common_Setting.defaultCollisionGroup;
	this.collisionMask = oimo_common_Setting.defaultCollisionMask;
	this.geometry = null;
	this.contactCallback = null;
};
oimo_dynamics_rigidbody_ShapeConfig.__name__ = true;
var oimo_m_M = function() { };
oimo_m_M.__name__ = true;
var pot_core_Pot = function(app,canvas) {
	this.app = app;
	this.canvas = canvas;
	this.graphics = new pot_graphics_Graphics(canvas);
	this.timer = new pot_util_Timer($bind(this,this.frame));
};
pot_core_Pot.__name__ = true;
pot_core_Pot.prototype = {
	size: function(width,height) {
		this.width = width;
		this.height = height;
		this.canvas.width = width;
		this.canvas.height = height;
		this.canvas.style.width = width + "px";
		this.canvas.style.height = height + "px";
		var _this = this.graphics;
		_this.screenWidth = width;
		_this.screenHeight = height;
		if(_this.currentRenderTarget == null) {
			var width1;
			var height1;
			var targetHeight;
			if(_this.currentRenderTarget == null) {
				width1 = _this.canvas.width;
				height1 = _this.canvas.height;
				targetHeight = height1;
			} else {
				width1 = _this.currentRenderTarget.width;
				height1 = _this.currentRenderTarget.height;
				targetHeight = _this.currentRenderTarget.textureHeight;
			}
			_this.gl.viewport(0,targetHeight - height1,width1,height1);
		}
		var fovY = null;
		var near = null;
		var far = null;
		if(fovY == null) {
			fovY = Math.PI / 3;
		}
		if(near == null) {
			near = 0.1;
		}
		if(far == null) {
			far = 1000;
		}
		_this.cameraFov = fovY;
		_this.cameraNear = near;
		_this.cameraFar = far;
		_this.projMat.perspective(fovY,_this.screenWidth / _this.screenHeight,near,far);
	}
	,frameRate: function(fps) {
		this.timer.setFrameRate(fps);
	}
	,start: function() {
		this.timer.start();
	}
	,stop: function() {
		this.timer.stop();
	}
	,frame: function() {
		this.app.input.update();
		this.app.loop();
		this.app.frameCount++;
	}
};
var pot_graphics_Graphics = function(canvas) {
	this.canvas = canvas;
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(canvas,null);
	this.initGL();
	this.initShaders();
	this.initBuffers();
	this.initMatricies();
	this.cameraNear = 0.1;
	this.cameraFar = 10000;
	this.cameraFov = Math.PI / 3;
	this.cameraSet = false;
	this.cameraPosX = 0;
	this.cameraPosY = 0;
	this.cameraPosZ = 1;
	this.cameraAtX = 0;
	this.cameraAtY = 0;
	this.cameraAtZ = 0;
	this.cameraUpX = 0;
	this.cameraUpY = 1;
	this.cameraUpZ = 0;
	this.screenWidth = canvas.width;
	this.screenHeight = canvas.height;
	if(this.currentRenderTarget == null) {
		var width;
		var height;
		var targetHeight;
		if(this.currentRenderTarget == null) {
			width = this.canvas.width;
			height = this.canvas.height;
			targetHeight = height;
		} else {
			width = this.currentRenderTarget.width;
			height = this.currentRenderTarget.height;
			targetHeight = this.currentRenderTarget.textureHeight;
		}
		this.gl.viewport(0,targetHeight - height,width,height);
	}
	var fovY = null;
	var near = null;
	var far = null;
	if(fovY == null) {
		fovY = Math.PI / 3;
	}
	if(near == null) {
		near = 0.1;
	}
	if(far == null) {
		far = 1000;
	}
	this.cameraFov = fovY;
	this.cameraNear = near;
	this.cameraFar = far;
	this.projMat.perspective(fovY,this.screenWidth / this.screenHeight,near,far);
	this.numVertices = 0;
	this.colorR = 1;
	this.colorG = 1;
	this.colorB = 1;
	this.colorA = 1;
	this.normalX = 0;
	this.normalY = 0;
	this.normalZ = 0;
	this.texCoordU = 0;
	this.texCoordV = 0;
	var this1 = new Array(1024);
	this.matStack = this1;
	this.matStackCount = 0;
	this.currentTexture = null;
	this.currentRenderTarget = null;
	this.texMode = 1;
	this.sceneOpen = false;
	var this2 = new Array(8);
	this.lightBuf = this2;
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this.lightBuf[i] = new pot_graphics__$Graphics_Light();
	}
	this.numLights = 0;
};
pot_graphics_Graphics.__name__ = true;
pot_graphics_Graphics.prototype = {
	initGL: function() {
		this.gl.getExtension("OES_texture_float");
		this.gl.getExtension("OES_texture_float_linear");
		this.gl.getExtension("WEBGL_color_buffer_float");
		this.gl.disable(2929);
		this.gl.enable(3042);
		this.gl.frontFace(2305);
		this.gl.cullFace(1029);
		this.gl.disable(2884);
		this.gl.blendFuncSeparate(770,771,1,1);
	}
	,init2D: function() {
		this.gl.disable(2929);
		this.gl.frontFace(2305);
		this.gl.cullFace(1029);
		this.gl.disable(2884);
		this.cameraSet = false;
		var width;
		var height;
		var targetHeight;
		if(this.currentRenderTarget == null) {
			width = this.canvas.width;
			height = this.canvas.height;
			targetHeight = height;
		} else {
			width = this.currentRenderTarget.width;
			height = this.currentRenderTarget.height;
			targetHeight = this.currentRenderTarget.textureHeight;
		}
		this.gl.viewport(0,targetHeight - height,width,height);
		this.currentTexture = null;
	}
	,init3D: function() {
		this.gl.enable(2929);
		this.gl.frontFace(2305);
		this.gl.cullFace(1029);
		this.gl.enable(2884);
		this.cameraSet = false;
		var width;
		var height;
		var targetHeight;
		if(this.currentRenderTarget == null) {
			width = this.canvas.width;
			height = this.canvas.height;
			targetHeight = height;
		} else {
			width = this.currentRenderTarget.width;
			height = this.currentRenderTarget.height;
			targetHeight = this.currentRenderTarget.textureHeight;
		}
		this.gl.viewport(0,targetHeight - height,width,height);
		this.currentTexture = null;
	}
	,initMatricies: function() {
		this.modelMat = new pot_graphics__$Graphics_UniformMatrix();
		this.viewMat = new pot_graphics__$Graphics_UniformMatrix();
		this.modelviewMat = new pot_graphics__$Graphics_UniformMatrix();
		this.normalMat = new pot_graphics__$Graphics_UniformMatrix();
		this.projMat = new pot_graphics__$Graphics_UniformMatrix();
		this.mvpMat = new pot_graphics__$Graphics_UniformMatrix();
	}
	,initShaders: function() {
		var vertexSource = "\n\t\t\tattribute vec4 position;\n\t\t\tattribute vec4 color;\n\t\t\tattribute vec3 normal;\n\t\t\tattribute vec2 texCoord;\n\n\t\t\tuniform mat4 transform;\n\t\t\tuniform mat4 modelview;\n\t\t\tuniform mat3 normalMatrix;\n\n\t\t\tvarying vec4 vColor;\n\t\t\tvarying vec3 vPosition;\n\t\t\tvarying vec3 vNormal;\n\t\t\tvarying vec2 vTexCoord;\n\n\t\t\tvoid main() {\n\t\t\t\tgl_Position = transform * position;\n\n\t\t\t\tvColor = color;\n\t\t\t\tvPosition = (modelview * position).xyz;\n\t\t\t\tvNormal = normalMatrix * normal;\n\t\t\t\tvTexCoord = texCoord;\n\t\t\t}\n\t\t";
		var fragmentSource = "\n\t\t\tprecision mediump float;\n\t\t\tvarying vec4 vColor;\n\t\t\tvarying vec3 vPosition;\n\t\t\tvarying vec3 vNormal;\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform float ambient;\n\t\t\tuniform float diffuse;\n\t\t\tuniform float specular;\n\t\t\tuniform float shininess;\n\t\t\tuniform float emission;\n\t\t\tuniform int numLights;\n\t\t\tuniform vec4 lightPositions[8];\n\t\t\tuniform vec3 lightColors[8];\n\t\t\tuniform vec3 lightNormals[8];\n\n\t\t\tvoid main() {\n\t\t\t\tif (numLights == 0) {\n\t\t\t\t\tgl_FragColor = vColor;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvec3 eye = normalize(vPosition);\n\t\t\t\tvec3 n = normalize(vNormal);\n\t\t\t\tvec3 color = vColor.xyz;\n\t\t\t\tvec3 ambientTotal = vec3(0);\n\t\t\t\tvec3 diffuseTotal = vec3(0);\n\t\t\t\tvec3 specularTotal = vec3(0);\n\t\t\t\tvec3 emissionTotal = color * emission;\n\n\t\t\t\tif (!gl_FrontFacing) n = -n;\n\n\t\t\t\tfor (int i = 0; i < 8; i++) {\n\t\t\t\t\tif (i == numLights) break;\n\t\t\t\t\tvec4 lp = lightPositions[i];\n\t\t\t\t\tvec3 lc = lightColors[i];\n\t\t\t\t\tvec3 ln = lightNormals[i];\n\t\t\t\t\tbool amb = lp.w == 0.0 && dot(ln, ln) == 0.0;\n\t\t\t\t\tbool dir = lp.w == 0.0;\n\t\t\t\t\tif (amb) {\n\t\t\t\t\t\tambientTotal += lc * color * ambient;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!dir) {\n\t\t\t\t\t\t\tln = normalize(vPosition - lp.xyz);\n\t\t\t\t\t\t\t// TODO: spot light\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat ldot = -dot(ln, n);\n\t\t\t\t\t\tif (ldot < 0.0) ldot = 0.0;\n\t\t\t\t\t\tdiffuseTotal += lc * color * ldot * diffuse;\n\t\t\t\t\t\tif (ldot > 0.0) {\n\t\t\t\t\t\t\tvec3 reflEye = eye - 2.0 * n * dot(eye, n);\n\t\t\t\t\t\t\tfloat rdot = -dot(reflEye, ln);\n\t\t\t\t\t\t\tif (rdot < 0.0) rdot = 0.0;\n\t\t\t\t\t\t\tspecularTotal += lc * pow(rdot, shininess) * specular;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgl_FragColor = vec4(ambientTotal + diffuseTotal + specularTotal + emissionTotal, vColor.w);\n\t\t\t}\n\t\t";
		var fragmentTextureSource = "\n\t\t\tprecision mediump float;\n\t\t\tuniform sampler2D texture;\n\n\t\t\tvarying vec4 vColor;\n\t\t\tvarying vec3 vPosition;\n\t\t\tvarying vec3 vNormal;\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform float ambient;\n\t\t\tuniform float diffuse;\n\t\t\tuniform float specular;\n\t\t\tuniform float shininess;\n\t\t\tuniform float emission;\n\t\t\tuniform int numLights;\n\t\t\tuniform vec4 lightPositions[8];\n\t\t\tuniform vec3 lightColors[8];\n\t\t\tuniform vec3 lightNormals[8];\n\n\t\t\tvoid main() {\n\t\t\t\tvec4 texMulColor = texture2D(texture, vTexCoord) * vColor;\n\t\t\t\tif (numLights == 0) {\n\t\t\t\t\tgl_FragColor = texMulColor;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvec3 eye = normalize(vPosition);\n\t\t\t\tvec3 n = normalize(vNormal);\n\t\t\t\tvec3 color = texMulColor.xyz;\n\t\t\t\tvec3 ambientTotal = vec3(0);\n\t\t\t\tvec3 diffuseTotal = vec3(0);\n\t\t\t\tvec3 specularTotal = vec3(0);\n\t\t\t\tvec3 emissionTotal = color * emission;\n\n\t\t\t\tif (!gl_FrontFacing) n = -n;\n\n\t\t\t\tfor (int i = 0; i < 8; i++) {\n\t\t\t\t\tif (i == numLights) break;\n\t\t\t\t\tvec4 lp = lightPositions[i];\n\t\t\t\t\tvec3 lc = lightColors[i];\n\t\t\t\t\tvec3 ln = lightNormals[i];\n\t\t\t\t\tbool amb = lp.w == 0.0 && dot(ln, ln) == 0.0;\n\t\t\t\t\tbool dir = lp.w == 0.0;\n\t\t\t\t\tif (amb) {\n\t\t\t\t\t\tambientTotal += lc * color * ambient;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!dir) {\n\t\t\t\t\t\t\tln = normalize(vPosition - lp.xyz);\n\t\t\t\t\t\t\t// TODO: spot light\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfloat ldot = -dot(ln, n);\n\t\t\t\t\t\tif (ldot < 0.0) ldot = 0.0;\n\t\t\t\t\t\tdiffuseTotal += lc * color * ldot * diffuse;\n\t\t\t\t\t\tif (ldot > 0.0) {\n\t\t\t\t\t\t\tvec3 reflEye = eye - 2.0 * n * dot(eye, n);\n\t\t\t\t\t\t\tfloat rdot = -dot(reflEye, ln);\n\t\t\t\t\t\t\tif (rdot < 0.0) rdot = 0.0;\n\t\t\t\t\t\t\tspecularTotal += lc * pow(rdot, shininess) * specular;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgl_FragColor = vec4(ambientTotal + diffuseTotal + specularTotal + emissionTotal, texMulColor.w);\n\t\t\t}\n\t\t";
		this.defaultShader = new pot_graphics_Shader(this.gl);
		var _this = this.defaultShader;
		_this.vSource = vertexSource;
		_this.compiled = false;
		var _this1 = this.defaultShader;
		_this1.fSource = fragmentSource;
		_this1.compiled = false;
		var _this2 = this.defaultShader;
		_this2.map = new haxe_ds_StringMap();
		_this2.gl.shaderSource(_this2.vs,_this2.vSource);
		_this2.gl.compileShader(_this2.vs);
		if(!_this2.gl.getShaderParameter(_this2.vs,35713)) {
			js_Browser.alert(_this2.gl.getShaderInfoLog(_this2.vs));
		}
		_this2.gl.shaderSource(_this2.fs,_this2.fSource);
		_this2.gl.compileShader(_this2.fs);
		if(!_this2.gl.getShaderParameter(_this2.fs,35713)) {
			js_Browser.alert(_this2.gl.getShaderInfoLog(_this2.fs));
		}
		_this2.gl.attachShader(_this2.pg,_this2.vs);
		_this2.gl.attachShader(_this2.pg,_this2.fs);
		_this2.gl.linkProgram(_this2.pg);
		if(_this2.gl.getProgramParameter(_this2.pg,35714)) {
			_this2.compiled = true;
		} else {
			console.log("../Pot Engine/src/pot/graphics/Shader.hx:173:",_this2.gl.getProgramInfoLog(_this2.pg));
		}
		this.defaultShaderTexture = new pot_graphics_Shader(this.gl);
		var _this3 = this.defaultShaderTexture;
		_this3.vSource = vertexSource;
		_this3.compiled = false;
		var _this4 = this.defaultShaderTexture;
		_this4.fSource = fragmentTextureSource;
		_this4.compiled = false;
		var _this5 = this.defaultShaderTexture;
		_this5.map = new haxe_ds_StringMap();
		_this5.gl.shaderSource(_this5.vs,_this5.vSource);
		_this5.gl.compileShader(_this5.vs);
		if(!_this5.gl.getShaderParameter(_this5.vs,35713)) {
			js_Browser.alert(_this5.gl.getShaderInfoLog(_this5.vs));
		}
		_this5.gl.shaderSource(_this5.fs,_this5.fSource);
		_this5.gl.compileShader(_this5.fs);
		if(!_this5.gl.getShaderParameter(_this5.fs,35713)) {
			js_Browser.alert(_this5.gl.getShaderInfoLog(_this5.fs));
		}
		_this5.gl.attachShader(_this5.pg,_this5.vs);
		_this5.gl.attachShader(_this5.pg,_this5.fs);
		_this5.gl.linkProgram(_this5.pg);
		if(_this5.gl.getProgramParameter(_this5.pg,35714)) {
			_this5.compiled = true;
		} else {
			console.log("../Pot Engine/src/pot/graphics/Shader.hx:173:",_this5.gl.getProgramInfoLog(_this5.pg));
		}
		this.currentShader = null;
	}
	,initBuffers: function() {
		this.positionBuf = new pot_graphics__$Graphics_VertexBuffer(this.gl,"position",3);
		this.colorBuf = new pot_graphics__$Graphics_VertexBuffer(this.gl,"color",4);
		this.normalBuf = new pot_graphics__$Graphics_VertexBuffer(this.gl,"normal",3);
		this.texCoordBuf = new pot_graphics__$Graphics_VertexBuffer(this.gl,"texCoord",2);
		this.indexBuf = new pot_graphics__$Graphics_IndexBuffer(this.gl);
	}
	,chooseShader: function() {
		if(this.currentShader != null) {
			return this.currentShader;
		}
		if(this.currentTexture != null) {
			return this.defaultShaderTexture;
		}
		return this.defaultShader;
	}
	,screen: function(width,height) {
		this.screenWidth = width;
		this.screenHeight = height;
		if(this.currentRenderTarget == null) {
			var width1;
			var height1;
			var targetHeight;
			if(this.currentRenderTarget == null) {
				width1 = this.canvas.width;
				height1 = this.canvas.height;
				targetHeight = height1;
			} else {
				width1 = this.currentRenderTarget.width;
				height1 = this.currentRenderTarget.height;
				targetHeight = this.currentRenderTarget.textureHeight;
			}
			this.gl.viewport(0,targetHeight - height1,width1,height1);
		}
		var fovY = null;
		var near = null;
		var far = null;
		if(fovY == null) {
			fovY = Math.PI / 3;
		}
		if(near == null) {
			near = 0.1;
		}
		if(far == null) {
			far = 1000;
		}
		this.cameraFov = fovY;
		this.cameraNear = near;
		this.cameraFar = far;
		this.projMat.perspective(fovY,this.screenWidth / this.screenHeight,near,far);
	}
	,viewport: function(x,y,width,height) {
		var targetHeight = this.currentRenderTarget == null ? this.canvas.height : this.currentRenderTarget.textureHeight;
		this.gl.viewport(x,targetHeight - height - y,width,height);
	}
	,resetViewport: function() {
		var width;
		var height;
		var targetHeight;
		if(this.currentRenderTarget == null) {
			width = this.canvas.width;
			height = this.canvas.height;
			targetHeight = height;
		} else {
			width = this.currentRenderTarget.width;
			height = this.currentRenderTarget.height;
			targetHeight = this.currentRenderTarget.textureHeight;
		}
		this.gl.viewport(0,targetHeight - height,width,height);
	}
	,getRawGL: function() {
		return this.gl;
	}
	,beginScene: function() {
		if(this.sceneOpen) {
			throw new Error("scene already begun");
		}
		this.sceneOpen = true;
		this.modelMat.identity();
		this.numLights = 0;
		this.currentTexture = null;
		this.colorR = 1;
		this.colorG = 1;
		this.colorB = 1;
		this.colorA = 1;
		this.normalX = 0;
		this.normalY = 0;
		this.normalZ = 0;
		this.texCoordU = 0;
		this.texCoordV = 0;
		this.materialAmb = 1;
		this.materialDif = 1;
		this.materialSpc = 0;
		this.materialShn = 10;
		this.materialEmi = 0;
		if(!this.cameraSet) {
			this.defaultCameraPosX = this.screenWidth * 0.5;
			this.defaultCameraPosY = this.screenHeight * 0.5;
			this.defaultCameraPosZ = -this.screenHeight / (2 * Math.tan(this.cameraFov * 0.5));
			this.viewMat.lookAt(this.defaultCameraPosX,this.defaultCameraPosY,this.defaultCameraPosZ,this.defaultCameraPosX,this.defaultCameraPosY,0,0,-1,0);
		}
	}
	,endScene: function() {
		if(!this.sceneOpen) {
			throw new Error("scene already ended");
		}
		this.sceneOpen = false;
		this.gl.flush();
	}
	,enableDepthTest: function() {
		this.gl.enable(2929);
	}
	,disableDepthTest: function() {
		this.gl.disable(2929);
	}
	,culling: function(face) {
		if(face == 0) {
			this.gl.disable(2884);
		} else {
			this.gl.enable(2884);
			this.gl.cullFace(face);
		}
	}
	,clear: function(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		this.gl.clearColor(r,g,b,a);
		this.gl.clearDepth(1);
		this.gl.clear(16640);
	}
	,createShader: function(vertexSource,fragmentSource) {
		var shader = new pot_graphics_Shader(this.gl);
		shader.vSource = vertexSource;
		shader.compiled = false;
		shader.fSource = fragmentSource;
		shader.compiled = false;
		shader.map = new haxe_ds_StringMap();
		shader.gl.shaderSource(shader.vs,shader.vSource);
		shader.gl.compileShader(shader.vs);
		if(!shader.gl.getShaderParameter(shader.vs,35713)) {
			js_Browser.alert(shader.gl.getShaderInfoLog(shader.vs));
		}
		shader.gl.shaderSource(shader.fs,shader.fSource);
		shader.gl.compileShader(shader.fs);
		if(!shader.gl.getShaderParameter(shader.fs,35713)) {
			js_Browser.alert(shader.gl.getShaderInfoLog(shader.fs));
		}
		shader.gl.attachShader(shader.pg,shader.vs);
		shader.gl.attachShader(shader.pg,shader.fs);
		shader.gl.linkProgram(shader.pg);
		if(shader.gl.getProgramParameter(shader.pg,35714)) {
			shader.compiled = true;
		} else {
			console.log("../Pot Engine/src/pot/graphics/Shader.hx:173:",shader.gl.getProgramInfoLog(shader.pg));
		}
		return shader;
	}
	,shader: function(shader) {
		this.currentShader = shader;
	}
	,resetShader: function() {
		this.currentShader = null;
	}
	,createTexture: function(width,height,floating) {
		if(floating == null) {
			floating = false;
		}
		var img = new pot_graphics_Texture(this.gl);
		img.init(width,height,floating);
		return img;
	}
	,loadImage: function(image,scalingMode,floating) {
		if(floating == null) {
			floating = false;
		}
		if(scalingMode == null) {
			scalingMode = 0;
		}
		var img = new pot_graphics_Texture(this.gl);
		img.load(image,scalingMode,floating);
		return img;
	}
	,loadImageTo: function(texture,image,scalingMode,floating) {
		if(floating == null) {
			floating = false;
		}
		if(scalingMode == null) {
			scalingMode = 0;
		}
		texture.load(image,scalingMode,floating);
	}
	,renderTarget: function(target) {
		this.currentRenderTarget = target;
		if(target == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.canvas.width,this.canvas.height);
		} else {
			this.gl.bindFramebuffer(36160,target.frameBuffer);
			this.gl.viewport(0,target.textureHeight - target.height,target.width,target.height);
		}
	}
	,pushMatrix: function() {
		if(this.matStackCount > 1008) {
			throw new Error("matrix stack overflowed");
		}
		var val = this.modelMat.array[0];
		this.matStack[this.matStackCount++] = val;
		var val1 = this.modelMat.array[1];
		this.matStack[this.matStackCount++] = val1;
		var val2 = this.modelMat.array[2];
		this.matStack[this.matStackCount++] = val2;
		var val3 = this.modelMat.array[3];
		this.matStack[this.matStackCount++] = val3;
		var val4 = this.modelMat.array[4];
		this.matStack[this.matStackCount++] = val4;
		var val5 = this.modelMat.array[5];
		this.matStack[this.matStackCount++] = val5;
		var val6 = this.modelMat.array[6];
		this.matStack[this.matStackCount++] = val6;
		var val7 = this.modelMat.array[7];
		this.matStack[this.matStackCount++] = val7;
		var val8 = this.modelMat.array[8];
		this.matStack[this.matStackCount++] = val8;
		var val9 = this.modelMat.array[9];
		this.matStack[this.matStackCount++] = val9;
		var val10 = this.modelMat.array[10];
		this.matStack[this.matStackCount++] = val10;
		var val11 = this.modelMat.array[11];
		this.matStack[this.matStackCount++] = val11;
		var val12 = this.modelMat.array[12];
		this.matStack[this.matStackCount++] = val12;
		var val13 = this.modelMat.array[13];
		this.matStack[this.matStackCount++] = val13;
		var val14 = this.modelMat.array[14];
		this.matStack[this.matStackCount++] = val14;
		var val15 = this.modelMat.array[15];
		this.matStack[this.matStackCount++] = val15;
	}
	,popMatrix: function() {
		if(this.matStackCount < 16) {
			throw new Error("cannot pop matrix");
		}
		this.modelMat.array[15] = this.matStack[--this.matStackCount];
		this.modelMat.array[14] = this.matStack[--this.matStackCount];
		this.modelMat.array[13] = this.matStack[--this.matStackCount];
		this.modelMat.array[12] = this.matStack[--this.matStackCount];
		this.modelMat.array[11] = this.matStack[--this.matStackCount];
		this.modelMat.array[10] = this.matStack[--this.matStackCount];
		this.modelMat.array[9] = this.matStack[--this.matStackCount];
		this.modelMat.array[8] = this.matStack[--this.matStackCount];
		this.modelMat.array[7] = this.matStack[--this.matStackCount];
		this.modelMat.array[6] = this.matStack[--this.matStackCount];
		this.modelMat.array[5] = this.matStack[--this.matStackCount];
		this.modelMat.array[4] = this.matStack[--this.matStackCount];
		this.modelMat.array[3] = this.matStack[--this.matStackCount];
		this.modelMat.array[2] = this.matStack[--this.matStackCount];
		this.modelMat.array[1] = this.matStack[--this.matStackCount];
		this.modelMat.array[0] = this.matStack[--this.matStackCount];
	}
	,scale: function(sx,sy,sz) {
		if(sz == null) {
			sz = 1;
		}
		this.modelMat.appendScale(sx,sy,sz);
	}
	,rotate: function(ang) {
		this.modelMat.appendRotation(ang,0,0,1);
	}
	,rotateX: function(ang) {
		this.modelMat.appendRotation(ang,1,0,0);
	}
	,rotateY: function(ang) {
		this.modelMat.appendRotation(ang,0,1,0);
	}
	,rotateZ: function(ang) {
		this.modelMat.appendRotation(ang,0,0,1);
	}
	,translate: function(tx,ty,tz) {
		if(tz == null) {
			tz = 0;
		}
		this.modelMat.appendTranslation(tx,ty,tz);
	}
	,resetCamera: function() {
		this.cameraSet = false;
	}
	,camera: function(posX,posY,posZ,atX,atY,atZ,upX,upY,upZ) {
		this.cameraSet = true;
		this.cameraPosX = posX;
		this.cameraPosY = posY;
		this.cameraPosZ = posZ;
		this.cameraAtX = atX;
		this.cameraAtY = atY;
		this.cameraAtZ = atZ;
		this.cameraUpX = upX;
		this.cameraUpY = upY;
		this.cameraUpZ = upZ;
		this.viewMat.lookAt(this.cameraPosX,this.cameraPosY,this.cameraPosZ,this.cameraAtX,this.cameraAtY,this.cameraAtZ,this.cameraUpX,this.cameraUpY,this.cameraUpZ);
	}
	,perspective: function(fovY,near,far) {
		if(fovY == null) {
			fovY = Math.PI / 3;
		}
		if(near == null) {
			near = 0.1;
		}
		if(far == null) {
			far = 1000;
		}
		this.cameraFov = fovY;
		this.cameraNear = near;
		this.cameraFar = far;
		this.projMat.perspective(fovY,this.screenWidth / this.screenHeight,near,far);
	}
	,beginShape: function(mode) {
		this.shapeMode = mode;
		this.numVertices = 0;
		this.positionBuf.length = 0;
		this.colorBuf.length = 0;
		this.normalBuf.length = 0;
		this.texCoordBuf.length = 0;
		this.indexBuf.length = 0;
	}
	,image: function(img,srcX,srcY,srcW,srcH,dstX,dstY,dstW,dstH) {
		var tmpTex = this.currentTexture;
		var tmpTexMode = this.texMode;
		this.currentTexture = img;
		this.texMode = 0;
		this.beginShape(5);
		this.normalX = 0;
		this.normalY = 0;
		this.normalZ = -1;
		var u = srcX;
		var v = srcY;
		if(this.currentTexture == null) {
			throw new Error("set texture before calling texCoord");
		}
		var _g = this.texMode;
		switch(_g) {
		case 0:
			u *= this.currentTexture.imageToU;
			v *= this.currentTexture.imageToV;
			break;
		case 1:
			u *= this.currentTexture.normalToU;
			v *= this.currentTexture.normalToV;
			break;
		case 2:
			break;
		}
		this.texCoordU = u;
		this.texCoordV = 1 - v;
		this.vertex(dstX,dstY,0);
		var u1 = srcX;
		var v1 = srcY + srcH;
		if(this.currentTexture == null) {
			throw new Error("set texture before calling texCoord");
		}
		var _g1 = this.texMode;
		switch(_g1) {
		case 0:
			u1 *= this.currentTexture.imageToU;
			v1 *= this.currentTexture.imageToV;
			break;
		case 1:
			u1 *= this.currentTexture.normalToU;
			v1 *= this.currentTexture.normalToV;
			break;
		case 2:
			break;
		}
		this.texCoordU = u1;
		this.texCoordV = 1 - v1;
		this.vertex(dstX,dstY + dstH,0);
		var u2 = srcX + srcW;
		var v2 = srcY;
		if(this.currentTexture == null) {
			throw new Error("set texture before calling texCoord");
		}
		var _g2 = this.texMode;
		switch(_g2) {
		case 0:
			u2 *= this.currentTexture.imageToU;
			v2 *= this.currentTexture.imageToV;
			break;
		case 1:
			u2 *= this.currentTexture.normalToU;
			v2 *= this.currentTexture.normalToV;
			break;
		case 2:
			break;
		}
		this.texCoordU = u2;
		this.texCoordV = 1 - v2;
		this.vertex(dstX + dstW,dstY,0);
		var u3 = srcX + srcW;
		var v3 = srcY + srcH;
		if(this.currentTexture == null) {
			throw new Error("set texture before calling texCoord");
		}
		var _g3 = this.texMode;
		switch(_g3) {
		case 0:
			u3 *= this.currentTexture.imageToU;
			v3 *= this.currentTexture.imageToV;
			break;
		case 1:
			u3 *= this.currentTexture.normalToU;
			v3 *= this.currentTexture.normalToV;
			break;
		case 2:
			break;
		}
		this.texCoordU = u3;
		this.texCoordV = 1 - v3;
		this.vertex(dstX + dstW,dstY + dstH,0);
		var shader = this.chooseShader();
		var pg = shader.pg;
		this.modelviewMat.mul(this.viewMat,this.modelMat);
		this.normalMat.inverse(this.modelviewMat);
		this.normalMat.transpose(this.normalMat);
		var tmp;
		var _this = shader.map;
		if(__map_reserved["model"] != null ? _this.existsReserved("model") : _this.h.hasOwnProperty("model")) {
			var _this1 = shader.map;
			tmp = __map_reserved["model"] != null ? _this1.getReserved("model") : _this1.h["model"];
		} else {
			var ul = shader.gl.getUniformLocation(shader.pg,"model");
			var _this2 = shader.map;
			if(__map_reserved["model"] != null) {
				_this2.setReserved("model",ul);
			} else {
				_this2.h["model"] = ul;
			}
			tmp = ul;
		}
		if(tmp != null) {
			shader.setMatrix("model",this.modelMat.array);
		}
		var tmp1;
		var _this3 = shader.map;
		if(__map_reserved["view"] != null ? _this3.existsReserved("view") : _this3.h.hasOwnProperty("view")) {
			var _this4 = shader.map;
			tmp1 = __map_reserved["view"] != null ? _this4.getReserved("view") : _this4.h["view"];
		} else {
			var ul1 = shader.gl.getUniformLocation(shader.pg,"view");
			var _this5 = shader.map;
			if(__map_reserved["view"] != null) {
				_this5.setReserved("view",ul1);
			} else {
				_this5.h["view"] = ul1;
			}
			tmp1 = ul1;
		}
		if(tmp1 != null) {
			shader.setMatrix("view",this.viewMat.array);
		}
		var tmp2;
		var _this6 = shader.map;
		if(__map_reserved["projection"] != null ? _this6.existsReserved("projection") : _this6.h.hasOwnProperty("projection")) {
			var _this7 = shader.map;
			tmp2 = __map_reserved["projection"] != null ? _this7.getReserved("projection") : _this7.h["projection"];
		} else {
			var ul2 = shader.gl.getUniformLocation(shader.pg,"projection");
			var _this8 = shader.map;
			if(__map_reserved["projection"] != null) {
				_this8.setReserved("projection",ul2);
			} else {
				_this8.h["projection"] = ul2;
			}
			tmp2 = ul2;
		}
		if(tmp2 != null) {
			shader.setMatrix("projection",this.projMat.array);
		}
		var tmp3;
		var _this9 = shader.map;
		if(__map_reserved["transform"] != null ? _this9.existsReserved("transform") : _this9.h.hasOwnProperty("transform")) {
			var _this10 = shader.map;
			tmp3 = __map_reserved["transform"] != null ? _this10.getReserved("transform") : _this10.h["transform"];
		} else {
			var ul3 = shader.gl.getUniformLocation(shader.pg,"transform");
			var _this11 = shader.map;
			if(__map_reserved["transform"] != null) {
				_this11.setReserved("transform",ul3);
			} else {
				_this11.h["transform"] = ul3;
			}
			tmp3 = ul3;
		}
		if(tmp3 != null) {
			this.mvpMat.mul(this.projMat,this.modelviewMat);
			shader.setMatrix("transform",this.mvpMat.array);
		}
		var tmp4;
		var _this12 = shader.map;
		if(__map_reserved["modelview"] != null ? _this12.existsReserved("modelview") : _this12.h.hasOwnProperty("modelview")) {
			var _this13 = shader.map;
			tmp4 = __map_reserved["modelview"] != null ? _this13.getReserved("modelview") : _this13.h["modelview"];
		} else {
			var ul4 = shader.gl.getUniformLocation(shader.pg,"modelview");
			var _this14 = shader.map;
			if(__map_reserved["modelview"] != null) {
				_this14.setReserved("modelview",ul4);
			} else {
				_this14.h["modelview"] = ul4;
			}
			tmp4 = ul4;
		}
		if(tmp4 != null) {
			shader.setMatrix("modelview",this.modelviewMat.array);
		}
		var tmp5;
		var _this15 = shader.map;
		if(__map_reserved["normalMatrix"] != null ? _this15.existsReserved("normalMatrix") : _this15.h.hasOwnProperty("normalMatrix")) {
			var _this16 = shader.map;
			tmp5 = __map_reserved["normalMatrix"] != null ? _this16.getReserved("normalMatrix") : _this16.h["normalMatrix"];
		} else {
			var ul5 = shader.gl.getUniformLocation(shader.pg,"normalMatrix");
			var _this17 = shader.map;
			if(__map_reserved["normalMatrix"] != null) {
				_this17.setReserved("normalMatrix",ul5);
			} else {
				_this17.h["normalMatrix"] = ul5;
			}
			tmp5 = ul5;
		}
		if(tmp5 != null) {
			this.normalMat.toMat3();
			shader.setMatrix("normalMatrix",this.normalMat.array3);
		}
		if(this.currentTexture != null) {
			shader.setTexture("texture",this.currentTexture);
			var tmp6;
			var _this18 = shader.map;
			if(__map_reserved["texResolution"] != null ? _this18.existsReserved("texResolution") : _this18.h.hasOwnProperty("texResolution")) {
				var _this19 = shader.map;
				tmp6 = __map_reserved["texResolution"] != null ? _this19.getReserved("texResolution") : _this19.h["texResolution"];
			} else {
				var ul6 = shader.gl.getUniformLocation(shader.pg,"texResolution");
				var _this20 = shader.map;
				if(__map_reserved["texResolution"] != null) {
					_this20.setReserved("texResolution",ul6);
				} else {
					_this20.h["texResolution"] = ul6;
				}
				tmp6 = ul6;
			}
			if(tmp6 != null) {
				shader.setFloat("texResolution",this.currentTexture.textureWidth,this.currentTexture.textureHeight);
			}
			var tmp7;
			var _this21 = shader.map;
			if(__map_reserved["texViewport"] != null ? _this21.existsReserved("texViewport") : _this21.h.hasOwnProperty("texViewport")) {
				var _this22 = shader.map;
				tmp7 = __map_reserved["texViewport"] != null ? _this22.getReserved("texViewport") : _this22.h["texViewport"];
			} else {
				var ul7 = shader.gl.getUniformLocation(shader.pg,"texViewport");
				var _this23 = shader.map;
				if(__map_reserved["texViewport"] != null) {
					_this23.setReserved("texViewport",ul7);
				} else {
					_this23.h["texViewport"] = ul7;
				}
				tmp7 = ul7;
			}
			if(tmp7 != null) {
				var x = 0;
				var y = 1 - this.currentTexture.height / this.currentTexture.textureHeight;
				var w = this.currentTexture.width / this.currentTexture.textureWidth;
				var h = this.currentTexture.height / this.currentTexture.textureHeight;
				shader.setFloat("texViewport",x,y,w,h);
			}
		}
		var tmp8;
		var _this24 = shader.map;
		if(__map_reserved["ambient"] != null ? _this24.existsReserved("ambient") : _this24.h.hasOwnProperty("ambient")) {
			var _this25 = shader.map;
			tmp8 = __map_reserved["ambient"] != null ? _this25.getReserved("ambient") : _this25.h["ambient"];
		} else {
			var ul8 = shader.gl.getUniformLocation(shader.pg,"ambient");
			var _this26 = shader.map;
			if(__map_reserved["ambient"] != null) {
				_this26.setReserved("ambient",ul8);
			} else {
				_this26.h["ambient"] = ul8;
			}
			tmp8 = ul8;
		}
		if(tmp8 != null) {
			shader.setFloat("ambient",this.materialAmb);
		}
		var tmp9;
		var _this27 = shader.map;
		if(__map_reserved["diffuse"] != null ? _this27.existsReserved("diffuse") : _this27.h.hasOwnProperty("diffuse")) {
			var _this28 = shader.map;
			tmp9 = __map_reserved["diffuse"] != null ? _this28.getReserved("diffuse") : _this28.h["diffuse"];
		} else {
			var ul9 = shader.gl.getUniformLocation(shader.pg,"diffuse");
			var _this29 = shader.map;
			if(__map_reserved["diffuse"] != null) {
				_this29.setReserved("diffuse",ul9);
			} else {
				_this29.h["diffuse"] = ul9;
			}
			tmp9 = ul9;
		}
		if(tmp9 != null) {
			shader.setFloat("diffuse",this.materialDif);
		}
		var tmp10;
		var _this30 = shader.map;
		if(__map_reserved["specular"] != null ? _this30.existsReserved("specular") : _this30.h.hasOwnProperty("specular")) {
			var _this31 = shader.map;
			tmp10 = __map_reserved["specular"] != null ? _this31.getReserved("specular") : _this31.h["specular"];
		} else {
			var ul10 = shader.gl.getUniformLocation(shader.pg,"specular");
			var _this32 = shader.map;
			if(__map_reserved["specular"] != null) {
				_this32.setReserved("specular",ul10);
			} else {
				_this32.h["specular"] = ul10;
			}
			tmp10 = ul10;
		}
		if(tmp10 != null) {
			shader.setFloat("specular",this.materialSpc);
		}
		var tmp11;
		var _this33 = shader.map;
		if(__map_reserved["shininess"] != null ? _this33.existsReserved("shininess") : _this33.h.hasOwnProperty("shininess")) {
			var _this34 = shader.map;
			tmp11 = __map_reserved["shininess"] != null ? _this34.getReserved("shininess") : _this34.h["shininess"];
		} else {
			var ul11 = shader.gl.getUniformLocation(shader.pg,"shininess");
			var _this35 = shader.map;
			if(__map_reserved["shininess"] != null) {
				_this35.setReserved("shininess",ul11);
			} else {
				_this35.h["shininess"] = ul11;
			}
			tmp11 = ul11;
		}
		if(tmp11 != null) {
			shader.setFloat("shininess",this.materialShn);
		}
		var tmp12;
		var _this36 = shader.map;
		if(__map_reserved["emission"] != null ? _this36.existsReserved("emission") : _this36.h.hasOwnProperty("emission")) {
			var _this37 = shader.map;
			tmp12 = __map_reserved["emission"] != null ? _this37.getReserved("emission") : _this37.h["emission"];
		} else {
			var ul12 = shader.gl.getUniformLocation(shader.pg,"emission");
			var _this38 = shader.map;
			if(__map_reserved["emission"] != null) {
				_this38.setReserved("emission",ul12);
			} else {
				_this38.h["emission"] = ul12;
			}
			tmp12 = ul12;
		}
		if(tmp12 != null) {
			shader.setFloat("emission",this.materialEmi);
		}
		var tmp13;
		var _this39 = shader.map;
		if(__map_reserved["numLights"] != null ? _this39.existsReserved("numLights") : _this39.h.hasOwnProperty("numLights")) {
			var _this40 = shader.map;
			tmp13 = __map_reserved["numLights"] != null ? _this40.getReserved("numLights") : _this40.h["numLights"];
		} else {
			var ul13 = shader.gl.getUniformLocation(shader.pg,"numLights");
			var _this41 = shader.map;
			if(__map_reserved["numLights"] != null) {
				_this41.setReserved("numLights",ul13);
			} else {
				_this41.h["numLights"] = ul13;
			}
			tmp13 = ul13;
		}
		if(tmp13 != null) {
			shader.setInt("numLights",this.numLights);
		}
		var tmp14;
		var _this42 = shader.map;
		if(__map_reserved["lightPositions"] != null ? _this42.existsReserved("lightPositions") : _this42.h.hasOwnProperty("lightPositions")) {
			var _this43 = shader.map;
			tmp14 = __map_reserved["lightPositions"] != null ? _this43.getReserved("lightPositions") : _this43.h["lightPositions"];
		} else {
			var ul14 = shader.gl.getUniformLocation(shader.pg,"lightPositions");
			var _this44 = shader.map;
			if(__map_reserved["lightPositions"] != null) {
				_this44.setReserved("lightPositions",ul14);
			} else {
				_this44.h["lightPositions"] = ul14;
			}
			tmp14 = ul14;
		}
		if(tmp14 != null) {
			var _g11 = 0;
			var _g4 = this.numLights;
			while(_g11 < _g4) {
				var i = _g11++;
				var light = this.lightBuf[i];
				var x1 = light.posX * this.viewMat.array[0] + light.posY * this.viewMat.array[4] + light.posZ * this.viewMat.array[8] + this.viewMat.array[12];
				var y1 = light.posX * this.viewMat.array[1] + light.posY * this.viewMat.array[5] + light.posZ * this.viewMat.array[9] + this.viewMat.array[13];
				var z = light.posX * this.viewMat.array[2] + light.posY * this.viewMat.array[6] + light.posZ * this.viewMat.array[10] + this.viewMat.array[14];
				shader.setFloat("lightPositions[" + i + "]",x1,y1,z,light.posW);
			}
		}
		var tmp15;
		var _this45 = shader.map;
		if(__map_reserved["lightNormals"] != null ? _this45.existsReserved("lightNormals") : _this45.h.hasOwnProperty("lightNormals")) {
			var _this46 = shader.map;
			tmp15 = __map_reserved["lightNormals"] != null ? _this46.getReserved("lightNormals") : _this46.h["lightNormals"];
		} else {
			var ul15 = shader.gl.getUniformLocation(shader.pg,"lightNormals");
			var _this47 = shader.map;
			if(__map_reserved["lightNormals"] != null) {
				_this47.setReserved("lightNormals",ul15);
			} else {
				_this47.h["lightNormals"] = ul15;
			}
			tmp15 = ul15;
		}
		if(tmp15 != null) {
			var _g12 = 0;
			var _g5 = this.numLights;
			while(_g12 < _g5) {
				var i1 = _g12++;
				var light1 = this.lightBuf[i1];
				var x2 = light1.norX * this.viewMat.array[0] + light1.norY * this.viewMat.array[4] + light1.norZ * this.viewMat.array[8];
				var y2 = light1.norX * this.viewMat.array[1] + light1.norY * this.viewMat.array[5] + light1.norZ * this.viewMat.array[9];
				var z1 = light1.norX * this.viewMat.array[2] + light1.norY * this.viewMat.array[6] + light1.norZ * this.viewMat.array[10];
				shader.setFloat("lightNormals[" + i1 + "]",x2,y2,z1);
			}
		}
		var tmp16;
		var _this48 = shader.map;
		if(__map_reserved["lightColors"] != null ? _this48.existsReserved("lightColors") : _this48.h.hasOwnProperty("lightColors")) {
			var _this49 = shader.map;
			tmp16 = __map_reserved["lightColors"] != null ? _this49.getReserved("lightColors") : _this49.h["lightColors"];
		} else {
			var ul16 = shader.gl.getUniformLocation(shader.pg,"lightColors");
			var _this50 = shader.map;
			if(__map_reserved["lightColors"] != null) {
				_this50.setReserved("lightColors",ul16);
			} else {
				_this50.h["lightColors"] = ul16;
			}
			tmp16 = ul16;
		}
		if(tmp16 != null) {
			var _g13 = 0;
			var _g6 = this.numLights;
			while(_g13 < _g6) {
				var i2 = _g13++;
				var light2 = this.lightBuf[i2];
				shader.setFloat("lightColors[" + i2 + "]",light2.r,light2.g,light2.b);
			}
		}
		var _this51 = this.indexBuf;
		_this51.gl.bindBuffer(34963,_this51.buffer);
		_this51.gl.bufferData(34963,new Int16Array(_this51.array.buffer,0,_this51.length),35044);
		_this51.gl.bindBuffer(34963,null);
		var _this52 = this.positionBuf;
		_this52.gl.bindBuffer(34962,_this52.buffer);
		_this52.gl.bufferData(34962,new Float32Array(_this52.array.buffer,0,_this52.length),35044);
		_this52.gl.bindBuffer(34962,null);
		var _this53 = this.colorBuf;
		_this53.gl.bindBuffer(34962,_this53.buffer);
		_this53.gl.bufferData(34962,new Float32Array(_this53.array.buffer,0,_this53.length),35044);
		_this53.gl.bindBuffer(34962,null);
		var _this54 = this.normalBuf;
		_this54.gl.bindBuffer(34962,_this54.buffer);
		_this54.gl.bufferData(34962,new Float32Array(_this54.array.buffer,0,_this54.length),35044);
		_this54.gl.bindBuffer(34962,null);
		var _this55 = this.texCoordBuf;
		_this55.gl.bindBuffer(34962,_this55.buffer);
		_this55.gl.bufferData(34962,new Float32Array(_this55.array.buffer,0,_this55.length),35044);
		_this55.gl.bindBuffer(34962,null);
		var _this56 = this.positionBuf;
		var idx = _this56.gl.getAttribLocation(pg,_this56.name);
		if(idx != -1) {
			_this56.gl.bindBuffer(34962,_this56.buffer);
			_this56.gl.enableVertexAttribArray(idx);
			_this56.gl.vertexAttribPointer(idx,_this56.size,5126,false,0,0);
			_this56.gl.bindBuffer(34962,null);
		}
		var _this57 = this.colorBuf;
		var idx1 = _this57.gl.getAttribLocation(pg,_this57.name);
		if(idx1 != -1) {
			_this57.gl.bindBuffer(34962,_this57.buffer);
			_this57.gl.enableVertexAttribArray(idx1);
			_this57.gl.vertexAttribPointer(idx1,_this57.size,5126,false,0,0);
			_this57.gl.bindBuffer(34962,null);
		}
		var _this58 = this.normalBuf;
		var idx2 = _this58.gl.getAttribLocation(pg,_this58.name);
		if(idx2 != -1) {
			_this58.gl.bindBuffer(34962,_this58.buffer);
			_this58.gl.enableVertexAttribArray(idx2);
			_this58.gl.vertexAttribPointer(idx2,_this58.size,5126,false,0,0);
			_this58.gl.bindBuffer(34962,null);
		}
		var _this59 = this.texCoordBuf;
		var idx3 = _this59.gl.getAttribLocation(pg,_this59.name);
		if(idx3 != -1) {
			_this59.gl.bindBuffer(34962,_this59.buffer);
			_this59.gl.enableVertexAttribArray(idx3);
			_this59.gl.vertexAttribPointer(idx3,_this59.size,5126,false,0,0);
			_this59.gl.bindBuffer(34962,null);
		}
		if(!shader.compiled) {
			throw new Error("shader is not compiled");
		}
		shader.gl.useProgram(shader.pg);
		var texUnit = 0;
		var name = shader.uniforms.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this60 = shader.uniforms;
			var uniform = __map_reserved[name1] != null ? _this60.getReserved(name1) : _this60.h[name1];
			if(uniform.type == 11) {
				uniform.texUnit = texUnit;
				++texUnit;
			}
		}
		var name2 = shader.uniforms.keys();
		while(name2.hasNext()) {
			var name3 = name2.next();
			var _this61 = shader.uniforms;
			var uniform1 = __map_reserved[name3] != null ? _this61.getReserved(name3) : _this61.h[name3];
			var loc;
			var _this62 = shader.map;
			if(__map_reserved[name3] != null ? _this62.existsReserved(name3) : _this62.h.hasOwnProperty(name3)) {
				var _this63 = shader.map;
				loc = __map_reserved[name3] != null ? _this63.getReserved(name3) : _this63.h[name3];
			} else {
				var ul17 = shader.gl.getUniformLocation(shader.pg,name3);
				var _this64 = shader.map;
				if(__map_reserved[name3] != null) {
					_this64.setReserved(name3,ul17);
				} else {
					_this64.h[name3] = ul17;
				}
				loc = ul17;
			}
			var _g7 = uniform1.type;
			switch(_g7) {
			case 0:
				shader.gl.uniform1i(loc,uniform1.i1);
				break;
			case 1:
				shader.gl.uniform2i(loc,uniform1.i1,uniform1.i2);
				break;
			case 2:
				shader.gl.uniform3i(loc,uniform1.i1,uniform1.i2,uniform1.i3);
				break;
			case 3:
				shader.gl.uniform4i(loc,uniform1.i1,uniform1.i2,uniform1.i3,uniform1.i4);
				break;
			case 4:
				shader.gl.uniform1f(loc,uniform1.f1);
				break;
			case 5:
				shader.gl.uniform2f(loc,uniform1.f1,uniform1.f2);
				break;
			case 6:
				shader.gl.uniform3f(loc,uniform1.f1,uniform1.f2,uniform1.f3);
				break;
			case 7:
				shader.gl.uniform4f(loc,uniform1.f1,uniform1.f2,uniform1.f3,uniform1.f4);
				break;
			case 8:
				shader.gl.uniformMatrix2fv(loc,false,uniform1.m2);
				break;
			case 9:
				shader.gl.uniformMatrix3fv(loc,false,uniform1.m3);
				break;
			case 10:
				shader.gl.uniformMatrix4fv(loc,false,uniform1.m4);
				break;
			case 11:
				shader.gl.activeTexture(33984 + uniform1.texUnit);
				shader.gl.bindTexture(3553,uniform1.tex == null ? null : uniform1.tex.texture);
				shader.gl.uniform1i(loc,uniform1.texUnit);
				break;
			}
		}
		shader.gl.activeTexture(33984);
		var _this65 = this.indexBuf;
		var mode = this.shapeMode;
		_this65.gl.bindBuffer(34963,_this65.buffer);
		_this65.gl.drawElements(mode,_this65.length,5123,0);
		_this65.gl.bindBuffer(34963,null);
		this.currentTexture = tmpTex;
		this.texMode = tmpTexMode;
	}
	,rect: function(x,y,width,height) {
		var tmpTexMode = this.texMode;
		this.texMode = 1;
		this.beginShape(5);
		this.normalX = 0;
		this.normalY = 0;
		this.normalZ = -1;
		if(this.currentTexture != null) {
			var u = 0;
			var v = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g = this.texMode;
			switch(_g) {
			case 0:
				u *= this.currentTexture.imageToU;
				v *= this.currentTexture.imageToV;
				break;
			case 1:
				u *= this.currentTexture.normalToU;
				v *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u;
			this.texCoordV = 1 - v;
			this.vertex(x,y,0);
			var u1 = 0;
			var v1 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g1 = this.texMode;
			switch(_g1) {
			case 0:
				u1 *= this.currentTexture.imageToU;
				v1 *= this.currentTexture.imageToV;
				break;
			case 1:
				u1 *= this.currentTexture.normalToU;
				v1 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u1;
			this.texCoordV = 1 - v1;
			this.vertex(x,y + height,0);
			var u2 = 1;
			var v2 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g2 = this.texMode;
			switch(_g2) {
			case 0:
				u2 *= this.currentTexture.imageToU;
				v2 *= this.currentTexture.imageToV;
				break;
			case 1:
				u2 *= this.currentTexture.normalToU;
				v2 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u2;
			this.texCoordV = 1 - v2;
			this.vertex(x + width,y,0);
			var u3 = 1;
			var v3 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g3 = this.texMode;
			switch(_g3) {
			case 0:
				u3 *= this.currentTexture.imageToU;
				v3 *= this.currentTexture.imageToV;
				break;
			case 1:
				u3 *= this.currentTexture.normalToU;
				v3 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u3;
			this.texCoordV = 1 - v3;
			this.vertex(x + width,y + height,0);
		} else {
			this.vertex(x,y,0);
			this.vertex(x,y + height,0);
			this.vertex(x + width,y,0);
			this.vertex(x + width,y + height,0);
		}
		var shader = this.chooseShader();
		var pg = shader.pg;
		this.modelviewMat.mul(this.viewMat,this.modelMat);
		this.normalMat.inverse(this.modelviewMat);
		this.normalMat.transpose(this.normalMat);
		var tmp;
		var _this = shader.map;
		if(__map_reserved["model"] != null ? _this.existsReserved("model") : _this.h.hasOwnProperty("model")) {
			var _this1 = shader.map;
			tmp = __map_reserved["model"] != null ? _this1.getReserved("model") : _this1.h["model"];
		} else {
			var ul = shader.gl.getUniformLocation(shader.pg,"model");
			var _this2 = shader.map;
			if(__map_reserved["model"] != null) {
				_this2.setReserved("model",ul);
			} else {
				_this2.h["model"] = ul;
			}
			tmp = ul;
		}
		if(tmp != null) {
			shader.setMatrix("model",this.modelMat.array);
		}
		var tmp1;
		var _this3 = shader.map;
		if(__map_reserved["view"] != null ? _this3.existsReserved("view") : _this3.h.hasOwnProperty("view")) {
			var _this4 = shader.map;
			tmp1 = __map_reserved["view"] != null ? _this4.getReserved("view") : _this4.h["view"];
		} else {
			var ul1 = shader.gl.getUniformLocation(shader.pg,"view");
			var _this5 = shader.map;
			if(__map_reserved["view"] != null) {
				_this5.setReserved("view",ul1);
			} else {
				_this5.h["view"] = ul1;
			}
			tmp1 = ul1;
		}
		if(tmp1 != null) {
			shader.setMatrix("view",this.viewMat.array);
		}
		var tmp2;
		var _this6 = shader.map;
		if(__map_reserved["projection"] != null ? _this6.existsReserved("projection") : _this6.h.hasOwnProperty("projection")) {
			var _this7 = shader.map;
			tmp2 = __map_reserved["projection"] != null ? _this7.getReserved("projection") : _this7.h["projection"];
		} else {
			var ul2 = shader.gl.getUniformLocation(shader.pg,"projection");
			var _this8 = shader.map;
			if(__map_reserved["projection"] != null) {
				_this8.setReserved("projection",ul2);
			} else {
				_this8.h["projection"] = ul2;
			}
			tmp2 = ul2;
		}
		if(tmp2 != null) {
			shader.setMatrix("projection",this.projMat.array);
		}
		var tmp3;
		var _this9 = shader.map;
		if(__map_reserved["transform"] != null ? _this9.existsReserved("transform") : _this9.h.hasOwnProperty("transform")) {
			var _this10 = shader.map;
			tmp3 = __map_reserved["transform"] != null ? _this10.getReserved("transform") : _this10.h["transform"];
		} else {
			var ul3 = shader.gl.getUniformLocation(shader.pg,"transform");
			var _this11 = shader.map;
			if(__map_reserved["transform"] != null) {
				_this11.setReserved("transform",ul3);
			} else {
				_this11.h["transform"] = ul3;
			}
			tmp3 = ul3;
		}
		if(tmp3 != null) {
			this.mvpMat.mul(this.projMat,this.modelviewMat);
			shader.setMatrix("transform",this.mvpMat.array);
		}
		var tmp4;
		var _this12 = shader.map;
		if(__map_reserved["modelview"] != null ? _this12.existsReserved("modelview") : _this12.h.hasOwnProperty("modelview")) {
			var _this13 = shader.map;
			tmp4 = __map_reserved["modelview"] != null ? _this13.getReserved("modelview") : _this13.h["modelview"];
		} else {
			var ul4 = shader.gl.getUniformLocation(shader.pg,"modelview");
			var _this14 = shader.map;
			if(__map_reserved["modelview"] != null) {
				_this14.setReserved("modelview",ul4);
			} else {
				_this14.h["modelview"] = ul4;
			}
			tmp4 = ul4;
		}
		if(tmp4 != null) {
			shader.setMatrix("modelview",this.modelviewMat.array);
		}
		var tmp5;
		var _this15 = shader.map;
		if(__map_reserved["normalMatrix"] != null ? _this15.existsReserved("normalMatrix") : _this15.h.hasOwnProperty("normalMatrix")) {
			var _this16 = shader.map;
			tmp5 = __map_reserved["normalMatrix"] != null ? _this16.getReserved("normalMatrix") : _this16.h["normalMatrix"];
		} else {
			var ul5 = shader.gl.getUniformLocation(shader.pg,"normalMatrix");
			var _this17 = shader.map;
			if(__map_reserved["normalMatrix"] != null) {
				_this17.setReserved("normalMatrix",ul5);
			} else {
				_this17.h["normalMatrix"] = ul5;
			}
			tmp5 = ul5;
		}
		if(tmp5 != null) {
			this.normalMat.toMat3();
			shader.setMatrix("normalMatrix",this.normalMat.array3);
		}
		if(this.currentTexture != null) {
			shader.setTexture("texture",this.currentTexture);
			var tmp6;
			var _this18 = shader.map;
			if(__map_reserved["texResolution"] != null ? _this18.existsReserved("texResolution") : _this18.h.hasOwnProperty("texResolution")) {
				var _this19 = shader.map;
				tmp6 = __map_reserved["texResolution"] != null ? _this19.getReserved("texResolution") : _this19.h["texResolution"];
			} else {
				var ul6 = shader.gl.getUniformLocation(shader.pg,"texResolution");
				var _this20 = shader.map;
				if(__map_reserved["texResolution"] != null) {
					_this20.setReserved("texResolution",ul6);
				} else {
					_this20.h["texResolution"] = ul6;
				}
				tmp6 = ul6;
			}
			if(tmp6 != null) {
				shader.setFloat("texResolution",this.currentTexture.textureWidth,this.currentTexture.textureHeight);
			}
			var tmp7;
			var _this21 = shader.map;
			if(__map_reserved["texViewport"] != null ? _this21.existsReserved("texViewport") : _this21.h.hasOwnProperty("texViewport")) {
				var _this22 = shader.map;
				tmp7 = __map_reserved["texViewport"] != null ? _this22.getReserved("texViewport") : _this22.h["texViewport"];
			} else {
				var ul7 = shader.gl.getUniformLocation(shader.pg,"texViewport");
				var _this23 = shader.map;
				if(__map_reserved["texViewport"] != null) {
					_this23.setReserved("texViewport",ul7);
				} else {
					_this23.h["texViewport"] = ul7;
				}
				tmp7 = ul7;
			}
			if(tmp7 != null) {
				var x1 = 0;
				var y1 = 1 - this.currentTexture.height / this.currentTexture.textureHeight;
				var w = this.currentTexture.width / this.currentTexture.textureWidth;
				var h = this.currentTexture.height / this.currentTexture.textureHeight;
				shader.setFloat("texViewport",x1,y1,w,h);
			}
		}
		var tmp8;
		var _this24 = shader.map;
		if(__map_reserved["ambient"] != null ? _this24.existsReserved("ambient") : _this24.h.hasOwnProperty("ambient")) {
			var _this25 = shader.map;
			tmp8 = __map_reserved["ambient"] != null ? _this25.getReserved("ambient") : _this25.h["ambient"];
		} else {
			var ul8 = shader.gl.getUniformLocation(shader.pg,"ambient");
			var _this26 = shader.map;
			if(__map_reserved["ambient"] != null) {
				_this26.setReserved("ambient",ul8);
			} else {
				_this26.h["ambient"] = ul8;
			}
			tmp8 = ul8;
		}
		if(tmp8 != null) {
			shader.setFloat("ambient",this.materialAmb);
		}
		var tmp9;
		var _this27 = shader.map;
		if(__map_reserved["diffuse"] != null ? _this27.existsReserved("diffuse") : _this27.h.hasOwnProperty("diffuse")) {
			var _this28 = shader.map;
			tmp9 = __map_reserved["diffuse"] != null ? _this28.getReserved("diffuse") : _this28.h["diffuse"];
		} else {
			var ul9 = shader.gl.getUniformLocation(shader.pg,"diffuse");
			var _this29 = shader.map;
			if(__map_reserved["diffuse"] != null) {
				_this29.setReserved("diffuse",ul9);
			} else {
				_this29.h["diffuse"] = ul9;
			}
			tmp9 = ul9;
		}
		if(tmp9 != null) {
			shader.setFloat("diffuse",this.materialDif);
		}
		var tmp10;
		var _this30 = shader.map;
		if(__map_reserved["specular"] != null ? _this30.existsReserved("specular") : _this30.h.hasOwnProperty("specular")) {
			var _this31 = shader.map;
			tmp10 = __map_reserved["specular"] != null ? _this31.getReserved("specular") : _this31.h["specular"];
		} else {
			var ul10 = shader.gl.getUniformLocation(shader.pg,"specular");
			var _this32 = shader.map;
			if(__map_reserved["specular"] != null) {
				_this32.setReserved("specular",ul10);
			} else {
				_this32.h["specular"] = ul10;
			}
			tmp10 = ul10;
		}
		if(tmp10 != null) {
			shader.setFloat("specular",this.materialSpc);
		}
		var tmp11;
		var _this33 = shader.map;
		if(__map_reserved["shininess"] != null ? _this33.existsReserved("shininess") : _this33.h.hasOwnProperty("shininess")) {
			var _this34 = shader.map;
			tmp11 = __map_reserved["shininess"] != null ? _this34.getReserved("shininess") : _this34.h["shininess"];
		} else {
			var ul11 = shader.gl.getUniformLocation(shader.pg,"shininess");
			var _this35 = shader.map;
			if(__map_reserved["shininess"] != null) {
				_this35.setReserved("shininess",ul11);
			} else {
				_this35.h["shininess"] = ul11;
			}
			tmp11 = ul11;
		}
		if(tmp11 != null) {
			shader.setFloat("shininess",this.materialShn);
		}
		var tmp12;
		var _this36 = shader.map;
		if(__map_reserved["emission"] != null ? _this36.existsReserved("emission") : _this36.h.hasOwnProperty("emission")) {
			var _this37 = shader.map;
			tmp12 = __map_reserved["emission"] != null ? _this37.getReserved("emission") : _this37.h["emission"];
		} else {
			var ul12 = shader.gl.getUniformLocation(shader.pg,"emission");
			var _this38 = shader.map;
			if(__map_reserved["emission"] != null) {
				_this38.setReserved("emission",ul12);
			} else {
				_this38.h["emission"] = ul12;
			}
			tmp12 = ul12;
		}
		if(tmp12 != null) {
			shader.setFloat("emission",this.materialEmi);
		}
		var tmp13;
		var _this39 = shader.map;
		if(__map_reserved["numLights"] != null ? _this39.existsReserved("numLights") : _this39.h.hasOwnProperty("numLights")) {
			var _this40 = shader.map;
			tmp13 = __map_reserved["numLights"] != null ? _this40.getReserved("numLights") : _this40.h["numLights"];
		} else {
			var ul13 = shader.gl.getUniformLocation(shader.pg,"numLights");
			var _this41 = shader.map;
			if(__map_reserved["numLights"] != null) {
				_this41.setReserved("numLights",ul13);
			} else {
				_this41.h["numLights"] = ul13;
			}
			tmp13 = ul13;
		}
		if(tmp13 != null) {
			shader.setInt("numLights",this.numLights);
		}
		var tmp14;
		var _this42 = shader.map;
		if(__map_reserved["lightPositions"] != null ? _this42.existsReserved("lightPositions") : _this42.h.hasOwnProperty("lightPositions")) {
			var _this43 = shader.map;
			tmp14 = __map_reserved["lightPositions"] != null ? _this43.getReserved("lightPositions") : _this43.h["lightPositions"];
		} else {
			var ul14 = shader.gl.getUniformLocation(shader.pg,"lightPositions");
			var _this44 = shader.map;
			if(__map_reserved["lightPositions"] != null) {
				_this44.setReserved("lightPositions",ul14);
			} else {
				_this44.h["lightPositions"] = ul14;
			}
			tmp14 = ul14;
		}
		if(tmp14 != null) {
			var _g11 = 0;
			var _g4 = this.numLights;
			while(_g11 < _g4) {
				var i = _g11++;
				var light = this.lightBuf[i];
				var x2 = light.posX * this.viewMat.array[0] + light.posY * this.viewMat.array[4] + light.posZ * this.viewMat.array[8] + this.viewMat.array[12];
				var y2 = light.posX * this.viewMat.array[1] + light.posY * this.viewMat.array[5] + light.posZ * this.viewMat.array[9] + this.viewMat.array[13];
				var z = light.posX * this.viewMat.array[2] + light.posY * this.viewMat.array[6] + light.posZ * this.viewMat.array[10] + this.viewMat.array[14];
				shader.setFloat("lightPositions[" + i + "]",x2,y2,z,light.posW);
			}
		}
		var tmp15;
		var _this45 = shader.map;
		if(__map_reserved["lightNormals"] != null ? _this45.existsReserved("lightNormals") : _this45.h.hasOwnProperty("lightNormals")) {
			var _this46 = shader.map;
			tmp15 = __map_reserved["lightNormals"] != null ? _this46.getReserved("lightNormals") : _this46.h["lightNormals"];
		} else {
			var ul15 = shader.gl.getUniformLocation(shader.pg,"lightNormals");
			var _this47 = shader.map;
			if(__map_reserved["lightNormals"] != null) {
				_this47.setReserved("lightNormals",ul15);
			} else {
				_this47.h["lightNormals"] = ul15;
			}
			tmp15 = ul15;
		}
		if(tmp15 != null) {
			var _g12 = 0;
			var _g5 = this.numLights;
			while(_g12 < _g5) {
				var i1 = _g12++;
				var light1 = this.lightBuf[i1];
				var x3 = light1.norX * this.viewMat.array[0] + light1.norY * this.viewMat.array[4] + light1.norZ * this.viewMat.array[8];
				var y3 = light1.norX * this.viewMat.array[1] + light1.norY * this.viewMat.array[5] + light1.norZ * this.viewMat.array[9];
				var z1 = light1.norX * this.viewMat.array[2] + light1.norY * this.viewMat.array[6] + light1.norZ * this.viewMat.array[10];
				shader.setFloat("lightNormals[" + i1 + "]",x3,y3,z1);
			}
		}
		var tmp16;
		var _this48 = shader.map;
		if(__map_reserved["lightColors"] != null ? _this48.existsReserved("lightColors") : _this48.h.hasOwnProperty("lightColors")) {
			var _this49 = shader.map;
			tmp16 = __map_reserved["lightColors"] != null ? _this49.getReserved("lightColors") : _this49.h["lightColors"];
		} else {
			var ul16 = shader.gl.getUniformLocation(shader.pg,"lightColors");
			var _this50 = shader.map;
			if(__map_reserved["lightColors"] != null) {
				_this50.setReserved("lightColors",ul16);
			} else {
				_this50.h["lightColors"] = ul16;
			}
			tmp16 = ul16;
		}
		if(tmp16 != null) {
			var _g13 = 0;
			var _g6 = this.numLights;
			while(_g13 < _g6) {
				var i2 = _g13++;
				var light2 = this.lightBuf[i2];
				shader.setFloat("lightColors[" + i2 + "]",light2.r,light2.g,light2.b);
			}
		}
		var _this51 = this.indexBuf;
		_this51.gl.bindBuffer(34963,_this51.buffer);
		_this51.gl.bufferData(34963,new Int16Array(_this51.array.buffer,0,_this51.length),35044);
		_this51.gl.bindBuffer(34963,null);
		var _this52 = this.positionBuf;
		_this52.gl.bindBuffer(34962,_this52.buffer);
		_this52.gl.bufferData(34962,new Float32Array(_this52.array.buffer,0,_this52.length),35044);
		_this52.gl.bindBuffer(34962,null);
		var _this53 = this.colorBuf;
		_this53.gl.bindBuffer(34962,_this53.buffer);
		_this53.gl.bufferData(34962,new Float32Array(_this53.array.buffer,0,_this53.length),35044);
		_this53.gl.bindBuffer(34962,null);
		var _this54 = this.normalBuf;
		_this54.gl.bindBuffer(34962,_this54.buffer);
		_this54.gl.bufferData(34962,new Float32Array(_this54.array.buffer,0,_this54.length),35044);
		_this54.gl.bindBuffer(34962,null);
		var _this55 = this.texCoordBuf;
		_this55.gl.bindBuffer(34962,_this55.buffer);
		_this55.gl.bufferData(34962,new Float32Array(_this55.array.buffer,0,_this55.length),35044);
		_this55.gl.bindBuffer(34962,null);
		var _this56 = this.positionBuf;
		var idx = _this56.gl.getAttribLocation(pg,_this56.name);
		if(idx != -1) {
			_this56.gl.bindBuffer(34962,_this56.buffer);
			_this56.gl.enableVertexAttribArray(idx);
			_this56.gl.vertexAttribPointer(idx,_this56.size,5126,false,0,0);
			_this56.gl.bindBuffer(34962,null);
		}
		var _this57 = this.colorBuf;
		var idx1 = _this57.gl.getAttribLocation(pg,_this57.name);
		if(idx1 != -1) {
			_this57.gl.bindBuffer(34962,_this57.buffer);
			_this57.gl.enableVertexAttribArray(idx1);
			_this57.gl.vertexAttribPointer(idx1,_this57.size,5126,false,0,0);
			_this57.gl.bindBuffer(34962,null);
		}
		var _this58 = this.normalBuf;
		var idx2 = _this58.gl.getAttribLocation(pg,_this58.name);
		if(idx2 != -1) {
			_this58.gl.bindBuffer(34962,_this58.buffer);
			_this58.gl.enableVertexAttribArray(idx2);
			_this58.gl.vertexAttribPointer(idx2,_this58.size,5126,false,0,0);
			_this58.gl.bindBuffer(34962,null);
		}
		var _this59 = this.texCoordBuf;
		var idx3 = _this59.gl.getAttribLocation(pg,_this59.name);
		if(idx3 != -1) {
			_this59.gl.bindBuffer(34962,_this59.buffer);
			_this59.gl.enableVertexAttribArray(idx3);
			_this59.gl.vertexAttribPointer(idx3,_this59.size,5126,false,0,0);
			_this59.gl.bindBuffer(34962,null);
		}
		if(!shader.compiled) {
			throw new Error("shader is not compiled");
		}
		shader.gl.useProgram(shader.pg);
		var texUnit = 0;
		var name = shader.uniforms.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this60 = shader.uniforms;
			var uniform = __map_reserved[name1] != null ? _this60.getReserved(name1) : _this60.h[name1];
			if(uniform.type == 11) {
				uniform.texUnit = texUnit;
				++texUnit;
			}
		}
		var name2 = shader.uniforms.keys();
		while(name2.hasNext()) {
			var name3 = name2.next();
			var _this61 = shader.uniforms;
			var uniform1 = __map_reserved[name3] != null ? _this61.getReserved(name3) : _this61.h[name3];
			var loc;
			var _this62 = shader.map;
			if(__map_reserved[name3] != null ? _this62.existsReserved(name3) : _this62.h.hasOwnProperty(name3)) {
				var _this63 = shader.map;
				loc = __map_reserved[name3] != null ? _this63.getReserved(name3) : _this63.h[name3];
			} else {
				var ul17 = shader.gl.getUniformLocation(shader.pg,name3);
				var _this64 = shader.map;
				if(__map_reserved[name3] != null) {
					_this64.setReserved(name3,ul17);
				} else {
					_this64.h[name3] = ul17;
				}
				loc = ul17;
			}
			var _g7 = uniform1.type;
			switch(_g7) {
			case 0:
				shader.gl.uniform1i(loc,uniform1.i1);
				break;
			case 1:
				shader.gl.uniform2i(loc,uniform1.i1,uniform1.i2);
				break;
			case 2:
				shader.gl.uniform3i(loc,uniform1.i1,uniform1.i2,uniform1.i3);
				break;
			case 3:
				shader.gl.uniform4i(loc,uniform1.i1,uniform1.i2,uniform1.i3,uniform1.i4);
				break;
			case 4:
				shader.gl.uniform1f(loc,uniform1.f1);
				break;
			case 5:
				shader.gl.uniform2f(loc,uniform1.f1,uniform1.f2);
				break;
			case 6:
				shader.gl.uniform3f(loc,uniform1.f1,uniform1.f2,uniform1.f3);
				break;
			case 7:
				shader.gl.uniform4f(loc,uniform1.f1,uniform1.f2,uniform1.f3,uniform1.f4);
				break;
			case 8:
				shader.gl.uniformMatrix2fv(loc,false,uniform1.m2);
				break;
			case 9:
				shader.gl.uniformMatrix3fv(loc,false,uniform1.m3);
				break;
			case 10:
				shader.gl.uniformMatrix4fv(loc,false,uniform1.m4);
				break;
			case 11:
				shader.gl.activeTexture(33984 + uniform1.texUnit);
				shader.gl.bindTexture(3553,uniform1.tex == null ? null : uniform1.tex.texture);
				shader.gl.uniform1i(loc,uniform1.texUnit);
				break;
			}
		}
		shader.gl.activeTexture(33984);
		var _this65 = this.indexBuf;
		var mode = this.shapeMode;
		_this65.gl.bindBuffer(34963,_this65.buffer);
		_this65.gl.drawElements(mode,_this65.length,5123,0);
		_this65.gl.bindBuffer(34963,null);
		this.texMode = tmpTexMode;
	}
	,line: function(a,b,c,d,e,f) {
		var tmpTex = this.currentTexture;
		var tmpNumLights = this.numLights;
		this.currentTexture = null;
		this.numLights = 0;
		this.beginShape(1);
		if(e != null && f != null) {
			this.vertex(a,b,c);
			this.vertex(d,e,f);
		} else {
			this.vertex(a,b,0);
			this.vertex(c,d,0);
		}
		var shader = this.chooseShader();
		var pg = shader.pg;
		this.modelviewMat.mul(this.viewMat,this.modelMat);
		this.normalMat.inverse(this.modelviewMat);
		this.normalMat.transpose(this.normalMat);
		var tmp;
		var _this = shader.map;
		if(__map_reserved["model"] != null ? _this.existsReserved("model") : _this.h.hasOwnProperty("model")) {
			var _this1 = shader.map;
			tmp = __map_reserved["model"] != null ? _this1.getReserved("model") : _this1.h["model"];
		} else {
			var ul = shader.gl.getUniformLocation(shader.pg,"model");
			var _this2 = shader.map;
			if(__map_reserved["model"] != null) {
				_this2.setReserved("model",ul);
			} else {
				_this2.h["model"] = ul;
			}
			tmp = ul;
		}
		if(tmp != null) {
			shader.setMatrix("model",this.modelMat.array);
		}
		var tmp1;
		var _this3 = shader.map;
		if(__map_reserved["view"] != null ? _this3.existsReserved("view") : _this3.h.hasOwnProperty("view")) {
			var _this4 = shader.map;
			tmp1 = __map_reserved["view"] != null ? _this4.getReserved("view") : _this4.h["view"];
		} else {
			var ul1 = shader.gl.getUniformLocation(shader.pg,"view");
			var _this5 = shader.map;
			if(__map_reserved["view"] != null) {
				_this5.setReserved("view",ul1);
			} else {
				_this5.h["view"] = ul1;
			}
			tmp1 = ul1;
		}
		if(tmp1 != null) {
			shader.setMatrix("view",this.viewMat.array);
		}
		var tmp2;
		var _this6 = shader.map;
		if(__map_reserved["projection"] != null ? _this6.existsReserved("projection") : _this6.h.hasOwnProperty("projection")) {
			var _this7 = shader.map;
			tmp2 = __map_reserved["projection"] != null ? _this7.getReserved("projection") : _this7.h["projection"];
		} else {
			var ul2 = shader.gl.getUniformLocation(shader.pg,"projection");
			var _this8 = shader.map;
			if(__map_reserved["projection"] != null) {
				_this8.setReserved("projection",ul2);
			} else {
				_this8.h["projection"] = ul2;
			}
			tmp2 = ul2;
		}
		if(tmp2 != null) {
			shader.setMatrix("projection",this.projMat.array);
		}
		var tmp3;
		var _this9 = shader.map;
		if(__map_reserved["transform"] != null ? _this9.existsReserved("transform") : _this9.h.hasOwnProperty("transform")) {
			var _this10 = shader.map;
			tmp3 = __map_reserved["transform"] != null ? _this10.getReserved("transform") : _this10.h["transform"];
		} else {
			var ul3 = shader.gl.getUniformLocation(shader.pg,"transform");
			var _this11 = shader.map;
			if(__map_reserved["transform"] != null) {
				_this11.setReserved("transform",ul3);
			} else {
				_this11.h["transform"] = ul3;
			}
			tmp3 = ul3;
		}
		if(tmp3 != null) {
			this.mvpMat.mul(this.projMat,this.modelviewMat);
			shader.setMatrix("transform",this.mvpMat.array);
		}
		var tmp4;
		var _this12 = shader.map;
		if(__map_reserved["modelview"] != null ? _this12.existsReserved("modelview") : _this12.h.hasOwnProperty("modelview")) {
			var _this13 = shader.map;
			tmp4 = __map_reserved["modelview"] != null ? _this13.getReserved("modelview") : _this13.h["modelview"];
		} else {
			var ul4 = shader.gl.getUniformLocation(shader.pg,"modelview");
			var _this14 = shader.map;
			if(__map_reserved["modelview"] != null) {
				_this14.setReserved("modelview",ul4);
			} else {
				_this14.h["modelview"] = ul4;
			}
			tmp4 = ul4;
		}
		if(tmp4 != null) {
			shader.setMatrix("modelview",this.modelviewMat.array);
		}
		var tmp5;
		var _this15 = shader.map;
		if(__map_reserved["normalMatrix"] != null ? _this15.existsReserved("normalMatrix") : _this15.h.hasOwnProperty("normalMatrix")) {
			var _this16 = shader.map;
			tmp5 = __map_reserved["normalMatrix"] != null ? _this16.getReserved("normalMatrix") : _this16.h["normalMatrix"];
		} else {
			var ul5 = shader.gl.getUniformLocation(shader.pg,"normalMatrix");
			var _this17 = shader.map;
			if(__map_reserved["normalMatrix"] != null) {
				_this17.setReserved("normalMatrix",ul5);
			} else {
				_this17.h["normalMatrix"] = ul5;
			}
			tmp5 = ul5;
		}
		if(tmp5 != null) {
			this.normalMat.toMat3();
			shader.setMatrix("normalMatrix",this.normalMat.array3);
		}
		if(this.currentTexture != null) {
			shader.setTexture("texture",this.currentTexture);
			var tmp6;
			var _this18 = shader.map;
			if(__map_reserved["texResolution"] != null ? _this18.existsReserved("texResolution") : _this18.h.hasOwnProperty("texResolution")) {
				var _this19 = shader.map;
				tmp6 = __map_reserved["texResolution"] != null ? _this19.getReserved("texResolution") : _this19.h["texResolution"];
			} else {
				var ul6 = shader.gl.getUniformLocation(shader.pg,"texResolution");
				var _this20 = shader.map;
				if(__map_reserved["texResolution"] != null) {
					_this20.setReserved("texResolution",ul6);
				} else {
					_this20.h["texResolution"] = ul6;
				}
				tmp6 = ul6;
			}
			if(tmp6 != null) {
				shader.setFloat("texResolution",this.currentTexture.textureWidth,this.currentTexture.textureHeight);
			}
			var tmp7;
			var _this21 = shader.map;
			if(__map_reserved["texViewport"] != null ? _this21.existsReserved("texViewport") : _this21.h.hasOwnProperty("texViewport")) {
				var _this22 = shader.map;
				tmp7 = __map_reserved["texViewport"] != null ? _this22.getReserved("texViewport") : _this22.h["texViewport"];
			} else {
				var ul7 = shader.gl.getUniformLocation(shader.pg,"texViewport");
				var _this23 = shader.map;
				if(__map_reserved["texViewport"] != null) {
					_this23.setReserved("texViewport",ul7);
				} else {
					_this23.h["texViewport"] = ul7;
				}
				tmp7 = ul7;
			}
			if(tmp7 != null) {
				var x = 0;
				var y = 1 - this.currentTexture.height / this.currentTexture.textureHeight;
				var w = this.currentTexture.width / this.currentTexture.textureWidth;
				var h = this.currentTexture.height / this.currentTexture.textureHeight;
				shader.setFloat("texViewport",x,y,w,h);
			}
		}
		var tmp8;
		var _this24 = shader.map;
		if(__map_reserved["ambient"] != null ? _this24.existsReserved("ambient") : _this24.h.hasOwnProperty("ambient")) {
			var _this25 = shader.map;
			tmp8 = __map_reserved["ambient"] != null ? _this25.getReserved("ambient") : _this25.h["ambient"];
		} else {
			var ul8 = shader.gl.getUniformLocation(shader.pg,"ambient");
			var _this26 = shader.map;
			if(__map_reserved["ambient"] != null) {
				_this26.setReserved("ambient",ul8);
			} else {
				_this26.h["ambient"] = ul8;
			}
			tmp8 = ul8;
		}
		if(tmp8 != null) {
			shader.setFloat("ambient",this.materialAmb);
		}
		var tmp9;
		var _this27 = shader.map;
		if(__map_reserved["diffuse"] != null ? _this27.existsReserved("diffuse") : _this27.h.hasOwnProperty("diffuse")) {
			var _this28 = shader.map;
			tmp9 = __map_reserved["diffuse"] != null ? _this28.getReserved("diffuse") : _this28.h["diffuse"];
		} else {
			var ul9 = shader.gl.getUniformLocation(shader.pg,"diffuse");
			var _this29 = shader.map;
			if(__map_reserved["diffuse"] != null) {
				_this29.setReserved("diffuse",ul9);
			} else {
				_this29.h["diffuse"] = ul9;
			}
			tmp9 = ul9;
		}
		if(tmp9 != null) {
			shader.setFloat("diffuse",this.materialDif);
		}
		var tmp10;
		var _this30 = shader.map;
		if(__map_reserved["specular"] != null ? _this30.existsReserved("specular") : _this30.h.hasOwnProperty("specular")) {
			var _this31 = shader.map;
			tmp10 = __map_reserved["specular"] != null ? _this31.getReserved("specular") : _this31.h["specular"];
		} else {
			var ul10 = shader.gl.getUniformLocation(shader.pg,"specular");
			var _this32 = shader.map;
			if(__map_reserved["specular"] != null) {
				_this32.setReserved("specular",ul10);
			} else {
				_this32.h["specular"] = ul10;
			}
			tmp10 = ul10;
		}
		if(tmp10 != null) {
			shader.setFloat("specular",this.materialSpc);
		}
		var tmp11;
		var _this33 = shader.map;
		if(__map_reserved["shininess"] != null ? _this33.existsReserved("shininess") : _this33.h.hasOwnProperty("shininess")) {
			var _this34 = shader.map;
			tmp11 = __map_reserved["shininess"] != null ? _this34.getReserved("shininess") : _this34.h["shininess"];
		} else {
			var ul11 = shader.gl.getUniformLocation(shader.pg,"shininess");
			var _this35 = shader.map;
			if(__map_reserved["shininess"] != null) {
				_this35.setReserved("shininess",ul11);
			} else {
				_this35.h["shininess"] = ul11;
			}
			tmp11 = ul11;
		}
		if(tmp11 != null) {
			shader.setFloat("shininess",this.materialShn);
		}
		var tmp12;
		var _this36 = shader.map;
		if(__map_reserved["emission"] != null ? _this36.existsReserved("emission") : _this36.h.hasOwnProperty("emission")) {
			var _this37 = shader.map;
			tmp12 = __map_reserved["emission"] != null ? _this37.getReserved("emission") : _this37.h["emission"];
		} else {
			var ul12 = shader.gl.getUniformLocation(shader.pg,"emission");
			var _this38 = shader.map;
			if(__map_reserved["emission"] != null) {
				_this38.setReserved("emission",ul12);
			} else {
				_this38.h["emission"] = ul12;
			}
			tmp12 = ul12;
		}
		if(tmp12 != null) {
			shader.setFloat("emission",this.materialEmi);
		}
		var tmp13;
		var _this39 = shader.map;
		if(__map_reserved["numLights"] != null ? _this39.existsReserved("numLights") : _this39.h.hasOwnProperty("numLights")) {
			var _this40 = shader.map;
			tmp13 = __map_reserved["numLights"] != null ? _this40.getReserved("numLights") : _this40.h["numLights"];
		} else {
			var ul13 = shader.gl.getUniformLocation(shader.pg,"numLights");
			var _this41 = shader.map;
			if(__map_reserved["numLights"] != null) {
				_this41.setReserved("numLights",ul13);
			} else {
				_this41.h["numLights"] = ul13;
			}
			tmp13 = ul13;
		}
		if(tmp13 != null) {
			shader.setInt("numLights",this.numLights);
		}
		var tmp14;
		var _this42 = shader.map;
		if(__map_reserved["lightPositions"] != null ? _this42.existsReserved("lightPositions") : _this42.h.hasOwnProperty("lightPositions")) {
			var _this43 = shader.map;
			tmp14 = __map_reserved["lightPositions"] != null ? _this43.getReserved("lightPositions") : _this43.h["lightPositions"];
		} else {
			var ul14 = shader.gl.getUniformLocation(shader.pg,"lightPositions");
			var _this44 = shader.map;
			if(__map_reserved["lightPositions"] != null) {
				_this44.setReserved("lightPositions",ul14);
			} else {
				_this44.h["lightPositions"] = ul14;
			}
			tmp14 = ul14;
		}
		if(tmp14 != null) {
			var _g1 = 0;
			var _g = this.numLights;
			while(_g1 < _g) {
				var i = _g1++;
				var light = this.lightBuf[i];
				var x1 = light.posX * this.viewMat.array[0] + light.posY * this.viewMat.array[4] + light.posZ * this.viewMat.array[8] + this.viewMat.array[12];
				var y1 = light.posX * this.viewMat.array[1] + light.posY * this.viewMat.array[5] + light.posZ * this.viewMat.array[9] + this.viewMat.array[13];
				var z = light.posX * this.viewMat.array[2] + light.posY * this.viewMat.array[6] + light.posZ * this.viewMat.array[10] + this.viewMat.array[14];
				shader.setFloat("lightPositions[" + i + "]",x1,y1,z,light.posW);
			}
		}
		var tmp15;
		var _this45 = shader.map;
		if(__map_reserved["lightNormals"] != null ? _this45.existsReserved("lightNormals") : _this45.h.hasOwnProperty("lightNormals")) {
			var _this46 = shader.map;
			tmp15 = __map_reserved["lightNormals"] != null ? _this46.getReserved("lightNormals") : _this46.h["lightNormals"];
		} else {
			var ul15 = shader.gl.getUniformLocation(shader.pg,"lightNormals");
			var _this47 = shader.map;
			if(__map_reserved["lightNormals"] != null) {
				_this47.setReserved("lightNormals",ul15);
			} else {
				_this47.h["lightNormals"] = ul15;
			}
			tmp15 = ul15;
		}
		if(tmp15 != null) {
			var _g11 = 0;
			var _g2 = this.numLights;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var light1 = this.lightBuf[i1];
				var x2 = light1.norX * this.viewMat.array[0] + light1.norY * this.viewMat.array[4] + light1.norZ * this.viewMat.array[8];
				var y2 = light1.norX * this.viewMat.array[1] + light1.norY * this.viewMat.array[5] + light1.norZ * this.viewMat.array[9];
				var z1 = light1.norX * this.viewMat.array[2] + light1.norY * this.viewMat.array[6] + light1.norZ * this.viewMat.array[10];
				shader.setFloat("lightNormals[" + i1 + "]",x2,y2,z1);
			}
		}
		var tmp16;
		var _this48 = shader.map;
		if(__map_reserved["lightColors"] != null ? _this48.existsReserved("lightColors") : _this48.h.hasOwnProperty("lightColors")) {
			var _this49 = shader.map;
			tmp16 = __map_reserved["lightColors"] != null ? _this49.getReserved("lightColors") : _this49.h["lightColors"];
		} else {
			var ul16 = shader.gl.getUniformLocation(shader.pg,"lightColors");
			var _this50 = shader.map;
			if(__map_reserved["lightColors"] != null) {
				_this50.setReserved("lightColors",ul16);
			} else {
				_this50.h["lightColors"] = ul16;
			}
			tmp16 = ul16;
		}
		if(tmp16 != null) {
			var _g12 = 0;
			var _g3 = this.numLights;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var light2 = this.lightBuf[i2];
				shader.setFloat("lightColors[" + i2 + "]",light2.r,light2.g,light2.b);
			}
		}
		var _this51 = this.indexBuf;
		_this51.gl.bindBuffer(34963,_this51.buffer);
		_this51.gl.bufferData(34963,new Int16Array(_this51.array.buffer,0,_this51.length),35044);
		_this51.gl.bindBuffer(34963,null);
		var _this52 = this.positionBuf;
		_this52.gl.bindBuffer(34962,_this52.buffer);
		_this52.gl.bufferData(34962,new Float32Array(_this52.array.buffer,0,_this52.length),35044);
		_this52.gl.bindBuffer(34962,null);
		var _this53 = this.colorBuf;
		_this53.gl.bindBuffer(34962,_this53.buffer);
		_this53.gl.bufferData(34962,new Float32Array(_this53.array.buffer,0,_this53.length),35044);
		_this53.gl.bindBuffer(34962,null);
		var _this54 = this.normalBuf;
		_this54.gl.bindBuffer(34962,_this54.buffer);
		_this54.gl.bufferData(34962,new Float32Array(_this54.array.buffer,0,_this54.length),35044);
		_this54.gl.bindBuffer(34962,null);
		var _this55 = this.texCoordBuf;
		_this55.gl.bindBuffer(34962,_this55.buffer);
		_this55.gl.bufferData(34962,new Float32Array(_this55.array.buffer,0,_this55.length),35044);
		_this55.gl.bindBuffer(34962,null);
		var _this56 = this.positionBuf;
		var idx = _this56.gl.getAttribLocation(pg,_this56.name);
		if(idx != -1) {
			_this56.gl.bindBuffer(34962,_this56.buffer);
			_this56.gl.enableVertexAttribArray(idx);
			_this56.gl.vertexAttribPointer(idx,_this56.size,5126,false,0,0);
			_this56.gl.bindBuffer(34962,null);
		}
		var _this57 = this.colorBuf;
		var idx1 = _this57.gl.getAttribLocation(pg,_this57.name);
		if(idx1 != -1) {
			_this57.gl.bindBuffer(34962,_this57.buffer);
			_this57.gl.enableVertexAttribArray(idx1);
			_this57.gl.vertexAttribPointer(idx1,_this57.size,5126,false,0,0);
			_this57.gl.bindBuffer(34962,null);
		}
		var _this58 = this.normalBuf;
		var idx2 = _this58.gl.getAttribLocation(pg,_this58.name);
		if(idx2 != -1) {
			_this58.gl.bindBuffer(34962,_this58.buffer);
			_this58.gl.enableVertexAttribArray(idx2);
			_this58.gl.vertexAttribPointer(idx2,_this58.size,5126,false,0,0);
			_this58.gl.bindBuffer(34962,null);
		}
		var _this59 = this.texCoordBuf;
		var idx3 = _this59.gl.getAttribLocation(pg,_this59.name);
		if(idx3 != -1) {
			_this59.gl.bindBuffer(34962,_this59.buffer);
			_this59.gl.enableVertexAttribArray(idx3);
			_this59.gl.vertexAttribPointer(idx3,_this59.size,5126,false,0,0);
			_this59.gl.bindBuffer(34962,null);
		}
		if(!shader.compiled) {
			throw new Error("shader is not compiled");
		}
		shader.gl.useProgram(shader.pg);
		var texUnit = 0;
		var name = shader.uniforms.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this60 = shader.uniforms;
			var uniform = __map_reserved[name1] != null ? _this60.getReserved(name1) : _this60.h[name1];
			if(uniform.type == 11) {
				uniform.texUnit = texUnit;
				++texUnit;
			}
		}
		var name2 = shader.uniforms.keys();
		while(name2.hasNext()) {
			var name3 = name2.next();
			var _this61 = shader.uniforms;
			var uniform1 = __map_reserved[name3] != null ? _this61.getReserved(name3) : _this61.h[name3];
			var loc;
			var _this62 = shader.map;
			if(__map_reserved[name3] != null ? _this62.existsReserved(name3) : _this62.h.hasOwnProperty(name3)) {
				var _this63 = shader.map;
				loc = __map_reserved[name3] != null ? _this63.getReserved(name3) : _this63.h[name3];
			} else {
				var ul17 = shader.gl.getUniformLocation(shader.pg,name3);
				var _this64 = shader.map;
				if(__map_reserved[name3] != null) {
					_this64.setReserved(name3,ul17);
				} else {
					_this64.h[name3] = ul17;
				}
				loc = ul17;
			}
			var _g4 = uniform1.type;
			switch(_g4) {
			case 0:
				shader.gl.uniform1i(loc,uniform1.i1);
				break;
			case 1:
				shader.gl.uniform2i(loc,uniform1.i1,uniform1.i2);
				break;
			case 2:
				shader.gl.uniform3i(loc,uniform1.i1,uniform1.i2,uniform1.i3);
				break;
			case 3:
				shader.gl.uniform4i(loc,uniform1.i1,uniform1.i2,uniform1.i3,uniform1.i4);
				break;
			case 4:
				shader.gl.uniform1f(loc,uniform1.f1);
				break;
			case 5:
				shader.gl.uniform2f(loc,uniform1.f1,uniform1.f2);
				break;
			case 6:
				shader.gl.uniform3f(loc,uniform1.f1,uniform1.f2,uniform1.f3);
				break;
			case 7:
				shader.gl.uniform4f(loc,uniform1.f1,uniform1.f2,uniform1.f3,uniform1.f4);
				break;
			case 8:
				shader.gl.uniformMatrix2fv(loc,false,uniform1.m2);
				break;
			case 9:
				shader.gl.uniformMatrix3fv(loc,false,uniform1.m3);
				break;
			case 10:
				shader.gl.uniformMatrix4fv(loc,false,uniform1.m4);
				break;
			case 11:
				shader.gl.activeTexture(33984 + uniform1.texUnit);
				shader.gl.bindTexture(3553,uniform1.tex == null ? null : uniform1.tex.texture);
				shader.gl.uniform1i(loc,uniform1.texUnit);
				break;
			}
		}
		shader.gl.activeTexture(33984);
		var _this65 = this.indexBuf;
		var mode = this.shapeMode;
		_this65.gl.bindBuffer(34963,_this65.buffer);
		_this65.gl.drawElements(mode,_this65.length,5123,0);
		_this65.gl.bindBuffer(34963,null);
		this.currentTexture = tmpTex;
		this.numLights = tmpNumLights;
	}
	,box: function(width,height,depth) {
		var tmpTexMode = this.texMode;
		this.texMode = 1;
		this.beginShape(4);
		width *= 0.5;
		height *= 0.5;
		depth *= 0.5;
		var x1 = -width;
		var x2 = width;
		var y1 = -height;
		var y2 = height;
		var z1 = -depth;
		var z2 = depth;
		if(this.currentTexture != null) {
			this.normalX = -1;
			this.normalY = 0;
			this.normalZ = 0;
			var u = 0;
			var v = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g = this.texMode;
			switch(_g) {
			case 0:
				u *= this.currentTexture.imageToU;
				v *= this.currentTexture.imageToV;
				break;
			case 1:
				u *= this.currentTexture.normalToU;
				v *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u;
			this.texCoordV = 1 - v;
			this.vertex(x1,y1,z1);
			var u1 = 0;
			var v1 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g1 = this.texMode;
			switch(_g1) {
			case 0:
				u1 *= this.currentTexture.imageToU;
				v1 *= this.currentTexture.imageToV;
				break;
			case 1:
				u1 *= this.currentTexture.normalToU;
				v1 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u1;
			this.texCoordV = 1 - v1;
			this.vertex(x1,y1,z2);
			var u2 = 1;
			var v2 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g2 = this.texMode;
			switch(_g2) {
			case 0:
				u2 *= this.currentTexture.imageToU;
				v2 *= this.currentTexture.imageToV;
				break;
			case 1:
				u2 *= this.currentTexture.normalToU;
				v2 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u2;
			this.texCoordV = 1 - v2;
			this.vertex(x1,y2,z2);
			var u3 = 0;
			var v3 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g3 = this.texMode;
			switch(_g3) {
			case 0:
				u3 *= this.currentTexture.imageToU;
				v3 *= this.currentTexture.imageToV;
				break;
			case 1:
				u3 *= this.currentTexture.normalToU;
				v3 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u3;
			this.texCoordV = 1 - v3;
			this.vertex(x1,y1,z1);
			var u4 = 1;
			var v4 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g4 = this.texMode;
			switch(_g4) {
			case 0:
				u4 *= this.currentTexture.imageToU;
				v4 *= this.currentTexture.imageToV;
				break;
			case 1:
				u4 *= this.currentTexture.normalToU;
				v4 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u4;
			this.texCoordV = 1 - v4;
			this.vertex(x1,y2,z2);
			var u5 = 1;
			var v5 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g5 = this.texMode;
			switch(_g5) {
			case 0:
				u5 *= this.currentTexture.imageToU;
				v5 *= this.currentTexture.imageToV;
				break;
			case 1:
				u5 *= this.currentTexture.normalToU;
				v5 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u5;
			this.texCoordV = 1 - v5;
			this.vertex(x1,y2,z1);
			this.normalX = 1;
			this.normalY = 0;
			this.normalZ = 0;
			var u6 = 0;
			var v6 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g6 = this.texMode;
			switch(_g6) {
			case 0:
				u6 *= this.currentTexture.imageToU;
				v6 *= this.currentTexture.imageToV;
				break;
			case 1:
				u6 *= this.currentTexture.normalToU;
				v6 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u6;
			this.texCoordV = 1 - v6;
			this.vertex(x2,y1,z1);
			var u7 = 0;
			var v7 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g7 = this.texMode;
			switch(_g7) {
			case 0:
				u7 *= this.currentTexture.imageToU;
				v7 *= this.currentTexture.imageToV;
				break;
			case 1:
				u7 *= this.currentTexture.normalToU;
				v7 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u7;
			this.texCoordV = 1 - v7;
			this.vertex(x2,y2,z1);
			var u8 = 1;
			var v8 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g8 = this.texMode;
			switch(_g8) {
			case 0:
				u8 *= this.currentTexture.imageToU;
				v8 *= this.currentTexture.imageToV;
				break;
			case 1:
				u8 *= this.currentTexture.normalToU;
				v8 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u8;
			this.texCoordV = 1 - v8;
			this.vertex(x2,y2,z2);
			var u9 = 0;
			var v9 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g9 = this.texMode;
			switch(_g9) {
			case 0:
				u9 *= this.currentTexture.imageToU;
				v9 *= this.currentTexture.imageToV;
				break;
			case 1:
				u9 *= this.currentTexture.normalToU;
				v9 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u9;
			this.texCoordV = 1 - v9;
			this.vertex(x2,y1,z1);
			var u10 = 1;
			var v10 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g10 = this.texMode;
			switch(_g10) {
			case 0:
				u10 *= this.currentTexture.imageToU;
				v10 *= this.currentTexture.imageToV;
				break;
			case 1:
				u10 *= this.currentTexture.normalToU;
				v10 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u10;
			this.texCoordV = 1 - v10;
			this.vertex(x2,y2,z2);
			var u11 = 1;
			var v11 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g11 = this.texMode;
			switch(_g11) {
			case 0:
				u11 *= this.currentTexture.imageToU;
				v11 *= this.currentTexture.imageToV;
				break;
			case 1:
				u11 *= this.currentTexture.normalToU;
				v11 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u11;
			this.texCoordV = 1 - v11;
			this.vertex(x2,y1,z2);
			this.normalX = 0;
			this.normalY = -1;
			this.normalZ = 0;
			var u12 = 0;
			var v12 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g12 = this.texMode;
			switch(_g12) {
			case 0:
				u12 *= this.currentTexture.imageToU;
				v12 *= this.currentTexture.imageToV;
				break;
			case 1:
				u12 *= this.currentTexture.normalToU;
				v12 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u12;
			this.texCoordV = 1 - v12;
			this.vertex(x1,y1,z1);
			var u13 = 0;
			var v13 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g13 = this.texMode;
			switch(_g13) {
			case 0:
				u13 *= this.currentTexture.imageToU;
				v13 *= this.currentTexture.imageToV;
				break;
			case 1:
				u13 *= this.currentTexture.normalToU;
				v13 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u13;
			this.texCoordV = 1 - v13;
			this.vertex(x2,y1,z1);
			var u14 = 1;
			var v14 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g14 = this.texMode;
			switch(_g14) {
			case 0:
				u14 *= this.currentTexture.imageToU;
				v14 *= this.currentTexture.imageToV;
				break;
			case 1:
				u14 *= this.currentTexture.normalToU;
				v14 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u14;
			this.texCoordV = 1 - v14;
			this.vertex(x2,y1,z2);
			var u15 = 0;
			var v15 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g15 = this.texMode;
			switch(_g15) {
			case 0:
				u15 *= this.currentTexture.imageToU;
				v15 *= this.currentTexture.imageToV;
				break;
			case 1:
				u15 *= this.currentTexture.normalToU;
				v15 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u15;
			this.texCoordV = 1 - v15;
			this.vertex(x1,y1,z1);
			var u16 = 1;
			var v16 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g16 = this.texMode;
			switch(_g16) {
			case 0:
				u16 *= this.currentTexture.imageToU;
				v16 *= this.currentTexture.imageToV;
				break;
			case 1:
				u16 *= this.currentTexture.normalToU;
				v16 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u16;
			this.texCoordV = 1 - v16;
			this.vertex(x2,y1,z2);
			var u17 = 1;
			var v17 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g17 = this.texMode;
			switch(_g17) {
			case 0:
				u17 *= this.currentTexture.imageToU;
				v17 *= this.currentTexture.imageToV;
				break;
			case 1:
				u17 *= this.currentTexture.normalToU;
				v17 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u17;
			this.texCoordV = 1 - v17;
			this.vertex(x1,y1,z2);
			this.normalX = 0;
			this.normalY = 1;
			this.normalZ = 0;
			var u18 = 0;
			var v18 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g18 = this.texMode;
			switch(_g18) {
			case 0:
				u18 *= this.currentTexture.imageToU;
				v18 *= this.currentTexture.imageToV;
				break;
			case 1:
				u18 *= this.currentTexture.normalToU;
				v18 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u18;
			this.texCoordV = 1 - v18;
			this.vertex(x1,y2,z1);
			var u19 = 0;
			var v19 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g19 = this.texMode;
			switch(_g19) {
			case 0:
				u19 *= this.currentTexture.imageToU;
				v19 *= this.currentTexture.imageToV;
				break;
			case 1:
				u19 *= this.currentTexture.normalToU;
				v19 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u19;
			this.texCoordV = 1 - v19;
			this.vertex(x1,y2,z2);
			var u20 = 1;
			var v20 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g20 = this.texMode;
			switch(_g20) {
			case 0:
				u20 *= this.currentTexture.imageToU;
				v20 *= this.currentTexture.imageToV;
				break;
			case 1:
				u20 *= this.currentTexture.normalToU;
				v20 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u20;
			this.texCoordV = 1 - v20;
			this.vertex(x2,y2,z2);
			var u21 = 0;
			var v21 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g21 = this.texMode;
			switch(_g21) {
			case 0:
				u21 *= this.currentTexture.imageToU;
				v21 *= this.currentTexture.imageToV;
				break;
			case 1:
				u21 *= this.currentTexture.normalToU;
				v21 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u21;
			this.texCoordV = 1 - v21;
			this.vertex(x1,y2,z1);
			var u22 = 1;
			var v22 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g22 = this.texMode;
			switch(_g22) {
			case 0:
				u22 *= this.currentTexture.imageToU;
				v22 *= this.currentTexture.imageToV;
				break;
			case 1:
				u22 *= this.currentTexture.normalToU;
				v22 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u22;
			this.texCoordV = 1 - v22;
			this.vertex(x2,y2,z2);
			var u23 = 1;
			var v23 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g23 = this.texMode;
			switch(_g23) {
			case 0:
				u23 *= this.currentTexture.imageToU;
				v23 *= this.currentTexture.imageToV;
				break;
			case 1:
				u23 *= this.currentTexture.normalToU;
				v23 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u23;
			this.texCoordV = 1 - v23;
			this.vertex(x2,y2,z1);
			this.normalX = 0;
			this.normalY = 0;
			this.normalZ = -1;
			var u24 = 0;
			var v24 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g24 = this.texMode;
			switch(_g24) {
			case 0:
				u24 *= this.currentTexture.imageToU;
				v24 *= this.currentTexture.imageToV;
				break;
			case 1:
				u24 *= this.currentTexture.normalToU;
				v24 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u24;
			this.texCoordV = 1 - v24;
			this.vertex(x1,y1,z1);
			var u25 = 0;
			var v25 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g25 = this.texMode;
			switch(_g25) {
			case 0:
				u25 *= this.currentTexture.imageToU;
				v25 *= this.currentTexture.imageToV;
				break;
			case 1:
				u25 *= this.currentTexture.normalToU;
				v25 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u25;
			this.texCoordV = 1 - v25;
			this.vertex(x1,y2,z1);
			var u26 = 1;
			var v26 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g26 = this.texMode;
			switch(_g26) {
			case 0:
				u26 *= this.currentTexture.imageToU;
				v26 *= this.currentTexture.imageToV;
				break;
			case 1:
				u26 *= this.currentTexture.normalToU;
				v26 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u26;
			this.texCoordV = 1 - v26;
			this.vertex(x2,y2,z1);
			var u27 = 0;
			var v27 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g27 = this.texMode;
			switch(_g27) {
			case 0:
				u27 *= this.currentTexture.imageToU;
				v27 *= this.currentTexture.imageToV;
				break;
			case 1:
				u27 *= this.currentTexture.normalToU;
				v27 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u27;
			this.texCoordV = 1 - v27;
			this.vertex(x1,y1,z1);
			var u28 = 1;
			var v28 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g28 = this.texMode;
			switch(_g28) {
			case 0:
				u28 *= this.currentTexture.imageToU;
				v28 *= this.currentTexture.imageToV;
				break;
			case 1:
				u28 *= this.currentTexture.normalToU;
				v28 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u28;
			this.texCoordV = 1 - v28;
			this.vertex(x2,y2,z1);
			var u29 = 1;
			var v29 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g29 = this.texMode;
			switch(_g29) {
			case 0:
				u29 *= this.currentTexture.imageToU;
				v29 *= this.currentTexture.imageToV;
				break;
			case 1:
				u29 *= this.currentTexture.normalToU;
				v29 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u29;
			this.texCoordV = 1 - v29;
			this.vertex(x2,y1,z1);
			this.normalX = 0;
			this.normalY = 0;
			this.normalZ = 1;
			var u30 = 0;
			var v30 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g30 = this.texMode;
			switch(_g30) {
			case 0:
				u30 *= this.currentTexture.imageToU;
				v30 *= this.currentTexture.imageToV;
				break;
			case 1:
				u30 *= this.currentTexture.normalToU;
				v30 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u30;
			this.texCoordV = 1 - v30;
			this.vertex(x1,y1,z2);
			var u31 = 0;
			var v31 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g31 = this.texMode;
			switch(_g31) {
			case 0:
				u31 *= this.currentTexture.imageToU;
				v31 *= this.currentTexture.imageToV;
				break;
			case 1:
				u31 *= this.currentTexture.normalToU;
				v31 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u31;
			this.texCoordV = 1 - v31;
			this.vertex(x2,y1,z2);
			var u32 = 1;
			var v32 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g32 = this.texMode;
			switch(_g32) {
			case 0:
				u32 *= this.currentTexture.imageToU;
				v32 *= this.currentTexture.imageToV;
				break;
			case 1:
				u32 *= this.currentTexture.normalToU;
				v32 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u32;
			this.texCoordV = 1 - v32;
			this.vertex(x2,y2,z2);
			var u33 = 0;
			var v33 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g33 = this.texMode;
			switch(_g33) {
			case 0:
				u33 *= this.currentTexture.imageToU;
				v33 *= this.currentTexture.imageToV;
				break;
			case 1:
				u33 *= this.currentTexture.normalToU;
				v33 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u33;
			this.texCoordV = 1 - v33;
			this.vertex(x1,y1,z2);
			var u34 = 1;
			var v34 = 1;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g34 = this.texMode;
			switch(_g34) {
			case 0:
				u34 *= this.currentTexture.imageToU;
				v34 *= this.currentTexture.imageToV;
				break;
			case 1:
				u34 *= this.currentTexture.normalToU;
				v34 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u34;
			this.texCoordV = 1 - v34;
			this.vertex(x2,y2,z2);
			var u35 = 1;
			var v35 = 0;
			if(this.currentTexture == null) {
				throw new Error("set texture before calling texCoord");
			}
			var _g35 = this.texMode;
			switch(_g35) {
			case 0:
				u35 *= this.currentTexture.imageToU;
				v35 *= this.currentTexture.imageToV;
				break;
			case 1:
				u35 *= this.currentTexture.normalToU;
				v35 *= this.currentTexture.normalToV;
				break;
			case 2:
				break;
			}
			this.texCoordU = u35;
			this.texCoordV = 1 - v35;
			this.vertex(x1,y2,z2);
		} else {
			this.normalX = -1;
			this.normalY = 0;
			this.normalZ = 0;
			this.vertex(x1,y1,z1);
			this.vertex(x1,y1,z2);
			this.vertex(x1,y2,z2);
			this.vertex(x1,y1,z1);
			this.vertex(x1,y2,z2);
			this.vertex(x1,y2,z1);
			this.normalX = 1;
			this.normalY = 0;
			this.normalZ = 0;
			this.vertex(x2,y1,z1);
			this.vertex(x2,y2,z1);
			this.vertex(x2,y2,z2);
			this.vertex(x2,y1,z1);
			this.vertex(x2,y2,z2);
			this.vertex(x2,y1,z2);
			this.normalX = 0;
			this.normalY = -1;
			this.normalZ = 0;
			this.vertex(x1,y1,z1);
			this.vertex(x2,y1,z1);
			this.vertex(x2,y1,z2);
			this.vertex(x1,y1,z1);
			this.vertex(x2,y1,z2);
			this.vertex(x1,y1,z2);
			this.normalX = 0;
			this.normalY = 1;
			this.normalZ = 0;
			this.vertex(x1,y2,z1);
			this.vertex(x1,y2,z2);
			this.vertex(x2,y2,z2);
			this.vertex(x1,y2,z1);
			this.vertex(x2,y2,z2);
			this.vertex(x2,y2,z1);
			this.normalX = 0;
			this.normalY = 0;
			this.normalZ = -1;
			this.vertex(x1,y1,z1);
			this.vertex(x1,y2,z1);
			this.vertex(x2,y2,z1);
			this.vertex(x1,y1,z1);
			this.vertex(x2,y2,z1);
			this.vertex(x2,y1,z1);
			this.normalX = 0;
			this.normalY = 0;
			this.normalZ = 1;
			this.vertex(x1,y1,z2);
			this.vertex(x2,y1,z2);
			this.vertex(x2,y2,z2);
			this.vertex(x1,y1,z2);
			this.vertex(x2,y2,z2);
			this.vertex(x1,y2,z2);
		}
		var shader = this.chooseShader();
		var pg = shader.pg;
		this.modelviewMat.mul(this.viewMat,this.modelMat);
		this.normalMat.inverse(this.modelviewMat);
		this.normalMat.transpose(this.normalMat);
		var tmp;
		var _this = shader.map;
		if(__map_reserved["model"] != null ? _this.existsReserved("model") : _this.h.hasOwnProperty("model")) {
			var _this1 = shader.map;
			tmp = __map_reserved["model"] != null ? _this1.getReserved("model") : _this1.h["model"];
		} else {
			var ul = shader.gl.getUniformLocation(shader.pg,"model");
			var _this2 = shader.map;
			if(__map_reserved["model"] != null) {
				_this2.setReserved("model",ul);
			} else {
				_this2.h["model"] = ul;
			}
			tmp = ul;
		}
		if(tmp != null) {
			shader.setMatrix("model",this.modelMat.array);
		}
		var tmp1;
		var _this3 = shader.map;
		if(__map_reserved["view"] != null ? _this3.existsReserved("view") : _this3.h.hasOwnProperty("view")) {
			var _this4 = shader.map;
			tmp1 = __map_reserved["view"] != null ? _this4.getReserved("view") : _this4.h["view"];
		} else {
			var ul1 = shader.gl.getUniformLocation(shader.pg,"view");
			var _this5 = shader.map;
			if(__map_reserved["view"] != null) {
				_this5.setReserved("view",ul1);
			} else {
				_this5.h["view"] = ul1;
			}
			tmp1 = ul1;
		}
		if(tmp1 != null) {
			shader.setMatrix("view",this.viewMat.array);
		}
		var tmp2;
		var _this6 = shader.map;
		if(__map_reserved["projection"] != null ? _this6.existsReserved("projection") : _this6.h.hasOwnProperty("projection")) {
			var _this7 = shader.map;
			tmp2 = __map_reserved["projection"] != null ? _this7.getReserved("projection") : _this7.h["projection"];
		} else {
			var ul2 = shader.gl.getUniformLocation(shader.pg,"projection");
			var _this8 = shader.map;
			if(__map_reserved["projection"] != null) {
				_this8.setReserved("projection",ul2);
			} else {
				_this8.h["projection"] = ul2;
			}
			tmp2 = ul2;
		}
		if(tmp2 != null) {
			shader.setMatrix("projection",this.projMat.array);
		}
		var tmp3;
		var _this9 = shader.map;
		if(__map_reserved["transform"] != null ? _this9.existsReserved("transform") : _this9.h.hasOwnProperty("transform")) {
			var _this10 = shader.map;
			tmp3 = __map_reserved["transform"] != null ? _this10.getReserved("transform") : _this10.h["transform"];
		} else {
			var ul3 = shader.gl.getUniformLocation(shader.pg,"transform");
			var _this11 = shader.map;
			if(__map_reserved["transform"] != null) {
				_this11.setReserved("transform",ul3);
			} else {
				_this11.h["transform"] = ul3;
			}
			tmp3 = ul3;
		}
		if(tmp3 != null) {
			this.mvpMat.mul(this.projMat,this.modelviewMat);
			shader.setMatrix("transform",this.mvpMat.array);
		}
		var tmp4;
		var _this12 = shader.map;
		if(__map_reserved["modelview"] != null ? _this12.existsReserved("modelview") : _this12.h.hasOwnProperty("modelview")) {
			var _this13 = shader.map;
			tmp4 = __map_reserved["modelview"] != null ? _this13.getReserved("modelview") : _this13.h["modelview"];
		} else {
			var ul4 = shader.gl.getUniformLocation(shader.pg,"modelview");
			var _this14 = shader.map;
			if(__map_reserved["modelview"] != null) {
				_this14.setReserved("modelview",ul4);
			} else {
				_this14.h["modelview"] = ul4;
			}
			tmp4 = ul4;
		}
		if(tmp4 != null) {
			shader.setMatrix("modelview",this.modelviewMat.array);
		}
		var tmp5;
		var _this15 = shader.map;
		if(__map_reserved["normalMatrix"] != null ? _this15.existsReserved("normalMatrix") : _this15.h.hasOwnProperty("normalMatrix")) {
			var _this16 = shader.map;
			tmp5 = __map_reserved["normalMatrix"] != null ? _this16.getReserved("normalMatrix") : _this16.h["normalMatrix"];
		} else {
			var ul5 = shader.gl.getUniformLocation(shader.pg,"normalMatrix");
			var _this17 = shader.map;
			if(__map_reserved["normalMatrix"] != null) {
				_this17.setReserved("normalMatrix",ul5);
			} else {
				_this17.h["normalMatrix"] = ul5;
			}
			tmp5 = ul5;
		}
		if(tmp5 != null) {
			this.normalMat.toMat3();
			shader.setMatrix("normalMatrix",this.normalMat.array3);
		}
		if(this.currentTexture != null) {
			shader.setTexture("texture",this.currentTexture);
			var tmp6;
			var _this18 = shader.map;
			if(__map_reserved["texResolution"] != null ? _this18.existsReserved("texResolution") : _this18.h.hasOwnProperty("texResolution")) {
				var _this19 = shader.map;
				tmp6 = __map_reserved["texResolution"] != null ? _this19.getReserved("texResolution") : _this19.h["texResolution"];
			} else {
				var ul6 = shader.gl.getUniformLocation(shader.pg,"texResolution");
				var _this20 = shader.map;
				if(__map_reserved["texResolution"] != null) {
					_this20.setReserved("texResolution",ul6);
				} else {
					_this20.h["texResolution"] = ul6;
				}
				tmp6 = ul6;
			}
			if(tmp6 != null) {
				shader.setFloat("texResolution",this.currentTexture.textureWidth,this.currentTexture.textureHeight);
			}
			var tmp7;
			var _this21 = shader.map;
			if(__map_reserved["texViewport"] != null ? _this21.existsReserved("texViewport") : _this21.h.hasOwnProperty("texViewport")) {
				var _this22 = shader.map;
				tmp7 = __map_reserved["texViewport"] != null ? _this22.getReserved("texViewport") : _this22.h["texViewport"];
			} else {
				var ul7 = shader.gl.getUniformLocation(shader.pg,"texViewport");
				var _this23 = shader.map;
				if(__map_reserved["texViewport"] != null) {
					_this23.setReserved("texViewport",ul7);
				} else {
					_this23.h["texViewport"] = ul7;
				}
				tmp7 = ul7;
			}
			if(tmp7 != null) {
				var x = 0;
				var y = 1 - this.currentTexture.height / this.currentTexture.textureHeight;
				var w = this.currentTexture.width / this.currentTexture.textureWidth;
				var h = this.currentTexture.height / this.currentTexture.textureHeight;
				shader.setFloat("texViewport",x,y,w,h);
			}
		}
		var tmp8;
		var _this24 = shader.map;
		if(__map_reserved["ambient"] != null ? _this24.existsReserved("ambient") : _this24.h.hasOwnProperty("ambient")) {
			var _this25 = shader.map;
			tmp8 = __map_reserved["ambient"] != null ? _this25.getReserved("ambient") : _this25.h["ambient"];
		} else {
			var ul8 = shader.gl.getUniformLocation(shader.pg,"ambient");
			var _this26 = shader.map;
			if(__map_reserved["ambient"] != null) {
				_this26.setReserved("ambient",ul8);
			} else {
				_this26.h["ambient"] = ul8;
			}
			tmp8 = ul8;
		}
		if(tmp8 != null) {
			shader.setFloat("ambient",this.materialAmb);
		}
		var tmp9;
		var _this27 = shader.map;
		if(__map_reserved["diffuse"] != null ? _this27.existsReserved("diffuse") : _this27.h.hasOwnProperty("diffuse")) {
			var _this28 = shader.map;
			tmp9 = __map_reserved["diffuse"] != null ? _this28.getReserved("diffuse") : _this28.h["diffuse"];
		} else {
			var ul9 = shader.gl.getUniformLocation(shader.pg,"diffuse");
			var _this29 = shader.map;
			if(__map_reserved["diffuse"] != null) {
				_this29.setReserved("diffuse",ul9);
			} else {
				_this29.h["diffuse"] = ul9;
			}
			tmp9 = ul9;
		}
		if(tmp9 != null) {
			shader.setFloat("diffuse",this.materialDif);
		}
		var tmp10;
		var _this30 = shader.map;
		if(__map_reserved["specular"] != null ? _this30.existsReserved("specular") : _this30.h.hasOwnProperty("specular")) {
			var _this31 = shader.map;
			tmp10 = __map_reserved["specular"] != null ? _this31.getReserved("specular") : _this31.h["specular"];
		} else {
			var ul10 = shader.gl.getUniformLocation(shader.pg,"specular");
			var _this32 = shader.map;
			if(__map_reserved["specular"] != null) {
				_this32.setReserved("specular",ul10);
			} else {
				_this32.h["specular"] = ul10;
			}
			tmp10 = ul10;
		}
		if(tmp10 != null) {
			shader.setFloat("specular",this.materialSpc);
		}
		var tmp11;
		var _this33 = shader.map;
		if(__map_reserved["shininess"] != null ? _this33.existsReserved("shininess") : _this33.h.hasOwnProperty("shininess")) {
			var _this34 = shader.map;
			tmp11 = __map_reserved["shininess"] != null ? _this34.getReserved("shininess") : _this34.h["shininess"];
		} else {
			var ul11 = shader.gl.getUniformLocation(shader.pg,"shininess");
			var _this35 = shader.map;
			if(__map_reserved["shininess"] != null) {
				_this35.setReserved("shininess",ul11);
			} else {
				_this35.h["shininess"] = ul11;
			}
			tmp11 = ul11;
		}
		if(tmp11 != null) {
			shader.setFloat("shininess",this.materialShn);
		}
		var tmp12;
		var _this36 = shader.map;
		if(__map_reserved["emission"] != null ? _this36.existsReserved("emission") : _this36.h.hasOwnProperty("emission")) {
			var _this37 = shader.map;
			tmp12 = __map_reserved["emission"] != null ? _this37.getReserved("emission") : _this37.h["emission"];
		} else {
			var ul12 = shader.gl.getUniformLocation(shader.pg,"emission");
			var _this38 = shader.map;
			if(__map_reserved["emission"] != null) {
				_this38.setReserved("emission",ul12);
			} else {
				_this38.h["emission"] = ul12;
			}
			tmp12 = ul12;
		}
		if(tmp12 != null) {
			shader.setFloat("emission",this.materialEmi);
		}
		var tmp13;
		var _this39 = shader.map;
		if(__map_reserved["numLights"] != null ? _this39.existsReserved("numLights") : _this39.h.hasOwnProperty("numLights")) {
			var _this40 = shader.map;
			tmp13 = __map_reserved["numLights"] != null ? _this40.getReserved("numLights") : _this40.h["numLights"];
		} else {
			var ul13 = shader.gl.getUniformLocation(shader.pg,"numLights");
			var _this41 = shader.map;
			if(__map_reserved["numLights"] != null) {
				_this41.setReserved("numLights",ul13);
			} else {
				_this41.h["numLights"] = ul13;
			}
			tmp13 = ul13;
		}
		if(tmp13 != null) {
			shader.setInt("numLights",this.numLights);
		}
		var tmp14;
		var _this42 = shader.map;
		if(__map_reserved["lightPositions"] != null ? _this42.existsReserved("lightPositions") : _this42.h.hasOwnProperty("lightPositions")) {
			var _this43 = shader.map;
			tmp14 = __map_reserved["lightPositions"] != null ? _this43.getReserved("lightPositions") : _this43.h["lightPositions"];
		} else {
			var ul14 = shader.gl.getUniformLocation(shader.pg,"lightPositions");
			var _this44 = shader.map;
			if(__map_reserved["lightPositions"] != null) {
				_this44.setReserved("lightPositions",ul14);
			} else {
				_this44.h["lightPositions"] = ul14;
			}
			tmp14 = ul14;
		}
		if(tmp14 != null) {
			var _g110 = 0;
			var _g36 = this.numLights;
			while(_g110 < _g36) {
				var i = _g110++;
				var light = this.lightBuf[i];
				var x3 = light.posX * this.viewMat.array[0] + light.posY * this.viewMat.array[4] + light.posZ * this.viewMat.array[8] + this.viewMat.array[12];
				var y3 = light.posX * this.viewMat.array[1] + light.posY * this.viewMat.array[5] + light.posZ * this.viewMat.array[9] + this.viewMat.array[13];
				var z = light.posX * this.viewMat.array[2] + light.posY * this.viewMat.array[6] + light.posZ * this.viewMat.array[10] + this.viewMat.array[14];
				shader.setFloat("lightPositions[" + i + "]",x3,y3,z,light.posW);
			}
		}
		var tmp15;
		var _this45 = shader.map;
		if(__map_reserved["lightNormals"] != null ? _this45.existsReserved("lightNormals") : _this45.h.hasOwnProperty("lightNormals")) {
			var _this46 = shader.map;
			tmp15 = __map_reserved["lightNormals"] != null ? _this46.getReserved("lightNormals") : _this46.h["lightNormals"];
		} else {
			var ul15 = shader.gl.getUniformLocation(shader.pg,"lightNormals");
			var _this47 = shader.map;
			if(__map_reserved["lightNormals"] != null) {
				_this47.setReserved("lightNormals",ul15);
			} else {
				_this47.h["lightNormals"] = ul15;
			}
			tmp15 = ul15;
		}
		if(tmp15 != null) {
			var _g111 = 0;
			var _g37 = this.numLights;
			while(_g111 < _g37) {
				var i1 = _g111++;
				var light1 = this.lightBuf[i1];
				var x4 = light1.norX * this.viewMat.array[0] + light1.norY * this.viewMat.array[4] + light1.norZ * this.viewMat.array[8];
				var y4 = light1.norX * this.viewMat.array[1] + light1.norY * this.viewMat.array[5] + light1.norZ * this.viewMat.array[9];
				var z3 = light1.norX * this.viewMat.array[2] + light1.norY * this.viewMat.array[6] + light1.norZ * this.viewMat.array[10];
				shader.setFloat("lightNormals[" + i1 + "]",x4,y4,z3);
			}
		}
		var tmp16;
		var _this48 = shader.map;
		if(__map_reserved["lightColors"] != null ? _this48.existsReserved("lightColors") : _this48.h.hasOwnProperty("lightColors")) {
			var _this49 = shader.map;
			tmp16 = __map_reserved["lightColors"] != null ? _this49.getReserved("lightColors") : _this49.h["lightColors"];
		} else {
			var ul16 = shader.gl.getUniformLocation(shader.pg,"lightColors");
			var _this50 = shader.map;
			if(__map_reserved["lightColors"] != null) {
				_this50.setReserved("lightColors",ul16);
			} else {
				_this50.h["lightColors"] = ul16;
			}
			tmp16 = ul16;
		}
		if(tmp16 != null) {
			var _g112 = 0;
			var _g38 = this.numLights;
			while(_g112 < _g38) {
				var i2 = _g112++;
				var light2 = this.lightBuf[i2];
				shader.setFloat("lightColors[" + i2 + "]",light2.r,light2.g,light2.b);
			}
		}
		var _this51 = this.indexBuf;
		_this51.gl.bindBuffer(34963,_this51.buffer);
		_this51.gl.bufferData(34963,new Int16Array(_this51.array.buffer,0,_this51.length),35044);
		_this51.gl.bindBuffer(34963,null);
		var _this52 = this.positionBuf;
		_this52.gl.bindBuffer(34962,_this52.buffer);
		_this52.gl.bufferData(34962,new Float32Array(_this52.array.buffer,0,_this52.length),35044);
		_this52.gl.bindBuffer(34962,null);
		var _this53 = this.colorBuf;
		_this53.gl.bindBuffer(34962,_this53.buffer);
		_this53.gl.bufferData(34962,new Float32Array(_this53.array.buffer,0,_this53.length),35044);
		_this53.gl.bindBuffer(34962,null);
		var _this54 = this.normalBuf;
		_this54.gl.bindBuffer(34962,_this54.buffer);
		_this54.gl.bufferData(34962,new Float32Array(_this54.array.buffer,0,_this54.length),35044);
		_this54.gl.bindBuffer(34962,null);
		var _this55 = this.texCoordBuf;
		_this55.gl.bindBuffer(34962,_this55.buffer);
		_this55.gl.bufferData(34962,new Float32Array(_this55.array.buffer,0,_this55.length),35044);
		_this55.gl.bindBuffer(34962,null);
		var _this56 = this.positionBuf;
		var idx = _this56.gl.getAttribLocation(pg,_this56.name);
		if(idx != -1) {
			_this56.gl.bindBuffer(34962,_this56.buffer);
			_this56.gl.enableVertexAttribArray(idx);
			_this56.gl.vertexAttribPointer(idx,_this56.size,5126,false,0,0);
			_this56.gl.bindBuffer(34962,null);
		}
		var _this57 = this.colorBuf;
		var idx1 = _this57.gl.getAttribLocation(pg,_this57.name);
		if(idx1 != -1) {
			_this57.gl.bindBuffer(34962,_this57.buffer);
			_this57.gl.enableVertexAttribArray(idx1);
			_this57.gl.vertexAttribPointer(idx1,_this57.size,5126,false,0,0);
			_this57.gl.bindBuffer(34962,null);
		}
		var _this58 = this.normalBuf;
		var idx2 = _this58.gl.getAttribLocation(pg,_this58.name);
		if(idx2 != -1) {
			_this58.gl.bindBuffer(34962,_this58.buffer);
			_this58.gl.enableVertexAttribArray(idx2);
			_this58.gl.vertexAttribPointer(idx2,_this58.size,5126,false,0,0);
			_this58.gl.bindBuffer(34962,null);
		}
		var _this59 = this.texCoordBuf;
		var idx3 = _this59.gl.getAttribLocation(pg,_this59.name);
		if(idx3 != -1) {
			_this59.gl.bindBuffer(34962,_this59.buffer);
			_this59.gl.enableVertexAttribArray(idx3);
			_this59.gl.vertexAttribPointer(idx3,_this59.size,5126,false,0,0);
			_this59.gl.bindBuffer(34962,null);
		}
		if(!shader.compiled) {
			throw new Error("shader is not compiled");
		}
		shader.gl.useProgram(shader.pg);
		var texUnit = 0;
		var name = shader.uniforms.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this60 = shader.uniforms;
			var uniform = __map_reserved[name1] != null ? _this60.getReserved(name1) : _this60.h[name1];
			if(uniform.type == 11) {
				uniform.texUnit = texUnit;
				++texUnit;
			}
		}
		var name2 = shader.uniforms.keys();
		while(name2.hasNext()) {
			var name3 = name2.next();
			var _this61 = shader.uniforms;
			var uniform1 = __map_reserved[name3] != null ? _this61.getReserved(name3) : _this61.h[name3];
			var loc;
			var _this62 = shader.map;
			if(__map_reserved[name3] != null ? _this62.existsReserved(name3) : _this62.h.hasOwnProperty(name3)) {
				var _this63 = shader.map;
				loc = __map_reserved[name3] != null ? _this63.getReserved(name3) : _this63.h[name3];
			} else {
				var ul17 = shader.gl.getUniformLocation(shader.pg,name3);
				var _this64 = shader.map;
				if(__map_reserved[name3] != null) {
					_this64.setReserved(name3,ul17);
				} else {
					_this64.h[name3] = ul17;
				}
				loc = ul17;
			}
			var _g39 = uniform1.type;
			switch(_g39) {
			case 0:
				shader.gl.uniform1i(loc,uniform1.i1);
				break;
			case 1:
				shader.gl.uniform2i(loc,uniform1.i1,uniform1.i2);
				break;
			case 2:
				shader.gl.uniform3i(loc,uniform1.i1,uniform1.i2,uniform1.i3);
				break;
			case 3:
				shader.gl.uniform4i(loc,uniform1.i1,uniform1.i2,uniform1.i3,uniform1.i4);
				break;
			case 4:
				shader.gl.uniform1f(loc,uniform1.f1);
				break;
			case 5:
				shader.gl.uniform2f(loc,uniform1.f1,uniform1.f2);
				break;
			case 6:
				shader.gl.uniform3f(loc,uniform1.f1,uniform1.f2,uniform1.f3);
				break;
			case 7:
				shader.gl.uniform4f(loc,uniform1.f1,uniform1.f2,uniform1.f3,uniform1.f4);
				break;
			case 8:
				shader.gl.uniformMatrix2fv(loc,false,uniform1.m2);
				break;
			case 9:
				shader.gl.uniformMatrix3fv(loc,false,uniform1.m3);
				break;
			case 10:
				shader.gl.uniformMatrix4fv(loc,false,uniform1.m4);
				break;
			case 11:
				shader.gl.activeTexture(33984 + uniform1.texUnit);
				shader.gl.bindTexture(3553,uniform1.tex == null ? null : uniform1.tex.texture);
				shader.gl.uniform1i(loc,uniform1.texUnit);
				break;
			}
		}
		shader.gl.activeTexture(33984);
		var _this65 = this.indexBuf;
		var mode = this.shapeMode;
		_this65.gl.bindBuffer(34963,_this65.buffer);
		_this65.gl.drawElements(mode,_this65.length,5123,0);
		_this65.gl.bindBuffer(34963,null);
		this.texMode = tmpTexMode;
	}
	,color: function(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		this.colorR = r;
		this.colorG = g;
		this.colorB = b;
		this.colorA = a;
	}
	,normal: function(x,y,z) {
		this.normalX = x;
		this.normalY = y;
		this.normalZ = z;
	}
	,noLights: function() {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		this.numLights = 0;
	}
	,lights: function() {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == 8) {
			throw new Error("too many lights");
		}
		var light = this.lightBuf[this.numLights++];
		light.r = 0.2;
		light.g = 0.2;
		light.b = 0.2;
		light.posX = 0;
		light.posY = 0;
		light.posZ = 0;
		light.posW = 0;
		light.norX = 0;
		light.norY = 0;
		light.norZ = 0;
		var dirX = -this.viewMat.array[2];
		var dirY = -this.viewMat.array[6];
		var dirZ = -this.viewMat.array[10];
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == 8) {
			throw new Error("too many lights");
		}
		var light1 = this.lightBuf[this.numLights++];
		var invLen = Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		dirX *= invLen;
		dirY *= invLen;
		dirZ *= invLen;
		light1.r = 0.8;
		light1.g = 0.8;
		light1.b = 0.8;
		light1.posX = 0;
		light1.posY = 0;
		light1.posZ = 0;
		light1.posW = 0;
		light1.norX = dirX;
		light1.norY = dirY;
		light1.norZ = dirZ;
	}
	,ambientLight: function(r,g,b) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == 8) {
			throw new Error("too many lights");
		}
		var light = this.lightBuf[this.numLights++];
		light.r = r;
		light.g = g;
		light.b = b;
		light.posX = 0;
		light.posY = 0;
		light.posZ = 0;
		light.posW = 0;
		light.norX = 0;
		light.norY = 0;
		light.norZ = 0;
	}
	,directionalLight: function(r,g,b,dirX,dirY,dirZ) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == 8) {
			throw new Error("too many lights");
		}
		var light = this.lightBuf[this.numLights++];
		var invLen = Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		dirX *= invLen;
		dirY *= invLen;
		dirZ *= invLen;
		light.r = r;
		light.g = g;
		light.b = b;
		light.posX = 0;
		light.posY = 0;
		light.posZ = 0;
		light.posW = 0;
		light.norX = dirX;
		light.norY = dirY;
		light.norZ = dirZ;
	}
	,pointLight: function(r,g,b,x,y,z) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == 8) {
			throw new Error("too many lights");
		}
		var light = this.lightBuf[this.numLights++];
		light.r = r;
		light.g = g;
		light.b = b;
		light.posX = x;
		light.posY = y;
		light.posZ = z;
		light.posW = 1;
		light.norX = 0;
		light.norY = 0;
		light.norZ = 0;
	}
	,ambient: function(v) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting material");
		}
		this.materialAmb = v;
	}
	,diffuse: function(v) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting material");
		}
		this.materialDif = v;
	}
	,specular: function(v) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting material");
		}
		this.materialSpc = v;
	}
	,shininess: function(v) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting material");
		}
		this.materialShn = v;
	}
	,emission: function(v) {
		if(!this.sceneOpen) {
			throw new Error("begin scene before setting material");
		}
		this.materialEmi = v;
	}
	,texCoord: function(u,v) {
		if(this.currentTexture == null) {
			throw new Error("set texture before calling texCoord");
		}
		var _g = this.texMode;
		switch(_g) {
		case 0:
			u *= this.currentTexture.imageToU;
			v *= this.currentTexture.imageToV;
			break;
		case 1:
			u *= this.currentTexture.normalToU;
			v *= this.currentTexture.normalToV;
			break;
		case 2:
			break;
		}
		this.texCoordU = u;
		this.texCoordV = 1 - v;
	}
	,textureMode: function(mode) {
		this.texMode = mode;
	}
	,texture: function(tex) {
		this.currentTexture = tex;
	}
	,noTexture: function() {
		this.currentTexture = null;
	}
	,vertex: function(x,y,z) {
		if(z == null) {
			z = 0;
		}
		var _this = this.indexBuf;
		var i = this.numVertices++;
		if(_this.length == _this.array.length) {
			var oldLength = _this.array.length;
			var newArray = new Int16Array(oldLength << 1);
			var _g1 = 0;
			var _g = oldLength;
			while(_g1 < _g) {
				var i1 = _g1++;
				newArray[i1] = _this.array[i1];
			}
			_this.array = newArray;
		}
		_this.array[_this.length++] = i;
		var _this1 = this.positionBuf;
		if(_this1.length == _this1.array.length) {
			var oldLength1 = _this1.array.length;
			var newArray1 = new Float32Array(oldLength1 << 1);
			var _g11 = 0;
			var _g2 = oldLength1;
			while(_g11 < _g2) {
				var i2 = _g11++;
				newArray1[i2] = _this1.array[i2];
			}
			_this1.array = newArray1;
		}
		_this1.array[_this1.length++] = x;
		var _this2 = this.positionBuf;
		if(_this2.length == _this2.array.length) {
			var oldLength2 = _this2.array.length;
			var newArray2 = new Float32Array(oldLength2 << 1);
			var _g12 = 0;
			var _g3 = oldLength2;
			while(_g12 < _g3) {
				var i3 = _g12++;
				newArray2[i3] = _this2.array[i3];
			}
			_this2.array = newArray2;
		}
		_this2.array[_this2.length++] = y;
		var _this3 = this.positionBuf;
		if(_this3.length == _this3.array.length) {
			var oldLength3 = _this3.array.length;
			var newArray3 = new Float32Array(oldLength3 << 1);
			var _g13 = 0;
			var _g4 = oldLength3;
			while(_g13 < _g4) {
				var i4 = _g13++;
				newArray3[i4] = _this3.array[i4];
			}
			_this3.array = newArray3;
		}
		_this3.array[_this3.length++] = z;
		var _this4 = this.colorBuf;
		var f = this.colorR;
		if(_this4.length == _this4.array.length) {
			var oldLength4 = _this4.array.length;
			var newArray4 = new Float32Array(oldLength4 << 1);
			var _g14 = 0;
			var _g5 = oldLength4;
			while(_g14 < _g5) {
				var i5 = _g14++;
				newArray4[i5] = _this4.array[i5];
			}
			_this4.array = newArray4;
		}
		_this4.array[_this4.length++] = f;
		var _this5 = this.colorBuf;
		var f1 = this.colorG;
		if(_this5.length == _this5.array.length) {
			var oldLength5 = _this5.array.length;
			var newArray5 = new Float32Array(oldLength5 << 1);
			var _g15 = 0;
			var _g6 = oldLength5;
			while(_g15 < _g6) {
				var i6 = _g15++;
				newArray5[i6] = _this5.array[i6];
			}
			_this5.array = newArray5;
		}
		_this5.array[_this5.length++] = f1;
		var _this6 = this.colorBuf;
		var f2 = this.colorB;
		if(_this6.length == _this6.array.length) {
			var oldLength6 = _this6.array.length;
			var newArray6 = new Float32Array(oldLength6 << 1);
			var _g16 = 0;
			var _g7 = oldLength6;
			while(_g16 < _g7) {
				var i7 = _g16++;
				newArray6[i7] = _this6.array[i7];
			}
			_this6.array = newArray6;
		}
		_this6.array[_this6.length++] = f2;
		var _this7 = this.colorBuf;
		var f3 = this.colorA;
		if(_this7.length == _this7.array.length) {
			var oldLength7 = _this7.array.length;
			var newArray7 = new Float32Array(oldLength7 << 1);
			var _g17 = 0;
			var _g8 = oldLength7;
			while(_g17 < _g8) {
				var i8 = _g17++;
				newArray7[i8] = _this7.array[i8];
			}
			_this7.array = newArray7;
		}
		_this7.array[_this7.length++] = f3;
		var _this8 = this.normalBuf;
		var f4 = this.normalX;
		if(_this8.length == _this8.array.length) {
			var oldLength8 = _this8.array.length;
			var newArray8 = new Float32Array(oldLength8 << 1);
			var _g18 = 0;
			var _g9 = oldLength8;
			while(_g18 < _g9) {
				var i9 = _g18++;
				newArray8[i9] = _this8.array[i9];
			}
			_this8.array = newArray8;
		}
		_this8.array[_this8.length++] = f4;
		var _this9 = this.normalBuf;
		var f5 = this.normalY;
		if(_this9.length == _this9.array.length) {
			var oldLength9 = _this9.array.length;
			var newArray9 = new Float32Array(oldLength9 << 1);
			var _g19 = 0;
			var _g10 = oldLength9;
			while(_g19 < _g10) {
				var i10 = _g19++;
				newArray9[i10] = _this9.array[i10];
			}
			_this9.array = newArray9;
		}
		_this9.array[_this9.length++] = f5;
		var _this10 = this.normalBuf;
		var f6 = this.normalZ;
		if(_this10.length == _this10.array.length) {
			var oldLength10 = _this10.array.length;
			var newArray10 = new Float32Array(oldLength10 << 1);
			var _g110 = 0;
			var _g20 = oldLength10;
			while(_g110 < _g20) {
				var i11 = _g110++;
				newArray10[i11] = _this10.array[i11];
			}
			_this10.array = newArray10;
		}
		_this10.array[_this10.length++] = f6;
		var _this11 = this.texCoordBuf;
		var f7 = this.texCoordU;
		if(_this11.length == _this11.array.length) {
			var oldLength11 = _this11.array.length;
			var newArray11 = new Float32Array(oldLength11 << 1);
			var _g111 = 0;
			var _g21 = oldLength11;
			while(_g111 < _g21) {
				var i12 = _g111++;
				newArray11[i12] = _this11.array[i12];
			}
			_this11.array = newArray11;
		}
		_this11.array[_this11.length++] = f7;
		var _this12 = this.texCoordBuf;
		var f8 = this.texCoordV;
		if(_this12.length == _this12.array.length) {
			var oldLength12 = _this12.array.length;
			var newArray12 = new Float32Array(oldLength12 << 1);
			var _g112 = 0;
			var _g22 = oldLength12;
			while(_g112 < _g22) {
				var i13 = _g112++;
				newArray12[i13] = _this12.array[i13];
			}
			_this12.array = newArray12;
		}
		_this12.array[_this12.length++] = f8;
	}
	,endShape: function() {
		var shader = this.chooseShader();
		var pg = shader.pg;
		this.modelviewMat.mul(this.viewMat,this.modelMat);
		this.normalMat.inverse(this.modelviewMat);
		this.normalMat.transpose(this.normalMat);
		var tmp;
		var _this = shader.map;
		if(__map_reserved["model"] != null ? _this.existsReserved("model") : _this.h.hasOwnProperty("model")) {
			var _this1 = shader.map;
			tmp = __map_reserved["model"] != null ? _this1.getReserved("model") : _this1.h["model"];
		} else {
			var ul = shader.gl.getUniformLocation(shader.pg,"model");
			var _this2 = shader.map;
			if(__map_reserved["model"] != null) {
				_this2.setReserved("model",ul);
			} else {
				_this2.h["model"] = ul;
			}
			tmp = ul;
		}
		if(tmp != null) {
			shader.setMatrix("model",this.modelMat.array);
		}
		var tmp1;
		var _this3 = shader.map;
		if(__map_reserved["view"] != null ? _this3.existsReserved("view") : _this3.h.hasOwnProperty("view")) {
			var _this4 = shader.map;
			tmp1 = __map_reserved["view"] != null ? _this4.getReserved("view") : _this4.h["view"];
		} else {
			var ul1 = shader.gl.getUniformLocation(shader.pg,"view");
			var _this5 = shader.map;
			if(__map_reserved["view"] != null) {
				_this5.setReserved("view",ul1);
			} else {
				_this5.h["view"] = ul1;
			}
			tmp1 = ul1;
		}
		if(tmp1 != null) {
			shader.setMatrix("view",this.viewMat.array);
		}
		var tmp2;
		var _this6 = shader.map;
		if(__map_reserved["projection"] != null ? _this6.existsReserved("projection") : _this6.h.hasOwnProperty("projection")) {
			var _this7 = shader.map;
			tmp2 = __map_reserved["projection"] != null ? _this7.getReserved("projection") : _this7.h["projection"];
		} else {
			var ul2 = shader.gl.getUniformLocation(shader.pg,"projection");
			var _this8 = shader.map;
			if(__map_reserved["projection"] != null) {
				_this8.setReserved("projection",ul2);
			} else {
				_this8.h["projection"] = ul2;
			}
			tmp2 = ul2;
		}
		if(tmp2 != null) {
			shader.setMatrix("projection",this.projMat.array);
		}
		var tmp3;
		var _this9 = shader.map;
		if(__map_reserved["transform"] != null ? _this9.existsReserved("transform") : _this9.h.hasOwnProperty("transform")) {
			var _this10 = shader.map;
			tmp3 = __map_reserved["transform"] != null ? _this10.getReserved("transform") : _this10.h["transform"];
		} else {
			var ul3 = shader.gl.getUniformLocation(shader.pg,"transform");
			var _this11 = shader.map;
			if(__map_reserved["transform"] != null) {
				_this11.setReserved("transform",ul3);
			} else {
				_this11.h["transform"] = ul3;
			}
			tmp3 = ul3;
		}
		if(tmp3 != null) {
			this.mvpMat.mul(this.projMat,this.modelviewMat);
			shader.setMatrix("transform",this.mvpMat.array);
		}
		var tmp4;
		var _this12 = shader.map;
		if(__map_reserved["modelview"] != null ? _this12.existsReserved("modelview") : _this12.h.hasOwnProperty("modelview")) {
			var _this13 = shader.map;
			tmp4 = __map_reserved["modelview"] != null ? _this13.getReserved("modelview") : _this13.h["modelview"];
		} else {
			var ul4 = shader.gl.getUniformLocation(shader.pg,"modelview");
			var _this14 = shader.map;
			if(__map_reserved["modelview"] != null) {
				_this14.setReserved("modelview",ul4);
			} else {
				_this14.h["modelview"] = ul4;
			}
			tmp4 = ul4;
		}
		if(tmp4 != null) {
			shader.setMatrix("modelview",this.modelviewMat.array);
		}
		var tmp5;
		var _this15 = shader.map;
		if(__map_reserved["normalMatrix"] != null ? _this15.existsReserved("normalMatrix") : _this15.h.hasOwnProperty("normalMatrix")) {
			var _this16 = shader.map;
			tmp5 = __map_reserved["normalMatrix"] != null ? _this16.getReserved("normalMatrix") : _this16.h["normalMatrix"];
		} else {
			var ul5 = shader.gl.getUniformLocation(shader.pg,"normalMatrix");
			var _this17 = shader.map;
			if(__map_reserved["normalMatrix"] != null) {
				_this17.setReserved("normalMatrix",ul5);
			} else {
				_this17.h["normalMatrix"] = ul5;
			}
			tmp5 = ul5;
		}
		if(tmp5 != null) {
			this.normalMat.toMat3();
			shader.setMatrix("normalMatrix",this.normalMat.array3);
		}
		if(this.currentTexture != null) {
			shader.setTexture("texture",this.currentTexture);
			var tmp6;
			var _this18 = shader.map;
			if(__map_reserved["texResolution"] != null ? _this18.existsReserved("texResolution") : _this18.h.hasOwnProperty("texResolution")) {
				var _this19 = shader.map;
				tmp6 = __map_reserved["texResolution"] != null ? _this19.getReserved("texResolution") : _this19.h["texResolution"];
			} else {
				var ul6 = shader.gl.getUniformLocation(shader.pg,"texResolution");
				var _this20 = shader.map;
				if(__map_reserved["texResolution"] != null) {
					_this20.setReserved("texResolution",ul6);
				} else {
					_this20.h["texResolution"] = ul6;
				}
				tmp6 = ul6;
			}
			if(tmp6 != null) {
				shader.setFloat("texResolution",this.currentTexture.textureWidth,this.currentTexture.textureHeight);
			}
			var tmp7;
			var _this21 = shader.map;
			if(__map_reserved["texViewport"] != null ? _this21.existsReserved("texViewport") : _this21.h.hasOwnProperty("texViewport")) {
				var _this22 = shader.map;
				tmp7 = __map_reserved["texViewport"] != null ? _this22.getReserved("texViewport") : _this22.h["texViewport"];
			} else {
				var ul7 = shader.gl.getUniformLocation(shader.pg,"texViewport");
				var _this23 = shader.map;
				if(__map_reserved["texViewport"] != null) {
					_this23.setReserved("texViewport",ul7);
				} else {
					_this23.h["texViewport"] = ul7;
				}
				tmp7 = ul7;
			}
			if(tmp7 != null) {
				var x = 0;
				var y = 1 - this.currentTexture.height / this.currentTexture.textureHeight;
				var w = this.currentTexture.width / this.currentTexture.textureWidth;
				var h = this.currentTexture.height / this.currentTexture.textureHeight;
				shader.setFloat("texViewport",x,y,w,h);
			}
		}
		var tmp8;
		var _this24 = shader.map;
		if(__map_reserved["ambient"] != null ? _this24.existsReserved("ambient") : _this24.h.hasOwnProperty("ambient")) {
			var _this25 = shader.map;
			tmp8 = __map_reserved["ambient"] != null ? _this25.getReserved("ambient") : _this25.h["ambient"];
		} else {
			var ul8 = shader.gl.getUniformLocation(shader.pg,"ambient");
			var _this26 = shader.map;
			if(__map_reserved["ambient"] != null) {
				_this26.setReserved("ambient",ul8);
			} else {
				_this26.h["ambient"] = ul8;
			}
			tmp8 = ul8;
		}
		if(tmp8 != null) {
			shader.setFloat("ambient",this.materialAmb);
		}
		var tmp9;
		var _this27 = shader.map;
		if(__map_reserved["diffuse"] != null ? _this27.existsReserved("diffuse") : _this27.h.hasOwnProperty("diffuse")) {
			var _this28 = shader.map;
			tmp9 = __map_reserved["diffuse"] != null ? _this28.getReserved("diffuse") : _this28.h["diffuse"];
		} else {
			var ul9 = shader.gl.getUniformLocation(shader.pg,"diffuse");
			var _this29 = shader.map;
			if(__map_reserved["diffuse"] != null) {
				_this29.setReserved("diffuse",ul9);
			} else {
				_this29.h["diffuse"] = ul9;
			}
			tmp9 = ul9;
		}
		if(tmp9 != null) {
			shader.setFloat("diffuse",this.materialDif);
		}
		var tmp10;
		var _this30 = shader.map;
		if(__map_reserved["specular"] != null ? _this30.existsReserved("specular") : _this30.h.hasOwnProperty("specular")) {
			var _this31 = shader.map;
			tmp10 = __map_reserved["specular"] != null ? _this31.getReserved("specular") : _this31.h["specular"];
		} else {
			var ul10 = shader.gl.getUniformLocation(shader.pg,"specular");
			var _this32 = shader.map;
			if(__map_reserved["specular"] != null) {
				_this32.setReserved("specular",ul10);
			} else {
				_this32.h["specular"] = ul10;
			}
			tmp10 = ul10;
		}
		if(tmp10 != null) {
			shader.setFloat("specular",this.materialSpc);
		}
		var tmp11;
		var _this33 = shader.map;
		if(__map_reserved["shininess"] != null ? _this33.existsReserved("shininess") : _this33.h.hasOwnProperty("shininess")) {
			var _this34 = shader.map;
			tmp11 = __map_reserved["shininess"] != null ? _this34.getReserved("shininess") : _this34.h["shininess"];
		} else {
			var ul11 = shader.gl.getUniformLocation(shader.pg,"shininess");
			var _this35 = shader.map;
			if(__map_reserved["shininess"] != null) {
				_this35.setReserved("shininess",ul11);
			} else {
				_this35.h["shininess"] = ul11;
			}
			tmp11 = ul11;
		}
		if(tmp11 != null) {
			shader.setFloat("shininess",this.materialShn);
		}
		var tmp12;
		var _this36 = shader.map;
		if(__map_reserved["emission"] != null ? _this36.existsReserved("emission") : _this36.h.hasOwnProperty("emission")) {
			var _this37 = shader.map;
			tmp12 = __map_reserved["emission"] != null ? _this37.getReserved("emission") : _this37.h["emission"];
		} else {
			var ul12 = shader.gl.getUniformLocation(shader.pg,"emission");
			var _this38 = shader.map;
			if(__map_reserved["emission"] != null) {
				_this38.setReserved("emission",ul12);
			} else {
				_this38.h["emission"] = ul12;
			}
			tmp12 = ul12;
		}
		if(tmp12 != null) {
			shader.setFloat("emission",this.materialEmi);
		}
		var tmp13;
		var _this39 = shader.map;
		if(__map_reserved["numLights"] != null ? _this39.existsReserved("numLights") : _this39.h.hasOwnProperty("numLights")) {
			var _this40 = shader.map;
			tmp13 = __map_reserved["numLights"] != null ? _this40.getReserved("numLights") : _this40.h["numLights"];
		} else {
			var ul13 = shader.gl.getUniformLocation(shader.pg,"numLights");
			var _this41 = shader.map;
			if(__map_reserved["numLights"] != null) {
				_this41.setReserved("numLights",ul13);
			} else {
				_this41.h["numLights"] = ul13;
			}
			tmp13 = ul13;
		}
		if(tmp13 != null) {
			shader.setInt("numLights",this.numLights);
		}
		var tmp14;
		var _this42 = shader.map;
		if(__map_reserved["lightPositions"] != null ? _this42.existsReserved("lightPositions") : _this42.h.hasOwnProperty("lightPositions")) {
			var _this43 = shader.map;
			tmp14 = __map_reserved["lightPositions"] != null ? _this43.getReserved("lightPositions") : _this43.h["lightPositions"];
		} else {
			var ul14 = shader.gl.getUniformLocation(shader.pg,"lightPositions");
			var _this44 = shader.map;
			if(__map_reserved["lightPositions"] != null) {
				_this44.setReserved("lightPositions",ul14);
			} else {
				_this44.h["lightPositions"] = ul14;
			}
			tmp14 = ul14;
		}
		if(tmp14 != null) {
			var _g1 = 0;
			var _g = this.numLights;
			while(_g1 < _g) {
				var i = _g1++;
				var light = this.lightBuf[i];
				var x1 = light.posX * this.viewMat.array[0] + light.posY * this.viewMat.array[4] + light.posZ * this.viewMat.array[8] + this.viewMat.array[12];
				var y1 = light.posX * this.viewMat.array[1] + light.posY * this.viewMat.array[5] + light.posZ * this.viewMat.array[9] + this.viewMat.array[13];
				var z = light.posX * this.viewMat.array[2] + light.posY * this.viewMat.array[6] + light.posZ * this.viewMat.array[10] + this.viewMat.array[14];
				shader.setFloat("lightPositions[" + i + "]",x1,y1,z,light.posW);
			}
		}
		var tmp15;
		var _this45 = shader.map;
		if(__map_reserved["lightNormals"] != null ? _this45.existsReserved("lightNormals") : _this45.h.hasOwnProperty("lightNormals")) {
			var _this46 = shader.map;
			tmp15 = __map_reserved["lightNormals"] != null ? _this46.getReserved("lightNormals") : _this46.h["lightNormals"];
		} else {
			var ul15 = shader.gl.getUniformLocation(shader.pg,"lightNormals");
			var _this47 = shader.map;
			if(__map_reserved["lightNormals"] != null) {
				_this47.setReserved("lightNormals",ul15);
			} else {
				_this47.h["lightNormals"] = ul15;
			}
			tmp15 = ul15;
		}
		if(tmp15 != null) {
			var _g11 = 0;
			var _g2 = this.numLights;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var light1 = this.lightBuf[i1];
				var x2 = light1.norX * this.viewMat.array[0] + light1.norY * this.viewMat.array[4] + light1.norZ * this.viewMat.array[8];
				var y2 = light1.norX * this.viewMat.array[1] + light1.norY * this.viewMat.array[5] + light1.norZ * this.viewMat.array[9];
				var z1 = light1.norX * this.viewMat.array[2] + light1.norY * this.viewMat.array[6] + light1.norZ * this.viewMat.array[10];
				shader.setFloat("lightNormals[" + i1 + "]",x2,y2,z1);
			}
		}
		var tmp16;
		var _this48 = shader.map;
		if(__map_reserved["lightColors"] != null ? _this48.existsReserved("lightColors") : _this48.h.hasOwnProperty("lightColors")) {
			var _this49 = shader.map;
			tmp16 = __map_reserved["lightColors"] != null ? _this49.getReserved("lightColors") : _this49.h["lightColors"];
		} else {
			var ul16 = shader.gl.getUniformLocation(shader.pg,"lightColors");
			var _this50 = shader.map;
			if(__map_reserved["lightColors"] != null) {
				_this50.setReserved("lightColors",ul16);
			} else {
				_this50.h["lightColors"] = ul16;
			}
			tmp16 = ul16;
		}
		if(tmp16 != null) {
			var _g12 = 0;
			var _g3 = this.numLights;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var light2 = this.lightBuf[i2];
				shader.setFloat("lightColors[" + i2 + "]",light2.r,light2.g,light2.b);
			}
		}
		var _this51 = this.indexBuf;
		_this51.gl.bindBuffer(34963,_this51.buffer);
		_this51.gl.bufferData(34963,new Int16Array(_this51.array.buffer,0,_this51.length),35044);
		_this51.gl.bindBuffer(34963,null);
		var _this52 = this.positionBuf;
		_this52.gl.bindBuffer(34962,_this52.buffer);
		_this52.gl.bufferData(34962,new Float32Array(_this52.array.buffer,0,_this52.length),35044);
		_this52.gl.bindBuffer(34962,null);
		var _this53 = this.colorBuf;
		_this53.gl.bindBuffer(34962,_this53.buffer);
		_this53.gl.bufferData(34962,new Float32Array(_this53.array.buffer,0,_this53.length),35044);
		_this53.gl.bindBuffer(34962,null);
		var _this54 = this.normalBuf;
		_this54.gl.bindBuffer(34962,_this54.buffer);
		_this54.gl.bufferData(34962,new Float32Array(_this54.array.buffer,0,_this54.length),35044);
		_this54.gl.bindBuffer(34962,null);
		var _this55 = this.texCoordBuf;
		_this55.gl.bindBuffer(34962,_this55.buffer);
		_this55.gl.bufferData(34962,new Float32Array(_this55.array.buffer,0,_this55.length),35044);
		_this55.gl.bindBuffer(34962,null);
		var _this56 = this.positionBuf;
		var idx = _this56.gl.getAttribLocation(pg,_this56.name);
		if(idx != -1) {
			_this56.gl.bindBuffer(34962,_this56.buffer);
			_this56.gl.enableVertexAttribArray(idx);
			_this56.gl.vertexAttribPointer(idx,_this56.size,5126,false,0,0);
			_this56.gl.bindBuffer(34962,null);
		}
		var _this57 = this.colorBuf;
		var idx1 = _this57.gl.getAttribLocation(pg,_this57.name);
		if(idx1 != -1) {
			_this57.gl.bindBuffer(34962,_this57.buffer);
			_this57.gl.enableVertexAttribArray(idx1);
			_this57.gl.vertexAttribPointer(idx1,_this57.size,5126,false,0,0);
			_this57.gl.bindBuffer(34962,null);
		}
		var _this58 = this.normalBuf;
		var idx2 = _this58.gl.getAttribLocation(pg,_this58.name);
		if(idx2 != -1) {
			_this58.gl.bindBuffer(34962,_this58.buffer);
			_this58.gl.enableVertexAttribArray(idx2);
			_this58.gl.vertexAttribPointer(idx2,_this58.size,5126,false,0,0);
			_this58.gl.bindBuffer(34962,null);
		}
		var _this59 = this.texCoordBuf;
		var idx3 = _this59.gl.getAttribLocation(pg,_this59.name);
		if(idx3 != -1) {
			_this59.gl.bindBuffer(34962,_this59.buffer);
			_this59.gl.enableVertexAttribArray(idx3);
			_this59.gl.vertexAttribPointer(idx3,_this59.size,5126,false,0,0);
			_this59.gl.bindBuffer(34962,null);
		}
		if(!shader.compiled) {
			throw new Error("shader is not compiled");
		}
		shader.gl.useProgram(shader.pg);
		var texUnit = 0;
		var name = shader.uniforms.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this60 = shader.uniforms;
			var uniform = __map_reserved[name1] != null ? _this60.getReserved(name1) : _this60.h[name1];
			if(uniform.type == 11) {
				uniform.texUnit = texUnit;
				++texUnit;
			}
		}
		var name2 = shader.uniforms.keys();
		while(name2.hasNext()) {
			var name3 = name2.next();
			var _this61 = shader.uniforms;
			var uniform1 = __map_reserved[name3] != null ? _this61.getReserved(name3) : _this61.h[name3];
			var loc;
			var _this62 = shader.map;
			if(__map_reserved[name3] != null ? _this62.existsReserved(name3) : _this62.h.hasOwnProperty(name3)) {
				var _this63 = shader.map;
				loc = __map_reserved[name3] != null ? _this63.getReserved(name3) : _this63.h[name3];
			} else {
				var ul17 = shader.gl.getUniformLocation(shader.pg,name3);
				var _this64 = shader.map;
				if(__map_reserved[name3] != null) {
					_this64.setReserved(name3,ul17);
				} else {
					_this64.h[name3] = ul17;
				}
				loc = ul17;
			}
			var _g4 = uniform1.type;
			switch(_g4) {
			case 0:
				shader.gl.uniform1i(loc,uniform1.i1);
				break;
			case 1:
				shader.gl.uniform2i(loc,uniform1.i1,uniform1.i2);
				break;
			case 2:
				shader.gl.uniform3i(loc,uniform1.i1,uniform1.i2,uniform1.i3);
				break;
			case 3:
				shader.gl.uniform4i(loc,uniform1.i1,uniform1.i2,uniform1.i3,uniform1.i4);
				break;
			case 4:
				shader.gl.uniform1f(loc,uniform1.f1);
				break;
			case 5:
				shader.gl.uniform2f(loc,uniform1.f1,uniform1.f2);
				break;
			case 6:
				shader.gl.uniform3f(loc,uniform1.f1,uniform1.f2,uniform1.f3);
				break;
			case 7:
				shader.gl.uniform4f(loc,uniform1.f1,uniform1.f2,uniform1.f3,uniform1.f4);
				break;
			case 8:
				shader.gl.uniformMatrix2fv(loc,false,uniform1.m2);
				break;
			case 9:
				shader.gl.uniformMatrix3fv(loc,false,uniform1.m3);
				break;
			case 10:
				shader.gl.uniformMatrix4fv(loc,false,uniform1.m4);
				break;
			case 11:
				shader.gl.activeTexture(33984 + uniform1.texUnit);
				shader.gl.bindTexture(3553,uniform1.tex == null ? null : uniform1.tex.texture);
				shader.gl.uniform1i(loc,uniform1.texUnit);
				break;
			}
		}
		shader.gl.activeTexture(33984);
		var _this65 = this.indexBuf;
		var mode = this.shapeMode;
		_this65.gl.bindBuffer(34963,_this65.buffer);
		_this65.gl.drawElements(mode,_this65.length,5123,0);
		_this65.gl.bindBuffer(34963,null);
	}
};
var pot_graphics__$Graphics_Light = function() {
};
pot_graphics__$Graphics_Light.__name__ = true;
var pot_graphics__$Graphics_UniformMatrix = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 16) {
		var i = _g1++;
		_g.push(0);
	}
	this.array = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 9) {
		var i1 = _g2++;
		_g11.push(0);
	}
	this.array3 = _g11;
};
pot_graphics__$Graphics_UniformMatrix.__name__ = true;
pot_graphics__$Graphics_UniformMatrix.prototype = {
	identity: function() {
		this.array[0] = 1;
		this.array[1] = 0;
		this.array[2] = 0;
		this.array[3] = 0;
		this.array[4] = 0;
		this.array[5] = 1;
		this.array[6] = 0;
		this.array[7] = 0;
		this.array[8] = 0;
		this.array[9] = 0;
		this.array[10] = 1;
		this.array[11] = 0;
		this.array[12] = 0;
		this.array[13] = 0;
		this.array[14] = 0;
		this.array[15] = 1;
	}
	,lookAt: function(eyeX,eyeY,eyeZ,atX,atY,atZ,upX,upY,upZ) {
		var zx = eyeX - atX;
		var zy = eyeY - atY;
		var zz = eyeZ - atZ;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = upY * zz - upZ * zy;
		var xy = upZ * zx - upX * zz;
		var xz = upX * zy - upY * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		this.array[0] = xx;
		this.array[1] = yx;
		this.array[2] = zx;
		this.array[3] = 0;
		this.array[4] = xy;
		this.array[5] = yy;
		this.array[6] = zy;
		this.array[7] = 0;
		this.array[8] = xz;
		this.array[9] = yz;
		this.array[10] = zz;
		this.array[11] = 0;
		this.array[12] = -(xx * eyeX + xy * eyeY + xz * eyeZ);
		this.array[13] = -(yx * eyeX + yy * eyeY + yz * eyeZ);
		this.array[14] = -(zx * eyeX + zy * eyeY + zz * eyeZ);
		this.array[15] = 1;
	}
	,perspective: function(fovY,aspect,near,far) {
		var h = 1 / Math.tan(fovY * 0.5);
		var fnf = far / (near - far);
		this.array[0] = h / aspect;
		this.array[1] = 0;
		this.array[2] = 0;
		this.array[3] = 0;
		this.array[4] = 0;
		this.array[5] = h;
		this.array[6] = 0;
		this.array[7] = 0;
		this.array[8] = 0;
		this.array[9] = 0;
		this.array[10] = fnf;
		this.array[11] = -1;
		this.array[12] = 0;
		this.array[13] = 0;
		this.array[14] = near * fnf;
		this.array[15] = 0;
	}
	,ortho: function(width,height,near,far) {
		var nf = 1 / (near - far);
		this.array[0] = 2 / width;
		this.array[1] = 0;
		this.array[2] = 0;
		this.array[3] = 0;
		this.array[4] = 0;
		this.array[5] = 2 / height;
		this.array[6] = 0;
		this.array[7] = 0;
		this.array[8] = 0;
		this.array[9] = 0;
		this.array[10] = nf;
		this.array[11] = 0;
		this.array[12] = 0;
		this.array[13] = 0;
		this.array[14] = near * nf;
		this.array[15] = 1;
	}
	,appendScale: function(sx,sy,sz) {
		this.array[0] *= sx;
		this.array[1] *= sx;
		this.array[2] *= sx;
		this.array[3] *= sx;
		this.array[4] *= sy;
		this.array[5] *= sy;
		this.array[6] *= sy;
		this.array[7] *= sy;
		this.array[8] *= sz;
		this.array[9] *= sz;
		this.array[10] *= sz;
		this.array[11] *= sz;
	}
	,appendRotation: function(rad,ax,ay,az) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = ax * ax * c1 + c;
		var r01 = ax * ay * c1 - az * s;
		var r02 = ax * az * c1 + ay * s;
		var r10 = ay * ax * c1 + az * s;
		var r11 = ay * ay * c1 + c;
		var r12 = ay * az * c1 - ax * s;
		var r20 = az * ax * c1 - ay * s;
		var r21 = az * ay * c1 + ax * s;
		var r22 = az * az * c1 + c;
		var e00 = this.array[0];
		var e10 = this.array[1];
		var e20 = this.array[2];
		var e30 = this.array[3];
		var e01 = this.array[4];
		var e11 = this.array[5];
		var e21 = this.array[6];
		var e31 = this.array[7];
		var e02 = this.array[8];
		var e12 = this.array[9];
		var e22 = this.array[10];
		var e32 = this.array[11];
		var e03 = this.array[12];
		var e13 = this.array[13];
		var e23 = this.array[14];
		var e33 = this.array[15];
		this.array[0] = e00 * r00 + e01 * r10 + e02 * r20;
		this.array[1] = e10 * r00 + e11 * r10 + e12 * r20;
		this.array[2] = e20 * r00 + e21 * r10 + e22 * r20;
		this.array[3] = e30 * r00 + e31 * r10 + e32 * r20;
		this.array[4] = e00 * r01 + e01 * r11 + e02 * r21;
		this.array[5] = e10 * r01 + e11 * r11 + e12 * r21;
		this.array[6] = e20 * r01 + e21 * r11 + e22 * r21;
		this.array[7] = e30 * r01 + e31 * r11 + e32 * r21;
		this.array[8] = e00 * r02 + e01 * r12 + e02 * r22;
		this.array[9] = e10 * r02 + e11 * r12 + e12 * r22;
		this.array[10] = e20 * r02 + e21 * r12 + e22 * r22;
		this.array[11] = e30 * r02 + e31 * r12 + e32 * r22;
		this.array[12] = e03;
		this.array[13] = e13;
		this.array[14] = e23;
		this.array[15] = e33;
	}
	,mul: function(a,b) {
		var a00 = a.array[0];
		var a10 = a.array[1];
		var a20 = a.array[2];
		var a30 = a.array[3];
		var a01 = a.array[4];
		var a11 = a.array[5];
		var a21 = a.array[6];
		var a31 = a.array[7];
		var a02 = a.array[8];
		var a12 = a.array[9];
		var a22 = a.array[10];
		var a32 = a.array[11];
		var a03 = a.array[12];
		var a13 = a.array[13];
		var a23 = a.array[14];
		var a33 = a.array[15];
		var b00 = b.array[0];
		var b10 = b.array[1];
		var b20 = b.array[2];
		var b30 = b.array[3];
		var b01 = b.array[4];
		var b11 = b.array[5];
		var b21 = b.array[6];
		var b31 = b.array[7];
		var b02 = b.array[8];
		var b12 = b.array[9];
		var b22 = b.array[10];
		var b32 = b.array[11];
		var b03 = b.array[12];
		var b13 = b.array[13];
		var b23 = b.array[14];
		var b33 = b.array[15];
		this.array[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		this.array[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		this.array[2] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		this.array[3] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		this.array[4] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		this.array[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		this.array[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		this.array[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		this.array[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		this.array[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		this.array[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		this.array[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		this.array[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		this.array[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		this.array[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		this.array[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
	}
	,transpose: function(a) {
		var e01 = a.array[1];
		var e02 = a.array[2];
		var e03 = a.array[3];
		var e10 = a.array[4];
		var e11 = a.array[5];
		var e12 = a.array[6];
		var e13 = a.array[7];
		var e20 = a.array[8];
		var e21 = a.array[9];
		var e22 = a.array[10];
		var e23 = a.array[11];
		var e30 = a.array[12];
		var e31 = a.array[13];
		var e32 = a.array[14];
		var e33 = a.array[15];
		this.array[0] = a.array[0];
		this.array[1] = e10;
		this.array[2] = e20;
		this.array[3] = e30;
		this.array[4] = e01;
		this.array[5] = e11;
		this.array[6] = e21;
		this.array[7] = e31;
		this.array[8] = e02;
		this.array[9] = e12;
		this.array[10] = e22;
		this.array[11] = e32;
		this.array[12] = e03;
		this.array[13] = e13;
		this.array[14] = e23;
		this.array[15] = e33;
	}
	,inverse: function(a) {
		var e00 = a.array[0];
		var e10 = a.array[1];
		var e20 = a.array[2];
		var e30 = a.array[3];
		var e01 = a.array[4];
		var e11 = a.array[5];
		var e21 = a.array[6];
		var e31 = a.array[7];
		var e02 = a.array[8];
		var e12 = a.array[9];
		var e22 = a.array[10];
		var e32 = a.array[11];
		var e03 = a.array[12];
		var e13 = a.array[13];
		var e23 = a.array[14];
		var e33 = a.array[15];
		var d01_01 = e00 * e11 - e01 * e10;
		var d01_02 = e00 * e12 - e02 * e10;
		var d01_03 = e00 * e13 - e03 * e10;
		var d01_12 = e01 * e12 - e02 * e11;
		var d01_13 = e01 * e13 - e03 * e11;
		var d01_23 = e02 * e13 - e03 * e12;
		var d23_01 = e20 * e31 - e21 * e30;
		var d23_02 = e20 * e32 - e22 * e30;
		var d23_03 = e20 * e33 - e23 * e30;
		var d23_12 = e21 * e32 - e22 * e31;
		var d23_13 = e21 * e33 - e23 * e31;
		var d23_23 = e22 * e33 - e23 * e32;
		var d00 = e11 * d23_23 - e12 * d23_13 + e13 * d23_12;
		var d01 = e10 * d23_23 - e12 * d23_03 + e13 * d23_02;
		var d02 = e10 * d23_13 - e11 * d23_03 + e13 * d23_01;
		var d03 = e10 * d23_12 - e11 * d23_02 + e12 * d23_01;
		var d10 = e01 * d23_23 - e02 * d23_13 + e03 * d23_12;
		var d11 = e00 * d23_23 - e02 * d23_03 + e03 * d23_02;
		var d12 = e00 * d23_13 - e01 * d23_03 + e03 * d23_01;
		var d13 = e00 * d23_12 - e01 * d23_02 + e02 * d23_01;
		var d20 = e31 * d01_23 - e32 * d01_13 + e33 * d01_12;
		var d21 = e30 * d01_23 - e32 * d01_03 + e33 * d01_02;
		var d22 = e30 * d01_13 - e31 * d01_03 + e33 * d01_01;
		var d23 = e30 * d01_12 - e31 * d01_02 + e32 * d01_01;
		var d30 = e21 * d01_23 - e22 * d01_13 + e23 * d01_12;
		var d31 = e20 * d01_23 - e22 * d01_03 + e23 * d01_02;
		var d32 = e20 * d01_13 - e21 * d01_03 + e23 * d01_01;
		var d33 = e20 * d01_12 - e21 * d01_02 + e22 * d01_01;
		var invDet = e00 * d00 - e01 * d01 + e02 * d02 - e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		this.array[0] = d00 * invDet;
		this.array[1] = -d01 * invDet;
		this.array[2] = d02 * invDet;
		this.array[3] = -d03 * invDet;
		this.array[4] = -d10 * invDet;
		this.array[5] = d11 * invDet;
		this.array[6] = -d12 * invDet;
		this.array[7] = d13 * invDet;
		this.array[8] = d20 * invDet;
		this.array[9] = -d21 * invDet;
		this.array[10] = d22 * invDet;
		this.array[11] = -d23 * invDet;
		this.array[12] = -d30 * invDet;
		this.array[13] = d31 * invDet;
		this.array[14] = -d32 * invDet;
		this.array[15] = d33 * invDet;
	}
	,appendTranslation: function(tx,ty,tz) {
		this.array[12] += this.array[0] * tx + this.array[4] * ty + this.array[8] * tz;
		this.array[13] += this.array[1] * tx + this.array[5] * ty + this.array[9] * tz;
		this.array[14] += this.array[2] * tx + this.array[6] * ty + this.array[10] * tz;
		this.array[15] += this.array[3] * tx + this.array[7] * ty + this.array[11] * tz;
	}
	,toMat3: function() {
		this.array3[0] = this.array[0];
		this.array3[1] = this.array[1];
		this.array3[2] = this.array[2];
		this.array3[3] = this.array[4];
		this.array3[4] = this.array[5];
		this.array3[5] = this.array[6];
		this.array3[6] = this.array[8];
		this.array3[7] = this.array[9];
		this.array3[8] = this.array[10];
	}
};
var pot_graphics__$Graphics_VertexBuffer = function(gl,name,size) {
	this.gl = gl;
	this.name = name;
	this.size = size;
	this.array = new Float32Array(64);
	this.length = 0;
	this.buffer = gl.createBuffer();
};
pot_graphics__$Graphics_VertexBuffer.__name__ = true;
var pot_graphics__$Graphics_IndexBuffer = function(gl) {
	this.gl = gl;
	this.array = new Int16Array(512);
	this.length = 0;
	this.buffer = gl.createBuffer();
};
pot_graphics__$Graphics_IndexBuffer.__name__ = true;
var pot_graphics_Shader = function(gl) {
	this.gl = gl;
	this.pg = gl.createProgram();
	this.vs = gl.createShader(35633);
	this.fs = gl.createShader(35632);
	this.map = null;
	this.vSource = null;
	this.fSource = null;
	this.compiled = false;
	this.uniforms = new haxe_ds_StringMap();
};
pot_graphics_Shader.__name__ = true;
pot_graphics_Shader.prototype = {
	setInt: function(name,x,y,z,w) {
		var _this = this.uniforms;
		var uniform = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(uniform == null) {
			uniform = new pot_graphics__$Shader_Uniform();
		}
		uniform.type = 0;
		uniform.i1 = x;
		if(y != null) {
			uniform.type = 1;
			uniform.i2 = y;
		}
		if(z != null) {
			uniform.type = 2;
			uniform.i3 = z;
		}
		if(w != null) {
			uniform.type = 3;
			uniform.i4 = w;
		}
		var _this1 = this.uniforms;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,uniform);
		} else {
			_this1.h[name] = uniform;
		}
	}
	,setFloat: function(name,x,y,z,w) {
		var _this = this.uniforms;
		var uniform = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(uniform == null) {
			uniform = new pot_graphics__$Shader_Uniform();
		}
		uniform.type = 4;
		uniform.f1 = x;
		if(y != null) {
			uniform.type = 5;
			uniform.f2 = y;
		}
		if(z != null) {
			uniform.type = 6;
			uniform.f3 = z;
		}
		if(w != null) {
			uniform.type = 7;
			uniform.f4 = w;
		}
		var _this1 = this.uniforms;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,uniform);
		} else {
			_this1.h[name] = uniform;
		}
	}
	,setMatrix: function(name,mat) {
		var _this = this.uniforms;
		var uniform = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(uniform == null) {
			uniform = new pot_graphics__$Shader_Uniform();
		}
		var _g = mat.length;
		switch(_g) {
		case 4:
			uniform.type = 8;
			if(uniform.m2 == null) {
				uniform.m2 = new Float32Array(4);
			}
			var _g1 = 0;
			while(_g1 < 4) {
				var i = _g1++;
				uniform.m2[i] = mat[i];
			}
			break;
		case 9:
			uniform.type = 9;
			if(uniform.m3 == null) {
				uniform.m3 = new Float32Array(9);
			}
			var _g2 = 0;
			while(_g2 < 9) {
				var i1 = _g2++;
				uniform.m3[i1] = mat[i1];
			}
			break;
		case 16:
			uniform.type = 10;
			if(uniform.m4 == null) {
				uniform.m4 = new Float32Array(16);
			}
			var _g3 = 0;
			while(_g3 < 16) {
				var i2 = _g3++;
				uniform.m4[i2] = mat[i2];
			}
			break;
		default:
			throw new Error("invalid matrix array length: " + mat.length);
		}
		var _this1 = this.uniforms;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,uniform);
		} else {
			_this1.h[name] = uniform;
		}
	}
	,setTexture: function(name,tex) {
		var _this = this.uniforms;
		var uniform = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(uniform == null) {
			uniform = new pot_graphics__$Shader_Uniform();
		}
		uniform.type = 11;
		uniform.tex = tex;
		var _this1 = this.uniforms;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,uniform);
		} else {
			_this1.h[name] = uniform;
		}
	}
	,hasUniform: function(name) {
		var tmp;
		var _this = this.map;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.map;
			tmp = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
		} else {
			var ul = this.gl.getUniformLocation(this.pg,name);
			var _this2 = this.map;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,ul);
			} else {
				_this2.h[name] = ul;
			}
			tmp = ul;
		}
		return tmp != null;
	}
};
var pot_graphics__$Shader_Uniform = function() {
};
pot_graphics__$Shader_Uniform.__name__ = true;
var pot_graphics_Texture = function(gl) {
	this.gl = gl;
	this.texture = null;
	this.texWrap = 33071;
	this.texFilter = 9729;
	this.texture = gl.createTexture();
	this.frameBuffer = gl.createFramebuffer();
	this.depthBuffer = gl.createRenderbuffer();
};
pot_graphics_Texture.__name__ = true;
pot_graphics_Texture.prototype = {
	init: function(width,height,floating) {
		this.width = width;
		this.height = height;
		this.floating = floating;
		var x = width;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		this.textureWidth = x + 1;
		var x1 = height;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		this.textureHeight = x1 + 1;
		this.imageToU = 1 / this.textureWidth;
		this.imageToV = 1 / this.textureHeight;
		this.normalToU = width / this.textureWidth;
		this.normalToV = height / this.textureHeight;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texImage2D(3553,0,6408,this.textureWidth,this.textureHeight,0,6408,floating ? 5126 : 5121,null);
		this.gl.bindTexture(3553,null);
		if(floating) {
			this.pixelBufferFloat = new Float32Array(this.textureWidth * this.textureHeight * 4);
		} else {
			this.pixelBufferByte = new Uint8Array(this.textureWidth * this.textureHeight * 4);
		}
		var filter = this.texFilter;
		this.texFilter = filter;
		this.gl.bindTexture(3553,this.texture);
		switch(filter) {
		case 9728:
			this.gl.texParameteri(3553,10240,9728);
			this.gl.texParameteri(3553,10241,9728);
			break;
		case 9729:
			this.gl.texParameteri(3553,10240,9729);
			this.gl.texParameteri(3553,10241,9729);
			break;
		}
		this.gl.bindTexture(3553,null);
		var wrap = this.texWrap;
		this.texWrap = wrap;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texParameteri(3553,10242,wrap);
		this.gl.texParameteri(3553,10243,wrap);
		this.gl.bindTexture(3553,null);
		this.initFBO();
	}
	,load: function(image,scalingMode,floating) {
		this.floating = floating;
		var imageWidth = image.width;
		var imageHeight = image.height;
		var x = imageWidth;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		this.textureWidth = x + 1;
		var x1 = imageHeight;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		this.textureHeight = x1 + 1;
		var canvas = window.document.createElement("canvas");
		canvas.width = this.textureWidth;
		canvas.height = this.textureHeight;
		var g = canvas.getContext("2d",null);
		g.transform(1,0,0,-1,0,this.textureHeight);
		switch(scalingMode) {
		case 0:
			g.drawImage(image,0,0,imageWidth,imageHeight,0,0,this.textureWidth,this.textureHeight);
			this.width = this.textureWidth;
			this.height = this.textureHeight;
			this.imageToU = 1 / imageWidth;
			this.imageToV = 1 / imageHeight;
			this.normalToU = 1;
			this.normalToV = 1;
			break;
		case 1:
			g.drawImage(image,0,0,imageWidth,imageHeight,0,0,imageWidth,imageHeight);
			g.drawImage(image,imageWidth - 0.5,0,0.5,imageHeight,imageWidth,0,this.textureWidth - imageWidth,imageHeight);
			g.drawImage(image,0,imageHeight - 0.5,imageWidth,0.5,0,imageHeight,imageWidth,this.textureHeight - imageHeight);
			g.drawImage(image,imageWidth - 0.5,imageHeight - 0.5,0.5,0.5,imageWidth,imageHeight,this.textureWidth - imageWidth,this.textureHeight - imageHeight);
			this.width = this.textureWidth;
			this.height = this.textureHeight;
			this.imageToU = 1 / this.textureWidth;
			this.imageToV = 1 / this.textureHeight;
			this.normalToU = imageWidth / this.textureWidth;
			this.normalToV = imageHeight / this.textureHeight;
			break;
		}
		this.gl.bindTexture(3553,this.texture);
		this.gl.texImage2D(3553,0,6408,6408,floating ? 5126 : 5121,canvas);
		this.gl.bindTexture(3553,null);
		if(floating) {
			this.pixelBufferFloat = new Float32Array(this.textureWidth * this.textureHeight * 4);
		} else {
			this.pixelBufferByte = new Uint8Array(this.textureWidth * this.textureHeight * 4);
		}
		var filter = this.texFilter;
		this.texFilter = filter;
		this.gl.bindTexture(3553,this.texture);
		switch(filter) {
		case 9728:
			this.gl.texParameteri(3553,10240,9728);
			this.gl.texParameteri(3553,10241,9728);
			break;
		case 9729:
			this.gl.texParameteri(3553,10240,9729);
			this.gl.texParameteri(3553,10241,9729);
			break;
		}
		this.gl.bindTexture(3553,null);
		var wrap = this.texWrap;
		this.texWrap = wrap;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texParameteri(3553,10242,wrap);
		this.gl.texParameteri(3553,10243,wrap);
		this.gl.bindTexture(3553,null);
		this.initFBO();
	}
	,uploadPixelsFloat: function(xOffset,yOffset,width,height,pixelsRGBA) {
		if(this.texture == null) {
			throw new js__$Boot_HaxeError("not initialized");
		}
		if(!this.floating) {
			throw new js__$Boot_HaxeError("not floating point texture");
		}
		if(pixelsRGBA.length != width * height * 4) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		var srcIdx = 0;
		var dstIdx = width * (height - 1) * 4;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var j = _g3++;
				this.pixelBufferFloat[dstIdx++] = pixelsRGBA[srcIdx++];
				this.pixelBufferFloat[dstIdx++] = pixelsRGBA[srcIdx++];
				this.pixelBufferFloat[dstIdx++] = pixelsRGBA[srcIdx++];
				this.pixelBufferFloat[dstIdx++] = pixelsRGBA[srcIdx++];
			}
			dstIdx -= width << 3;
		}
		this.gl.bindTexture(3553,this.texture);
		this.gl.texSubImage2D(3553,0,xOffset,this.textureHeight - height - yOffset,width,height,6408,5126,this.pixelBufferFloat);
		this.gl.bindTexture(3553,null);
	}
	,uploadPixelsInt: function(xOffset,yOffset,width,height,pixelsInt32) {
		if(this.texture == null) {
			throw new js__$Boot_HaxeError("not initialized");
		}
		if(this.floating) {
			throw new js__$Boot_HaxeError("not int texture");
		}
		if(pixelsInt32.length != width * height) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		var srcIdx = 0;
		var dstIdx = width * (height - 1) * 4;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var j = _g3++;
				var pix = pixelsInt32[srcIdx++];
				var pixA = pix >>> 24;
				var pixR = pix >>> 16 & 255;
				var pixG = pix >>> 8 & 255;
				var pixB = pix & 255;
				this.pixelBufferByte[dstIdx++] = pixR;
				this.pixelBufferByte[dstIdx++] = pixG;
				this.pixelBufferByte[dstIdx++] = pixB;
				this.pixelBufferByte[dstIdx++] = pixA;
			}
			dstIdx -= width << 3;
		}
		this.gl.bindTexture(3553,this.texture);
		this.gl.texSubImage2D(3553,0,xOffset,this.textureHeight - height - yOffset,width,height,6408,5121,this.pixelBufferByte);
		this.gl.bindTexture(3553,null);
	}
	,initFBO: function() {
		this.gl.bindRenderbuffer(36161,this.depthBuffer);
		this.gl.renderbufferStorage(36161,33189,this.textureWidth,this.textureHeight);
		this.gl.bindRenderbuffer(36161,null);
		this.gl.bindFramebuffer(36160,this.frameBuffer);
		this.gl.framebufferRenderbuffer(36160,36096,36161,this.depthBuffer);
		this.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
		this.gl.bindFramebuffer(36160,null);
	}
	,filter: function(filter) {
		this.texFilter = filter;
		this.gl.bindTexture(3553,this.texture);
		switch(filter) {
		case 9728:
			this.gl.texParameteri(3553,10240,9728);
			this.gl.texParameteri(3553,10241,9728);
			break;
		case 9729:
			this.gl.texParameteri(3553,10240,9729);
			this.gl.texParameteri(3553,10241,9729);
			break;
		}
		this.gl.bindTexture(3553,null);
	}
	,wrap: function(wrap) {
		this.texWrap = wrap;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texParameteri(3553,10242,wrap);
		this.gl.texParameteri(3553,10243,wrap);
		this.gl.bindTexture(3553,null);
	}
};
var pot_input_Input = function(canvas) {
	this.mouse = new pot_input_Mouse();
	var this1 = new pot_input_TouchesData();
	this.touches = this1;
	var this2 = new pot_input_KeyboardData();
	this.keyboard = this2;
	this.addEvents(canvas);
};
pot_input_Input.__name__ = true;
pot_input_Input.prototype = {
	addEvents: function(canvas) {
		this.mouse.addEvents(canvas,canvas);
		var this1 = this.touches;
		var canvas1 = canvas;
		var elem = canvas;
		elem.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var touches = e.changedTouches;
			var _g1 = 0;
			var _g = touches.length;
			while(_g1 < _g) {
				var i = _g1++;
				var rawTouch = touches[i];
				var rawId = rawTouch.identifier;
				var touch = this1.getByRawId(rawId,true);
				var x = (rawTouch.clientX - elem.getBoundingClientRect().left) * (canvas1.width / canvas1.clientWidth);
				var y = (rawTouch.clientY - elem.getBoundingClientRect().top) * (canvas1.height / canvas1.clientHeight);
				touch.nx = x;
				touch.ny = y;
				touch.ntouching = true;
				touch.ntouching2 = true;
			}
			return;
		});
		elem.addEventListener("touchmove",function(e1) {
			if(e1.cancelable) {
				e1.preventDefault();
			}
			var touches1 = e1.changedTouches;
			var _g11 = 0;
			var _g2 = touches1.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var rawTouch1 = touches1[i1];
				var rawId1 = rawTouch1.identifier;
				var touch1 = this1.getByRawId(rawId1);
				if(touch1 != null) {
					var x1 = (rawTouch1.clientX - elem.getBoundingClientRect().left) * (canvas1.width / canvas1.clientWidth);
					var y1 = (rawTouch1.clientY - elem.getBoundingClientRect().top) * (canvas1.height / canvas1.clientHeight);
					touch1.nx = x1;
					touch1.ny = y1;
				}
			}
			return;
		});
		var end = function(e2) {
			if(e2.cancelable) {
				e2.preventDefault();
			}
			var touches2 = e2.changedTouches;
			var _g12 = 0;
			var _g3 = touches2.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var rawTouch2 = touches2[i2];
				var rawId2 = rawTouch2.identifier;
				var touch2 = this1.getByRawId(rawId2);
				if(touch2 != null) {
					var x2 = (rawTouch2.clientX - elem.getBoundingClientRect().left) * (canvas1.width / canvas1.clientWidth);
					var y2 = (rawTouch2.clientY - elem.getBoundingClientRect().top) * (canvas1.height / canvas1.clientHeight);
					touch2.nx = x2;
					touch2.ny = y2;
					touch2.ntouching = false;
				}
			}
			return;
		};
		elem.addEventListener("touchend",end);
		elem.addEventListener("touchcancel",end);
		var this2 = this.keyboard;
		var elem1 = window.document.body;
		elem1.addEventListener("keydown",function(e3) {
			var code = e3.keyCode;
			if(code < 112 || code > 135) {
				if(e3.cancelable) {
					e3.preventDefault();
				}
			}
			if(!this2.keys.h.hasOwnProperty(code)) {
				var this3 = this2.keys;
				var value = new pot_input_Key();
				this3.h[code] = value;
			}
			this2.keys.h[code].press();
			return;
		});
		elem1.addEventListener("keyup",function(e4) {
			var code1 = e4.keyCode;
			if(e4.keyCode < 112 || e4.keyCode > 135) {
				if(e4.cancelable) {
					e4.preventDefault();
				}
			}
			if(!this2.keys.h.hasOwnProperty(code1)) {
				var this4 = this2.keys;
				var value1 = new pot_input_Key();
				this4.h[code1] = value1;
			}
			this2.keys.h[code1].release();
			return;
		});
	}
	,update: function() {
		this.mouse.update();
		var this1 = this.touches;
		var i = 0;
		while(i < this1.touches.length) {
			var touch = this1.touches[i];
			if(!touch.ptouching && !touch.touching && !touch.ntouching) {
				HxOverrides.remove(this1.touches,touch);
			} else {
				touch.update();
				++i;
			}
		}
		var i1 = 0;
		var key = this.keyboard.keys.iterator();
		while(key.hasNext()) {
			var key1 = key.next();
			key1.update();
		}
	}
};
var pot_input_InputTools = function() { };
pot_input_InputTools.__name__ = true;
var pot_input_Key = function() {
	this.down = false;
	this.pdown = false;
	this.ndown = false;
	this.ndown2 = false;
	this.ddown = 0;
};
pot_input_Key.__name__ = true;
pot_input_Key.prototype = {
	press: function() {
		this.ndown = true;
		this.ndown2 = true;
	}
	,release: function() {
		this.ndown = false;
	}
	,update: function() {
		this.pdown = this.down;
		this.down = this.ndown || this.ndown2;
		this.ndown2 = false;
		this.ddown = (this.down ? 1 : 0) - (this.pdown ? 1 : 0);
	}
};
var pot_input__$Keyboard_Keyboard_$Impl_$ = {};
pot_input__$Keyboard_Keyboard_$Impl_$.__name__ = true;
pot_input__$Keyboard_Keyboard_$Impl_$._new = function() {
	var this1 = new pot_input_KeyboardData();
	return this1;
};
pot_input__$Keyboard_Keyboard_$Impl_$.get = function(this1,code) {
	if(!this1.keys.h.hasOwnProperty(code)) {
		var this2 = this1.keys;
		var value = new pot_input_Key();
		this2.h[code] = value;
	}
	return this1.keys.h[code];
};
pot_input__$Keyboard_Keyboard_$Impl_$.getNum = function(this1,index) {
	var i = 48 + index;
	if(!this1.keys.h.hasOwnProperty(i)) {
		var this2 = this1.keys;
		var value = new pot_input_Key();
		this2.h[i] = value;
	}
	return this1.keys.h[i];
};
pot_input__$Keyboard_Keyboard_$Impl_$.addEvents = function(this1,canvas,elem) {
	elem.addEventListener("keydown",function(e) {
		var code = e.keyCode;
		if(code < 112 || code > 135) {
			if(e.cancelable) {
				e.preventDefault();
			}
		}
		if(!this1.keys.h.hasOwnProperty(code)) {
			var this2 = this1.keys;
			var value = new pot_input_Key();
			this2.h[code] = value;
		}
		this1.keys.h[code].press();
		return;
	});
	elem.addEventListener("keyup",function(e1) {
		var code1 = e1.keyCode;
		if(e1.keyCode < 112 || e1.keyCode > 135) {
			if(e1.cancelable) {
				e1.preventDefault();
			}
		}
		if(!this1.keys.h.hasOwnProperty(code1)) {
			var this3 = this1.keys;
			var value1 = new pot_input_Key();
			this3.h[code1] = value1;
		}
		this1.keys.h[code1].release();
		return;
	});
};
pot_input__$Keyboard_Keyboard_$Impl_$.update = function(this1) {
	var i = 0;
	var key = this1.keys.iterator();
	while(key.hasNext()) {
		var key1 = key.next();
		key1.update();
	}
};
var pot_input_KeyboardData = function() {
	this.keys = new haxe_ds_IntMap();
};
pot_input_KeyboardData.__name__ = true;
var pot_input_Mouse = function() {
	this.px = 0;
	this.py = 0;
	this.x = 0;
	this.y = 0;
	this.nx = 0;
	this.ny = 0;
	this.dx = 0;
	this.dy = 0;
	this.pleft = false;
	this.pmiddle = false;
	this.pright = false;
	this.left = false;
	this.middle = false;
	this.right = false;
	this.nleft = false;
	this.nmiddle = false;
	this.nright = false;
	this.dleft = 0;
	this.dmiddle = 0;
	this.dright = 0;
};
pot_input_Mouse.__name__ = true;
pot_input_Mouse.prototype = {
	addEvents: function(canvas,elem) {
		var _gthis = this;
		elem.addEventListener("mousedown",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var _g = e.button;
			switch(_g) {
			case 0:
				_gthis.nleft = true;
				_gthis.nleft2 = true;
				break;
			case 1:
				_gthis.nmiddle = true;
				_gthis.nmiddle2 = true;
				break;
			case 2:
				_gthis.nright = true;
				_gthis.nright2 = true;
				break;
			}
			var tmp = e.clientX - elem.getBoundingClientRect().left;
			_gthis.nx = tmp * (canvas.width / canvas.clientWidth);
			var tmp1 = e.clientY - elem.getBoundingClientRect().top;
			return _gthis.ny = tmp1 * (canvas.height / canvas.clientHeight);
		});
		elem.addEventListener("mouseup",function(e1) {
			if(e1.cancelable) {
				e1.preventDefault();
			}
			var _g1 = e1.button;
			switch(_g1) {
			case 0:
				_gthis.nleft = false;
				break;
			case 1:
				_gthis.nmiddle = false;
				break;
			case 2:
				_gthis.nright = false;
				break;
			}
			var tmp2 = e1.clientX - elem.getBoundingClientRect().left;
			_gthis.nx = tmp2 * (canvas.width / canvas.clientWidth);
			var tmp3 = e1.clientY - elem.getBoundingClientRect().top;
			return _gthis.ny = tmp3 * (canvas.height / canvas.clientHeight);
		});
		elem.addEventListener("mousemove",function(e2) {
			var tmp4 = e2.clientX - elem.getBoundingClientRect().left;
			_gthis.nx = tmp4 * (canvas.width / canvas.clientWidth);
			var tmp5 = e2.clientY - elem.getBoundingClientRect().top;
			return _gthis.ny = tmp5 * (canvas.height / canvas.clientHeight);
		});
		elem.addEventListener("contextmenu",function(e3) {
			e3.preventDefault();
			return;
		});
	}
	,update: function() {
		this.px = this.x;
		this.py = this.y;
		this.x = this.nx;
		this.y = this.ny;
		this.dx = this.x - this.px;
		this.dy = this.y - this.py;
		this.pleft = this.left;
		this.pmiddle = this.middle;
		this.pright = this.right;
		this.left = this.nleft || this.nleft2;
		this.middle = this.nmiddle || this.nmiddle2;
		this.right = this.nright || this.nright2;
		this.nleft2 = false;
		this.nmiddle2 = false;
		this.nright2 = false;
		this.dleft = (this.left ? 1 : 0) - (this.pleft ? 1 : 0);
		this.dmiddle = (this.middle ? 1 : 0) - (this.pmiddle ? 1 : 0);
		this.dright = (this.right ? 1 : 0) - (this.pright ? 1 : 0);
	}
};
var pot_input_Touch = function() {
	this.px = 0;
	this.py = 0;
	this.x = 0;
	this.y = 0;
	this.nx = 0;
	this.ny = 0;
	this.dx = 0;
	this.dy = 0;
	this.ptouching = false;
	this.touching = false;
	this.ntouching = false;
	this.ntouching2 = false;
	this.dtouching = 0;
	this.rawId = 0;
};
pot_input_Touch.__name__ = true;
pot_input_Touch.prototype = {
	update: function() {
		this.px = this.x;
		this.py = this.y;
		this.x = this.nx;
		this.y = this.ny;
		this.dx = this.x - this.px;
		this.dy = this.y - this.py;
		this.ptouching = this.touching;
		this.touching = this.ntouching || this.ntouching2;
		this.ntouching2 = false;
		this.dtouching = (this.touching ? 1 : 0) - (this.ptouching ? 1 : 0);
	}
};
var pot_input__$Touches_Touches_$Impl_$ = {};
pot_input__$Touches_Touches_$Impl_$.__name__ = true;
pot_input__$Touches_Touches_$Impl_$._new = function() {
	var this1 = new pot_input_TouchesData();
	return this1;
};
pot_input__$Touches_Touches_$Impl_$.get_length = function(this1) {
	return this1.touches.length;
};
pot_input__$Touches_Touches_$Impl_$.get = function(this1,index) {
	return this1.touches[index];
};
pot_input__$Touches_Touches_$Impl_$.addEvents = function(this1,canvas,elem) {
	elem.addEventListener("touchstart",function(e) {
		if(e.cancelable) {
			e.preventDefault();
		}
		var touches = e.changedTouches;
		var _g1 = 0;
		var _g = touches.length;
		while(_g1 < _g) {
			var i = _g1++;
			var rawTouch = touches[i];
			var rawId = rawTouch.identifier;
			var touch = this1.getByRawId(rawId,true);
			var x = (rawTouch.clientX - elem.getBoundingClientRect().left) * (canvas.width / canvas.clientWidth);
			var y = (rawTouch.clientY - elem.getBoundingClientRect().top) * (canvas.height / canvas.clientHeight);
			touch.nx = x;
			touch.ny = y;
			touch.ntouching = true;
			touch.ntouching2 = true;
		}
		return;
	});
	elem.addEventListener("touchmove",function(e1) {
		if(e1.cancelable) {
			e1.preventDefault();
		}
		var touches1 = e1.changedTouches;
		var _g11 = 0;
		var _g2 = touches1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var rawTouch1 = touches1[i1];
			var rawId1 = rawTouch1.identifier;
			var touch1 = this1.getByRawId(rawId1);
			if(touch1 != null) {
				var x1 = (rawTouch1.clientX - elem.getBoundingClientRect().left) * (canvas.width / canvas.clientWidth);
				var y1 = (rawTouch1.clientY - elem.getBoundingClientRect().top) * (canvas.height / canvas.clientHeight);
				touch1.nx = x1;
				touch1.ny = y1;
			}
		}
		return;
	});
	var end = function(e2) {
		if(e2.cancelable) {
			e2.preventDefault();
		}
		var touches2 = e2.changedTouches;
		var _g12 = 0;
		var _g3 = touches2.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var rawTouch2 = touches2[i2];
			var rawId2 = rawTouch2.identifier;
			var touch2 = this1.getByRawId(rawId2);
			if(touch2 != null) {
				var x2 = (rawTouch2.clientX - elem.getBoundingClientRect().left) * (canvas.width / canvas.clientWidth);
				var y2 = (rawTouch2.clientY - elem.getBoundingClientRect().top) * (canvas.height / canvas.clientHeight);
				touch2.nx = x2;
				touch2.ny = y2;
				touch2.ntouching = false;
			}
		}
		return;
	};
	elem.addEventListener("touchend",end);
	elem.addEventListener("touchcancel",end);
};
pot_input__$Touches_Touches_$Impl_$.update = function(this1) {
	var i = 0;
	while(i < this1.touches.length) {
		var touch = this1.touches[i];
		if(!touch.ptouching && !touch.touching && !touch.ntouching) {
			HxOverrides.remove(this1.touches,touch);
		} else {
			touch.update();
			++i;
		}
	}
};
pot_input__$Touches_Touches_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter(this1.touches);
};
var pot_input_TouchesData = function() {
	this.touches = [];
};
pot_input_TouchesData.__name__ = true;
pot_input_TouchesData.prototype = {
	getByRawId: function(rawId,create) {
		if(create == null) {
			create = false;
		}
		var _g = 0;
		var _g1 = this.touches;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.rawId == rawId) {
				return t;
			}
		}
		if(create) {
			return this.newTouch(rawId);
		} else {
			return null;
		}
	}
	,newTouch: function(rawId) {
		var minId = 0;
		while(true) {
			var tmp = minId;
			var _g = 0;
			var _g1 = this.touches;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(t.id == minId) {
					++minId;
				}
			}
			if(tmp == minId) {
				break;
			}
		}
		var touch = new pot_input_Touch();
		touch.rawId = rawId;
		touch.id = minId;
		this.touches.push(touch);
		return touch;
	}
};
var pot_util_Timer = function(frame) {
	this.frame = frame;
	this.targetSleep = 16.666666666666668;
};
pot_util_Timer.__name__ = true;
pot_util_Timer.prototype = {
	start: function() {
		if(this.running) {
			return;
		}
		this.nextTime = Date.now();
		this.running = true;
		window.setTimeout($bind(this,this.loop),0);
	}
	,stop: function() {
		if(!this.running) {
			return;
		}
		this.running = false;
	}
	,setFrameRate: function(frameRate) {
		this.targetSleep = 1000 / frameRate;
	}
	,loop: function() {
		if(!this.running) {
			return;
		}
		this.frame();
		var currentTime = Date.now();
		this.nextTime += this.targetSleep;
		if(this.nextTime < currentTime + 4) {
			this.nextTime = currentTime + 4;
		}
		var sleep = this.nextTime - currentTime + 0.5 | 0;
		window.setTimeout($bind(this,this.loop),sleep);
	}
	,now: function() {
		return Date.now();
	}
};
var webdl_core_Operation = function(inputs,outputs) {
	this.inputs = inputs.slice(0);
	this.outputs = outputs.slice(0);
	this.edge = new webdl_core_graph_Edge(this);
	this.name = "op";
};
webdl_core_Operation.__name__ = true;
webdl_core_Operation.prototype = {
	run: function() {
	}
	,backwardRun: function() {
		throw new js__$Boot_HaxeError("backward operation is not supported");
	}
	,onAfterRun: function() {
	}
};
var webdl_core_RandUtil = function() { };
webdl_core_RandUtil.__name__ = true;
webdl_core_RandUtil.normal = function(mu,sigma2) {
	if(sigma2 == null) {
		sigma2 = 1;
	}
	if(mu == null) {
		mu = 0;
	}
	return mu + Math.sqrt(-2 * sigma2 * Math.log(Math.random())) * Math.sin(2 * Math.PI * Math.random());
};
webdl_core_RandUtil.uniform = function(min,max) {
	if(max == null) {
		max = 1;
	}
	if(min == null) {
		min = -1;
	}
	return Math.random() * (max - min) + min;
};
webdl_core_RandUtil.normalPdf = function(x,mu,sigma2) {
	return 1 / Math.sqrt(2 * Math.PI * sigma2) * Math.exp(-(x - mu) * (x - mu) / (2 * sigma2));
};
var webdl_core_ShapeInference = function() { };
webdl_core_ShapeInference.__name__ = true;
webdl_core_ShapeInference.inferShapeBinOp = function(a,b) {
	return webdl_core_ShapeInference.broadcast(a,b);
};
webdl_core_ShapeInference.inferShapeMatMul = function(a,b) {
	if(a.length < 2 || b.length < 2) {
		throw new js__$Boot_HaxeError("insufficient ranks");
	}
	if(a.length != b.length) {
		throw new js__$Boot_HaxeError("ranks mismatch");
	}
	var aLast = a.length - 1;
	var bLast = b.length - 1;
	if(a[aLast] != -1 && b[bLast - 1] != -1 && a[aLast] != b[bLast - 1]) {
		throw new js__$Boot_HaxeError("cannot multiply matrices");
	}
	var res = a.slice(0);
	res[aLast - 1] = a[aLast - 1];
	res[bLast] = b[bLast];
	var _g1 = 0;
	var _g = a.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		res[i] = a[i] == -1 ? b[i] : a[i];
	}
	return res;
};
webdl_core_ShapeInference.inferShapeTensorDot = function(a,b,count,axes) {
	if(count == null) {
		count = -1;
	}
	if(count == -1 && axes == null || count != -1 && axes != null) {
		throw new js__$Boot_HaxeError("specify either count or axes");
	}
	var res = [];
	if(count != -1) {
		if(a.length < count || b.length < count) {
			throw new js__$Boot_HaxeError("insufficient ranks");
		}
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var adummySize = a[a.length - count + i];
			var bdummySize = b[i];
			if(adummySize != -1 && bdummySize != -1 && adummySize != bdummySize) {
				throw new js__$Boot_HaxeError("cannot multiply tensors");
			}
		}
		var _g11 = 0;
		var _g2 = a.length - count;
		while(_g11 < _g2) {
			var i1 = _g11++;
			res.push(a[i1]);
		}
		var _g12 = count;
		var _g3 = b.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			res.push(b[i2]);
		}
	} else {
		if(axes.length != 2) {
			throw new js__$Boot_HaxeError("invalid argument");
		}
		if(axes[0].length != axes[1].length) {
			throw new js__$Boot_HaxeError("invalid axes");
		}
		var _g13 = 0;
		var _g4 = axes[0].length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var adummyAxis = axes[0][i3];
			var bdummyAxis = axes[1][i3];
			if(adummyAxis < 0 || adummyAxis >= a.length) {
				throw new js__$Boot_HaxeError("invalid axes");
			}
			if(bdummyAxis < 0 || bdummyAxis >= b.length) {
				throw new js__$Boot_HaxeError("invalid axes");
			}
			var adummySize1 = a[adummyAxis];
			var bdummySize1 = b[bdummyAxis];
			if(adummySize1 != -1 && bdummySize1 != -1 && adummySize1 != bdummySize1) {
				throw new js__$Boot_HaxeError("cannot multiply tensors");
			}
		}
		var _g14 = 0;
		var _g5 = a.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			if(axes[0].indexOf(i4) == -1) {
				res.push(a[i4]);
			}
		}
		var _g15 = 0;
		var _g6 = b.length;
		while(_g15 < _g6) {
			var i5 = _g15++;
			if(axes[1].indexOf(i5) == -1) {
				res.push(b[i5]);
			}
		}
	}
	return res;
};
webdl_core_ShapeInference.inferShapeReduce = function(a,axis,keepDim) {
	if(axis < 0 || axis >= a.length) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var res;
	if(keepDim) {
		res = a.slice(0);
		res[axis] = 1;
		return res;
	}
	res = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i != axis) {
			res.push(a[i]);
		}
	}
	return res;
};
webdl_core_ShapeInference.inferShapesSplit = function(a,axis,sizes) {
	if(axis < 0 || axis >= a.length) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var res = [];
	var sizeSum = 0;
	var _g = 0;
	while(_g < sizes.length) {
		var size = sizes[_g];
		++_g;
		var shape = a.slice(0);
		shape[axis] = size;
		res.push(shape);
		sizeSum += size;
	}
	if(sizeSum != a[axis]) {
		throw new js__$Boot_HaxeError("invalid sizes: sum of the split sizes " + sizeSum + " should equal to the dimension size along the splitting axis " + a[axis]);
	}
	return res;
};
webdl_core_ShapeInference.inferShapeMerge = function(as,axis) {
	if(axis < 0 || axis >= as[0].length) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var res = as[0].slice(0);
	var totalSize = 0;
	var _g = 0;
	while(_g < as.length) {
		var a = as[_g];
		++_g;
		if(a[axis] == -1) {
			totalSize = -1;
			break;
		}
		totalSize += a[axis];
	}
	res[axis] = totalSize;
	return res;
};
webdl_core_ShapeInference.broadcast = function(a,b,aActual,bActual) {
	if(aActual == null != (bActual == null)) {
		throw new js__$Boot_HaxeError("invalid argument");
	}
	if(aActual != null && bActual != null) {
		if(aActual.length == 0) {
			return b.slice(0);
		}
		if(bActual.length == 0) {
			return a.slice(0);
		}
		if(aActual.length != bActual.length) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		var res = [];
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ai = a[i];
			var bi = b[i];
			var aiActual = aActual[i];
			var biActual = bActual[i];
			if(ai == 1) {
				if(bi == 1) {
					res.push(1);
				} else {
					res.push(biActual);
				}
			} else if(bi == 1) {
				res.push(aiActual);
			} else if(aiActual == biActual) {
				res.push(aiActual);
			} else if(aiActual == 1 || biActual == 1) {
				throw new js__$Boot_HaxeError("shapes mismatch; cannot broadcast along an unspecified dimension");
			} else {
				throw new js__$Boot_HaxeError("shapes mismatch");
			}
		}
		return res;
	} else {
		if(a.length == 0) {
			return b.slice(0);
		}
		if(b.length == 0) {
			return a.slice(0);
		}
		if(a.length != b.length) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		var res1 = [];
		var _g11 = 0;
		var _g2 = a.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var ai1 = a[i1];
			var bi1 = b[i1];
			switch(ai1) {
			case -1:
				switch(bi1) {
				case -1:
					var n = bi1;
					res1.push(n);
					break;
				case 1:
					res1.push(-1);
					break;
				default:
					var n1 = bi1;
					res1.push(n1);
				}
				break;
			case 1:
				switch(bi1) {
				case -1:
					res1.push(-1);
					break;
				case 1:
					var n2 = bi1;
					res1.push(n2);
					break;
				default:
					var n3 = bi1;
					res1.push(n3);
				}
				break;
			default:
				switch(bi1) {
				case -1:case 1:
					var n4 = ai1;
					res1.push(n4);
					break;
				default:
					if(ai1 == bi1) {
						res1.push(ai1);
					} else {
						throw new js__$Boot_HaxeError("shapes mismatch");
					}
				}
			}
		}
		return res1;
	}
};
webdl_core_ShapeInference.getBroadcastedAxes = function(dst,a) {
	if(a.length == 0) {
		var _g = [];
		var _g2 = 0;
		var _g1 = dst.length;
		while(_g2 < _g1) {
			var i = _g2++;
			if(dst[i] != 1) {
				_g.push(i);
			}
		}
		return _g;
	}
	var res = [];
	var _g11 = 0;
	var _g3 = a.length;
	while(_g11 < _g3) {
		var i1 = _g11++;
		if(dst[i1] != 1 && a[i1] == 1) {
			res.push(i1);
		}
	}
	return res;
};
var webdl_core_Tensor = function(backend,shape) {
	this.backend = backend;
	this.shape = shape.slice(0);
	this.rank = shape.length;
	if(this.rank > 4) {
		throw new js__$Boot_HaxeError("rank too high");
	}
	this.size = 1;
	var _g1 = 0;
	var _g = this.rank;
	while(_g1 < _g) {
		var i = _g1++;
		if(shape[i] == -1) {
			this.size = -1;
			break;
		}
		this.size *= shape[i];
	}
	this.actualSize = this.size;
	var this1 = this.shape;
	var this2 = new Array(this1.length);
	var r = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
	this.actualShape = r;
	if(this.size != -1) {
		this.data = backend.requestTensorData(this.size);
		this.data.clearValue(0);
		this.data.clearDiff(0);
	}
	this.node = new webdl_core_graph_Node(this);
	this.trainable = false;
	this.shouldBeSaved = false;
	this.doNotDecay = false;
};
webdl_core_Tensor.__name__ = true;
webdl_core_Tensor.prototype = {
	set: function(value) {
		var _g = this.rank;
		switch(_g) {
		case 0:
			this.set0D(value);
			return;
		case 1:
			this.set1D(value);
			return;
		case 2:
			this.set2D(value);
			return;
		case 3:
			this.set3D(value);
			return;
		default:
			this.set4D(value);
			return;
		}
	}
	,set0D: function(value) {
		if(this.rank != 0) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		this.assignShape([]);
		this.data.setValue([value]);
	}
	,set1D: function(value) {
		if(this.rank != 1) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		this.assignShape([value.length]);
		this.sizeCheck();
		this.data.setValue(value);
	}
	,set2D: function(value) {
		if(this.rank != 2) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		this.assignShape([value.length,value[0].length]);
		this.data.setValue(this.flatten(value));
	}
	,set3D: function(value) {
		if(this.rank != 3) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		this.assignShape([value.length,value[0].length,value[0][0].length]);
		this.data.setValue(this.flatten(this.flatten(value)));
	}
	,set4D: function(value) {
		if(this.rank != 4) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		this.assignShape([value.length,value[0].length,value[0][0].length,value[0][0][0].length]);
		this.data.setValue(this.flatten(this.flatten(this.flatten(value))));
	}
	,setArray: function(array) {
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("cannot assign flattened data to a tensor of ambiguous shape");
		}
		if(this.actualSize != array.length) {
			throw new js__$Boot_HaxeError("data sizes mismatch");
		}
		this.data.setValue(array);
	}
	,fill: function(value) {
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("cannot fill a tensor of ambiguous shape");
		}
		this.data.clearValue(value);
	}
	,fillByGenerator: function(valueGen) {
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("cannot fill a tensor of ambiguous shape");
		}
		var tmp = this.data;
		var _g = [];
		var _g2 = 0;
		var _g1 = this.actualSize;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(valueGen());
		}
		tmp.setValue(_g);
	}
	,fillDiff: function(diff) {
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("cannot fill a tensor of ambiguous shape");
		}
		this.data.clearDiff(diff);
	}
	,get: function() {
		var _g = this.rank;
		switch(_g) {
		case 0:
			return this.get0D();
		case 1:
			return this.get1D();
		case 2:
			return this.get2D();
		case 3:
			return this.get3D();
		default:
			return this.get4D();
		}
	}
	,get0D: function() {
		if(this.rank != 0) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("no data assigned");
		}
		return this.reshape0D(this.data.getValue(this.actualSize));
	}
	,get1D: function() {
		if(this.rank != 1) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("no data assigned");
		}
		return this.reshape1D(this.data.getValue(this.actualSize));
	}
	,get2D: function() {
		if(this.rank != 2) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("no data assigned");
		}
		return this.reshape2D(this.data.getValue(this.actualSize));
	}
	,get3D: function() {
		if(this.rank != 3) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("no data assigned");
		}
		return this.reshape3D(this.data.getValue(this.actualSize));
	}
	,get4D: function() {
		if(this.rank != 4) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("no data assigned");
		}
		return this.reshape4D(this.data.getValue(this.actualSize));
	}
	,getArray: function() {
		if(this.actualSize == -1) {
			throw new js__$Boot_HaxeError("no data assigned");
		}
		return this.data.getValue(this.actualSize);
	}
	,print: function() {
		var _g = this.rank;
		switch(_g) {
		case 0:
			var v = this.get0D();
			return "" + v;
		case 1:
			var v1 = this.get1D();
			return "[" + v1.join(", ") + "]";
		case 2:
			var v2 = this.get2D();
			return "[\n" + v2.map(function(a) {
				return "  [" + a.join(", ") + "]";
			}).join(",\n") + "\n]";
		case 3:
			var v3 = this.get3D();
			return "[\n" + v3.map(function(b) {
				return "  [\n" + b.map(function(a1) {
					return "    [" + a1.join(", ") + "]";
				}).join(",\n") + "\n  ]";
			}).join(",\n") + "\n]";
		default:
			var v4 = this.get4D();
			return "[\n" + v4.map(function(c) {
				return "  [\n" + c.map(function(b1) {
					return "    [\n" + b1.map(function(a2) {
						return "      [" + a2.join(", ") + "]";
					}).join(",\n") + "\n    ]";
				}).join(",\n") + "\n  ]";
			}).join(",\n") + "\n]";
		}
	}
	,printDiff: function() {
		var _g = this.rank;
		switch(_g) {
		case 0:
			var v = this.reshape0D(this.data.getDiff(this.actualSize));
			return "" + v;
		case 1:
			var v1 = this.reshape1D(this.data.getDiff(this.actualSize));
			return "[" + v1.join(", ") + "]";
		case 2:
			var v2 = this.reshape2D(this.data.getDiff(this.actualSize));
			return "[\n" + v2.map(function(a) {
				return "  [" + a.join(", ") + "]";
			}).join(",\n") + "\n]";
		case 3:
			var v3 = this.reshape3D(this.data.getDiff(this.actualSize));
			return "[\n" + v3.map(function(b) {
				return "  [\n" + b.map(function(a1) {
					return "    [" + a1.join(", ") + "]";
				}).join(",\n") + "\n  ]";
			}).join(",\n") + "\n]";
		default:
			var v4 = this.reshape4D(this.data.getDiff(this.actualSize));
			return "[\n" + v4.map(function(c) {
				return "  [\n" + c.map(function(b1) {
					return "    [\n" + b1.map(function(a2) {
						return "      [" + a2.join(", ") + "]";
					}).join(",\n") + "\n    ]";
				}).join(",\n") + "\n  ]";
			}).join(",\n") + "\n]";
		}
	}
	,assignShape: function(rhs) {
		if(this.rank != rhs.length) {
			throw new js__$Boot_HaxeError("ranks mismatch");
		}
		var _g1 = 0;
		var _g = this.rank;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.shape[i] != -1 && this.shape[i] != rhs[i]) {
				throw new js__$Boot_HaxeError("dimension size mismatch");
			}
			if(rhs[i] == -1) {
				throw new js__$Boot_HaxeError("no data assigned");
			}
			this.actualShape[i] = rhs[i];
		}
		this.sizeCheck();
	}
	,sizeCheck: function() {
		this.actualSize = 1;
		var _g = 0;
		var _g1 = this.actualShape;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			this.actualSize *= s;
		}
		if(this.data == null || !this.data.isPreferableSize(this.actualSize)) {
			if(this.data != null) {
				this.backend.disposeTensorData(this.data);
			}
			this.data = this.backend.requestTensorData(this.actualSize);
		}
	}
	,flatten: function(array) {
		var flattened = [];
		var _g = 0;
		while(_g < array.length) {
			var a = array[_g];
			++_g;
			if(a.length != array[0].length) {
				throw new js__$Boot_HaxeError("inconsistent array size");
			}
			var _g1 = 0;
			while(_g1 < a.length) {
				var b = a[_g1];
				++_g1;
				flattened.push(b);
			}
		}
		return flattened;
	}
	,reshape0D: function(value) {
		if(this.rank != 0) {
			throw new js__$Boot_HaxeError("!?");
		}
		if(this.actualSize != value.length) {
			throw new js__$Boot_HaxeError("!?");
		}
		return value[0];
	}
	,reshape1D: function(value) {
		if(this.rank != 1) {
			throw new js__$Boot_HaxeError("!?");
		}
		if(this.actualSize != value.length) {
			throw new js__$Boot_HaxeError("!?");
		}
		return value.slice();
	}
	,reshape2D: function(value) {
		if(this.rank != 2) {
			throw new js__$Boot_HaxeError("!?");
		}
		if(this.actualSize != value.length) {
			throw new js__$Boot_HaxeError("!?");
		}
		var idx = 0;
		var _g = [];
		var _g2 = 0;
		var _g1 = this.actualShape[0];
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = this.actualShape[1];
			while(_g5 < _g4) {
				var j = _g5++;
				_g3.push(value[idx++]);
			}
			_g.push(_g3);
		}
		return _g;
	}
	,reshape3D: function(value) {
		if(this.rank != 3) {
			throw new js__$Boot_HaxeError("!?");
		}
		if(this.actualSize != value.length) {
			throw new js__$Boot_HaxeError("!?");
		}
		var idx = 0;
		var _g = [];
		var _g2 = 0;
		var _g1 = this.actualShape[0];
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = this.actualShape[1];
			while(_g5 < _g4) {
				var j = _g5++;
				var _g6 = [];
				var _g8 = 0;
				var _g7 = this.actualShape[2];
				while(_g8 < _g7) {
					var k = _g8++;
					_g6.push(value[idx++]);
				}
				_g3.push(_g6);
			}
			_g.push(_g3);
		}
		return _g;
	}
	,reshape4D: function(value) {
		if(this.rank != 4) {
			throw new js__$Boot_HaxeError("!?");
		}
		if(this.actualSize != value.length) {
			throw new js__$Boot_HaxeError("!?");
		}
		var idx = 0;
		var _g = [];
		var _g2 = 0;
		var _g1 = this.actualShape[0];
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = this.actualShape[1];
			while(_g5 < _g4) {
				var j = _g5++;
				var _g6 = [];
				var _g8 = 0;
				var _g7 = this.actualShape[2];
				while(_g8 < _g7) {
					var k = _g8++;
					var _g9 = [];
					var _g11 = 0;
					var _g10 = this.actualShape[3];
					while(_g11 < _g10) {
						var l = _g11++;
						_g9.push(value[idx++]);
					}
					_g6.push(_g9);
				}
				_g3.push(_g6);
			}
			_g.push(_g3);
		}
		return _g;
	}
};
var webdl_core_TensorData = function() { };
webdl_core_TensorData.__name__ = true;
var webdl_core_WebDL = function() { };
webdl_core_WebDL.__name__ = true;
webdl_core_WebDL.setBackend = function(backend) {
	var _g = backend.toLowerCase();
	var tmp;
	switch(_g) {
	case "cpu":
		tmp = null;
		break;
	case "gpu":
		tmp = new webdl_core_backend_gpu_GpuBackend();
		break;
	default:
		throw new js__$Boot_HaxeError("invalid backend: " + backend);
	}
	webdl_core_WebDL.backend = tmp;
};
webdl_core_WebDL.tensorOfShape = function(shape) {
	var _g = 0;
	while(_g < shape.length) {
		var dimSize = shape[_g];
		++_g;
		if(dimSize != -1 && dimSize <= 0) {
			throw new js__$Boot_HaxeError("all the dimension size must be positive");
		}
	}
	return new webdl_core_Tensor(webdl_core_WebDL.backend,shape);
};
webdl_core_WebDL.tensorOfRank = function(rank) {
	if(rank < 0) {
		throw new js__$Boot_HaxeError("invalid rank");
	}
	var tmp = webdl_core_WebDL.backend;
	var _g = [];
	var _g2 = 0;
	var _g1 = rank;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(-1);
	}
	return new webdl_core_Tensor(tmp,_g);
};
webdl_core_WebDL.tensorOfValue = function(value) {
	if(typeof(value) == "number") {
		var res = webdl_core_WebDL.tensorOfRank(0);
		res.set0D(value);
		return res;
	} else if((value instanceof Array) && value.__enum__ == null) {
		var value1D = value;
		if((value1D[0] instanceof Array) && value1D[0].__enum__ == null) {
			var value2D = value;
			if((value2D[0][0] instanceof Array) && value2D[0][0].__enum__ == null) {
				var value3D = value;
				if((value3D[0][0][0] instanceof Array) && value3D[0][0][0].__enum__ == null) {
					var value4D = value;
					var res1 = webdl_core_WebDL.tensorOfShape([value4D.length,value4D[0].length,value4D[0][0].length,value4D[0][0][0].length]);
					res1.set4D(value4D);
					return res1;
				}
				var res2 = webdl_core_WebDL.tensorOfShape([value3D.length,value3D[0].length,value3D[0][0].length]);
				res2.set3D(value3D);
				return res2;
			}
			var res3 = webdl_core_WebDL.tensorOfShape([value2D.length,value2D[0].length]);
			res3.set2D(value2D);
			return res3;
		}
		var res4 = webdl_core_WebDL.tensorOfShape([value1D.length]);
		res4.set1D(value1D);
		return res4;
	}
	throw new js__$Boot_HaxeError("invalid value");
};
webdl_core_WebDL.tensorLike = function(t) {
	return webdl_core_WebDL.tensorOfShape(t.shape.slice(0));
};
webdl_core_WebDL.add = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeBinOp(a.shape,b.shape));
	webdl_core_WebDL.backend.add(a,b,res);
	return res;
};
webdl_core_WebDL.addConst = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.addConst(a,b,res);
	return res;
};
webdl_core_WebDL.sub = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeBinOp(a.shape,b.shape));
	webdl_core_WebDL.backend.sub(a,b,res);
	return res;
};
webdl_core_WebDL.subConst = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.addConst(a,-b,res);
	return res;
};
webdl_core_WebDL.linComb = function(a,b,aScale,bScale) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeBinOp(a.shape,b.shape));
	webdl_core_WebDL.backend.linComb(a,b,res,aScale,bScale);
	return res;
};
webdl_core_WebDL.mul = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeBinOp(a.shape,b.shape));
	webdl_core_WebDL.backend.mul(a,b,res);
	return res;
};
webdl_core_WebDL.mulConst = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.mulConst(a,b,res);
	return res;
};
webdl_core_WebDL.div = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeBinOp(a.shape,b.shape));
	webdl_core_WebDL.backend.div(a,b,res);
	return res;
};
webdl_core_WebDL.divConst = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.mulConst(a,1 / b,res);
	return res;
};
webdl_core_WebDL.pow = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeBinOp(a.shape,b.shape));
	webdl_core_WebDL.backend.pow(a,b,res);
	return res;
};
webdl_core_WebDL.powConst = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.powConst(a,b,res);
	return res;
};
webdl_core_WebDL.matMul = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeMatMul(a.shape,b.shape));
	webdl_core_WebDL.backend.matMul(a,b,res);
	return res;
};
webdl_core_WebDL.tensorDot = function(a,b,count,axes) {
	if(count == null) {
		count = -1;
	}
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeTensorDot(a.shape,b.shape,count,axes));
	webdl_core_WebDL.backend.tensorDot(a,b,res,count,axes);
	return res;
};
webdl_core_WebDL.abs = function(a) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.abs(a,res);
	return res;
};
webdl_core_WebDL.log = function(a) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.log(a,res);
	return res;
};
webdl_core_WebDL.square = function(a) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.mul(a,a,res);
	return res;
};
webdl_core_WebDL.exp = function(a) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.exp(a,res);
	return res;
};
webdl_core_WebDL.activation = function(a,activation) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.activation(a,res,activation);
	return res;
};
webdl_core_WebDL.biasAdd = function(a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.biasAdd(a,b,res);
	return res;
};
webdl_core_WebDL.reduceSum = function(a,axis,keepDim) {
	if(keepDim == null) {
		keepDim = false;
	}
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeReduce(a.shape,axis,keepDim));
	webdl_core_WebDL.backend.reduceSum(a,res,axis,keepDim);
	return res;
};
webdl_core_WebDL.reduceMean = function(a,axis,keepDim) {
	if(keepDim == null) {
		keepDim = false;
	}
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeReduce(a.shape,axis,keepDim));
	webdl_core_WebDL.backend.reduceMean(a,res,axis,keepDim);
	return res;
};
webdl_core_WebDL.split = function(a,axis,sizes) {
	var shapes = webdl_core_ShapeInference.inferShapesSplit(a.shape,axis,sizes);
	var res = [];
	var _g = 0;
	while(_g < shapes.length) {
		var shape = shapes[_g];
		++_g;
		res.push(new webdl_core_Tensor(webdl_core_WebDL.backend,shape));
	}
	webdl_core_WebDL.backend.split(a,res,axis,sizes);
	return res;
};
webdl_core_WebDL.merge = function(as,axis) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,webdl_core_ShapeInference.inferShapeMerge(as.map(function(t) {
		return t.shape;
	}),axis));
	webdl_core_WebDL.backend.merge(as,res,axis);
	return res;
};
webdl_core_WebDL.gradients = function(y,xs,gradY) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < xs.length) {
		var x = xs[_g1];
		++_g1;
		_g.push(new webdl_core_Tensor(webdl_core_WebDL.backend,x.shape.slice(0)));
	}
	var res = _g;
	webdl_core_WebDL.backend.gradients(y,xs,res,gradY);
	return res;
};
webdl_core_WebDL.assign = function(dst,src) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,src.shape.slice(0));
	webdl_core_WebDL.backend.assign(src,res,dst);
	return res;
};
webdl_core_WebDL.where = function(cond,a,b) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,a.shape.slice(0));
	webdl_core_WebDL.backend.where(cond,a,b,res);
	return res;
};
webdl_core_WebDL.adamUpdate = function(count,t,g,m,v,alpha,beta1,beta2,epsilon,l2Decay) {
	var res = new webdl_core_Tensor(webdl_core_WebDL.backend,[]);
	webdl_core_WebDL.backend.adamUpdate(count,t,g,m,v,alpha,beta1,beta2,epsilon,l2Decay,res);
	return res;
};
webdl_core_WebDL.getTrainableVariables = function(references) {
	return webdl_core_graph_Graph.collectNodesConcerned(references.map(function(t) {
		return t.node;
	})).filter(function(n) {
		return n.tensor.trainable;
	}).map(function(n1) {
		return n1.tensor;
	});
};
webdl_core_WebDL.getTensorsToSave = function(references) {
	return webdl_core_graph_Graph.collectNodesConcerned(references.map(function(t) {
		return t.node;
	})).filter(function(n) {
		return n.tensor.shouldBeSaved;
	}).map(function(n1) {
		return n1.tensor;
	});
};
webdl_core_WebDL.run = function(tensors) {
	webdl_core_graph_Graph.run(tensors.map(function(t) {
		return t.node;
	}));
};
webdl_core_WebDL.exportElements = function(tensors) {
	var res = [];
	var _g = 0;
	while(_g < tensors.length) {
		var t = tensors[_g];
		++_g;
		res = res.concat(t.getArray());
	}
	return res;
};
webdl_core_WebDL.importElements = function(tensors,data) {
	var copy = data.slice();
	var _g = 0;
	while(_g < tensors.length) {
		var t = tensors[_g];
		++_g;
		if(copy.length < t.actualSize) {
			throw new js__$Boot_HaxeError("data size too small");
		}
		if(t.actualSize == -1) {
			throw new js__$Boot_HaxeError("tensor size unspecified");
		}
		t.setArray(copy.splice(0,t.actualSize));
	}
	if(copy.length > 0) {
		throw new js__$Boot_HaxeError("data size too large");
	}
};
var webdl_core_backend_Backend = function() { };
webdl_core_backend_Backend.__name__ = true;
var webdl_core_backend_gpu_GpuArray = function(gl,texSize) {
	this.gl = gl;
	this.texSize = texSize;
	this.maxSize = texSize * texSize;
	this.dataLength = texSize * texSize * 4;
	this.data = new Float32Array(this.dataLength);
	var _g1 = 0;
	var _g = this.dataLength;
	while(_g1 < _g) {
		var i = _g1++;
		this.data[i] = 0;
	}
	this.tex = gl.createTexture();
	gl.bindTexture(3553,this.tex);
	gl.texImage2D(3553,0,6408,texSize,texSize,0,6408,5126,this.data);
	gl.texParameteri(3553,10240,9728);
	gl.texParameteri(3553,10241,9728);
	gl.texParameteri(3553,10242,10497);
	gl.texParameteri(3553,10243,10497);
	gl.bindTexture(3553,null);
	this.dbuf = gl.createRenderbuffer();
	gl.bindRenderbuffer(36161,this.dbuf);
	gl.renderbufferStorage(36161,33189,texSize,texSize);
	gl.bindRenderbuffer(36161,null);
	this.fbuf = gl.createFramebuffer();
	gl.bindFramebuffer(36160,this.fbuf);
	gl.framebufferRenderbuffer(36160,36096,36161,this.dbuf);
	gl.framebufferTexture2D(36160,36064,3553,this.tex,0);
	gl.bindFramebuffer(36160,null);
};
webdl_core_backend_gpu_GpuArray.__name__ = true;
webdl_core_backend_gpu_GpuArray.prototype = {
	downloadPixels: function() {
		this.gl.bindFramebuffer(36160,this.fbuf);
		this.gl.readPixels(0,0,this.texSize,this.texSize,6408,5126,this.data);
		this.gl.bindFramebuffer(36160,null);
	}
	,uploadPixels: function() {
		this.gl.bindTexture(3553,this.tex);
		this.gl.texImage2D(3553,0,6408,this.texSize,this.texSize,0,6408,5126,this.data);
		this.gl.bindTexture(3553,null);
	}
	,setAsDst: function() {
		this.gl.bindFramebuffer(36160,this.fbuf);
		this.gl.viewport(0,0,this.texSize,this.texSize);
	}
	,setAsSrc: function(unif,unit) {
		this.gl.activeTexture(33984 + unit);
		this.gl.bindTexture(3553,this.tex);
		this.gl.activeTexture(33984);
		this.gl.uniform1i(unif,unit);
	}
};
var webdl_core_backend_gpu_GpuAtomicOperation = function(inputs,output,name,shader) {
	this.inputs = inputs;
	this.output = output;
	this.name = name;
	this.shader = shader;
};
webdl_core_backend_gpu_GpuAtomicOperation.__name__ = true;
webdl_core_backend_gpu_GpuAtomicOperation.prototype = {
	bindUniforms: function() {
		this.shader.setDst(this.output);
		var _g1 = 0;
		var _g = this.inputs.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.shader.setSrc(this.inputs[i],i);
		}
	}
	,preDraw: function() {
	}
	,postDraw: function() {
		var outputData = this.output.data;
		outputData.flip();
	}
};
var webdl_core_backend_gpu_GpuBackend = function() {
	var canvas = window.document.createElement("canvas");
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(canvas,null);
	this.gl.getExtension("OES_texture_float");
	this.gl.getExtension("OES_texture_float_linear");
	this.gl.getExtension("WEBGL_color_buffer_float");
	this.vbuf = this.gl.createBuffer();
	this.ibuf = this.gl.createBuffer();
	this.gl.bindBuffer(34962,this.vbuf);
	this.gl.bufferData(34962,new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),35044);
	this.gl.bindBuffer(34962,null);
	this.gl.bindBuffer(34963,this.ibuf);
	this.gl.bufferData(34963,new Int16Array([0,1,2,0,2,3]),35044);
	this.gl.bindBuffer(34963,null);
	this.disposedData = [];
};
webdl_core_backend_gpu_GpuBackend.__name__ = true;
webdl_core_backend_gpu_GpuBackend.__interfaces__ = [webdl_core_backend_Backend];
webdl_core_backend_gpu_GpuBackend.prototype = {
	runAtomicOperation: function(op) {
		op.preDraw();
		var program = op.shader.program;
		this.gl.useProgram(program);
		var posAttrib = this.gl.getAttribLocation(program,"aPos");
		var uvAttrib = this.gl.getAttribLocation(program,"aUv");
		this.gl.bindBuffer(34962,this.vbuf);
		this.gl.enableVertexAttribArray(posAttrib);
		this.gl.vertexAttribPointer(posAttrib,2,5126,false,16,0);
		this.gl.enableVertexAttribArray(uvAttrib);
		this.gl.vertexAttribPointer(uvAttrib,2,5126,false,16,8);
		this.gl.bindBuffer(34962,null);
		op.bindUniforms();
		this.gl.bindBuffer(34963,this.ibuf);
		this.gl.drawElements(4,6,5123,0);
		this.gl.bindBuffer(34963,null);
		this.gl.disableVertexAttribArray(posAttrib);
		this.gl.disableVertexAttribArray(uvAttrib);
		op.postDraw();
	}
	,requestTensorData: function(size) {
		var _g = 0;
		var _g1 = this.disposedData;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.isPreferableSize(size)) {
				HxOverrides.remove(this.disposedData,d);
				return d;
			}
		}
		return new webdl_core_backend_gpu_GpuTensorData(this.gl,size);
	}
	,disposeTensorData: function(data) {
		if(!(data instanceof webdl_core_backend_gpu_GpuTensorData)) {
			throw new js__$Boot_HaxeError("backends mismatch");
		}
		this.disposedData.push(data);
	}
	,add: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuAddOperation(this,a,b,dst);
	}
	,addConst: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuAddConstOperation(this,a,b,dst);
	}
	,sub: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuSubOperation(this,a,b,dst);
	}
	,linComb: function(a,b,dst,aScale,bScale) {
		return new webdl_core_backend_gpu_operation_GpuLinCombOperation(this,a,b,dst,aScale,bScale);
	}
	,mul: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuMulOperation(this,a,b,dst);
	}
	,mulConst: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuMulConstOperation(this,a,b,dst);
	}
	,div: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuDivOperation(this,a,b,dst);
	}
	,pow: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuPowOperation(this,a,b,dst);
	}
	,powConst: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuPowConstOperation(this,a,b,dst);
	}
	,matMul: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuMatMulOperation(this,a,b,dst);
	}
	,tensorDot: function(a,b,dst,count,axes) {
		return new webdl_core_backend_gpu_operation_GpuTensorDotOperation(this,a,b,dst,count,axes);
	}
	,abs: function(a,dst) {
		return new webdl_core_backend_gpu_operation_GpuAbsOperation(this,a,dst);
	}
	,log: function(a,dst) {
		return new webdl_core_backend_gpu_operation_GpuLogOperation(this,a,dst);
	}
	,exp: function(a,dst) {
		return new webdl_core_backend_gpu_operation_GpuExpOperation(this,a,dst);
	}
	,biasAdd: function(a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuBiasAddOperation(this,a,b,dst);
	}
	,activation: function(a,dst,activation) {
		return new webdl_core_backend_gpu_operation_GpuActivationOperation(this,a,dst,activation);
	}
	,reduceSum: function(a,dst,axis,keepDim) {
		return new webdl_core_backend_gpu_operation_GpuReduceSumOperation(this,a,dst,axis,keepDim);
	}
	,reduceMean: function(a,dst,axis,keepDim) {
		return new webdl_core_backend_gpu_operation_GpuReduceMeanOperation(this,a,dst,axis,keepDim);
	}
	,split: function(a,dsts,axis,sizes) {
		return new webdl_core_backend_gpu_operation_GpuSplitOperation(this,a,dsts,axis,sizes);
	}
	,merge: function(as,dst,axis) {
		return new webdl_core_backend_gpu_operation_GpuMergeOperation(this,as,dst,axis);
	}
	,gradients: function(y,xs,dsts,gradY) {
		return new webdl_core_backend_gpu_operation_GpuGradientsOperation(this,y,xs,dsts,gradY);
	}
	,assign: function(a,dummyDst,dst) {
		return new webdl_core_backend_gpu_operation_GpuAssignOperation(this,a,dummyDst,dst);
	}
	,where: function(cond,a,b,dst) {
		return new webdl_core_backend_gpu_operation_GpuWhereOperation(this,cond,a,b,dst);
	}
	,adamUpdate: function(count,t,g,m,v,alpha,beta1,beta2,epsilon,l2Decay,dummyDst) {
		return new webdl_core_backend_gpu_operation_GpuAdamUpdateOperation(this,count,t,g,m,v,alpha,beta1,beta2,epsilon,l2Decay,dummyDst);
	}
};
var webdl_core_backend_gpu_GpuShader = function(gl,numSourceTextures,mode,fragmentSource) {
	this.gl = gl;
	this.vertexShader = gl.createShader(35633);
	this.fragmentShader = gl.createShader(35632);
	this.program = gl.createProgram();
	this.vertexSource = "\n\t\t\tattribute vec2 " + "aPos" + ";\n\t\t\tattribute vec2 " + "aUv" + ";\n\t\t\tvarying vec2 " + "vUv" + ";\n\n\t\t\tvoid main() {\n\t\t\t\tgl_Position = vec4(" + "aPos" + ", 0, 1);\n\t\t\t\t" + "vUv" + " = " + "aUv" + ";\n\t\t\t}\n\t\t";
	this.fragmentSource = fragmentSource;
	this.fragmentSourceHeader = "\n\t\t\tprecision highp float;\n\t\t\tvarying vec2 " + "vUv" + ";\n\n\t\t\t" + this.sourceTextureUniformDefinition(numSourceTextures) + "\n\n\t\t\tuniform sampler2D " + "uDstTex" + ";\n\t\t\tuniform int " + "uDstTexSize" + ";\n\t\t\tuniform float " + "uDstInvTexSize" + ";\n\t\t\tuniform int " + "uDstActualSize" + ";\n\t\t\tuniform ivec4 " + "uDstShape" + ";\n\t\t\tuniform ivec4 " + "uDstStride" + ";\n\n\t\t\tint rem(int a, int b) {\n\t\t\t\tint tmp = a - a / b * b; // a % b\n\t\t\t\ttmp += b;\n\t\t\t\treturn tmp - tmp / b * b; // (a % b + b) % b\n\t\t\t}\n\n\t\t\tstruct elem {\n\t\t\t\tfloat value;\n\t\t\t\tfloat diff;\n\t\t\t};\n\n\t\t\tint index4To1(ivec4 idx4, ivec4 shape) {\n\t\t\t\tint idx1 = idx4.w;\n\t\t\t\tidx1 = idx1 * shape.z + idx4.z;\n\t\t\t\tidx1 = idx1 * shape.y + idx4.y;\n\t\t\t\tidx1 = idx1 * shape.x + idx4.x;\n\t\t\t\treturn idx1;\n\t\t\t}\n\n\t\t\tivec4 index1To4(int idx1, ivec4 shape) {\n\t\t\t\tivec4 idx4 = ivec4(0);\n\t\t\t\tidx4.x = rem(idx1, shape.x); idx1 /= shape.x;\n\t\t\t\tidx4.y = rem(idx1, shape.y); idx1 /= shape.y;\n\t\t\t\tidx4.z = rem(idx1, shape.z); idx1 /= shape.z;\n\t\t\t\tidx4.w = rem(idx1, shape.w);\n\t\t\t\treturn idx4;\n\t\t\t}\n\n\t\t\tint uvToIndex1(vec2 uv, int texSize) {\n\t\t\t\tivec2 pixel = ivec2(floor(uv * float(texSize)));\n\t\t\t\treturn pixel.y * texSize + pixel.x;\n\t\t\t}\n\n\t\t\tvec2 index4ToUv(ivec4 idx4, int texSize, ivec4 shape) {\n\t\t\t\tint idx1 = index4To1(idx4, shape);\n\t\t\t\tivec2 pixel = ivec2(rem(idx1, texSize), idx1 / texSize);\n\t\t\t\treturn (vec2(pixel) + 0.5) / float(texSize);\n\t\t\t}\n\n\t\t\tivec4 addX(ivec4 idx4, int x) {\n\t\t\t\treturn idx4 + ivec4(x, 0, 0, 0);\n\t\t\t}\n\n\t\t\tivec4 addY(ivec4 idx4, int y) {\n\t\t\t\treturn idx4 + ivec4(0, y, 0, 0);\n\t\t\t}\n\n\t\t\tivec4 addZ(ivec4 idx4, int z) {\n\t\t\t\treturn idx4 + ivec4(0, 0, z, 0);\n\t\t\t}\n\n\t\t\tivec4 addW(ivec4 idx4, int w) {\n\t\t\t\treturn idx4 + ivec4(0, 0, 0, w);\n\t\t\t}\n\n\t\t\tivec4 insertX(ivec4 idx4, int x) {\n\t\t\t\treturn ivec4(x, idx4.xyz);\n\t\t\t}\n\n\t\t\tivec4 insertY(ivec4 idx4, int y) {\n\t\t\t\treturn ivec4(idx4.x, y, idx4.yz);\n\t\t\t}\n\n\t\t\tivec4 insertZ(ivec4 idx4, int z) {\n\t\t\t\treturn ivec4(idx4.xy, z, idx4.z);\n\t\t\t}\n\n\t\t\tivec4 insertW(ivec4 idx4, int w) {\n\t\t\t\treturn ivec4(idx4.xyz, w);\n\t\t\t}\n\n\t\t\tivec4 deleteX(ivec4 idx4) {\n\t\t\t\treturn ivec4(idx4.yzw, 0);\n\t\t\t}\n\n\t\t\tivec4 deleteY(ivec4 idx4) {\n\t\t\t\treturn ivec4(idx4.xzw, 0);\n\t\t\t}\n\n\t\t\tivec4 deleteZ(ivec4 idx4) {\n\t\t\t\treturn ivec4(idx4.xyw, 0);\n\t\t\t}\n\n\t\t\tivec4 deleteW(ivec4 idx4) {\n\t\t\t\treturn ivec4(idx4.xyz, 0);\n\t\t\t}\n\n\t\t\tivec4 replaceX(ivec4 idx4, int x) {\n\t\t\t\treturn ivec4(x, idx4.yzw);\n\t\t\t}\n\n\t\t\tivec4 replaceY(ivec4 idx4, int y) {\n\t\t\t\treturn ivec4(idx4.x, y, idx4.zw);\n\t\t\t}\n\n\t\t\tivec4 replaceZ(ivec4 idx4, int z) {\n\t\t\t\treturn ivec4(idx4.xy, z, idx4.w);\n\t\t\t}\n\n\t\t\tivec4 replaceW(ivec4 idx4, int w) {\n\t\t\t\treturn ivec4(idx4.xyz, w);\n\t\t\t}\n\n\t\t\tfloat safePow(float a, float b) {\n\t\t\t\tif (a >= 0.0) {\n\t\t\t\t\treturn pow(a, b);\n\t\t\t\t} else {\n\t\t\t\t\tint intB = int(floor(b + 0.5));\n\t\t\t\t\tint sign = 1 - rem(intB, 2) * 2; // 1 for even, -1 for odd\n\t\t\t\t\treturn pow(abs(a), b) * float(sign);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfloat tanh(float x) {\n\t\t\t\tif (x < 0.0) {\n\t\t\t\t\tfloat epx2 = exp(2.0 * x);\n\t\t\t\t\treturn (epx2 - 1.0) / (epx2 + 1.0);\n\t\t\t\t} else {\n\t\t\t\t\tfloat emx2 = exp(-2.0 * x);\n\t\t\t\t\treturn (1.0 - emx2) / (1.0 + emx2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfloat tanhGrad(float x) {\n\t\t\t\tfloat tanhx = tanh(x);\n\t\t\t\treturn 1.0 - tanhx * tanhx;\n\t\t\t}\n\n\t\t\tfloat sigmoid(float x) {\n\t\t\t\treturn 1.0 / (1.0 + exp(-x));\n\t\t\t}\n\n\t\t\tfloat sigmoidGrad(float x) {\n\t\t\t\tfloat y = sigmoid(x);\n\t\t\t\treturn y * (1.0 - y);\n\t\t\t}\n\n\t\t\tfloat relu(float x) {\n\t\t\t\tif (x < 0.0) return 0.0;\n\t\t\t\treturn x;\n\t\t\t}\n\n\t\t\tfloat reluGrad(float x) {\n\t\t\t\tif (x < 0.0) return 0.0;\n\t\t\t\treturn 1.0;\n\t\t\t}\n\n\t\t\t" + this.sourceSampleDefinition(numSourceTextures) + "\n\t\t";
	var tmp = "\n\t\t\tvoid main() {\n\t\t\t\tint idx1 = uvToIndex1(" + "vUv" + ", " + "uDstTexSize" + ");\n\t\t\t\tif (idx1 >= " + "uDstActualSize" + ") {\n\t\t\t\t\tdiscard;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tivec4 idx4 = index1To4(idx1, " + "uDstShape" + ");\n\t\t\t\tvec4 dst = texture2D(" + "uDstTex" + ", " + "vUv" + ");\n\t\t\t\tfloat result = run(idx4);\n\t\t\t\tgl_FragColor = vec4(";
	var tmp1;
	switch(mode) {
	case 0:
		tmp1 = "result, dst.y, 0, 0";
		break;
	case 1:
		tmp1 = "dst.x, dst.y + result, 0, 0";
		break;
	case 2:
		tmp1 = "dst.x, result, 0, 0";
		break;
	default:
		throw new js__$Boot_HaxeError("invalid shader mode");
	}
	this.fragmentSourceFooter = tmp + tmp1 + ");\n\t\t\t}\n\t\t";
	this.compile();
};
webdl_core_backend_gpu_GpuShader.__name__ = true;
webdl_core_backend_gpu_GpuShader.loopOverDimensions = function(idx1s,idx1Offsets,sourceIndices,components,inside) {
	if(sourceIndices.length > 4) {
		throw new js__$Boot_HaxeError("too many indices");
	}
	if(sourceIndices.length != components.length) {
		throw new js__$Boot_HaxeError("invalid argument");
	}
	var res1 = "";
	var res2 = "";
	var idx1sType = ["int","ivec2","ivec3","ivec4"][sourceIndices.length - 1];
	var numLoops = components[0].length;
	var numIndices = sourceIndices.length;
	if(numLoops == 0) {
		res1 += "" + idx1sType + " " + idx1s + " = " + idx1Offsets + ";\n";
	}
	var _g1 = 0;
	var _g = numLoops;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = [];
		var _g4 = 0;
		var _g3 = numIndices;
		while(_g4 < _g3) {
			var j = _g4++;
			_g2.push(components[j][i]);
		}
		var componentsInLoop = _g2;
		var idx1sInLoop = i == numLoops - 1 ? idx1s : idx1s + i + "_";
		var stridesInLoop = "strides" + i + "_";
		var loopCounter = "i" + i + "_";
		var nInLoop = "n" + i + "_";
		res1 += "int " + nInLoop + " = " + ("uSrcShape" + sourceIndices[0]) + "." + componentsInLoop[0] + ";\n";
		res1 += "" + idx1sType + " " + idx1sInLoop + " = " + idx1Offsets + ";\n";
		var res11 = "" + idx1sType + " " + stridesInLoop + " = " + idx1sType + "(";
		var _g41 = [];
		var _g6 = 0;
		var _g5 = numIndices;
		while(_g6 < _g5) {
			var j1 = _g6++;
			_g41.push("uSrcStride" + sourceIndices[j1] + "." + componentsInLoop[j1]);
		}
		res1 += res11 + _g41.join(", ") + ");\n";
		res1 += "for (int " + loopCounter + " = 0; " + loopCounter + " < " + 1000000 + "; " + loopCounter + "++) {\nif (" + loopCounter + " == " + nInLoop + ") break;\n";
		res2 = "\n}" + res2;
		res2 = "\n" + idx1sInLoop + " += " + stridesInLoop + ";" + res2;
		idx1Offsets = idx1sInLoop;
	}
	return res1 + inside + res2;
};
webdl_core_backend_gpu_GpuShader.loopOverDimensionsBroadcast = function(idx1,idx1Offset,broadcastTargetIndex,inside) {
	var doBroadcast = "doBroadcast";
	var res1 = "bvec4 " + doBroadcast + " = bvec4(ivec4(equal(" + "uDstShape" + ", ivec4(1))) * ivec4(notEqual(" + ("uSrcShape" + broadcastTargetIndex) + ", ivec4(1))));\n";
	var res2 = "";
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var componentInLoop = "xyzw".charAt(i);
		var idx1InLoop = i == 3 ? idx1 : idx1 + i + "_";
		var strideInLoop = "stride" + i + "_";
		var loopCounter = "i" + i + "_";
		var nInLoop = "n" + i + "_";
		res1 += "int " + nInLoop + " = " + doBroadcast + "." + componentInLoop + " ? " + ("uSrcShape" + broadcastTargetIndex) + "." + componentInLoop + " : 1;\n";
		res1 += "int " + idx1InLoop + " = " + idx1Offset + ";\n";
		res1 += "int " + strideInLoop + " = " + ("uSrcStride" + broadcastTargetIndex + "." + componentInLoop) + ";\n";
		res1 += "for (int " + loopCounter + " = 0; " + loopCounter + " < " + 1000000 + "; " + loopCounter + "++) {\nif (" + loopCounter + " == " + nInLoop + ") break;\n";
		res2 = "\n}" + res2;
		res2 = "\n" + idx1InLoop + " += " + strideInLoop + ";" + res2;
		idx1Offset = idx1InLoop;
	}
	return res1 + inside + res2;
};
webdl_core_backend_gpu_GpuShader.prototype = {
	sourceTextureUniformDefinition: function(numSourceTextures) {
		var _g = [];
		var _g2 = 1;
		var _g1 = numSourceTextures + 1;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push("\n\t\t\tuniform sampler2D " + ("uSrcTex" + i) + ";\n\t\t\tuniform int " + ("uSrcTexSize" + i) + ";\n\t\t\tuniform float " + ("uSrcInvTexSize" + i) + ";\n\t\t\tuniform ivec4 " + ("uSrcShape" + i) + ";\n\t\t\tuniform ivec4 " + ("uSrcStride" + i) + ";\n\t\t");
		}
		return _g.join("\n");
	}
	,sourceSampleDefinition: function(numSourceTextures) {
		var _g = [];
		var _g2 = 1;
		var _g1 = numSourceTextures + 1;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push("\n\t\t\telem src" + i + "(ivec4 idx4) {\n\t\t\t\tidx4 *= ivec4(notEqual(" + ("uSrcShape" + i) + ", ivec4(1))); // broadcasting\n\t\t\t\tvec2 uv = index4ToUv(idx4, " + ("uSrcTexSize" + i) + ", " + ("uSrcShape" + i) + ");\n\t\t\t\tvec4 tex = texture2D(" + ("uSrcTex" + i) + ", uv);\n\t\t\t\treturn elem(tex.x, tex.y);\n\t\t\t}\n\t\t\telem src" + i + "(int idx1) {\n\t\t\t\tint pixY = idx1 / " + ("uSrcTexSize" + i) + ";\n\t\t\t\tint pixX = idx1 - pixY * " + ("uSrcTexSize" + i) + ";\n\t\t\t\tvec2 uv = vec2(pixX, pixY) * " + ("uSrcInvTexSize" + i) + ";\n\t\t\t\tvec4 tex = texture2D(" + ("uSrcTex" + i) + ", uv);\n\t\t\t\treturn elem(tex.x, tex.y);\n\t\t\t}\n\t\t");
		}
		return _g.join("\n");
	}
	,compile: function() {
		this.gl.shaderSource(this.vertexShader,this.vertexSource);
		this.gl.compileShader(this.vertexShader);
		if(!this.gl.getShaderParameter(this.vertexShader,35713)) {
			js_Browser.alert(this.gl.getShaderInfoLog(this.vertexShader));
			var lines = this.vertexSource.split("\n");
			var tmp = this.gl.getShaderInfoLog(this.vertexShader) + "\n";
			var _g = [];
			var _g2 = 0;
			var _g1 = lines.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(i + 1 + " | " + lines[i]);
			}
			console.log("src/webdl/core/backend/gpu/GpuShader.hx:269:",tmp + _g.join("\n"));
		}
		var combinedFragmentShaderSource = this.fragmentSourceHeader + this.fragmentSource + this.fragmentSourceFooter;
		this.gl.shaderSource(this.fragmentShader,combinedFragmentShaderSource);
		this.gl.compileShader(this.fragmentShader);
		if(!this.gl.getShaderParameter(this.fragmentShader,35713)) {
			js_Browser.alert(this.gl.getShaderInfoLog(this.fragmentShader));
			var lines1 = combinedFragmentShaderSource.split("\n");
			var tmp1 = this.gl.getShaderInfoLog(this.fragmentShader) + "\n";
			var _g3 = [];
			var _g21 = 0;
			var _g11 = lines1.length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				_g3.push(i1 + 1 + " | " + lines1[i1]);
			}
			console.log("src/webdl/core/backend/gpu/GpuShader.hx:278:",tmp1 + _g3.join("\n"));
		}
		this.gl.attachShader(this.program,this.vertexShader);
		this.gl.attachShader(this.program,this.fragmentShader);
		this.gl.linkProgram(this.program);
		if(!this.gl.getProgramParameter(this.program,35714)) {
			console.log("src/webdl/core/backend/gpu/GpuShader.hx:285:",this.gl.getProgramInfoLog(this.program));
		}
		this.map = new haxe_ds_StringMap();
	}
	,uniform: function(name) {
		var _this = this.map;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.map;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		var unif = this.gl.getUniformLocation(this.program,name);
		var _this2 = this.map;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,unif);
		} else {
			_this2.h[name] = unif;
		}
		return unif;
	}
	,attribute: function(name) {
		return this.gl.getAttribLocation(this.program,name);
	}
	,setSrc: function(t,index) {
		if(!(t.data instanceof webdl_core_backend_gpu_GpuTensorData)) {
			throw new js__$Boot_HaxeError("backends mismatch");
		}
		var gpuData = t.data;
		var src = gpuData.src;
		var shape = t.actualShape;
		var unit = index + 1;
		src.setAsSrc(this.uniform("uSrcTex" + unit),unit);
		var texSize = src.texSize;
		this.gl.uniform1i(this.uniform("uSrcTexSize" + unit),texSize);
		this.gl.uniform1f(this.uniform("uSrcInvTexSize" + unit),1 / texSize);
		var _g = t.rank;
		switch(_g) {
		case 0:
			this.gl.uniform4i(this.uniform("uSrcShape" + unit),1,1,1,1);
			this.gl.uniform4i(this.uniform("uSrcStride" + unit),1,1,1,1);
			break;
		case 1:
			this.gl.uniform4i(this.uniform("uSrcShape" + unit),shape[0],1,1,1);
			this.gl.uniform4i(this.uniform("uSrcStride" + unit),1,shape[0],shape[0],shape[0]);
			break;
		case 2:
			this.gl.uniform4i(this.uniform("uSrcShape" + unit),shape[1],shape[0],1,1);
			this.gl.uniform4i(this.uniform("uSrcStride" + unit),1,shape[1],shape[1] * shape[0],shape[1] * shape[0]);
			break;
		case 3:
			this.gl.uniform4i(this.uniform("uSrcShape" + unit),shape[2],shape[1],shape[0],1);
			this.gl.uniform4i(this.uniform("uSrcStride" + unit),1,shape[2],shape[2] * shape[1],shape[2] * shape[1] * shape[0]);
			break;
		case 4:
			this.gl.uniform4i(this.uniform("uSrcShape" + unit),shape[3],shape[2],shape[1],shape[0]);
			this.gl.uniform4i(this.uniform("uSrcStride" + unit),1,shape[3],shape[3] * shape[2],shape[3] * shape[2] * shape[1]);
			break;
		default:
			throw new js__$Boot_HaxeError("dimension too high");
		}
	}
	,setDst: function(t) {
		if(!(t.data instanceof webdl_core_backend_gpu_GpuTensorData)) {
			throw new js__$Boot_HaxeError("backends mismatch");
		}
		var gpuData = t.data;
		var src = gpuData.src;
		var dst = gpuData.dst;
		var shape = t.actualShape;
		src.setAsSrc(this.uniform("uDstTex"),0);
		dst.setAsDst();
		var texSize = dst.texSize;
		this.gl.uniform1i(this.uniform("uDstTexSize"),texSize);
		this.gl.uniform1f(this.uniform("uDstInvTexSize"),1 / texSize);
		this.gl.uniform1i(this.uniform("uDstActualSize"),t.actualSize);
		var _g = t.rank;
		switch(_g) {
		case 0:
			this.gl.uniform4i(this.uniform("uDstShape"),1,1,1,1);
			this.gl.uniform4i(this.uniform("uDstStride"),1,1,1,1);
			break;
		case 1:
			this.gl.uniform4i(this.uniform("uDstShape"),shape[0],1,1,1);
			this.gl.uniform4i(this.uniform("uDstStride"),1,shape[0],shape[0],shape[0]);
			break;
		case 2:
			this.gl.uniform4i(this.uniform("uDstShape"),shape[1],shape[0],1,1);
			this.gl.uniform4i(this.uniform("uDstStride"),1,shape[1],shape[1] * shape[0],shape[1] * shape[0]);
			break;
		case 3:
			this.gl.uniform4i(this.uniform("uDstShape"),shape[2],shape[1],shape[0],1);
			this.gl.uniform4i(this.uniform("uDstStride"),1,shape[2],shape[2] * shape[1],shape[2] * shape[1] * shape[0]);
			break;
		case 4:
			this.gl.uniform4i(this.uniform("uDstShape"),shape[3],shape[2],shape[1],shape[0]);
			this.gl.uniform4i(this.uniform("uDstStride"),1,shape[3],shape[3] * shape[2],shape[3] * shape[2] * shape[1]);
			break;
		default:
			throw new js__$Boot_HaxeError("dimension too high");
		}
	}
};
var webdl_core_backend_gpu_GpuTensorData = function(gl,requestedSize) {
	this.gl = gl;
	var texSize = 1;
	while(texSize * texSize < requestedSize) texSize *= 2;
	this.maxSize = texSize * texSize;
	this.src = new webdl_core_backend_gpu_GpuArray(gl,texSize);
	this.dst = new webdl_core_backend_gpu_GpuArray(gl,texSize);
};
webdl_core_backend_gpu_GpuTensorData.__name__ = true;
webdl_core_backend_gpu_GpuTensorData.__interfaces__ = [webdl_core_TensorData];
webdl_core_backend_gpu_GpuTensorData.prototype = {
	isPreferableSize: function(size) {
		if(size <= this.maxSize) {
			return size * 4 > this.maxSize;
		} else {
			return false;
		}
	}
	,getValue: function(size) {
		if(size > this.maxSize) {
			throw new js__$Boot_HaxeError("max size exceeded");
		}
		this.src.downloadPixels();
		var value = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this.src.data[i << 2]);
		}
		return value;
	}
	,setValue: function(value) {
		if(value.length > this.maxSize) {
			throw new js__$Boot_HaxeError("max size exceeded");
		}
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.src.data[i << 2] = value[i];
		}
		this.src.uploadPixels();
	}
	,clearValue: function(value) {
		this.gl.bindFramebuffer(36160,this.src.fbuf);
		this.gl.colorMask(true,false,false,false);
		this.gl.clearColor(value,0,0,0);
		this.gl.clear(16384);
		this.gl.colorMask(true,true,true,true);
		this.gl.bindFramebuffer(36160,null);
	}
	,getDiff: function(size) {
		if(size > this.maxSize) {
			throw new js__$Boot_HaxeError("max size exceeded");
		}
		this.src.downloadPixels();
		var diff = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			diff.push(this.src.data[i << 2 | 1]);
		}
		return diff;
	}
	,setDiff: function(diff) {
		if(diff.length > this.maxSize) {
			throw new js__$Boot_HaxeError("max size exceeded");
		}
		var _g1 = 0;
		var _g = diff.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.src.data[i << 2 | 1] = diff[i];
		}
		this.src.uploadPixels();
	}
	,clearDiff: function(diff) {
		this.gl.bindFramebuffer(36160,this.src.fbuf);
		this.gl.colorMask(false,true,false,false);
		this.gl.clearColor(0,diff,0,0);
		this.gl.clear(16384);
		this.gl.colorMask(true,true,true,true);
		this.gl.bindFramebuffer(36160,null);
	}
	,flip: function() {
		var tmp = this.src;
		this.src = this.dst;
		this.dst = tmp;
	}
};
var webdl_core_backend_gpu_ShaderConsts = function() { };
webdl_core_backend_gpu_ShaderConsts.__name__ = true;
var webdl_core_backend_gpu_operation_BroadcastBackpropData = function(src,dst,axes,intermediates,ops,scalar) {
	this.src = src;
	this.dst = dst;
	this.axes = axes;
	this.intermediates = intermediates;
	this.ops = ops;
	this.scalar = scalar;
};
webdl_core_backend_gpu_operation_BroadcastBackpropData.__name__ = true;
var webdl_core_backend_gpu_operation_GpuOperation = function(backend,inputs,outputs) {
	webdl_core_Operation.call(this,inputs,outputs);
	this.backend = backend;
	this.forwardOps = [];
	this.backwardOps = [];
	this.broadcasts = [];
};
webdl_core_backend_gpu_operation_GpuOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuOperation.__super__ = webdl_core_Operation;
webdl_core_backend_gpu_operation_GpuOperation.prototype = $extend(webdl_core_Operation.prototype,{
	shapeEq: function(a,b,shrinkA,shrinkB) {
		if(shrinkB == null) {
			shrinkB = 0;
		}
		if(shrinkA == null) {
			shrinkA = 0;
		}
		var res = true;
		if(a.length - shrinkA != b.length - shrinkB) {
			res = false;
		} else {
			var num = a.length - shrinkA;
			var _g1 = 0;
			var _g = num;
			while(_g1 < _g) {
				var i = _g1++;
				var sizeA = a[i];
				var sizeB = b[i];
				if(sizeA == -1 || sizeB == -1) {
					throw new js__$Boot_HaxeError("no data assigned");
				}
				res = res && sizeA == sizeB;
			}
		}
		if(!res) {
			throw new js__$Boot_HaxeError("shapes mismatch");
		}
	}
	,fop: function(inputs,output,name,fragmentSource) {
		return new webdl_core_backend_gpu_GpuAtomicOperation(inputs,output,name,new webdl_core_backend_gpu_GpuShader(this.backend.gl,inputs.length,0,fragmentSource));
	}
	,bop: function(inputs,output,name,fragmentSource,accumulate) {
		if(accumulate == null) {
			accumulate = true;
		}
		return new webdl_core_backend_gpu_GpuAtomicOperation(inputs,output,name,new webdl_core_backend_gpu_GpuShader(this.backend.gl,inputs.length,accumulate ? 1 : 2,fragmentSource));
	}
	,addBroadcastBackward: function(src,dst,axes) {
		if(axes.length == 0) {
			return src;
		}
		var shape = dst.shape.slice(0);
		var prevTensor = webdl_core_WebDL.tensorOfShape(shape);
		var intermediates = [prevTensor];
		var ops = [];
		var _g1 = 0;
		var _g = axes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var axis = axes[i];
			shape[axis] = 1;
			var nextTensor = i == axes.length - 1 ? src : webdl_core_WebDL.tensorOfShape(shape);
			intermediates.push(nextTensor);
			var axisComp = "xyzw".charAt(dst.rank - 1 - axis);
			ops.push(new webdl_core_backend_gpu_GpuAtomicOperation([prevTensor],nextTensor,"broadcast_backward" + i,new webdl_core_backend_gpu_GpuShader(this.backend.gl,1,nextTensor == src ? 1 : 2,"\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\tint idx1Offset = index4To1(idx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1","idx1Offset",[1],[[axisComp]],"\n\t\t\t\t\t\t\telem a = src1(idx1);\n\t\t\t\t\t\t\tsum += a.diff;\n\t\t\t\t\t\t") + "\n\t\t\t\t\t\treturn sum;\n\t\t\t\t\t}\n\t\t\t\t")));
			prevTensor = nextTensor;
		}
		this.broadcasts.push(new webdl_core_backend_gpu_operation_BroadcastBackpropData(src,dst,axes,intermediates,ops,src.rank == 0));
		return intermediates[0];
	}
	,shapeCheck: function() {
	}
	,broadcastBackwardShapeCheck: function() {
		var _g = 0;
		var _g1 = this.broadcasts;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var dst = b.dst;
			var intermediates = b.intermediates;
			var axes = b.axes;
			var shape = dst.actualShape.slice(0);
			intermediates[0].assignShape(shape);
			intermediates[0].fillDiff(0);
			var _g3 = 1;
			var _g2 = intermediates.length;
			while(_g3 < _g2) {
				var j = _g3++;
				shape[axes[j - 1]] = 1;
				if(j == intermediates.length - 1 && b.scalar) {
					intermediates[j].assignShape([]);
				} else {
					intermediates[j].assignShape(shape);
				}
			}
		}
	}
	,run: function() {
		this.shapeCheck();
		var _g = 0;
		var _g1 = this.forwardOps;
		while(_g < _g1.length) {
			var forwardOp = _g1[_g];
			++_g;
			this.backend.runAtomicOperation(forwardOp);
		}
	}
	,backwardRun: function() {
		this.broadcastBackwardShapeCheck();
		var _g = 0;
		var _g1 = this.backwardOps;
		while(_g < _g1.length) {
			var backwardOp = _g1[_g];
			++_g;
			this.backend.runAtomicOperation(backwardOp);
		}
		var _g2 = 0;
		var _g11 = this.broadcasts;
		while(_g2 < _g11.length) {
			var b = _g11[_g2];
			++_g2;
			var _g21 = 0;
			var _g3 = b.ops;
			while(_g21 < _g3.length) {
				var op = _g3[_g21];
				++_g21;
				this.backend.runAtomicOperation(op);
			}
		}
	}
});
var webdl_core_backend_gpu_operation_GpuAbsOperation = function(backend,a,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"abs_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn abs(a.value);\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst,a],a,"abs_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\tif (a.value < 0.0) {\n\t\t\t\t\t\treturn -dst.diff;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn dst.diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuAbsOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuAbsOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuAbsOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuActivationOperation = function(backend,a,dst,activation) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	var activForward;
	switch(activation) {
	case 0:
		activForward = "a.value";
		break;
	case 1:
		activForward = "tanh(a.value)";
		break;
	case 2:
		activForward = "sigmoid(a.value)";
		break;
	case 3:
		activForward = "relu(a.value)";
		break;
	}
	var activBackward;
	switch(activation) {
	case 0:
		activBackward = "1.0";
		break;
	case 1:
		activBackward = "tanhGrad(a.value)";
		break;
	case 2:
		activBackward = "sigmoidGrad(a.value)";
		break;
	case 3:
		activBackward = "reluGrad(a.value)";
		break;
	}
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"activation_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn " + activForward + ";\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst,a],a,"activation_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\treturn dst.diff * " + activBackward + ";\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuActivationOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuActivationOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuActivationOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuAdamUpdateOperation = function(backend,count,t,g,m,v,alpha,beta1,beta2,epsilon,l2Decay,dummyDst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[count,t,g,m,v,alpha,beta1,beta2,epsilon,l2Decay],[dummyDst]);
	this.count = count;
	this.t = t;
	this.g = g;
	this.m = m;
	this.v = v;
	this.alpha = alpha;
	this.beta1 = beta1;
	this.beta2 = beta2;
	this.epsilon = epsilon;
	this.l2Decay = l2Decay;
	this.forwardOps = [this.fop([g,m,beta1],m,"adam_update_m","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tfloat g = src1(idx4).value;\n\t\t\t\t\tfloat m = src2(idx4).value;\n\t\t\t\t\tfloat beta1 = src3(idx4).value;\n\t\t\t\t\treturn beta1 * m + (1.0 - beta1) * g;\n\t\t\t\t}\n\t\t\t"),this.fop([g,v,beta2],v,"adam_update_v","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tfloat g = src1(idx4).value;\n\t\t\t\t\tfloat v = src2(idx4).value;\n\t\t\t\t\tfloat beta2 = src3(idx4).value;\n\t\t\t\t\treturn beta2 * v + (1.0 - beta2) * g * g;\n\t\t\t\t}\n\t\t\t"),this.fop([t,count,m,v,alpha,beta1,beta2,epsilon,l2Decay],t,"adam_update_t","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tfloat t       = src1(idx4).value;\n\t\t\t\t\tfloat count   = src2(idx4).value;\n\t\t\t\t\tfloat m       = src3(idx4).value;\n\t\t\t\t\tfloat v       = src4(idx4).value;\n\t\t\t\t\tfloat alpha   = src5(idx4).value;\n\t\t\t\t\tfloat beta1   = src6(idx4).value;\n\t\t\t\t\tfloat beta2   = src7(idx4).value;\n\t\t\t\t\tfloat epsilon = src8(idx4).value;\n\t\t\t\t\tfloat l2Decay = src9(idx4).value;\n\t\t\t\t\tfloat mHat = m / (1.0 - pow(beta1, count));\n\t\t\t\t\tfloat vHat = v / (1.0 - pow(beta2, count));\n\t\t\t\t\treturn t - alpha * (mHat / (sqrt(vHat) + epsilon) + l2Decay * t);\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [];
};
webdl_core_backend_gpu_operation_GpuAdamUpdateOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuAdamUpdateOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuAdamUpdateOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.shapeEq(this.t.actualShape,this.g.actualShape);
		this.m.assignShape(this.t.actualShape);
		this.v.assignShape(this.t.actualShape);
		var this1 = new Array(0);
		var scalarShape = this1;
		this.shapeEq(this.alpha.actualShape,scalarShape);
		this.shapeEq(this.beta1.actualShape,scalarShape);
		this.shapeEq(this.beta2.actualShape,scalarShape);
		this.shapeEq(this.epsilon.actualShape,scalarShape);
		this.shapeEq(this.l2Decay.actualShape,scalarShape);
	}
	,backwardRun: function() {
		throw new js__$Boot_HaxeError("differentiation of adam update is not supported");
	}
});
var webdl_core_backend_gpu_operation_GpuAddConstOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"addconst_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn a.value + float(" + b + ");\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst],a,"addconst_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuAddConstOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuAddConstOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuAddConstOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuAddOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"add_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn a.value + b.value;\n\t\t\t\t}\n\t\t\t")];
	var broadcastedA = this.addBroadcastBackward(a,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,a.shape));
	var broadcastedB = this.addBroadcastBackward(b,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,b.shape));
	this.backwardOps = [this.bop([dst],broadcastedA,"add_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff;\n\t\t\t\t}\n\t\t\t"),this.bop([dst],broadcastedB,"add_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuAddOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuAddOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuAddOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(webdl_core_ShapeInference.broadcast(this.a.shape,this.b.shape,this.a.actualShape,this.b.actualShape));
	}
});
var webdl_core_backend_gpu_operation_GpuAssignOperation = function(backend,a,dummyDst,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dummyDst]);
	this.a = a;
	this.dummyDst = dummyDst;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dummyDst,"assign_forward_dummy","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn a.value;\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dummyDst],a,"assign_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff;\n\t\t\t\t}\n\t\t\t")];
	this.assignOp = this.fop([a],dst,"assign_forward","\n\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\telem a = src1(idx4);\n\t\t\t\treturn a.value;\n\t\t\t}\n\t\t");
};
webdl_core_backend_gpu_operation_GpuAssignOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuAssignOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuAssignOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	run: function() {
		this.shapeCheck();
		if(!this.assignFast(this.a,this.dummyDst)) {
			var _g = 0;
			var _g1 = this.forwardOps;
			while(_g < _g1.length) {
				var forwardOp = _g1[_g];
				++_g;
				this.backend.runAtomicOperation(forwardOp);
			}
		}
	}
	,backwardRun: function() {
		if(!this.assignFast(this.dummyDst,this.a)) {
			webdl_core_backend_gpu_operation_GpuOperation.prototype.backwardRun.call(this);
		}
	}
	,shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
		this.dummyDst.assignShape(this.a.actualShape);
	}
	,onAfterRun: function() {
		if(!this.assignFast(this.a,this.dst)) {
			this.backend.runAtomicOperation(this.assignOp);
		}
	}
	,assignFast: function(src,dst) {
		var srcData = src.data;
		var dstData = dst.data;
		if(srcData.src.texSize != dstData.src.texSize) {
			return false;
		}
		var size = srcData.src.texSize;
		var gl = this.backend.gl;
		gl.bindFramebuffer(36160,srcData.src.fbuf);
		gl.bindTexture(3553,dstData.src.tex);
		gl.copyTexSubImage2D(3553,0,0,0,0,0,size,size);
		gl.bindTexture(3553,null);
		gl.bindFramebuffer(36160,null);
		return true;
	}
});
var webdl_core_backend_gpu_operation_GpuBiasAddOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"biasadd_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(ivec4(idx4.x, 0, 0, 0));\n\t\t\t\t\treturn a.value + b.value;\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst],a,"biasadd_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff;\n\t\t\t\t}\n\t\t\t"),this.bop([dst],b,"biasadd_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t// sum up all the higher dimensions in dst\n\t\t\t\t\tidx4.yzw = ivec3(0);\n\t\t\t\t\tint idx1Offset = index4To1(idx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1","idx1Offset",[1],[["y","z","w"]],"\n\t\t\t\t\t\telem dst = src1(idx1);\n\t\t\t\t\t\tsum += dst.diff;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuBiasAddOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuBiasAddOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuBiasAddOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		if(this.a.actualShape[this.a.rank - 1] != this.b.actualShape[this.b.rank - 1]) {
			throw new js__$Boot_HaxeError("dimensions mismatch");
		}
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuDivOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"div_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn a.value / b.value;\n\t\t\t\t}\n\t\t\t")];
	var broadcastedA = this.addBroadcastBackward(a,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,a.shape));
	var broadcastedB = this.addBroadcastBackward(b,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,b.shape));
	this.backwardOps = [this.bop([dst,b],broadcastedA,"div_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn dst.diff / b.value;\n\t\t\t\t}\n\t\t\t"),this.bop([dst,a,b],broadcastedB,"div_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\telem b = src3(idx4);\n\t\t\t\t\treturn -dst.diff * a.value / (b.value * b.value);\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuDivOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuDivOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuDivOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(webdl_core_ShapeInference.broadcast(this.a.shape,this.b.shape,this.a.actualShape,this.b.actualShape));
	}
});
var webdl_core_backend_gpu_operation_GpuExpOperation = function(backend,a,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"exp_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn exp(a.value);\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst],a,"exp_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff * dst.value;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuExpOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuExpOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuExpOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuGradientsOperation = function(backend,y,xs,dsts,gradY) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,xs.concat(gradY == null ? [y] : [y,gradY]),dsts);
	this.y = y;
	this.xs = xs;
	this.dsts = dsts;
	this.gradY = gradY;
	if(xs.length != dsts.length) {
		throw new js__$Boot_HaxeError("invalid argument");
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = xs.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(this.fop([xs[i]],dsts[i],"gradient_forward_" + i,"\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn a.diff;\n\t\t\t\t}\n\t\t\t"));
	}
	this.forwardOps = _g;
	this.backwardOps = gradY == null ? [] : [this.bop([gradY],y,"gradient_init","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem gradY = src1(idx4);\n\t\t\t\t\treturn gradY.value;\n\t\t\t\t}\n\t\t\t",false)];
};
webdl_core_backend_gpu_operation_GpuGradientsOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuGradientsOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuGradientsOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	run: function() {
		if(this.gradY == null) {
			this.y.fillDiff(1.0);
		} else {
			webdl_core_backend_gpu_operation_GpuOperation.prototype.backwardRun.call(this);
		}
		webdl_core_graph_Graph.backprop(this.y.node);
		webdl_core_backend_gpu_operation_GpuOperation.prototype.run.call(this);
	}
	,backwardRun: function() {
		throw new js__$Boot_HaxeError("gradient operation is not differentiable");
	}
	,shapeCheck: function() {
		var _g1 = 0;
		var _g = this.dsts.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.dsts[i].assignShape(this.xs[i].actualShape);
		}
	}
});
var webdl_core_backend_gpu_operation_GpuLinCombOperation = function(backend,a,b,dst,aScale,bScale) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"lincomb_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn a.value * float(" + aScale + ") + b.value * float(" + bScale + ");\n\t\t\t\t}\n\t\t\t")];
	var broadcastedA = this.addBroadcastBackward(a,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,a.shape));
	var broadcastedB = this.addBroadcastBackward(b,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,b.shape));
	this.backwardOps = [this.bop([dst],broadcastedA,"lincomb_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff * float(" + aScale + ");\n\t\t\t\t}\n\t\t\t"),this.bop([dst],broadcastedB,"lincomb_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff * float(" + bScale + ");\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuLinCombOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuLinCombOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuLinCombOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(webdl_core_ShapeInference.broadcast(this.a.shape,this.b.shape,this.a.actualShape,this.b.actualShape));
	}
});
var webdl_core_backend_gpu_operation_GpuLogOperation = function(backend,a,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"log_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn log(a.value);\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst,a],a,"log_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\treturn dst.diff / a.value;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuLogOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuLogOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuLogOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuMatMulOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"matmul_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tivec4 aIdx4 = replaceX(idx4, 0);\n\t\t\t\t\tivec4 bIdx4 = replaceY(idx4, 0);\n\n\t\t\t\t\tint aIdx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tint bIdx1Offset = index4To1(bIdx4, " + ("uSrcShape" + "2") + ");\n\n\t\t\t\t\tivec2 idx1Offsets = ivec2(aIdx1Offset, bIdx1Offset);\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1s","idx1Offsets",[1,2],[["x"],["y"]],"\n\t\t\t\t\t\telem a = src1(idx1s.x);\n\t\t\t\t\t\telem b = src2(idx1s.y);\n\t\t\t\t\t\tsum += a.value * b.value;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst,b],a,"matmul_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tivec4 dstIdx4 = ivec4(0, idx4.yzw);\n\t\t\t\t\tivec4 bIdx4 = ivec4(0, idx4.xzw);\n\n\t\t\t\t\tint dstIdx1Offset = index4To1(dstIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tint bIdx1Offset = index4To1(bIdx4, " + ("uSrcShape" + "2") + ");\n\n\t\t\t\t\tivec2 idx1Offsets = ivec2(dstIdx1Offset, bIdx1Offset);\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1s","idx1Offsets",[1,2],[["x"],["x"]],"\n\t\t\t\t\t\telem dst = src1(idx1s.x);\n\t\t\t\t\t\telem b = src2(idx1s.y);\n\t\t\t\t\t\tsum += dst.diff * b.value;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t"),this.bop([dst,a],b,"matmul_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tivec4 dstIdx4 = ivec4(idx4.x, 0, idx4.zw);\n\t\t\t\t\tivec4 aIdx4 = ivec4(idx4.y, 0, idx4.zw);\n\n\t\t\t\t\tint dstIdx1Offset = index4To1(dstIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tint aIdx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "2") + ");\n\n\t\t\t\t\tivec2 idx1Offsets = ivec2(dstIdx1Offset, aIdx1Offset);\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1s","idx1Offsets",[1,2],[["y"],["y"]],"\n\t\t\t\t\t\telem dst = src1(idx1s.x);\n\t\t\t\t\t\telem a = src2(idx1s.y);\n\t\t\t\t\t\tsum += dst.diff * a.value;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuMatMulOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuMatMulOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuMatMulOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		var aLast = this.a.rank - 1;
		var bLast = this.b.rank - 1;
		this.shapeEq(this.a.actualShape,this.b.actualShape,2,2);
		if(this.a.actualShape[aLast] != this.b.actualShape[bLast - 1]) {
			throw new js__$Boot_HaxeError("cannot multiply matrices");
		}
		var dstShape = this.a.actualShape.slice(0);
		dstShape[bLast] = this.b.actualShape[bLast];
		this.dst.assignShape(dstShape);
	}
});
var webdl_core_backend_gpu_operation_GpuMergeOperation = function(backend,as,dst,axis) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,as,[dst]);
	this.as = as;
	this.dst = dst;
	this.axis = axis;
	if(axis < 0 || axis >= dst.rank) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var axisComp = "xyzw".charAt(dst.rank - 1 - axis);
	var axisCompUpper = axisComp.toUpperCase();
	var offset = "0";
	var offsets = [];
	var _g1 = 0;
	var _g = as.length;
	while(_g1 < _g) {
		var i = _g1++;
		offsets.push(offset);
		offset += " + " + "uSrcShape" + (i + 1) + "." + axisComp;
	}
	offsets.push(offset);
	offsets = offsets.map(function(s) {
		return "(" + s + ")";
	});
	var tmp = "\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tint idx = idx4." + axisComp + ";\n\t\t\t\t";
	var _g2 = [];
	var _g21 = 0;
	var _g11 = as.length;
	while(_g21 < _g11) {
		var i1 = _g21++;
		_g2.push("\n\t\t\t\t\t\tif (idx < " + offsets[i1 + 1] + ") {\n\t\t\t\t\t\t\telem a = src" + (i1 + 1) + "(add" + axisCompUpper + "(idx4, -" + offsets[i1] + "));\n\t\t\t\t\t\t\treturn a.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t");
	}
	this.forwardOps = [this.fop(as,dst,"merge_forward",tmp + _g2.join("\n") + "\n\t\t\t\t\treturn 0.0;\n\t\t\t\t}\n\t\t\t")];
	var _g12 = [];
	var _g3 = 0;
	var _g22 = as.length;
	while(_g3 < _g22) {
		var i2 = _g3++;
		_g12.push(this.bop(as.concat([dst]),as[i2],"merge_backward_" + i2,"\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\telem dst = src" + (as.length + 1) + "(add" + axisCompUpper + "(idx4, " + offsets[i2] + "));\n\t\t\t\t\t\treturn dst.diff;\n\t\t\t\t\t}\n\t\t\t\t"));
	}
	this.backwardOps = _g12;
};
webdl_core_backend_gpu_operation_GpuMergeOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuMergeOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuMergeOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		var totalSize = 0;
		var this1 = this.as[0].actualShape;
		var this2 = new Array(this1.length);
		var r = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
		var dstShape = r;
		dstShape[this.axis] = 0;
		var _g1 = 0;
		var _g = this.as.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aShape = this.as[i].actualShape;
			totalSize += aShape[this.axis];
			dstShape[this.axis] = aShape[this.axis];
			this.shapeEq(dstShape,aShape);
		}
		dstShape[this.axis] = totalSize;
		this.dst.assignShape(dstShape);
	}
});
var webdl_core_backend_gpu_operation_GpuMulConstOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"mulconst_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn a.value * float(" + b + ");\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst],a,"mulconst_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff * float(" + b + ");\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuMulConstOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuMulConstOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuMulConstOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuMulOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"mul_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn a.value * b.value;\n\t\t\t\t}\n\t\t\t")];
	var broadcastedA = this.addBroadcastBackward(a,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,a.shape));
	var broadcastedB = this.addBroadcastBackward(b,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,b.shape));
	this.backwardOps = [this.bop([dst,b],broadcastedA,"mul_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn dst.diff * b.value;\n\t\t\t\t}\n\t\t\t"),this.bop([dst,a],broadcastedB,"mul_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\treturn dst.diff * a.value;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuMulOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuMulOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuMulOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(webdl_core_ShapeInference.broadcast(this.a.shape,this.b.shape,this.a.actualShape,this.b.actualShape));
	}
});
var webdl_core_backend_gpu_operation_GpuPowConstOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.forwardOps = [this.fop([a],dst,"powconst_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\treturn safePow(a.value, float(" + b + "));\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst,a],a,"powconst_backward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\treturn dst.diff * float(" + b + ") * safePow(a.value, float(" + b + ") - 1.0);\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuPowConstOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuPowConstOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuPowConstOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(this.a.actualShape);
	}
});
var webdl_core_backend_gpu_operation_GpuPowOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"pow_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn safePow(a.value, b.value);\n\t\t\t\t}\n\t\t\t")];
	var broadcastedA = this.addBroadcastBackward(a,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,a.shape));
	var broadcastedB = this.addBroadcastBackward(b,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,b.shape));
	this.backwardOps = [this.bop([dst,a,b],broadcastedA,"pow_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\telem b = src3(idx4);\n\t\t\t\t\treturn dst.diff * b.value * safePow(a.value, b.value - 1.0);\n\t\t\t\t}\n\t\t\t"),this.bop([dst,a],broadcastedB,"pow_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\treturn dst.diff * log(a.value) * dst.value;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuPowOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuPowOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuPowOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(webdl_core_ShapeInference.broadcast(this.a.shape,this.b.shape,this.a.actualShape,this.b.actualShape));
	}
});
var webdl_core_backend_gpu_operation_GpuReduceMeanOperation = function(backend,a,dst,axis,keepDim) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.keepDim = keepDim;
	this.axis = axis;
	if(axis < 0 || axis >= a.rank) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var axisComp = "xyzw".charAt(a.rank - 1 - axis);
	var axisCompUpper = axisComp.toUpperCase();
	if(keepDim) {
		this.forwardOps = [this.fop([a],dst,"reducemean_forward_kd","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\tivec4 aIdx4 = replace" + axisCompUpper + "(idx4, 0);\n\t\t\t\t\t\tint idx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1","idx1Offset",[1],[[axisComp]],"\n\t\t\t\t\t\t\telem a = src1(idx1);\n\t\t\t\t\t\t\tsum += a.value;\n\t\t\t\t\t\t") + ("\n\t\t\t\t\t\treturn sum / float(" + ("uSrcShape" + "1") + "." + axisComp + ");\n\t\t\t\t\t}\n\t\t\t\t"))];
		this.backwardOps = [this.bop([dst],a,"reducemean_backward_kd","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\telem dst = src1(replace" + axisCompUpper + "(idx4, 0));\n\t\t\t\t\t\treturn dst.diff / float(" + "uDstShape" + "." + axisComp + ");\n\t\t\t\t\t}\n\t\t\t\t")];
	} else {
		this.forwardOps = [this.fop([a],dst,"reducemean_forward","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\tivec4 aIdx4 = insert" + axisCompUpper + "(idx4, 0);\n\t\t\t\t\t\tint idx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1","idx1Offset",[1],[[axisComp]],"\n\t\t\t\t\t\t\telem a = src1(idx1);\n\t\t\t\t\t\t\tsum += a.value;\n\t\t\t\t\t\t") + ("\n\t\t\t\t\t\treturn sum / float(" + ("uSrcShape" + "1") + "." + axisComp + ");\n\t\t\t\t\t}\n\t\t\t\t"))];
		this.backwardOps = [this.bop([dst],a,"reducemean_backward","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\telem dst = src1(delete" + axisCompUpper + "(idx4));\n\t\t\t\t\t\treturn dst.diff / float(" + "uDstShape" + "." + axisComp + ");\n\t\t\t\t\t}\n\t\t\t\t")];
	}
};
webdl_core_backend_gpu_operation_GpuReduceMeanOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuReduceMeanOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuReduceMeanOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		var dstShape = [];
		if(this.keepDim) {
			dstShape = this.a.actualShape.slice(0);
			dstShape[this.axis] = 1;
			this.dst.assignShape(dstShape);
		} else {
			var _g1 = 0;
			var _g = this.a.rank;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.axis != i) {
					dstShape.push(this.a.actualShape[i]);
				}
			}
			this.dst.assignShape(dstShape);
		}
	}
});
var webdl_core_backend_gpu_operation_GpuReduceSumOperation = function(backend,a,dst,axis,keepDim) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],[dst]);
	this.a = a;
	this.dst = dst;
	this.keepDim = keepDim;
	this.axis = axis;
	if(axis < 0 || axis >= a.rank) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var axisComp = "xyzw".charAt(a.rank - 1 - axis);
	var axisCompUpper = axisComp.toUpperCase();
	if(keepDim) {
		this.forwardOps = [this.fop([a],dst,"reducesum_forward_kd","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\tivec4 aIdx4 = replace" + axisCompUpper + "(idx4, 0);\n\t\t\t\t\t\tint idx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1","idx1Offset",[1],[[axisComp]],"\n\t\t\t\t\t\t\telem a = src1(idx1);\n\t\t\t\t\t\t\tsum += a.value;\n\t\t\t\t\t\t") + "\n\t\t\t\t\t\treturn sum;\n\t\t\t\t\t}\n\t\t\t\t")];
		this.backwardOps = [this.bop([dst],a,"reducesum_backward_kd","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\telem dst = src1(replace" + axisCompUpper + "(idx4, 0));\n\t\t\t\t\t\treturn dst.diff;\n\t\t\t\t\t}\n\t\t\t\t")];
	} else {
		this.forwardOps = [this.fop([a],dst,"reducesum_forward","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\tivec4 aIdx4 = insert" + axisCompUpper + "(idx4, 0);\n\t\t\t\t\t\tint idx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t\t" + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1","idx1Offset",[1],[[axisComp]],"\n\t\t\t\t\t\t\telem a = src1(idx1);\n\t\t\t\t\t\t\tsum += a.value;\n\t\t\t\t\t\t") + "\n\t\t\t\t\t\treturn sum;\n\t\t\t\t\t}\n\t\t\t\t")];
		this.backwardOps = [this.bop([dst],a,"reducesum_backward","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\telem dst = src1(delete" + axisCompUpper + "(idx4));\n\t\t\t\t\t\treturn dst.diff;\n\t\t\t\t\t}\n\t\t\t\t")];
	}
};
webdl_core_backend_gpu_operation_GpuReduceSumOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuReduceSumOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuReduceSumOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		var dstShape = [];
		if(this.keepDim) {
			dstShape = this.a.actualShape.slice(0);
			dstShape[this.axis] = 1;
			this.dst.assignShape(dstShape);
		} else {
			var _g1 = 0;
			var _g = this.a.rank;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.axis != i) {
					dstShape.push(this.a.actualShape[i]);
				}
			}
			this.dst.assignShape(dstShape);
		}
	}
});
var webdl_core_backend_gpu_operation_GpuSplitOperation = function(backend,a,dsts,axis,sizes) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a],dsts);
	this.a = a;
	this.dsts = dsts;
	this.sizes = sizes;
	this.axis = axis;
	if(axis < 0 || axis >= a.rank) {
		throw new js__$Boot_HaxeError("invalid axis");
	}
	var axisComp = "xyzw".charAt(a.rank - 1 - axis);
	var axisCompUpper = axisComp.toUpperCase();
	if(dsts.length != sizes.length) {
		throw new js__$Boot_HaxeError("invalid argument");
	}
	var offset = 0;
	var offsets = [];
	var _g = 0;
	while(_g < sizes.length) {
		var size = sizes[_g];
		++_g;
		offsets.push(offset);
		offset += size;
	}
	offsets.push(offset);
	var _g1 = [];
	var _g2 = 0;
	var _g11 = dsts.length;
	while(_g2 < _g11) {
		var i = _g2++;
		_g1.push(this.fop([a],dsts[i],"split_forward","\n\t\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\t\telem a = src1(add" + axisCompUpper + "(idx4, " + offsets[i] + "));\n\t\t\t\t\t\treturn a.value;\n\t\t\t\t\t}\n\t\t\t\t"));
	}
	this.forwardOps = _g1;
	var tmp = "\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tint idx = idx4." + axisComp + ";\n\t\t\t\t";
	var _g12 = [];
	var _g3 = 0;
	var _g21 = dsts.length;
	while(_g3 < _g21) {
		var i1 = _g3++;
		_g12.push("\n\t\t\t\t\t\tif (idx < " + offsets[i1 + 1] + ") {\n\t\t\t\t\t\t\telem dst = src" + (i1 + 1) + "(add" + axisCompUpper + "(idx4, -" + offsets[i1] + "));\n\t\t\t\t\t\t\treturn dst.diff;\n\t\t\t\t\t\t}\n\t\t\t\t\t");
	}
	this.backwardOps = [this.bop(dsts,a,"split_backward",tmp + _g12.join("\n") + "\n\t\t\t\t\treturn 0.0;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuSplitOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuSplitOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuSplitOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		var totalSize = 0;
		var _g1 = 0;
		var _g = this.dsts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var this1 = this.a.actualShape;
			var this2 = new Array(this1.length);
			var r = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
			var dstShape = r;
			dstShape[this.axis] = this.sizes[i];
			this.dsts[i].assignShape(dstShape);
			totalSize += this.sizes[i];
		}
		if(totalSize != this.a.actualShape[this.axis]) {
			throw new js__$Boot_HaxeError("split sizes mismatch");
		}
	}
});
var webdl_core_backend_gpu_operation_GpuSubOperation = function(backend,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([a,b],dst,"sub_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem a = src1(idx4);\n\t\t\t\t\telem b = src2(idx4);\n\t\t\t\t\treturn a.value - b.value;\n\t\t\t\t}\n\t\t\t")];
	var broadcastedA = this.addBroadcastBackward(a,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,a.shape));
	var broadcastedB = this.addBroadcastBackward(b,dst,webdl_core_ShapeInference.getBroadcastedAxes(dst.shape,b.shape));
	this.backwardOps = [this.bop([dst],broadcastedA,"sub_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn dst.diff;\n\t\t\t\t}\n\t\t\t"),this.bop([dst],broadcastedB,"sub_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\treturn -dst.diff;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuSubOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuSubOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuSubOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.dst.assignShape(webdl_core_ShapeInference.broadcast(this.a.shape,this.b.shape,this.a.actualShape,this.b.actualShape));
	}
});
var webdl_core_backend_gpu_operation_GpuTensorDotOperation = function(backend,a,b,dst,count,axes) {
	var _gthis = this;
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[a,b],[dst]);
	this.a = a;
	this.b = b;
	this.dst = dst;
	if(count == -1 && axes == null || count != -1 && axes != null) {
		throw new js__$Boot_HaxeError("specify either count or axes");
	}
	if(count != -1) {
		var _g = [];
		var _g2 = a.rank - count;
		var _g1 = a.rank;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(i);
		}
		this.adummyAxes = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = count;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(i1);
		}
		this.bdummyAxes = _g11;
	} else {
		if(axes.length != 2) {
			throw new js__$Boot_HaxeError("invalid argument");
		}
		this.adummyAxes = axes[0];
		this.bdummyAxes = axes[1];
	}
	var _g4 = [];
	var _g22 = 0;
	var _g12 = a.rank;
	while(_g22 < _g12) {
		var i2 = _g22++;
		_g4.push(i2);
	}
	this.afreeAxes = _g4.filter(function(i3) {
		return _gthis.adummyAxes.indexOf(i3) == -1;
	});
	var _g13 = [];
	var _g31 = 0;
	var _g23 = b.rank;
	while(_g31 < _g23) {
		var i4 = _g31++;
		_g13.push(i4);
	}
	this.bfreeAxes = _g13.filter(function(i5) {
		return _gthis.bdummyAxes.indexOf(i5) == -1;
	});
	var _g24 = [];
	var _g41 = 0;
	var _g32 = this.afreeAxes.length;
	while(_g41 < _g32) {
		var i6 = _g41++;
		_g24.push(i6);
	}
	var afreeInDstAxes = _g24;
	var _g33 = [];
	var _g5 = 0;
	var _g42 = this.bfreeAxes.length;
	while(_g5 < _g42) {
		var i7 = _g5++;
		_g33.push(this.afreeAxes.length + i7);
	}
	var bfreeInDstAxes = _g33;
	if(this.adummyAxes.length != this.bdummyAxes.length) {
		throw new js__$Boot_HaxeError("axis sizes mismatch");
	}
	this.axesCheck(this.adummyAxes,a.rank);
	this.axesCheck(this.bdummyAxes,b.rank);
	var adummy = this.adummyAxes.map(function(i8) {
		return "xyzw".charAt(a.rank - 1 - i8);
	});
	var bdummy = this.bdummyAxes.map(function(i9) {
		return "xyzw".charAt(b.rank - 1 - i9);
	});
	var afree = this.afreeAxes.map(function(i10) {
		return "xyzw".charAt(a.rank - 1 - i10);
	});
	var bfree = this.bfreeAxes.map(function(i11) {
		return "xyzw".charAt(b.rank - 1 - i11);
	});
	var afreeInDst = afreeInDstAxes.map(function(i12) {
		return "xyzw".charAt(dst.rank - 1 - i12);
	});
	var bfreeInDst = bfreeInDstAxes.map(function(i13) {
		return "xyzw".charAt(dst.rank - 1 - i13);
	});
	var adummyAll = adummy.join("");
	var bdummyAll = bdummy.join("");
	var afreeAll = afree.join("");
	var bfreeAll = bfree.join("");
	var afreeInDstAll = afreeInDst.join("");
	var bfreeInDstAll = bfreeInDst.join("");
	var hasAfree = afree.length != 0;
	var hasBfree = bfree.length != 0;
	var hasDummy = adummy.length != 0;
	var tmp = "\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tivec4 aIdx4 = ivec4(0);\n\t\t\t\t\tivec4 bIdx4 = ivec4(0);\n\n\t\t\t\t\t// assign free indices\n\t\t\t\t" + (hasAfree ? "aIdx4." + afreeAll + " = idx4." + afreeInDstAll + ";\n" : "") + (hasBfree ? "bIdx4." + bfreeAll + " = idx4." + bfreeInDstAll + ";\n" : "") + ("\n\n\t\t\t\t\tint aIdx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tint bIdx1Offset = index4To1(bIdx4, " + ("uSrcShape" + "2") + ");\n\n\t\t\t\t\tivec2 idx1Offsets = ivec2(aIdx1Offset, bIdx1Offset);\n\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t") + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1s","idx1Offsets",[1,2],[adummy,bdummy],"\n\t\t\t\t\t\telem a = src1(idx1s.x);\n\t\t\t\t\t\telem b = src2(idx1s.y);\n\t\t\t\t\t\tsum += a.value * b.value;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t";
	this.forwardOps = [this.fop([a,b],dst,"tensordot_forward",tmp)];
	var tmp1 = "\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tivec4 dstIdx4 = ivec4(0);\n\t\t\t\t\tivec4 bIdx4 = ivec4(0);\n\n\t\t\t\t\t// assign free and dummy indices\n\t\t\t\t" + (hasAfree ? "dstIdx4." + afreeInDstAll + " = idx4." + afreeAll + ";\n" : "") + (hasDummy ? "bIdx4." + bdummyAll + " = idx4." + adummyAll + ";\n" : "") + ("\n\n\t\t\t\t\tint dstIdx1Offset = index4To1(dstIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tint bIdx1Offset = index4To1(bIdx4, " + ("uSrcShape" + "2") + ");\n\n\t\t\t\t\tivec2 idx1Offsets = ivec2(dstIdx1Offset, bIdx1Offset);\n\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t") + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1s","idx1Offsets",[1,2],[bfreeInDst,bfree],"\n\t\t\t\t\t\telem dst = src1(idx1s.x);\n\t\t\t\t\t\telem b = src2(idx1s.y);\n\t\t\t\t\t\tsum += dst.diff * b.value;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t";
	var tmp2 = this.bop([dst,b],a,"tensordot_backward_a",tmp1);
	var tmp3 = "\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\tivec4 dstIdx4 = ivec4(0);\n\t\t\t\t\tivec4 aIdx4 = ivec4(0);\n\n\t\t\t\t\t// assign free and dummy indices\n\t\t\t\t" + (hasBfree ? "dstIdx4." + bfreeInDstAll + " = idx4." + bfreeAll + ";\n" : "") + (hasDummy ? "aIdx4." + adummyAll + " = idx4." + bdummyAll + ";\n" : "") + ("\n\n\t\t\t\t\tint dstIdx1Offset = index4To1(dstIdx4, " + ("uSrcShape" + "1") + ");\n\t\t\t\t\tint aIdx1Offset = index4To1(aIdx4, " + ("uSrcShape" + "2") + ");\n\n\t\t\t\t\tivec2 idx1Offsets = ivec2(dstIdx1Offset, aIdx1Offset);\n\n\t\t\t\t\tfloat sum = 0.0;\n\t\t\t\t") + webdl_core_backend_gpu_GpuShader.loopOverDimensions("idx1s","idx1Offsets",[1,2],[afreeInDst,afree],"\n\t\t\t\t\t\telem dst = src1(idx1s.x);\n\t\t\t\t\t\telem a = src2(idx1s.y);\n\t\t\t\t\t\tsum += dst.diff * a.value;\n\t\t\t\t\t") + "\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t";
	this.backwardOps = [tmp2,this.bop([dst,a],b,"tensordot_backward_b",tmp3)];
};
webdl_core_backend_gpu_operation_GpuTensorDotOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuTensorDotOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuTensorDotOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	axesCheck: function(axes,rank) {
		if(axes.length > rank) {
			throw new js__$Boot_HaxeError("too many axes");
		}
		var _g1 = 0;
		var _g = axes.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(axes[i] < 0 || axes[i] >= rank) {
				throw new js__$Boot_HaxeError("invalid axis");
			}
			var _g3 = 0;
			var _g2 = i;
			while(_g3 < _g2) {
				var j = _g3++;
				if(axes[i] == axes[j]) {
					throw new js__$Boot_HaxeError("duplicate axes");
				}
			}
		}
	}
	,shapeCheck: function() {
		if(this.adummyAxes.length != this.bdummyAxes.length) {
			throw new js__$Boot_HaxeError("!?");
		}
		var _g1 = 0;
		var _g = this.adummyAxes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var adummySize = this.a.actualShape[this.adummyAxes[i]];
			var bdummySize = this.b.actualShape[this.bdummyAxes[i]];
			if(adummySize == -1 || bdummySize == -1) {
				throw new js__$Boot_HaxeError("no data assigned");
			}
			if(adummySize != bdummySize) {
				throw new js__$Boot_HaxeError("cannot multiply tensors");
			}
		}
		var dstShape = [];
		var _g2 = 0;
		var _g11 = this.afreeAxes;
		while(_g2 < _g11.length) {
			var i1 = _g11[_g2];
			++_g2;
			dstShape.push(this.a.actualShape[i1]);
		}
		var _g3 = 0;
		var _g12 = this.bfreeAxes;
		while(_g3 < _g12.length) {
			var i2 = _g12[_g3];
			++_g3;
			dstShape.push(this.b.actualShape[i2]);
		}
		this.dst.assignShape(dstShape);
	}
});
var webdl_core_backend_gpu_operation_GpuWhereOperation = function(backend,cond,a,b,dst) {
	webdl_core_backend_gpu_operation_GpuOperation.call(this,backend,[cond,a,b],[dst]);
	this.cond = cond;
	this.a = a;
	this.b = b;
	this.dst = dst;
	this.forwardOps = [this.fop([cond,a,b],dst,"where_forward","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem cond = src1(idx4);\n\t\t\t\t\telem a = src2(idx4);\n\t\t\t\t\telem b = src3(idx4);\n\t\t\t\t\treturn cond.value > 0.5 ? a.value : b.value;\n\t\t\t\t}\n\t\t\t")];
	this.backwardOps = [this.bop([dst,cond],a,"where_backward_a","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem cond = src2(idx4);\n\t\t\t\t\treturn cond.value > 0.5 ? dst.diff : 0.0;\n\t\t\t\t}\n\t\t\t"),this.bop([dst,cond],b,"where_backward_b","\n\t\t\t\tfloat run(ivec4 idx4) {\n\t\t\t\t\telem dst = src1(idx4);\n\t\t\t\t\telem cond = src2(idx4);\n\t\t\t\t\treturn cond.value > 0.5 ? 0.0 : dst.diff;\n\t\t\t\t}\n\t\t\t")];
};
webdl_core_backend_gpu_operation_GpuWhereOperation.__name__ = true;
webdl_core_backend_gpu_operation_GpuWhereOperation.__super__ = webdl_core_backend_gpu_operation_GpuOperation;
webdl_core_backend_gpu_operation_GpuWhereOperation.prototype = $extend(webdl_core_backend_gpu_operation_GpuOperation.prototype,{
	shapeCheck: function() {
		this.shapeEq(this.a.actualShape,this.b.actualShape);
		this.dst.assignShape(this.a.actualShape.slice(0));
	}
});
var webdl_core_graph_Edge = function(operation) {
	this.operation = operation;
	var this1 = operation.inputs;
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	var len = length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var v = this1[i].node;
		r[i] = v;
	}
	this.inputs = r;
	var this3 = operation.outputs;
	var length1 = this3.length;
	var this4 = new Array(length1);
	var r1 = this4;
	var len1 = length1;
	var _g11 = 0;
	var _g2 = len1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var v1 = this3[i1].node;
		r1[i1] = v1;
	}
	this.outputs = r1;
	var _g3 = 0;
	var _g12 = this.inputs;
	while(_g3 < _g12.length) {
		var n = _g12[_g3];
		++_g3;
		if(n.outputs.indexOf(this) == -1) {
			n.outputs.push(this);
		}
	}
	var _g4 = 0;
	var _g13 = this.outputs;
	while(_g4 < _g13.length) {
		var n1 = _g13[_g4];
		++_g4;
		if(n1.input != null) {
			throw new js__$Boot_HaxeError("outputs conflict");
		}
		n1.input = this;
	}
	this.time = -1;
};
webdl_core_graph_Edge.__name__ = true;
webdl_core_graph_Edge.prototype = {
	collectForward: function(time,nodes,edges) {
		if(this.time == time) {
			return;
		}
		this.time = time;
		var _g = 0;
		var _g1 = this.outputs;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			n.collectForward(time,nodes,edges);
		}
		var _g2 = 0;
		var _g11 = this.inputs;
		while(_g2 < _g11.length) {
			var n1 = _g11[_g2];
			++_g2;
			n1.collectForward(time,nodes,edges);
		}
		edges.push(this);
	}
	,collectBackward: function(time,queue,edges) {
		if(this.time == time) {
			return;
		}
		this.time = time;
		edges.push(this);
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.inQueue) {
				queue.push(n);
				n.inQueue = true;
			}
		}
	}
	,run: function() {
		this.operation.run();
	}
	,onAfterRun: function() {
		this.operation.onAfterRun();
	}
	,backward: function() {
		this.operation.backwardRun();
	}
};
var webdl_core_graph_Graph = function() { };
webdl_core_graph_Graph.__name__ = true;
webdl_core_graph_Graph.run = function(nodes) {
	var unused = [];
	var edges = [];
	webdl_core_graph_Graph.time++;
	var _g = 0;
	while(_g < nodes.length) {
		var n = nodes[_g];
		++_g;
		n.collectForward(webdl_core_graph_Graph.time,unused,edges);
	}
	var _g1 = 0;
	while(_g1 < edges.length) {
		var e = edges[_g1];
		++_g1;
		e.run();
	}
	var _g2 = 0;
	while(_g2 < edges.length) {
		var e1 = edges[_g2];
		++_g2;
		e1.onAfterRun();
	}
};
webdl_core_graph_Graph.backprop = function(y) {
	var nodes = [];
	var unused = [];
	var edges = [];
	webdl_core_graph_Graph.time++;
	y.collectForward(webdl_core_graph_Graph.time,nodes,unused);
	webdl_core_graph_Graph.time++;
	var queue = [];
	queue.push(y);
	while(queue.length > 0) {
		var n = queue.shift();
		n.collectBackward(webdl_core_graph_Graph.time,queue,edges);
	}
	var _g = 0;
	while(_g < nodes.length) {
		var n1 = nodes[_g];
		++_g;
		if(n1 != y) {
			n1.tensor.fillDiff(0);
		}
	}
	var _g1 = 0;
	while(_g1 < edges.length) {
		var e = edges[_g1];
		++_g1;
		e.backward();
	}
};
webdl_core_graph_Graph.collectNodesConcerned = function(nodes) {
	var res = [];
	var unused = [];
	webdl_core_graph_Graph.time++;
	var _g = 0;
	while(_g < nodes.length) {
		var n = nodes[_g];
		++_g;
		n.collectForward(webdl_core_graph_Graph.time,res,unused);
	}
	return res;
};
var webdl_core_graph_Node = function(tensor) {
	this.tensor = tensor;
	this.input = null;
	this.outputs = [];
	this.inQueue = false;
	this.time = -1;
};
webdl_core_graph_Node.__name__ = true;
webdl_core_graph_Node.prototype = {
	collectForward: function(time,nodes,edges) {
		if(this.time == time) {
			return;
		}
		this.time = time;
		this.inQueue = false;
		nodes.push(this);
		if(this.input != null) {
			this.input.collectForward(time,nodes,edges);
		}
	}
	,collectBackward: function(time,queue,edges) {
		if(this.time == time) {
			return;
		}
		this.time = time;
		if(this.input != null) {
			this.input.collectBackward(time,queue,edges);
		}
	}
};
var webdl_core_layer_Layer = function() {
	this.updates = [];
};
webdl_core_layer_Layer.__name__ = true;
webdl_core_layer_Layer.prototype = {
	init: function() {
	}
};
var webdl_core_layer_BatchNormalizationLayer = function(a,isTraining,batchAxis,momentum,epsilon) {
	if(epsilon == null) {
		epsilon = 1e-6;
	}
	if(momentum == null) {
		momentum = 0.95;
	}
	webdl_core_layer_Layer.call(this);
	this.input = a;
	this.batchMean = webdl_core_WebDL.reduceMean(a,batchAxis,true);
	this.batchVariance = webdl_core_WebDL.reduceMean(webdl_core_WebDL.square(webdl_core_WebDL.sub(a,this.batchMean)),batchAxis,true);
	this.popMean = webdl_core_WebDL.tensorLike(this.batchMean);
	this.popVariance = webdl_core_WebDL.tensorLike(this.batchMean);
	this.beta = webdl_core_WebDL.tensorLike(this.batchMean);
	this.scale = webdl_core_WebDL.tensorLike(this.batchMean);
	this.popMean.fill(0);
	this.popVariance.fill(1);
	this.beta.fill(0);
	this.scale.fill(1);
	var trainMean = webdl_core_WebDL.assign(this.popMean,webdl_core_WebDL.linComb(this.popMean,this.batchMean,momentum,1 - momentum));
	var trainVariance = webdl_core_WebDL.assign(this.popVariance,webdl_core_WebDL.linComb(this.popVariance,this.batchVariance,momentum,1 - momentum));
	this.updates = [trainMean,trainVariance];
	this.popMean.shouldBeSaved = true;
	this.popVariance.shouldBeSaved = true;
	this.scale.trainable = true;
	this.scale.shouldBeSaved = true;
	this.beta.trainable = true;
	this.beta.doNotDecay = true;
	this.beta.shouldBeSaved = true;
	var out1 = webdl_core_WebDL.add(webdl_core_WebDL.mul(webdl_core_WebDL.mul(webdl_core_WebDL.sub(a,this.batchMean),webdl_core_WebDL.powConst(webdl_core_WebDL.addConst(this.batchVariance,epsilon),-0.5)),this.scale),this.beta);
	var out2 = webdl_core_WebDL.add(webdl_core_WebDL.mul(webdl_core_WebDL.mul(webdl_core_WebDL.sub(a,this.popMean),webdl_core_WebDL.powConst(webdl_core_WebDL.addConst(this.popVariance,epsilon),-0.5)),this.scale),this.beta);
	this.output = webdl_core_WebDL.where(isTraining,out1,out2);
};
webdl_core_layer_BatchNormalizationLayer.__name__ = true;
webdl_core_layer_BatchNormalizationLayer.__super__ = webdl_core_layer_Layer;
webdl_core_layer_BatchNormalizationLayer.prototype = $extend(webdl_core_layer_Layer.prototype,{
	init: function() {
		this.popMean.fill(0);
		this.popVariance.fill(1);
	}
});
var webdl_core_layer_DenseLayer = function(a,unit,activation,initializer,useBias) {
	if(useBias == null) {
		useBias = true;
	}
	if(activation == null) {
		activation = 0;
	}
	webdl_core_layer_Layer.call(this);
	this.input = a;
	if(initializer == null) {
		initializer = activation == 3 ? new webdl_core_nn_HeInitializer() : new webdl_core_nn_XavierInitializer();
	}
	this.initializer = initializer;
	var outputShape = a.shape.slice(0);
	outputShape[a.rank - 1] = unit;
	this.output = webdl_core_WebDL.tensorOfShape(outputShape);
	this.kernelIn = a.shape[a.rank - 1];
	var kernelOut = unit;
	if(this.kernelIn == -1) {
		throw new js__$Boot_HaxeError("the size of the last dimension of the input tensor must be known at the layer constructor");
	}
	this.kernel = webdl_core_WebDL.tensorOfShape([this.kernelIn,kernelOut]);
	this.kernel.trainable = true;
	this.kernel.shouldBeSaved = true;
	if(useBias) {
		this.bias = webdl_core_WebDL.tensorOfShape([kernelOut]);
		this.bias.trainable = true;
		this.bias.shouldBeSaved = true;
		this.bias.doNotDecay = true;
		this.output = webdl_core_WebDL.biasAdd(webdl_core_WebDL.tensorDot(a,this.kernel,1),this.bias);
	} else {
		this.bias = null;
		this.output = webdl_core_WebDL.tensorDot(a,this.kernel,1);
	}
	if(activation != 0) {
		this.output = webdl_core_WebDL.activation(this.output,activation);
	}
};
webdl_core_layer_DenseLayer.__name__ = true;
webdl_core_layer_DenseLayer.__super__ = webdl_core_layer_Layer;
webdl_core_layer_DenseLayer.prototype = $extend(webdl_core_layer_Layer.prototype,{
	init: function() {
		this.initializer.numInputs = this.kernelIn;
		this.kernel.fillByGenerator(($_=this.initializer,$bind($_,$_.next)));
		if(this.bias != null) {
			this.bias.fillByGenerator(($_=this.initializer,$bind($_,$_.next)));
		}
	}
});
var webdl_core_nn_Initializer = function() { };
webdl_core_nn_Initializer.__name__ = true;
var webdl_core_nn_HeInitializer = function() {
};
webdl_core_nn_HeInitializer.__name__ = true;
webdl_core_nn_HeInitializer.__interfaces__ = [webdl_core_nn_Initializer];
webdl_core_nn_HeInitializer.prototype = {
	next: function() {
		return Math.sqrt(-2 * (2 / this.numInputs) * Math.log(Math.random())) * Math.sin(2 * Math.PI * Math.random());
	}
};
var webdl_core_nn_UniformInitializer = function(range) {
	this.range = range;
};
webdl_core_nn_UniformInitializer.__name__ = true;
webdl_core_nn_UniformInitializer.__interfaces__ = [webdl_core_nn_Initializer];
webdl_core_nn_UniformInitializer.prototype = {
	next: function() {
		var min = -this.range;
		var max = this.range;
		return Math.random() * (max - min) + min;
	}
};
var webdl_core_nn_XavierInitializer = function() {
};
webdl_core_nn_XavierInitializer.__name__ = true;
webdl_core_nn_XavierInitializer.__interfaces__ = [webdl_core_nn_Initializer];
webdl_core_nn_XavierInitializer.prototype = {
	next: function() {
		return Math.sqrt(-2 * (1 / this.numInputs) * Math.log(Math.random())) * Math.sin(2 * Math.PI * Math.random());
	}
};
var webdl_core_optimizer_Optimizer = function(trainables,grads) {
	this.trainables = trainables;
	this.grads = grads;
	if(trainables.length != grads.length) {
		throw new js__$Boot_HaxeError("invalid arguments");
	}
};
webdl_core_optimizer_Optimizer.__name__ = true;
webdl_core_optimizer_Optimizer.prototype = {
	run: function() {
	}
	,exportData: function() {
		return [];
	}
	,importData: function(data) {
	}
};
var webdl_core_optimizer_AdamOptimizer = function(trainables,grads,alpha,beta1,beta2,epsilon) {
	if(epsilon == null) {
		epsilon = 1e-8;
	}
	if(beta2 == null) {
		beta2 = 0.999;
	}
	if(beta1 == null) {
		beta1 = 0.9;
	}
	if(alpha == null) {
		alpha = 0.001;
	}
	webdl_core_optimizer_Optimizer.call(this,trainables,grads);
	this.adamUpdates = [];
	var count = webdl_core_WebDL.tensorOfValue(0);
	var updatedCount = webdl_core_WebDL.assign(count,webdl_core_WebDL.addConst(count,1));
	var alphaTensor = webdl_core_WebDL.tensorOfValue(alpha);
	var beta1Tensor = webdl_core_WebDL.tensorOfValue(beta1);
	var beta2Tensor = webdl_core_WebDL.tensorOfValue(beta2);
	var epsilonTensor = webdl_core_WebDL.tensorOfValue(epsilon);
	var zero = webdl_core_WebDL.tensorOfValue(0);
	this.l2Decay = webdl_core_WebDL.tensorOfValue(0);
	this.internalTensors = [count,alphaTensor,beta1Tensor,beta2Tensor,epsilonTensor,this.l2Decay];
	var num = trainables.length;
	var _g1 = 0;
	var _g = num;
	while(_g1 < _g) {
		var i = _g1++;
		var t = trainables[i];
		var g = grads[i];
		var m = webdl_core_WebDL.tensorLike(t);
		var v = webdl_core_WebDL.tensorLike(t);
		this.internalTensors.push(m);
		this.internalTensors.push(v);
		var update = webdl_core_WebDL.adamUpdate(updatedCount,t,g,m,v,alphaTensor,beta1Tensor,beta2Tensor,epsilonTensor,t.doNotDecay ? zero : this.l2Decay);
		this.adamUpdates.push(update);
	}
};
webdl_core_optimizer_AdamOptimizer.__name__ = true;
webdl_core_optimizer_AdamOptimizer.__super__ = webdl_core_optimizer_Optimizer;
webdl_core_optimizer_AdamOptimizer.prototype = $extend(webdl_core_optimizer_Optimizer.prototype,{
	setL2Decay: function(decay) {
		this.l2Decay.set0D(decay);
	}
	,run: function() {
		webdl_core_WebDL.run(this.adamUpdates);
	}
	,exportData: function() {
		return webdl_core_WebDL.exportElements(this.internalTensors);
	}
	,importData: function(data) {
		webdl_core_WebDL.importElements(this.internalTensors,data);
	}
});
var webdl_rl_ddpg_Actor = function(network,targetNetwork) {
	this.network = network;
	this.targetNetwork = targetNetwork;
	if(network == targetNetwork) {
		throw new js__$Boot_HaxeError("network and target network must not be the same instance");
	}
	if(network.stateDim != targetNetwork.stateDim || network.actionDim != targetNetwork.actionDim || network.trainables.length != targetNetwork.trainables.length || network.tensorsToSave.length != targetNetwork.tensorsToSave.length) {
		throw new js__$Boot_HaxeError("dimensions mismatch between network and target network");
	}
	this.stateDim = network.stateDim;
	this.actionDim = network.actionDim;
};
webdl_rl_ddpg_Actor.__name__ = true;
webdl_rl_ddpg_Actor.createActor = function(stateDim,actionDim,numNeuronsInHiddenLayers,actionRanges,finalLayerWeight,batchNormalization) {
	if(batchNormalization == null) {
		batchNormalization = false;
	}
	if(finalLayerWeight == null) {
		finalLayerWeight = 0.003;
	}
	var network = webdl_rl_ddpg_Actor.createNetwork(stateDim,actionDim,numNeuronsInHiddenLayers,actionRanges,finalLayerWeight,batchNormalization);
	var targetNetwork = webdl_rl_ddpg_Actor.createNetwork(stateDim,actionDim,numNeuronsInHiddenLayers,actionRanges,finalLayerWeight,batchNormalization);
	return new webdl_rl_ddpg_Actor(network,targetNetwork);
};
webdl_rl_ddpg_Actor.createNetwork = function(stateDim,actionDim,numNeuronsInHiddenLayers,actionRanges,finalLayerWeight,batchNormalization) {
	var inState = webdl_core_WebDL.tensorOfShape([-1,stateDim]);
	var layers = [];
	var layer;
	var outTensor = inState;
	var inDim = stateDim;
	var isTraining = webdl_core_WebDL.tensorOfValue(0);
	var updates = [];
	var _g = 0;
	while(_g < numNeuronsInHiddenLayers.length) {
		var unit = numNeuronsInHiddenLayers[_g];
		++_g;
		if(batchNormalization) {
			layer = new webdl_core_layer_DenseLayer(outTensor,unit,0,new webdl_core_nn_UniformInitializer(1 / Math.sqrt(inDim)),false);
			layers.push(layer);
			outTensor = layer.output;
			var bn = new webdl_core_layer_BatchNormalizationLayer(outTensor,isTraining,0);
			updates = updates.concat(bn.updates);
			outTensor = webdl_core_WebDL.activation(bn.output,3);
			batchNormalization = false;
		} else {
			layer = new webdl_core_layer_DenseLayer(outTensor,unit,3,new webdl_core_nn_UniformInitializer(1 / Math.sqrt(inDim)));
			layers.push(layer);
			outTensor = layer.output;
		}
		inDim = unit;
	}
	layer = new webdl_core_layer_DenseLayer(outTensor,actionDim,1,new webdl_core_nn_UniformInitializer(finalLayerWeight));
	layers.push(layer);
	outTensor = layer.output;
	var _g1 = [];
	var _g11 = 0;
	while(_g11 < actionRanges.length) {
		var range = actionRanges[_g11];
		++_g11;
		_g1.push(0.5 * (range[0] + range[1]));
	}
	var outBias = webdl_core_WebDL.tensorOfValue([_g1]);
	var _g12 = [];
	var _g2 = 0;
	while(_g2 < actionRanges.length) {
		var range1 = actionRanges[_g2];
		++_g2;
		_g12.push(0.5 * (range1[1] - range1[0]));
	}
	var outScale = webdl_core_WebDL.tensorOfValue([_g12]);
	var outAction = webdl_core_WebDL.add(webdl_core_WebDL.mul(outTensor,outScale),outBias);
	return new webdl_rl_ddpg_ActorNetwork(layers,inState,outAction,stateDim,actionDim,updates,isTraining);
};
var webdl_rl_ddpg_ActorNetwork = function(layers,inState,outAction,stateDim,actionDim,updates,isTraining) {
	this.layers = layers;
	this.inState = inState;
	this.outAction = outAction;
	this.stateDim = stateDim;
	this.actionDim = actionDim;
	this.updates = updates;
	this.isTraining = isTraining;
	this.trainables = webdl_core_WebDL.getTrainableVariables([outAction]);
	this.tensorsToSave = webdl_core_WebDL.getTensorsToSave([outAction]);
	var _g = 0;
	while(_g < layers.length) {
		var layer = layers[_g];
		++_g;
		layer.init();
	}
};
webdl_rl_ddpg_ActorNetwork.__name__ = true;
webdl_rl_ddpg_ActorNetwork.prototype = {
	dump: function() {
		console.log("src/webdl/rl/ddpg/ActorNetwork.hx:34:","actor network info");
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			console.log("src/webdl/rl/ddpg/ActorNetwork.hx:36:","kernel: " + layer.kernel.print());
			console.log("src/webdl/rl/ddpg/ActorNetwork.hx:37:","bias: " + layer.bias.print());
		}
	}
};
var webdl_rl_ddpg_BytesTools = function() { };
webdl_rl_ddpg_BytesTools.__name__ = true;
webdl_rl_ddpg_BytesTools.writeFloatArray = function(bo,array) {
	bo.writeInt32(array.length);
	var _g = 0;
	while(_g < array.length) {
		var a = array[_g];
		++_g;
		if(!isFinite(a)) {
			throw new js__$Boot_HaxeError("float must be finite");
		}
		bo.writeFloat(a);
	}
};
webdl_rl_ddpg_BytesTools.readFloatArray = function(bi) {
	var len = bi.readInt32();
	var res = [];
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var a = bi.readFloat();
		if(!isFinite(a)) {
			throw new js__$Boot_HaxeError("float must be finite");
		}
		if(Math.abs(a) > 1e+37) {
			a = 0;
		}
		res.push(a);
	}
	return res;
};
var webdl_rl_ddpg_Critic = function(network,targetNetwork) {
	this.network = network;
	this.targetNetwork = targetNetwork;
	if(network == targetNetwork) {
		throw new js__$Boot_HaxeError("network and target network must not be the same instance");
	}
	if(network.stateDim != targetNetwork.stateDim || network.actionDim != targetNetwork.actionDim || network.trainables.length != targetNetwork.trainables.length || network.tensorsToSave.length != targetNetwork.tensorsToSave.length) {
		throw new js__$Boot_HaxeError("dimensions mismatch between network and target network");
	}
	this.stateDim = network.stateDim;
	this.actionDim = network.actionDim;
};
webdl_rl_ddpg_Critic.__name__ = true;
webdl_rl_ddpg_Critic.createCritic = function(stateDim,actionDim,numNeuronsInHiddenLayers,finalLayerWeight,batchNormalization) {
	if(batchNormalization == null) {
		batchNormalization = false;
	}
	if(finalLayerWeight == null) {
		finalLayerWeight = 0.003;
	}
	var network = webdl_rl_ddpg_Critic.createNetwork(stateDim,actionDim,numNeuronsInHiddenLayers,finalLayerWeight,batchNormalization);
	var targetNetwork = webdl_rl_ddpg_Critic.createNetwork(stateDim,actionDim,numNeuronsInHiddenLayers,finalLayerWeight,batchNormalization);
	return new webdl_rl_ddpg_Critic(network,targetNetwork);
};
webdl_rl_ddpg_Critic.createNetwork = function(stateDim,actionDim,numNeuronsInHiddenLayers,finalLayerWeight,batchNormalization) {
	var inState = webdl_core_WebDL.tensorOfShape([-1,stateDim]);
	var inAction = webdl_core_WebDL.tensorOfShape([-1,actionDim]);
	var layers = [];
	var layer;
	var outTensor = inState;
	var inDim = stateDim;
	var isTraining = webdl_core_WebDL.tensorOfValue(0);
	var updates = [];
	var _g1 = 0;
	var _g = numNeuronsInHiddenLayers.length;
	while(_g1 < _g) {
		var i = _g1++;
		var unit = numNeuronsInHiddenLayers[i];
		var activ = batchNormalization ? 0 : 3;
		if(i == 1 || i == 0 && numNeuronsInHiddenLayers.length == 1) {
			inDim += actionDim;
			layer = new webdl_core_layer_DenseLayer(webdl_core_WebDL.merge([outTensor,inAction],1),unit,activ,new webdl_core_nn_UniformInitializer(1 / Math.sqrt(inDim)),!batchNormalization);
		} else {
			layer = new webdl_core_layer_DenseLayer(outTensor,unit,activ,new webdl_core_nn_UniformInitializer(1 / Math.sqrt(inDim)),!batchNormalization);
		}
		layers.push(layer);
		outTensor = layer.output;
		if(batchNormalization) {
			var bn = new webdl_core_layer_BatchNormalizationLayer(outTensor,isTraining,0);
			updates = updates.concat(bn.updates);
			outTensor = webdl_core_WebDL.activation(bn.output,3);
			batchNormalization = false;
		}
		inDim = unit;
	}
	layer = new webdl_core_layer_DenseLayer(outTensor,1,0,new webdl_core_nn_UniformInitializer(finalLayerWeight));
	layers.push(layer);
	var outValue = webdl_core_WebDL.reduceSum(layer.output,1);
	return new webdl_rl_ddpg_CriticNetwork(layers,inState,inAction,outValue,stateDim,actionDim,updates,isTraining);
};
var webdl_rl_ddpg_CriticNetwork = function(layers,inState,inAction,outValue,stateDim,actionDim,updates,isTraining) {
	this.layers = layers;
	this.inState = inState;
	this.inAction = inAction;
	this.outValue = outValue;
	this.stateDim = stateDim;
	this.actionDim = actionDim;
	this.updates = updates;
	this.isTraining = isTraining;
	this.trainables = webdl_core_WebDL.getTrainableVariables([outValue]);
	this.tensorsToSave = webdl_core_WebDL.getTensorsToSave([outValue]);
	var _g = 0;
	while(_g < layers.length) {
		var layer = layers[_g];
		++_g;
		layer.init();
	}
};
webdl_rl_ddpg_CriticNetwork.__name__ = true;
webdl_rl_ddpg_CriticNetwork.prototype = {
	dump: function() {
		console.log("src/webdl/rl/ddpg/CriticNetwork.hx:36:","critic network info");
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			console.log("src/webdl/rl/ddpg/CriticNetwork.hx:38:","kernel: " + layer.kernel.print());
			console.log("src/webdl/rl/ddpg/CriticNetwork.hx:39:","bias: " + layer.bias.print());
		}
	}
};
var webdl_rl_ddpg_DDPG = function(ddpgSetting) {
	var actionRanges = ddpgSetting.actionRanges;
	this.stateDim = ddpgSetting.stateDim;
	this.actionDim = actionRanges.length;
	var numHiddenLayers = ddpgSetting.numHiddenLayers;
	var numHiddenUnits = ddpgSetting.numHiddenUnits;
	var tmp = this.stateDim;
	var tmp1 = this.actionDim;
	var _g = [];
	var _g2 = 0;
	var _g1 = numHiddenLayers;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(numHiddenUnits);
	}
	this.actor = webdl_rl_ddpg_Actor.createActor(tmp,tmp1,_g,actionRanges);
	var tmp2 = this.stateDim;
	var tmp3 = this.actionDim;
	var _g11 = [];
	var _g3 = 0;
	var _g21 = numHiddenLayers;
	while(_g3 < _g21) {
		var i1 = _g3++;
		_g11.push(numHiddenUnits);
	}
	this.critic = webdl_rl_ddpg_Critic.createCritic(tmp2,tmp3,_g11);
	this.agent = ddpgSetting.agent;
	this.maxEpisodeTime = ddpgSetting.maxEpisodeLength;
	this.noise = new webdl_rl_ddpg_OrnsteinUhlenbeckNoise(this.actionDim,0,ddpgSetting.noiseTheta,ddpgSetting.noiseSigma);
	this.prioritizedExperienceReplay = ddpgSetting.prioritizedReplay;
	this.gamma = ddpgSetting.gamma;
	this.tau = ddpgSetting.targetUpdateTau;
	this.updateInterval = ddpgSetting.updateInterval;
	this.rewardScaleFactor = ddpgSetting.rewardScaleFactor;
	this.applyNoise = ddpgSetting.noise;
	this.playingMode = ddpgSetting.evaluation;
	this.normalizeObserbation = ddpgSetting.normalizeObserbation;
	this.replayBufferSize = ddpgSetting.replayBufferSize;
	this.minibatchSize = ddpgSetting.minibatchSize;
	this.startReplay = ddpgSetting.startReplay;
	var aNet = this.actor.network;
	var cNet = this.critic.network;
	var aTargetNet = this.actor.targetNetwork;
	var cTargetNet = this.critic.targetNetwork;
	if(this.actor.stateDim != this.critic.stateDim) {
		throw new js__$Boot_HaxeError("state dimensions between actor and critic mismatch");
	}
	if(this.actor.actionDim != this.critic.actionDim) {
		throw new js__$Boot_HaxeError("action dimensions between actor and critic mismatch");
	}
	this.actionDim = this.actor.actionDim;
	this.stateDim = this.actor.stateDim;
	this.stateMeanStd = new webdl_rl_ddpg_MeanStdTracker([1,this.stateDim]);
	var normalizedActionGradient = webdl_core_WebDL.tensorOfShape([-1,this.actionDim]);
	var predictedQValue = webdl_core_WebDL.tensorOfShape([-1]);
	this.unnormalizedState = webdl_core_WebDL.tensorOfShape([-1,this.stateDim]);
	this.criticMiniBatchReward = webdl_core_WebDL.tensorOfShape([-1]);
	this.criticMiniBatchNotDone = webdl_core_WebDL.tensorOfShape([-1]);
	this.criticMiniBatchTdError = webdl_core_WebDL.tensorOfShape([-1]);
	var normalizedState = webdl_core_WebDL.div(webdl_core_WebDL.sub(this.unnormalizedState,this.stateMeanStd.mean),this.stateMeanStd.std);
	this.assignNormalizedStateToActor = webdl_core_WebDL.assign(aNet.inState,normalizedState);
	this.assignNormalizedStateToCritic = webdl_core_WebDL.assign(cNet.inState,normalizedState);
	this.assignNormalizedStateToActorTarget = webdl_core_WebDL.assign(aTargetNet.inState,normalizedState);
	this.assignNormalizedStateToCriticTarget = webdl_core_WebDL.assign(cTargetNet.inState,normalizedState);
	var unnormalizedActionGradient = webdl_core_WebDL.mulConst(webdl_core_WebDL.gradients(cNet.outValue,[cNet.inAction])[0],-1);
	normalizedActionGradient = webdl_core_WebDL.mulConst(unnormalizedActionGradient,1 / this.minibatchSize);
	var policyGrads = webdl_core_WebDL.gradients(aNet.outAction,aNet.trainables,normalizedActionGradient);
	this.actorOptimizer = new webdl_core_optimizer_AdamOptimizer(aNet.trainables,policyGrads,ddpgSetting.actorLearningRate);
	this.actorOptimizer.setL2Decay(ddpgSetting.actorWeightDecay);
	this.predictAction = [webdl_core_WebDL.assign(cTargetNet.inAction,aTargetNet.outAction)];
	this.predictQValue = [webdl_core_WebDL.assign(predictedQValue,webdl_core_WebDL.add(webdl_core_WebDL.mul(webdl_core_WebDL.mulConst(cTargetNet.outValue,this.gamma),this.criticMiniBatchNotDone),this.criticMiniBatchReward))];
	var tdError = webdl_core_WebDL.assign(this.criticMiniBatchTdError,webdl_core_WebDL.sub(predictedQValue,cNet.outValue));
	var criticLoss = webdl_core_WebDL.reduceMean(webdl_core_WebDL.square(tdError),0);
	var criticGradients = webdl_core_WebDL.gradients(criticLoss,cNet.trainables);
	this.criticOptimizer = new webdl_core_optimizer_AdamOptimizer(cNet.trainables,criticGradients,ddpgSetting.criticLearningRate);
	this.criticOptimizer.setL2Decay(ddpgSetting.criticWeightDecay);
	var allTensorsToSave = aNet.trainables.concat(cNet.tensorsToSave);
	var allTargetTensorsToSave = aTargetNet.trainables.concat(cTargetNet.tensorsToSave);
	this.initTargetNetworksOps = [];
	this.updateTargetNetworksOps = [];
	var _g31 = 0;
	var _g22 = allTensorsToSave.length;
	while(_g31 < _g22) {
		var i2 = _g31++;
		var t = allTensorsToSave[i2];
		var tTarget = allTargetTensorsToSave[i2];
		this.initTargetNetworksOps.push(webdl_core_WebDL.assign(tTarget,t));
		this.updateTargetNetworksOps.push(webdl_core_WebDL.assign(tTarget,webdl_core_WebDL.linComb(t,tTarget,this.tau,1 - this.tau)));
	}
	if(this.prioritizedExperienceReplay) {
		this.prioritizedReplayBuffer = new webdl_rl_ddpg_er_PrioritizedReplayBuffer(this.replayBufferSize);
	} else {
		this.replayBuffer = new webdl_rl_ddpg_er_ReplayBuffer(this.replayBufferSize);
	}
	this.lastState = this.agent.reset();
	this.episode = 0;
	this.episodeTime = 0;
	this.totalReward = 0;
	this.totalRewardInLastEpisode = 0;
	this.totalRewards = [];
	this.numSteps = 0;
	this.experiences = null;
	this.continueFromData = false;
	webdl_core_WebDL.run(this.initTargetNetworksOps);
};
webdl_rl_ddpg_DDPG.__name__ = true;
webdl_rl_ddpg_DDPG.prototype = {
	computeActions: function(states) {
		this.unnormalizedState.set2D(states);
		webdl_core_WebDL.run([this.assignNormalizedStateToActor]);
		webdl_core_WebDL.run([this.actor.network.outAction]);
		return this.actor.network.outAction.get2D();
	}
	,computeValues: function(states,actions) {
		this.unnormalizedState.set2D(states);
		webdl_core_WebDL.run([this.assignNormalizedStateToCritic]);
		this.critic.network.inAction.set2D(actions);
		webdl_core_WebDL.run([this.critic.network.outValue]);
		return this.critic.network.outValue.get1D();
	}
	,step: function(disableEarlyReset) {
		if(disableEarlyReset == null) {
			disableEarlyReset = false;
		}
		this.numSteps++;
		this.unnormalizedState.set2D([this.lastState]);
		webdl_core_WebDL.run([this.assignNormalizedStateToActor,this.assignNormalizedStateToCritic]);
		webdl_core_WebDL.run([this.actor.network.outAction]);
		this.lastActionWithoutNoise = this.actor.network.outAction.get2D()[0];
		this.critic.network.inAction.set2D([this.lastActionWithoutNoise]);
		webdl_core_WebDL.run([this.critic.network.outValue]);
		this.lastValueWithoutNoise = this.critic.network.outValue.get1D()[0];
		var bufferSize = this.prioritizedExperienceReplay ? this.prioritizedReplayBuffer.size : this.replayBuffer.size;
		this.lastAction = this.lastActionWithoutNoise.slice();
		var explorationNoise = this.noise.next();
		var noiseScale = !this.continueFromData && bufferSize * 2 < this.startReplay ? 3 : 1;
		if(this.applyNoise) {
			var _g1 = 0;
			var _g = this.actor.actionDim;
			while(_g1 < _g) {
				var i = _g1++;
				this.lastAction[i] += explorationNoise[i] * noiseScale;
			}
		}
		var result = this.agent.step(this.lastAction);
		var experience = new webdl_rl_ddpg_er_Experience(this.lastState,this.lastAction,result.reward,result.nextState,result.done);
		if(this.prioritizedExperienceReplay) {
			this.prioritizedReplayBuffer.push(experience);
		} else {
			this.replayBuffer.push(experience);
		}
		++bufferSize;
		this.lastReward = result.reward;
		this.totalReward += result.reward;
		this.lastState = result.nextState;
		if(!this.playingMode && !this.continueFromData && bufferSize < this.startReplay && this.normalizeObserbation) {
			webdl_core_WebDL.run(this.stateMeanStd.update(result.nextState));
		}
		this.episodeTime++;
		if(!disableEarlyReset && result.done || this.episodeTime >= this.maxEpisodeTime) {
			this.lastState = this.agent.reset();
			this.episodeTime = 0;
			this.episode++;
			this.totalRewards.push(this.totalReward);
			this.totalRewardInLastEpisode = this.totalReward;
			this.totalReward = 0;
			var _g2 = 0;
			while(_g2 < 1000) {
				var i1 = _g2++;
				this.noise.next();
			}
		}
		if(!this.playingMode && bufferSize >= this.startReplay && this.numSteps % this.updateInterval == 0) {
			if(this.experiences != null && this.prioritizedExperienceReplay) {
				var tdError = this.criticMiniBatchTdError.get1D();
				var _g11 = 0;
				var _g3 = this.minibatchSize;
				while(_g11 < _g3) {
					var i2 = _g11++;
					this.experiences[i2].absTdError = tdError[i2] < 0 ? -tdError[i2] : tdError[i2];
				}
				this.prioritizedReplayBuffer.update(this.experiences);
			}
			this.experiences = this.prioritizedExperienceReplay ? this.prioritizedReplayBuffer.sample(this.minibatchSize) : this.replayBuffer.sample(this.minibatchSize);
			var _g4 = [];
			var _g12 = 0;
			var _g21 = this.experiences;
			while(_g12 < _g21.length) {
				var e = _g21[_g12];
				++_g12;
				_g4.push(e.state);
			}
			var state = _g4;
			var _g13 = [];
			var _g22 = 0;
			var _g31 = this.experiences;
			while(_g22 < _g31.length) {
				var e1 = _g31[_g22];
				++_g22;
				_g13.push(e1.action);
			}
			var action = _g13;
			var _g23 = [];
			var _g32 = 0;
			var _g41 = this.experiences;
			while(_g32 < _g41.length) {
				var e2 = _g41[_g32];
				++_g32;
				_g23.push(e2.state2);
			}
			var state2 = _g23;
			var _g33 = [];
			var _g42 = 0;
			var _g5 = this.experiences;
			while(_g42 < _g5.length) {
				var e3 = _g5[_g42];
				++_g42;
				_g33.push(e3.reward * this.rewardScaleFactor);
			}
			var reward = _g33;
			var _g43 = [];
			var _g51 = 0;
			var _g6 = this.experiences;
			while(_g51 < _g6.length) {
				var e4 = _g6[_g51];
				++_g51;
				_g43.push(e4.done ? 0.0 : 1.0);
			}
			var notDone = _g43;
			this.critic.network.isTraining.set0D(1);
			this.critic.targetNetwork.isTraining.set0D(1);
			this.actor.network.isTraining.set0D(1);
			this.actor.targetNetwork.isTraining.set0D(1);
			this.unnormalizedState.set2D(state2);
			webdl_core_WebDL.run([this.assignNormalizedStateToActorTarget,this.assignNormalizedStateToCriticTarget]);
			this.unnormalizedState.set2D(state);
			webdl_core_WebDL.run([this.assignNormalizedStateToCritic,this.assignNormalizedStateToActor]);
			webdl_core_WebDL.run(this.predictAction);
			this.critic.network.inAction.set2D(action);
			this.criticMiniBatchReward.set1D(reward);
			this.criticMiniBatchNotDone.set1D(notDone);
			webdl_core_WebDL.run(this.predictQValue);
			this.criticOptimizer.run();
			this.critic.network.inAction.set2D(action);
			this.actorOptimizer.run();
			webdl_core_WebDL.run(this.updateTargetNetworksOps);
			this.critic.network.isTraining.set0D(0);
			this.critic.targetNetwork.isTraining.set0D(0);
			this.actor.network.isTraining.set0D(0);
			this.actor.targetNetwork.isTraining.set0D(0);
			return true;
		}
		return false;
	}
	,exportWeights: function() {
		var tensors = this.actor.network.tensorsToSave.concat(this.critic.network.tensorsToSave).concat([this.stateMeanStd.mean,this.stateMeanStd.std]);
		return webdl_core_WebDL.exportElements(tensors);
	}
	,importWeights: function(weights) {
		var tensors = this.actor.network.tensorsToSave.concat(this.critic.network.tensorsToSave).concat([this.stateMeanStd.mean,this.stateMeanStd.std]);
		webdl_core_WebDL.importElements(tensors,weights);
		webdl_core_WebDL.run(this.initTargetNetworksOps);
	}
	,exportBytes: function() {
		if(this.prioritizedExperienceReplay) {
			throw new js__$Boot_HaxeError("exporting bytes in prioritized experience replay mode is not supported");
		}
		var bo = new haxe_io_BytesOutput();
		bo.writeString("DDPG");
		webdl_rl_ddpg_BytesTools.writeFloatArray(bo,this.exportWeights());
		webdl_rl_ddpg_BytesTools.writeFloatArray(bo,this.actorOptimizer.exportData());
		webdl_rl_ddpg_BytesTools.writeFloatArray(bo,this.criticOptimizer.exportData());
		this.replayBuffer.writeBytes(bo);
		var res = bo.getBytes();
		bo.close();
		return res;
	}
	,importBytes: function(bytes) {
		if(this.prioritizedExperienceReplay) {
			throw new js__$Boot_HaxeError("importing bytes in prioritized experience replay mode is not supported");
		}
		var bi = new haxe_io_BytesInput(bytes);
		if(bi.readString(4) != "DDPG") {
			throw new js__$Boot_HaxeError("invalid data");
		}
		this.importWeights(webdl_rl_ddpg_BytesTools.readFloatArray(bi));
		this.actorOptimizer.importData(webdl_rl_ddpg_BytesTools.readFloatArray(bi));
		this.criticOptimizer.importData(webdl_rl_ddpg_BytesTools.readFloatArray(bi));
		this.replayBuffer = webdl_rl_ddpg_er_ReplayBuffer.readBytes(bi);
		bi.close();
	}
};
var webdl_rl_ddpg_DDPGSetting = function(agent,stateDim,actionRanges) {
	this.actionRanges = null;
	this.stateDim = -1;
	this.agent = null;
	this.maxEpisodeLength = 1000;
	this.minibatchSize = 64;
	this.updateInterval = 1;
	this.rewardScaleFactor = 0.01;
	this.targetUpdateTau = 0.01;
	this.gamma = 0.995;
	this.criticWeightDecay = 0.01;
	this.actorWeightDecay = 0.001;
	this.criticLearningRate = 0.001;
	this.actorLearningRate = 0.0001;
	this.normalizeObserbation = true;
	this.prioritizedReplay = false;
	this.startReplay = 5000;
	this.replayBufferSize = 500000;
	this.numHiddenUnits = 64;
	this.numHiddenLayers = 2;
	this.noiseSigma = 0.3;
	this.noiseTheta = 0.15;
	this.noise = true;
	this.evaluation = false;
	this.agent = agent;
	this.stateDim = stateDim;
	this.actionRanges = actionRanges;
};
webdl_rl_ddpg_DDPGSetting.__name__ = true;
var webdl_rl_ddpg_MeanStdTracker = function(shape) {
	this.sample = webdl_core_WebDL.tensorOfShape(shape);
	this.sum = webdl_core_WebDL.tensorOfShape(shape);
	this.sumSq = webdl_core_WebDL.tensorOfShape(shape);
	this.mean = webdl_core_WebDL.tensorOfShape(shape);
	this.std = webdl_core_WebDL.tensorOfShape(shape);
	this.count = webdl_core_WebDL.tensorOfValue(0);
	this.mean.fill(0);
	this.std.fill(1);
	this.mean.shouldBeSaved = true;
	this.std.shouldBeSaved = true;
	var newSum = webdl_core_WebDL.assign(this.sum,webdl_core_WebDL.add(this.sum,this.sample));
	var newSumSq = webdl_core_WebDL.assign(this.sumSq,webdl_core_WebDL.add(this.sumSq,webdl_core_WebDL.square(this.sample)));
	var newCount = webdl_core_WebDL.assign(this.count,webdl_core_WebDL.addConst(this.count,1));
	var newMean = webdl_core_WebDL.assign(this.mean,webdl_core_WebDL.div(newSum,newCount));
	var newStd = webdl_core_WebDL.assign(this.std,webdl_core_WebDL.powConst(webdl_core_WebDL.addConst(webdl_core_WebDL.sub(webdl_core_WebDL.div(newSumSq,newCount),webdl_core_WebDL.square(newMean)),1e-6),0.5));
	this.updates = [newMean,newStd];
};
webdl_rl_ddpg_MeanStdTracker.__name__ = true;
webdl_rl_ddpg_MeanStdTracker.prototype = {
	update: function(sampleDataArray) {
		this.sample.setArray(sampleDataArray);
		return this.updates;
	}
};
var webdl_rl_ddpg_OrnsteinUhlenbeckNoise = function(dim,mu,theta,sigma,dt) {
	if(dt == null) {
		dt = 0.01;
	}
	if(sigma == null) {
		sigma = 0.3;
	}
	if(theta == null) {
		theta = 0.15;
	}
	if(mu == null) {
		mu = 0;
	}
	this.dim = dim;
	this.mu = mu;
	this.theta = theta;
	this.sigma = sigma;
	this.dt = dt;
	var _g = [];
	var _g2 = 0;
	var _g1 = dim;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(0);
	}
	this.xs = _g;
};
webdl_rl_ddpg_OrnsteinUhlenbeckNoise.__name__ = true;
webdl_rl_ddpg_OrnsteinUhlenbeckNoise.prototype = {
	next: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.xs[i] += (this.mu - this.xs[i]) * this.theta * this.dt + this.sigma * (Math.sqrt(-2 * this.dt * Math.log(Math.random())) * Math.sin(2 * Math.PI * Math.random()));
		}
		return this.xs;
	}
};
var webdl_rl_ddpg_er_Experience = function(state,action,reward,state2,done) {
	this.state = state;
	this.action = action;
	this.reward = reward;
	this.state2 = state2;
	this.done = done;
	this.absTdError = 10000;
	this.p = 0;
	this.index = -1;
};
webdl_rl_ddpg_er_Experience.__name__ = true;
var webdl_rl_ddpg_er_FenwickTree = function(maxSize) {
	this.maxSize = maxSize;
	var this1 = new Array(maxSize);
	this.tree = this1;
	var this2 = new Array(maxSize);
	this.rawValues = this2;
	var _g1 = 0;
	var _g = maxSize;
	while(_g1 < _g) {
		var i = _g1++;
		this.tree[i] = 0;
		this.rawValues[i] = 0;
	}
};
webdl_rl_ddpg_er_FenwickTree.__name__ = true;
webdl_rl_ddpg_er_FenwickTree.prototype = {
	set: function(i,value) {
		var diff = value - this.rawValues[i];
		this.rawValues[i] = value;
		++i;
		while(i <= this.maxSize) {
			var _g = i - 1;
			var _g1 = this.tree;
			_g1[_g] = _g1[_g] + diff;
			i += i & -i;
		}
	}
	,get: function(i) {
		return this.rawValues[i];
	}
	,getSum: function(i) {
		++i;
		var sum = 0;
		while(i >= 1) {
			sum += this.tree[i - 1];
			i -= i & -i;
		}
		return sum;
	}
	,refresh: function() {
		var _g1 = 0;
		var _g = this.maxSize;
		while(_g1 < _g) {
			var i = _g1++;
			this.tree[i] = this.rawValues[i];
		}
		var _g11 = 1;
		var _g2 = this.maxSize;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var _g21 = i1 - 1 + (i1 & -i1);
			var _g3 = this.tree;
			_g3[_g21] = _g3[_g21] + this.tree[i1 - 1];
		}
	}
};
var webdl_rl_ddpg_er_PrioritizedReplayBuffer = function(bufferSize) {
	this.bufferSize = bufferSize;
	var this1 = new Array(bufferSize);
	this.exps = this1;
	this.tree = new webdl_rl_ddpg_er_FenwickTree(bufferSize);
	this.pointer = 0;
	this.size = 0;
	this.sampleCount = 0;
	this.filled = false;
};
webdl_rl_ddpg_er_PrioritizedReplayBuffer.__name__ = true;
webdl_rl_ddpg_er_PrioritizedReplayBuffer.prototype = {
	push: function(e) {
		if(this.pointer == this.bufferSize) {
			this.filled = true;
			this.pointer = 0;
		}
		this.exps[this.pointer] = e;
		e.index = this.pointer;
		e.p = Math.pow(e.absTdError + 0.01,0.6);
		this.tree.set(this.pointer,e.p);
		this.size = this.filled ? this.bufferSize : this.pointer;
		this.pointer++;
	}
	,update: function(es) {
		var _g = 0;
		while(_g < es.length) {
			var e = es[_g];
			++_g;
			e.p = Math.pow(e.absTdError + 0.01,0.6);
			this.tree.set(e.index,e.p);
		}
	}
	,sample: function(num) {
		if(++this.sampleCount % 500 == 0) {
			this.tree.refresh();
		}
		var res = [];
		var invSum = 1 / this.tree.getSum(this.size);
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			var x = Math.random() * this.tree.getSum(this.size);
			var min = -1;
			var max = this.size - 1;
			while(max - min > 1) {
				var mid = min + max >> 1;
				if(this.tree.getSum(mid) > x) {
					max = mid;
				} else {
					min = mid;
				}
			}
			res.push(this.exps[max]);
			this.tree.set(max,0);
		}
		var _g2 = 0;
		while(_g2 < res.length) {
			var e = res[_g2];
			++_g2;
			this.tree.set(e.index,e.p);
		}
		return res;
	}
};
var webdl_rl_ddpg_er_ReplayBuffer = function(maxBufferSize) {
	this.maxBufferSize = maxBufferSize;
	var this1 = new Array(maxBufferSize);
	this.buffer = this1;
	this.size = 0;
	this.index = 0;
};
webdl_rl_ddpg_er_ReplayBuffer.__name__ = true;
webdl_rl_ddpg_er_ReplayBuffer.readBytes = function(bi) {
	var maxBufferSize = bi.readInt32();
	if(maxBufferSize > 3000000) {
		maxBufferSize = 3000000;
	}
	var rb = new webdl_rl_ddpg_er_ReplayBuffer(maxBufferSize);
	rb.size = bi.readInt32();
	rb.index = bi.readInt32();
	var _g1 = 0;
	var _g = rb.size;
	while(_g1 < _g) {
		var i = _g1++;
		rb.buffer[i] = new webdl_rl_ddpg_er_Experience(webdl_rl_ddpg_BytesTools.readFloatArray(bi),webdl_rl_ddpg_BytesTools.readFloatArray(bi),bi.readFloat(),webdl_rl_ddpg_BytesTools.readFloatArray(bi),bi.readByte() != 0);
	}
	return rb;
};
webdl_rl_ddpg_er_ReplayBuffer.prototype = {
	clear: function() {
		while(this.size > 0) this.buffer[--this.size] = null;
		this.index = 0;
	}
	,push: function(experience) {
		this.buffer[this.index] = experience;
		this.index = (this.index + 1) % this.maxBufferSize;
		if(this.size < this.maxBufferSize) {
			this.size++;
		}
	}
	,sample: function(num) {
		var res = [];
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			res.push(this.buffer[Std.random(this.size)]);
		}
		return res;
	}
	,writeBytes: function(bo) {
		bo.writeInt32(this.maxBufferSize);
		bo.writeInt32(this.size);
		bo.writeInt32(this.index);
		var _g1 = 0;
		var _g = this.size;
		while(_g1 < _g) {
			var i = _g1++;
			var e = this.buffer[i];
			webdl_rl_ddpg_BytesTools.writeFloatArray(bo,e.state);
			webdl_rl_ddpg_BytesTools.writeFloatArray(bo,e.action);
			bo.writeFloat(e.reward);
			webdl_rl_ddpg_BytesTools.writeFloatArray(bo,e.state2);
			bo.writeByte(e.done ? 1 : 0);
		}
	}
};
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
_$RobotDDPGTest_Humanoid.STATE_DIM = 210;
_$RobotDDPGTest_Humanoid.ACTION_DIM = 13;
_$RobotDDPGTest_Humanoid.MAX_TORQUE = 5;
_$RobotDDPGTest_Humanoid.MAX_SPEED = Math.PI * 2;
oimo_dynamics_common_DebugDraw.SPHERE_PHI_DIVISION = 8;
oimo_dynamics_common_DebugDraw.SPHERE_THETA_DIVISION = 4;
oimo_dynamics_common_DebugDraw.CIRCLE_THETA_DIVISION = 8;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
oimo_collision_broadphase_BroadPhaseType._BRUTE_FORCE = 1;
oimo_collision_broadphase_BroadPhaseType._BVH = 2;
oimo_collision_broadphase_BroadPhaseType.BRUTE_FORCE = 1;
oimo_collision_broadphase_BroadPhaseType.BVH = 2;
oimo_collision_broadphase_bvh_BvhInsertionStrategy.SIMPLE = 0;
oimo_collision_broadphase_bvh_BvhInsertionStrategy.MINIMIZE_SURFACE_AREA = 1;
oimo_collision_geometry_GeometryType._SPHERE = 0;
oimo_collision_geometry_GeometryType._BOX = 1;
oimo_collision_geometry_GeometryType._CYLINDER = 2;
oimo_collision_geometry_GeometryType._CONE = 3;
oimo_collision_geometry_GeometryType._CAPSULE = 4;
oimo_collision_geometry_GeometryType._CONVEX_HULL = 5;
oimo_collision_geometry_GeometryType._CONVEX_MIN = 0;
oimo_collision_geometry_GeometryType._CONVEX_MAX = 5;
oimo_collision_geometry_GeometryType.SPHERE = 0;
oimo_collision_geometry_GeometryType.BOX = 1;
oimo_collision_geometry_GeometryType.CYLINDER = 2;
oimo_collision_geometry_GeometryType.CONE = 3;
oimo_collision_geometry_GeometryType.CAPSULE = 4;
oimo_collision_geometry_GeometryType.CONVEX_HULL = 5;
oimo_collision_narrowphase_detector_BoxBoxDetector.EDGE_BIAS_MULT = 1.0;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.OK = 0;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.INVALID_TRIANGLE = 1;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_ADJACENT_PAIR_INDEX = 2;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_ADJACENT_TRIANGLE = 3;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.EDGE_LOOP_BROKEN = 4;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_OUTER_TRIANGLE = 5;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.TRIANGLE_INVISIBLE = 6;
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.count = 0;
oimo_common_Vec3.numCreations = 0;
oimo_common_Setting.defaultFriction = 0.2;
oimo_common_Setting.defaultRestitution = 0.2;
oimo_common_Setting.defaultDensity = 1;
oimo_common_Setting.defaultCollisionGroup = 1;
oimo_common_Setting.defaultCollisionMask = 1;
oimo_common_Setting.maxTranslationPerStep = 20;
oimo_common_Setting.maxRotationPerStep = 3.14159265358979;
oimo_common_Setting.bvhProxyPadding = 0.1;
oimo_common_Setting.bvhIncrementalCollisionThreshold = 0.45;
oimo_common_Setting.defaultGJKMargin = 0.05;
oimo_common_Setting.enableGJKCaching = true;
oimo_common_Setting.maxEPAVertices = 128;
oimo_common_Setting.maxEPAPolyhedronFaces = 128;
oimo_common_Setting.contactEnableBounceThreshold = 0.5;
oimo_common_Setting.velocityBaumgarte = 0.2;
oimo_common_Setting.positionSplitImpulseBaumgarte = 0.4;
oimo_common_Setting.positionNgsBaumgarte = 1.0;
oimo_common_Setting.contactUseAlternativePositionCorrectionAlgorithmDepthThreshold = 0.05;
oimo_common_Setting.defaultContactPositionCorrectionAlgorithm = 0;
oimo_common_Setting.alternativeContactPositionCorrectionAlgorithm = 1;
oimo_common_Setting.contactPersistenceThreshold = 0.05;
oimo_common_Setting.maxManifoldPoints = 4;
oimo_common_Setting.defaultJointConstraintSolverType = 0;
oimo_common_Setting.defaultJointPositionCorrectionAlgorithm = 0;
oimo_common_Setting.jointWarmStartingFactorForBaungarte = 0.8;
oimo_common_Setting.jointWarmStartingFactor = 0.95;
oimo_common_Setting.minSpringDamperDampingRatio = 1e-6;
oimo_common_Setting.minRagdollMaxSwingAngle = 1e-6;
oimo_common_Setting.maxJacobianRows = 6;
oimo_common_Setting.directMlcpSolverEps = 1e-9;
oimo_common_Setting.islandInitialRigidBodyArraySize = 128;
oimo_common_Setting.islandInitialConstraintArraySize = 128;
oimo_common_Setting.sleepingVelocityThreshold = 0.2;
oimo_common_Setting.sleepingAngularVelocityThreshold = 0.5;
oimo_common_Setting.sleepingTimeThreshold = 1.0;
oimo_common_Setting.disableSleeping = false;
oimo_common_Setting.linearSlop = 0.005;
oimo_common_Setting.angularSlop = 0.017453292519943278;
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance = new oimo_collision_narrowphase_detector_gjkepa_GjkEpa();
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._SUCCEEDED = 0;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._GJK_FAILED_TO_MAKE_TETRAHEDRON = 1;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._GJK_DID_NOT_CONVERGE = 2;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_FAILED_TO_INIT = 257;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_FAILED_TO_ADD_VERTEX = 258;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_DID_NOT_CONVERGE = 259;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED = 0;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.GJK_FAILED_TO_MAKE_TETRAHEDRON = 1;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.GJK_DID_NOT_CONVERGE = 2;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_INIT = 257;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_ADD_VERTEX = 258;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_DID_NOT_CONVERGE = 259;
oimo_common_Mat3.numCreations = 0;
oimo_common_Mat4.numCreations = 0;
oimo_common_MathUtil.POSITIVE_INFINITY = 1e65536;
oimo_common_MathUtil.NEGATIVE_INFINITY = -1e65536;
oimo_common_MathUtil.PI = 3.14159265358979;
oimo_common_MathUtil.TWO_PI = 6.28318530717958;
oimo_common_MathUtil.HALF_PI = 1.570796326794895;
oimo_common_MathUtil.TO_RADIANS = 0.017453292519943278;
oimo_common_MathUtil.TO_DEGREES = 57.29577951308238;
oimo_common_Quat.numCreations = 0;
oimo_dynamics_common_Performance.broadPhaseCollisionTime = 0;
oimo_dynamics_common_Performance.narrowPhaseCollisionTime = 0;
oimo_dynamics_common_Performance.dynamicsTime = 0;
oimo_dynamics_common_Performance.totalTime = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._BAUMGARTE = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._SPLIT_IMPULSE = 1;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._NGS = 2;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.SPLIT_IMPULSE = 1;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS = 2;
oimo_dynamics_constraint_info_JacobianRow.BIT_LINEAR_SET = 1;
oimo_dynamics_constraint_info_JacobianRow.BIT_ANGULAR_SET = 2;
oimo_dynamics_constraint_joint_JointType._SPHERICAL = 0;
oimo_dynamics_constraint_joint_JointType._REVOLUTE = 1;
oimo_dynamics_constraint_joint_JointType._CYLINDRICAL = 2;
oimo_dynamics_constraint_joint_JointType._PRISMATIC = 3;
oimo_dynamics_constraint_joint_JointType._UNIVERSAL = 4;
oimo_dynamics_constraint_joint_JointType._RAGDOLL = 5;
oimo_dynamics_constraint_joint_JointType._GENERIC = 6;
oimo_dynamics_constraint_joint_JointType.SPHERICAL = 0;
oimo_dynamics_constraint_joint_JointType.REVOLUTE = 1;
oimo_dynamics_constraint_joint_JointType.CYLINDRICAL = 2;
oimo_dynamics_constraint_joint_JointType.PRISMATIC = 3;
oimo_dynamics_constraint_joint_JointType.UNIVERSAL = 4;
oimo_dynamics_constraint_joint_JointType.RAGDOLL = 5;
oimo_dynamics_constraint_joint_JointType.GENERIC = 6;
oimo_dynamics_constraint_solver_ConstraintSolverType._ITERATIVE = 0;
oimo_dynamics_constraint_solver_ConstraintSolverType._DIRECT = 1;
oimo_dynamics_constraint_solver_ConstraintSolverType.ITERATIVE = 0;
oimo_dynamics_constraint_solver_ConstraintSolverType.DIRECT = 1;
oimo_dynamics_rigidbody_RigidBodyType._DYNAMIC = 0;
oimo_dynamics_rigidbody_RigidBodyType._STATIC = 1;
oimo_dynamics_rigidbody_RigidBodyType._KINEMATIC = 2;
oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC = 0;
oimo_dynamics_rigidbody_RigidBodyType.STATIC = 1;
oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC = 2;
pot_graphics_Graphics.MAT_STACK_SIZE = 1024;
pot_graphics_Graphics.MAX_LIGHTS = 8;
pot_graphics__$Shader_Uniform.INT = 0;
pot_graphics__$Shader_Uniform.INT2 = 1;
pot_graphics__$Shader_Uniform.INT3 = 2;
pot_graphics__$Shader_Uniform.INT4 = 3;
pot_graphics__$Shader_Uniform.FLOAT = 4;
pot_graphics__$Shader_Uniform.FLOAT2 = 5;
pot_graphics__$Shader_Uniform.FLOAT3 = 6;
pot_graphics__$Shader_Uniform.FLOAT4 = 7;
pot_graphics__$Shader_Uniform.MATRIX2 = 8;
pot_graphics__$Shader_Uniform.MATRIX3 = 9;
pot_graphics__$Shader_Uniform.MATRIX4 = 10;
pot_graphics__$Shader_Uniform.TEX2D = 11;
pot_util_Timer.MIN_SLEEP_TIME = 4;
webdl_core_backend_gpu_GpuShader.FORWARD = 0;
webdl_core_backend_gpu_GpuShader.BACKWARD_ACCUMULATE = 1;
webdl_core_backend_gpu_GpuShader.BACKWARD_OVERWRITE = 2;
webdl_core_backend_gpu_ShaderConsts.A_POS = "aPos";
webdl_core_backend_gpu_ShaderConsts.A_UV = "aUv";
webdl_core_backend_gpu_ShaderConsts.V_UV = "vUv";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX = "uSrcTex";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX_SIZE = "uSrcTexSize";
webdl_core_backend_gpu_ShaderConsts.U_SRC_INV_TEX_SIZE = "uSrcInvTexSize";
webdl_core_backend_gpu_ShaderConsts.U_SRC_RANK = "uSrcRank";
webdl_core_backend_gpu_ShaderConsts.U_SRC_SHAPE = "uSrcShape";
webdl_core_backend_gpu_ShaderConsts.U_SRC_STRIDE = "uSrcStride";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX1 = "uSrcTex" + "1";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX_SIZE1 = "uSrcTexSize" + "1";
webdl_core_backend_gpu_ShaderConsts.U_SRC_INV_TEX_SIZE1 = "uSrcInvTexSize" + "1";
webdl_core_backend_gpu_ShaderConsts.U_SRC_RANK1 = "uSrcRank" + "1";
webdl_core_backend_gpu_ShaderConsts.U_SRC_SHAPE1 = "uSrcShape" + "1";
webdl_core_backend_gpu_ShaderConsts.U_SRC_STRIDE1 = "uSrcStride" + "1";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX2 = "uSrcTex" + "2";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX_SIZE2 = "uSrcTexSize" + "2";
webdl_core_backend_gpu_ShaderConsts.U_SRC_INV_TEX_SIZE2 = "uSrcInvTexSize" + "2";
webdl_core_backend_gpu_ShaderConsts.U_SRC_RANK2 = "uSrcRank" + "2";
webdl_core_backend_gpu_ShaderConsts.U_SRC_SHAPE2 = "uSrcShape" + "2";
webdl_core_backend_gpu_ShaderConsts.U_SRC_STRIDE2 = "uSrcStride" + "2";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX3 = "uSrcTex" + "3";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX_SIZE3 = "uSrcTexSize" + "3";
webdl_core_backend_gpu_ShaderConsts.U_SRC_INV_TEX_SIZE3 = "uSrcInvTexSize" + "3";
webdl_core_backend_gpu_ShaderConsts.U_SRC_RANK3 = "uSrcRank" + "3";
webdl_core_backend_gpu_ShaderConsts.U_SRC_SHAPE3 = "uSrcShape" + "3";
webdl_core_backend_gpu_ShaderConsts.U_SRC_STRIDE3 = "uSrcStride" + "3";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX4 = "uSrcTex" + "4";
webdl_core_backend_gpu_ShaderConsts.U_SRC_TEX_SIZE4 = "uSrcTexSize" + "4";
webdl_core_backend_gpu_ShaderConsts.U_SRC_INV_TEX_SIZE4 = "uSrcInvTexSize" + "4";
webdl_core_backend_gpu_ShaderConsts.U_SRC_RANK4 = "uSrcRank" + "4";
webdl_core_backend_gpu_ShaderConsts.U_SRC_SHAPE4 = "uSrcShape" + "4";
webdl_core_backend_gpu_ShaderConsts.U_SRC_STRIDE4 = "uSrcStride" + "4";
webdl_core_backend_gpu_ShaderConsts.U_DST_TEX = "uDstTex";
webdl_core_backend_gpu_ShaderConsts.U_DST_TEX_SIZE = "uDstTexSize";
webdl_core_backend_gpu_ShaderConsts.U_DST_INV_TEX_SIZE = "uDstInvTexSize";
webdl_core_backend_gpu_ShaderConsts.U_DST_RANK = "uDstRank";
webdl_core_backend_gpu_ShaderConsts.U_DST_SHAPE = "uDstShape";
webdl_core_backend_gpu_ShaderConsts.U_DST_STRIDE = "uDstStride";
webdl_core_backend_gpu_ShaderConsts.U_DST_ACTUAL_SIZE = "uDstActualSize";
webdl_core_backend_gpu_ShaderConsts.MAX_DIMENSION_SIZE = 1000000;
webdl_core_backend_gpu_ShaderConsts.SRC_ACCESS1 = "texture2D(" + ("uSrcTex" + "1") + ", " + "vUv" + ")";
webdl_core_backend_gpu_ShaderConsts.SRC_ACCESS2 = "texture2D(" + ("uSrcTex" + "2") + ", " + "vUv" + ")";
webdl_core_backend_gpu_ShaderConsts.SRC_ACCESS3 = "texture2D(" + ("uSrcTex" + "3") + ", " + "vUv" + ")";
webdl_core_backend_gpu_ShaderConsts.SRC_ACCESS4 = "texture2D(" + ("uSrcTex" + "4") + ", " + "vUv" + ")";
webdl_core_graph_Graph.time = 0;
webdl_rl_ddpg_er_PrioritizedReplayBuffer.ALPHA = 0.6;
webdl_rl_ddpg_er_PrioritizedReplayBuffer.EPSILON = 0.01;
RobotDDPGTest.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
